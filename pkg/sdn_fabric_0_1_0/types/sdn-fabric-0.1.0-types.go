// Code generated by oapi-codegen. DO NOT EDIT.
// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package types

import (
	"encoding/json"
	"fmt"

	"github.com/pkg/errors"
)

// Defines values for SwitchRole.
const (
	SwitchRoleLeaf SwitchRole = "leaf"

	SwitchRoleSpine SwitchRole = "spine"

	SwitchRoleUndefined SwitchRole = "undefined"
)

// Defines values for SwitchModelFormFactor.
const (
	SwitchModelFormFactorIpu SwitchModelFormFactor = "ipu"

	SwitchModelFormFactorPizzaBox SwitchModelFormFactor = "pizza-box"

	SwitchModelFormFactorSmartNic SwitchModelFormFactor = "smart-nic"

	SwitchModelFormFactorUndefined SwitchModelFormFactor = "undefined"

	SwitchModelFormFactorVSwitch SwitchModelFormFactor = "v-switch"
)

// Defines values for SwitchModelPipeline.
const (
	SwitchModelPipelineDual SwitchModelPipeline = "dual"

	SwitchModelPipelineQuad SwitchModelPipeline = "quad"

	SwitchModelPipelineUnknown SwitchModelPipeline = "unknown"
)

// Defines values for SwitchPortSpeed.
const (
	SwitchPortSpeedSpeed100g SwitchPortSpeed = "speed-100g"

	SwitchPortSpeedSpeed10g SwitchPortSpeed = "speed-10g"

	SwitchPortSpeedSpeed1g SwitchPortSpeed = "speed-1g"

	SwitchPortSpeedSpeed25g SwitchPortSpeed = "speed-2-5g"

	SwitchPortSpeedSpeed25g1 SwitchPortSpeed = "speed-25g"

	SwitchPortSpeedSpeed400g SwitchPortSpeed = "speed-400g"

	SwitchPortSpeedSpeed40g SwitchPortSpeed = "speed-40g"

	SwitchPortSpeedSpeed5g SwitchPortSpeed = "speed-5g"

	SwitchPortSpeedSpeedAutoneg SwitchPortSpeed = "speed-autoneg"
)

// both the additional property 'unchanged' and the 'fabric-id'
type AdditionalPropertiesUnchTarget struct {

	// an override of the fabric-id (target)
	FabricId *string `json:"fabric-id,omitempty"`

	// A comma seperated list of unchanged mandatory attribute names
	Unchanged *string `json:"unchanged,omitempty"`
}

// To optionally omit 'required' properties, add them to 'unchanged' list
type AdditionalPropertyUnchanged struct {

	// A comma seperated list of unchanged mandatory attribute names
	Unchanged *string `json:"unchanged,omitempty"`
}

// A list of routes (single)
type Route struct {

	// ordered list of next hops (list)
	Nexthop *RouteNexthopList `json:"nexthop,omitempty"`

	// subnet to match packet
	Prefix string `json:"prefix"`

	// The ID of the route
	RouteId              ListKey                                   `json:"route-id"`
	AdditionalProperties map[string]AdditionalPropertiesUnchTarget `json:"-"`
}

// A list of routes (list)
type RouteList []Route

// ordered list of next hops (single)
type RouteNexthop struct {

	// IP address of hop
	Address string `json:"address"`

	// the order of the next hops
	Index                ListKey                                `json:"index"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-"`
}

// ordered list of next hops (list)
type RouteNexthopList []RouteNexthop

// A managed device in the fabric (single)
type Switch struct {

	// a map of extra attributes: string-string (list)
	Attribute *SwitchAttributeList `json:"attribute,omitempty"`

	// long description field
	Description *string `json:"description,omitempty"`

	// A collection of DHCP endpoints (list)
	DhcpConnectPoint *SwitchDhcpConnectPointList `json:"dhcp-connect-point,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// configuration of the management port
	Management *SwitchManagement `json:"management,omitempty"`

	// link to switch model
	Model string `json:"model"`

	// A port in a switch (list)
	Port *SwitchPortList `json:"port,omitempty"`

	// The role of the switch in the fabric
	Role SwitchRole `json:"role"`

	// unique identifier for the switch
	SwitchId ListKey `json:"switch-id"`

	// A Switch pairing. A switch can participate on 0-1 pairings
	SwitchPair *SwitchSwitchPair `json:"switch-pair,omitempty"`

	// a list of VLANs (list)
	Vlan                 *SwitchVlanList                           `json:"vlan,omitempty"`
	AdditionalProperties map[string]AdditionalPropertiesUnchTarget `json:"-"`
}

// The role of the switch in the fabric
type SwitchRole string

// A model of switch (single)
type SwitchModel struct {

	// a map of extra attributes: string-string (list)
	Attribute *SwitchModelAttributeList `json:"attribute,omitempty"`

	// long description field
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// The form factor for the switch
	FormFactor SwitchModelFormFactor `json:"form-factor"`

	// Pipeline configuration - dual or quad
	Pipeline *SwitchModelPipeline `json:"pipeline,omitempty"`

	// A port in a switch (list)
	Port *SwitchModelPortList `json:"port,omitempty"`

	// unique identifier for the switch
	SwitchModelId        ListKey                                   `json:"switch-model-id"`
	AdditionalProperties map[string]AdditionalPropertiesUnchTarget `json:"-"`
}

// The form factor for the switch
type SwitchModelFormFactor string

// Pipeline configuration - dual or quad
type SwitchModelPipeline string

// a map of extra attributes: string-string (single)
type SwitchModelAttribute struct {

	// the key in a map of attributes
	AttributeKey ListKey `json:"attribute-key"`

	// the value of attribute-key
	Value                string                                 `json:"value"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-"`
}

// a map of extra attributes: string-string (list)
type SwitchModelAttributeList []SwitchModelAttribute

// A model of switch (list)
type SwitchModelList []SwitchModel

// A port in a switch (single)
type SwitchModelPort struct {

	// identifier of the cage - physical port on switch
	CageNumber ListKey `json:"cage-number"`

	// channel in the port. 0 by default. A splitter can divide the port in to channels
	ChannelNumber ListKey `json:"channel-number"`

	// long description field
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName          *string                                `json:"display-name,omitempty"`
	Speeds               *SwitchModelPortSpeeds                 `json:"speeds,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-"`
}

// A port in a switch (list)
type SwitchModelPortList []SwitchModelPort

// SwitchModelPortSpeeds defines model for Switch-model_Port_Speeds.
type SwitchModelPortSpeeds []string

// a map of extra attributes: string-string (single)
type SwitchAttribute struct {

	// the key in a map of attributes
	AttributeKey ListKey `json:"attribute-key"`

	// the value of attribute-key
	Value                string                                 `json:"value"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-"`
}

// a map of extra attributes: string-string (list)
type SwitchAttributeList []SwitchAttribute

// A collection of DHCP endpoints (single)
type SwitchDhcpConnectPoint struct {
	ConnectPoint *SwitchDhcpConnectPointConnectPoint `json:"connect-point,omitempty"`

	// id of the DHCP CP collection
	DhcpId ListKey `json:"dhcp-id"`
}

// SwitchDhcpConnectPointConnectPoint defines model for Switch_Dhcp-connect-point_Connect-point.
type SwitchDhcpConnectPointConnectPoint []string

// A collection of DHCP endpoints (list)
type SwitchDhcpConnectPointList []SwitchDhcpConnectPoint

// A managed device in the fabric (list)
type SwitchList []Switch

// configuration of the management port
type SwitchManagement struct {

	// The management IPv4 address
	Address *string `json:"address,omitempty"`

	// The mangement port number
	PortNumber *int `json:"port-number,omitempty"`
}

// A port in a switch (single)
type SwitchPort struct {

	// reference to the cage-number of the port in the switch model
	CageNumber ListKey `json:"cage-number"`

	// reference to the channel-number of the port in the switch model
	ChannelNumber ListKey `json:"channel-number"`

	// long description field
	Description *string `json:"description,omitempty"`

	// Reference to DHCP connect point
	DhcpConnectPoint *string `json:"dhcp-connect-point,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// configured port speed
	Speed *SwitchPortSpeed `json:"speed,omitempty"`

	// untagged and tagged vlans per port
	Vlans                *SwitchPortVlans                       `json:"vlans,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-"`
}

// configured port speed
type SwitchPortSpeed string

// A port in a switch (list)
type SwitchPortList []SwitchPort

// untagged and tagged vlans per port
type SwitchPortVlans struct {
	LeafListTagged *[]string `json:"leaf-list-tagged,omitempty"`

	// vlan for untagged packets
	Untagged *string `json:"untagged,omitempty"`
}

// A Switch pairing. A switch can participate on 0-1 pairings
type SwitchSwitchPair struct {

	// Port cage number used for connecting to
	CageNumber *string `json:"cage-number,omitempty"`

	// Port channel number used for Switch A
	ChannelNumber *string `json:"channel-number,omitempty"`

	// Paired switch identifier
	PairedSwitch *string `json:"paired-switch,omitempty"`
}

// a list of VLANs (single)
type SwitchVlan struct {

	// long description field
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// Network subnet for VLAN
	Subnet string `json:"subnet"`

	// the VLAN ID
	VlanId               ListKey                                `json:"vlan-id"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-"`
}

// a list of VLANs (list)
type SwitchVlanList []SwitchVlan

// fabric-id (target in onos-config)
type FabricId string

// A list of routes (single)
type RequestBodyRoute Route

// ordered list of next hops (single)
type RequestBodyRouteNexthop RouteNexthop

// A managed device in the fabric (single)
type RequestBodySwitch Switch

// A model of switch (single)
type RequestBodySwitchModel SwitchModel

// a map of extra attributes: string-string (single)
type RequestBodySwitchModelAttribute SwitchModelAttribute

// A port in a switch (single)
type RequestBodySwitchModelPort SwitchModelPort

// a map of extra attributes: string-string (single)
type RequestBodySwitchAttribute SwitchAttribute

// A collection of DHCP endpoints (single)
type RequestBodySwitchDhcpConnectPoint SwitchDhcpConnectPoint

// configuration of the management port
type RequestBodySwitchManagement SwitchManagement

// A port in a switch (single)
type RequestBodySwitchPort SwitchPort

// untagged and tagged vlans per port
type RequestBodySwitchPortVlans SwitchPortVlans

// A Switch pairing. A switch can participate on 0-1 pairings
type RequestBodySwitchSwitchPair SwitchSwitchPair

// a list of VLANs (single)
type RequestBodySwitchVlan SwitchVlan

// PostRouteJSONRequestBody defines body for PostRoute for application/json ContentType.
type PostRouteJSONRequestBody RequestBodyRoute

// PostRouteNexthopJSONRequestBody defines body for PostRouteNexthop for application/json ContentType.
type PostRouteNexthopJSONRequestBody RequestBodyRouteNexthop

// PostSwitchModelJSONRequestBody defines body for PostSwitchModel for application/json ContentType.
type PostSwitchModelJSONRequestBody RequestBodySwitchModel

// PostSwitchModelAttributeJSONRequestBody defines body for PostSwitchModelAttribute for application/json ContentType.
type PostSwitchModelAttributeJSONRequestBody RequestBodySwitchModelAttribute

// PostSwitchModelPortJSONRequestBody defines body for PostSwitchModelPort for application/json ContentType.
type PostSwitchModelPortJSONRequestBody RequestBodySwitchModelPort

// PostSwitchJSONRequestBody defines body for PostSwitch for application/json ContentType.
type PostSwitchJSONRequestBody RequestBodySwitch

// PostSwitchAttributeJSONRequestBody defines body for PostSwitchAttribute for application/json ContentType.
type PostSwitchAttributeJSONRequestBody RequestBodySwitchAttribute

// PostSwitchDhcpConnectPointJSONRequestBody defines body for PostSwitchDhcpConnectPoint for application/json ContentType.
type PostSwitchDhcpConnectPointJSONRequestBody RequestBodySwitchDhcpConnectPoint

// PostSwitchManagementJSONRequestBody defines body for PostSwitchManagement for application/json ContentType.
type PostSwitchManagementJSONRequestBody RequestBodySwitchManagement

// PostSwitchPortJSONRequestBody defines body for PostSwitchPort for application/json ContentType.
type PostSwitchPortJSONRequestBody RequestBodySwitchPort

// PostSwitchPortVlansJSONRequestBody defines body for PostSwitchPortVlans for application/json ContentType.
type PostSwitchPortVlansJSONRequestBody RequestBodySwitchPortVlans

// PostSwitchSwitchPairJSONRequestBody defines body for PostSwitchSwitchPair for application/json ContentType.
type PostSwitchSwitchPairJSONRequestBody RequestBodySwitchSwitchPair

// PostSwitchVlanJSONRequestBody defines body for PostSwitchVlan for application/json ContentType.
type PostSwitchVlanJSONRequestBody RequestBodySwitchVlan

// Getter for additional properties for Route. Returns the specified
// element and whether it was found
func (a Route) Get(fieldName string) (value AdditionalPropertiesUnchTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Route
func (a *Route) Set(fieldName string, value AdditionalPropertiesUnchTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertiesUnchTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Route to handle AdditionalProperties
func (a *Route) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nexthop"]; found {
		err = json.Unmarshal(raw, &a.Nexthop)
		if err != nil {
			return errors.Wrap(err, "error reading 'nexthop'")
		}
		delete(object, "nexthop")
	}

	if raw, found := object["prefix"]; found {
		err = json.Unmarshal(raw, &a.Prefix)
		if err != nil {
			return errors.Wrap(err, "error reading 'prefix'")
		}
		delete(object, "prefix")
	}

	if raw, found := object["route-id"]; found {
		err = json.Unmarshal(raw, &a.RouteId)
		if err != nil {
			return errors.Wrap(err, "error reading 'route-id'")
		}
		delete(object, "route-id")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertiesUnchTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertiesUnchTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Route to handle AdditionalProperties
func (a Route) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Nexthop != nil {
		object["nexthop"], err = json.Marshal(a.Nexthop)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'nexthop'"))
		}
	}

	object["prefix"], err = json.Marshal(a.Prefix)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'prefix'"))
	}

	object["route-id"], err = json.Marshal(a.RouteId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'route-id'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RouteNexthop. Returns the specified
// element and whether it was found
func (a RouteNexthop) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RouteNexthop
func (a *RouteNexthop) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RouteNexthop to handle AdditionalProperties
func (a *RouteNexthop) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["address"]; found {
		err = json.Unmarshal(raw, &a.Address)
		if err != nil {
			return errors.Wrap(err, "error reading 'address'")
		}
		delete(object, "address")
	}

	if raw, found := object["index"]; found {
		err = json.Unmarshal(raw, &a.Index)
		if err != nil {
			return errors.Wrap(err, "error reading 'index'")
		}
		delete(object, "index")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RouteNexthop to handle AdditionalProperties
func (a RouteNexthop) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["address"], err = json.Marshal(a.Address)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'address'"))
	}

	object["index"], err = json.Marshal(a.Index)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'index'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Switch. Returns the specified
// element and whether it was found
func (a Switch) Get(fieldName string) (value AdditionalPropertiesUnchTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Switch
func (a *Switch) Set(fieldName string, value AdditionalPropertiesUnchTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertiesUnchTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Switch to handle AdditionalProperties
func (a *Switch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["attribute"]; found {
		err = json.Unmarshal(raw, &a.Attribute)
		if err != nil {
			return errors.Wrap(err, "error reading 'attribute'")
		}
		delete(object, "attribute")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["dhcp-connect-point"]; found {
		err = json.Unmarshal(raw, &a.DhcpConnectPoint)
		if err != nil {
			return errors.Wrap(err, "error reading 'dhcp-connect-point'")
		}
		delete(object, "dhcp-connect-point")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["management"]; found {
		err = json.Unmarshal(raw, &a.Management)
		if err != nil {
			return errors.Wrap(err, "error reading 'management'")
		}
		delete(object, "management")
	}

	if raw, found := object["model"]; found {
		err = json.Unmarshal(raw, &a.Model)
		if err != nil {
			return errors.Wrap(err, "error reading 'model'")
		}
		delete(object, "model")
	}

	if raw, found := object["port"]; found {
		err = json.Unmarshal(raw, &a.Port)
		if err != nil {
			return errors.Wrap(err, "error reading 'port'")
		}
		delete(object, "port")
	}

	if raw, found := object["role"]; found {
		err = json.Unmarshal(raw, &a.Role)
		if err != nil {
			return errors.Wrap(err, "error reading 'role'")
		}
		delete(object, "role")
	}

	if raw, found := object["switch-id"]; found {
		err = json.Unmarshal(raw, &a.SwitchId)
		if err != nil {
			return errors.Wrap(err, "error reading 'switch-id'")
		}
		delete(object, "switch-id")
	}

	if raw, found := object["switch-pair"]; found {
		err = json.Unmarshal(raw, &a.SwitchPair)
		if err != nil {
			return errors.Wrap(err, "error reading 'switch-pair'")
		}
		delete(object, "switch-pair")
	}

	if raw, found := object["vlan"]; found {
		err = json.Unmarshal(raw, &a.Vlan)
		if err != nil {
			return errors.Wrap(err, "error reading 'vlan'")
		}
		delete(object, "vlan")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertiesUnchTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertiesUnchTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Switch to handle AdditionalProperties
func (a Switch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Attribute != nil {
		object["attribute"], err = json.Marshal(a.Attribute)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'attribute'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DhcpConnectPoint != nil {
		object["dhcp-connect-point"], err = json.Marshal(a.DhcpConnectPoint)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'dhcp-connect-point'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Management != nil {
		object["management"], err = json.Marshal(a.Management)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'management'"))
		}
	}

	object["model"], err = json.Marshal(a.Model)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'model'"))
	}

	if a.Port != nil {
		object["port"], err = json.Marshal(a.Port)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'port'"))
		}
	}

	object["role"], err = json.Marshal(a.Role)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'role'"))
	}

	object["switch-id"], err = json.Marshal(a.SwitchId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'switch-id'"))
	}

	if a.SwitchPair != nil {
		object["switch-pair"], err = json.Marshal(a.SwitchPair)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'switch-pair'"))
		}
	}

	if a.Vlan != nil {
		object["vlan"], err = json.Marshal(a.Vlan)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'vlan'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SwitchModel. Returns the specified
// element and whether it was found
func (a SwitchModel) Get(fieldName string) (value AdditionalPropertiesUnchTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SwitchModel
func (a *SwitchModel) Set(fieldName string, value AdditionalPropertiesUnchTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertiesUnchTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SwitchModel to handle AdditionalProperties
func (a *SwitchModel) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["attribute"]; found {
		err = json.Unmarshal(raw, &a.Attribute)
		if err != nil {
			return errors.Wrap(err, "error reading 'attribute'")
		}
		delete(object, "attribute")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["form-factor"]; found {
		err = json.Unmarshal(raw, &a.FormFactor)
		if err != nil {
			return errors.Wrap(err, "error reading 'form-factor'")
		}
		delete(object, "form-factor")
	}

	if raw, found := object["pipeline"]; found {
		err = json.Unmarshal(raw, &a.Pipeline)
		if err != nil {
			return errors.Wrap(err, "error reading 'pipeline'")
		}
		delete(object, "pipeline")
	}

	if raw, found := object["port"]; found {
		err = json.Unmarshal(raw, &a.Port)
		if err != nil {
			return errors.Wrap(err, "error reading 'port'")
		}
		delete(object, "port")
	}

	if raw, found := object["switch-model-id"]; found {
		err = json.Unmarshal(raw, &a.SwitchModelId)
		if err != nil {
			return errors.Wrap(err, "error reading 'switch-model-id'")
		}
		delete(object, "switch-model-id")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertiesUnchTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertiesUnchTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SwitchModel to handle AdditionalProperties
func (a SwitchModel) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Attribute != nil {
		object["attribute"], err = json.Marshal(a.Attribute)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'attribute'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	object["form-factor"], err = json.Marshal(a.FormFactor)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'form-factor'"))
	}

	if a.Pipeline != nil {
		object["pipeline"], err = json.Marshal(a.Pipeline)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'pipeline'"))
		}
	}

	if a.Port != nil {
		object["port"], err = json.Marshal(a.Port)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'port'"))
		}
	}

	object["switch-model-id"], err = json.Marshal(a.SwitchModelId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'switch-model-id'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SwitchModelAttribute. Returns the specified
// element and whether it was found
func (a SwitchModelAttribute) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SwitchModelAttribute
func (a *SwitchModelAttribute) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SwitchModelAttribute to handle AdditionalProperties
func (a *SwitchModelAttribute) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["attribute-key"]; found {
		err = json.Unmarshal(raw, &a.AttributeKey)
		if err != nil {
			return errors.Wrap(err, "error reading 'attribute-key'")
		}
		delete(object, "attribute-key")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return errors.Wrap(err, "error reading 'value'")
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SwitchModelAttribute to handle AdditionalProperties
func (a SwitchModelAttribute) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["attribute-key"], err = json.Marshal(a.AttributeKey)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'attribute-key'"))
	}

	object["value"], err = json.Marshal(a.Value)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'value'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SwitchModelPort. Returns the specified
// element and whether it was found
func (a SwitchModelPort) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SwitchModelPort
func (a *SwitchModelPort) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SwitchModelPort to handle AdditionalProperties
func (a *SwitchModelPort) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cage-number"]; found {
		err = json.Unmarshal(raw, &a.CageNumber)
		if err != nil {
			return errors.Wrap(err, "error reading 'cage-number'")
		}
		delete(object, "cage-number")
	}

	if raw, found := object["channel-number"]; found {
		err = json.Unmarshal(raw, &a.ChannelNumber)
		if err != nil {
			return errors.Wrap(err, "error reading 'channel-number'")
		}
		delete(object, "channel-number")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["speeds"]; found {
		err = json.Unmarshal(raw, &a.Speeds)
		if err != nil {
			return errors.Wrap(err, "error reading 'speeds'")
		}
		delete(object, "speeds")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SwitchModelPort to handle AdditionalProperties
func (a SwitchModelPort) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["cage-number"], err = json.Marshal(a.CageNumber)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'cage-number'"))
	}

	object["channel-number"], err = json.Marshal(a.ChannelNumber)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'channel-number'"))
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Speeds != nil {
		object["speeds"], err = json.Marshal(a.Speeds)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'speeds'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SwitchAttribute. Returns the specified
// element and whether it was found
func (a SwitchAttribute) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SwitchAttribute
func (a *SwitchAttribute) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SwitchAttribute to handle AdditionalProperties
func (a *SwitchAttribute) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["attribute-key"]; found {
		err = json.Unmarshal(raw, &a.AttributeKey)
		if err != nil {
			return errors.Wrap(err, "error reading 'attribute-key'")
		}
		delete(object, "attribute-key")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return errors.Wrap(err, "error reading 'value'")
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SwitchAttribute to handle AdditionalProperties
func (a SwitchAttribute) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["attribute-key"], err = json.Marshal(a.AttributeKey)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'attribute-key'"))
	}

	object["value"], err = json.Marshal(a.Value)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'value'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SwitchPort. Returns the specified
// element and whether it was found
func (a SwitchPort) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SwitchPort
func (a *SwitchPort) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SwitchPort to handle AdditionalProperties
func (a *SwitchPort) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cage-number"]; found {
		err = json.Unmarshal(raw, &a.CageNumber)
		if err != nil {
			return errors.Wrap(err, "error reading 'cage-number'")
		}
		delete(object, "cage-number")
	}

	if raw, found := object["channel-number"]; found {
		err = json.Unmarshal(raw, &a.ChannelNumber)
		if err != nil {
			return errors.Wrap(err, "error reading 'channel-number'")
		}
		delete(object, "channel-number")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["dhcp-connect-point"]; found {
		err = json.Unmarshal(raw, &a.DhcpConnectPoint)
		if err != nil {
			return errors.Wrap(err, "error reading 'dhcp-connect-point'")
		}
		delete(object, "dhcp-connect-point")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["speed"]; found {
		err = json.Unmarshal(raw, &a.Speed)
		if err != nil {
			return errors.Wrap(err, "error reading 'speed'")
		}
		delete(object, "speed")
	}

	if raw, found := object["vlans"]; found {
		err = json.Unmarshal(raw, &a.Vlans)
		if err != nil {
			return errors.Wrap(err, "error reading 'vlans'")
		}
		delete(object, "vlans")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SwitchPort to handle AdditionalProperties
func (a SwitchPort) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["cage-number"], err = json.Marshal(a.CageNumber)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'cage-number'"))
	}

	object["channel-number"], err = json.Marshal(a.ChannelNumber)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'channel-number'"))
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DhcpConnectPoint != nil {
		object["dhcp-connect-point"], err = json.Marshal(a.DhcpConnectPoint)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'dhcp-connect-point'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Speed != nil {
		object["speed"], err = json.Marshal(a.Speed)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'speed'"))
		}
	}

	if a.Vlans != nil {
		object["vlans"], err = json.Marshal(a.Vlans)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'vlans'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SwitchVlan. Returns the specified
// element and whether it was found
func (a SwitchVlan) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SwitchVlan
func (a *SwitchVlan) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SwitchVlan to handle AdditionalProperties
func (a *SwitchVlan) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["subnet"]; found {
		err = json.Unmarshal(raw, &a.Subnet)
		if err != nil {
			return errors.Wrap(err, "error reading 'subnet'")
		}
		delete(object, "subnet")
	}

	if raw, found := object["vlan-id"]; found {
		err = json.Unmarshal(raw, &a.VlanId)
		if err != nil {
			return errors.Wrap(err, "error reading 'vlan-id'")
		}
		delete(object, "vlan-id")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SwitchVlan to handle AdditionalProperties
func (a SwitchVlan) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	object["subnet"], err = json.Marshal(a.Subnet)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'subnet'"))
	}

	object["vlan-id"], err = json.Marshal(a.VlanId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'vlan-id'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
