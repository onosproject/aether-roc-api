// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"fmt"
	"reflect"

	"github.com/onosproject/aether-roc-api/pkg/utils"
	externalRef0 "github.com/onosproject/config-models/models/sdn-fabric-0.1.x/api"
	"github.com/onosproject/aether-roc-api/pkg/sdn_fabric_0_1_0/types"

)

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating constants
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating constants
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// ModelPluginDevice - a wrapper for the model plugin
type ModelPluginDevice struct {
	device externalRef0.Device
}

// ToAdditionalPropertiesUnchTarget converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToAdditionalPropertiesUnchTarget(params ...string) (*types.AdditionalPropertiesUnchTarget, error) {
	resource := new(types.AdditionalPropertiesUnchTarget)

	reflectAdditionalPropertiesUnchTarget, err := utils.FindModelPluginObject(d.device, "AdditionalPropertiesUnchTarget", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToAdditionalPropertiesUnchTarget(reflectAdditionalPropertiesUnchTarget, params...)
	return resource, err

}

// ToAdditionalPropertiesUnchTarget converts gNMI to OAPI relative to a node in the tree.
func ToAdditionalPropertiesUnchTarget(ygotObjValue *reflect.Value, params ...string) (*types.AdditionalPropertiesUnchTarget, error) {
	resource := new(types.AdditionalPropertiesUnchTarget)

	// Property: fabric-id string
	//encoding gNMI attribute to OAPI
	reflectFabricId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "FabricId")
	if err != nil {
		return nil, err
	}
	if reflectFabricId != nil {
		attrFabricId := reflectFabricId.Interface().(string)
		resource.FabricId = &attrFabricId
	}

	// Property: unchanged string
	//encoding gNMI attribute to OAPI
	reflectUnchanged, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Unchanged")
	if err != nil {
		return nil, err
	}
	if reflectUnchanged != nil {
		attrUnchanged := reflectUnchanged.Interface().(string)
		resource.Unchanged = &attrUnchanged
	}

	return resource, nil
}

// ToAdditionalPropertyUnchanged converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToAdditionalPropertyUnchanged(params ...string) (*types.AdditionalPropertyUnchanged, error) {
	resource := new(types.AdditionalPropertyUnchanged)

	reflectAdditionalPropertyUnchanged, err := utils.FindModelPluginObject(d.device, "AdditionalPropertyUnchanged", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToAdditionalPropertyUnchanged(reflectAdditionalPropertyUnchanged, params...)
	return resource, err

}

// ToAdditionalPropertyUnchanged converts gNMI to OAPI relative to a node in the tree.
func ToAdditionalPropertyUnchanged(ygotObjValue *reflect.Value, params ...string) (*types.AdditionalPropertyUnchanged, error) {
	resource := new(types.AdditionalPropertyUnchanged)

	// Property: unchanged string
	//encoding gNMI attribute to OAPI
	reflectUnchanged, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Unchanged")
	if err != nil {
		return nil, err
	}
	if reflectUnchanged != nil {
		attrUnchanged := reflectUnchanged.Interface().(string)
		resource.Unchanged = &attrUnchanged
	}

	return resource, nil
}

// ToRoute converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToRoute(params ...string) (*types.Route, error) {
	resource := new(types.Route)

	reflectRoute, err := utils.FindModelPluginObject(d.device, "Route", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToRoute(reflectRoute, params...)
	return resource, err

}

// ToRoute converts gNMI to OAPI relative to a node in the tree.
func ToRoute(ygotObjValue *reflect.Value, params ...string) (*types.Route, error) {
	resource := new(types.Route)

	// Property: nexthop RouteNexthopList
	// Handle object
	reflectNexthop, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Nexthop")
	if err != nil {
		return nil, err
	}
	if reflectNexthop != nil {
		attrNexthop, err := ToRouteNexthopList(reflectNexthop, params...)
		if err != nil {
			return nil, err
		}
		resource.Nexthop = attrNexthop
	}

	// Property: prefix string
	//encoding gNMI attribute to OAPI
	reflectPrefix, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Prefix")
	if err != nil {
		return nil, err
	}
	if reflectPrefix != nil {
		attrPrefix := reflectPrefix.Interface().(string)
		resource.Prefix = attrPrefix
	}

	// Property: route-id ListKey
	//encoding gNMI attribute to OAPI
	reflectRouteId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "RouteId")
	if err != nil {
		return nil, err
	}
	if reflectRouteId != nil {
		attrRouteId := types.ListKey(reflectRouteId.Interface().(string))
		resource.RouteId = attrRouteId
	}

	return resource, nil
}

// ToRouteList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToRouteList(params ...string) (*types.RouteList, error) {
	resource := new(types.RouteList)

	// Array list - Go type Route
	mpObject, err := utils.FindModelPluginObject(d.device, "Route", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToRoute(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToRouteList converts gNMI to OAPI relative to a node in the tree.
func ToRouteList(ygotObjValue *reflect.Value, params ...string) (*types.RouteList, error) {
	resource := new(types.RouteList)

	// Array list - Go type                                                                                           Route
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToRoute(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToRouteNexthop converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToRouteNexthop(params ...string) (*types.RouteNexthop, error) {
	resource := new(types.RouteNexthop)

	reflectRouteNexthop, err := utils.FindModelPluginObject(d.device, "RouteNexthop", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToRouteNexthop(reflectRouteNexthop, params...)
	return resource, err

}

// ToRouteNexthop converts gNMI to OAPI relative to a node in the tree.
func ToRouteNexthop(ygotObjValue *reflect.Value, params ...string) (*types.RouteNexthop, error) {
	resource := new(types.RouteNexthop)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Address")
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := reflectAddress.Interface().(string)
		resource.Address = attrAddress
	}

	// Property: index ListKey
	//encoding gNMI attribute to OAPI
	reflectIndex, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Index")
	if err != nil {
		return nil, err
	}
	if reflectIndex != nil {
		attrIndex := types.ListKey(reflectIndex.Interface().(string))
		resource.Index = attrIndex
	}

	return resource, nil
}

// ToRouteNexthopList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToRouteNexthopList(params ...string) (*types.RouteNexthopList, error) {
	resource := new(types.RouteNexthopList)

	// Array list - Go type RouteNexthop
	mpObject, err := utils.FindModelPluginObject(d.device, "RouteNexthop", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToRouteNexthop(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToRouteNexthopList converts gNMI to OAPI relative to a node in the tree.
func ToRouteNexthopList(ygotObjValue *reflect.Value, params ...string) (*types.RouteNexthopList, error) {
	resource := new(types.RouteNexthopList)

	// Array list - Go type                                                                                    RouteNexthop
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToRouteNexthop(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSwitch converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitch(params ...string) (*types.Switch, error) {
	resource := new(types.Switch)

	reflectSwitch, err := utils.FindModelPluginObject(d.device, "Switch", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSwitch(reflectSwitch, params...)
	return resource, err

}

// ToSwitch converts gNMI to OAPI relative to a node in the tree.
func ToSwitch(ygotObjValue *reflect.Value, params ...string) (*types.Switch, error) {
	resource := new(types.Switch)

	// Property: attribute SwitchAttributeList
	// Handle object
	reflectAttribute, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Attribute")
	if err != nil {
		return nil, err
	}
	if reflectAttribute != nil {
		attrAttribute, err := ToSwitchAttributeList(reflectAttribute, params...)
		if err != nil {
			return nil, err
		}
		resource.Attribute = attrAttribute
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: dhcp-connect-point SwitchDhcpConnectPointList
	// Handle object
	reflectDhcpConnectPoint, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DhcpConnectPoint")
	if err != nil {
		return nil, err
	}
	if reflectDhcpConnectPoint != nil {
		attrDhcpConnectPoint, err := ToSwitchDhcpConnectPointList(reflectDhcpConnectPoint, params...)
		if err != nil {
			return nil, err
		}
		resource.DhcpConnectPoint = attrDhcpConnectPoint
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: management SwitchManagement
	// Handle object
	reflectManagement, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Management")
	if err != nil {
		return nil, err
	}
	if reflectManagement != nil {
		attrManagement, err := ToSwitchManagement(reflectManagement, params...)
		if err != nil {
			return nil, err
		}
		resource.Management = attrManagement
	}

	// Property: model string
	//encoding gNMI attribute to OAPI
	reflectModel, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Model")
	if err != nil {
		return nil, err
	}
	if reflectModel != nil {
		attrModel := reflectModel.Interface().(string)
		resource.Model = attrModel
	}

	// Property: port SwitchPortList
	// Handle object
	reflectPort, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Port")
	if err != nil {
		return nil, err
	}
	if reflectPort != nil {
		attrPort, err := ToSwitchPortList(reflectPort, params...)
		if err != nil {
			return nil, err
		}
		resource.Port = attrPort
	}

	// Property: role string
	// Enums handling
	reflectRole, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Role")
	if err != nil {
		return nil, err
	}
	attrRole := reflectRole.Interface()
	_, yangDefRole, err := utils.ExtractGnmiEnumMap(ygotObjValue, "SwitchRole", attrRole)
	if err != nil {
		return nil, err
	}
	if yangDefRole != nil {
		resource.Role = (types.SwitchRole)(yangDefRole.Name)
	}

	// Property: switch-id ListKey
	//encoding gNMI attribute to OAPI
	reflectSwitchId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SwitchId")
	if err != nil {
		return nil, err
	}
	if reflectSwitchId != nil {
		attrSwitchId := types.ListKey(reflectSwitchId.Interface().(string))
		resource.SwitchId = attrSwitchId
	}

	// Property: switch-pair SwitchSwitchPair
	// Handle object
	reflectSwitchPair, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SwitchPair")
	if err != nil {
		return nil, err
	}
	if reflectSwitchPair != nil {
		attrSwitchPair, err := ToSwitchSwitchPair(reflectSwitchPair, params...)
		if err != nil {
			return nil, err
		}
		resource.SwitchPair = attrSwitchPair
	}

	// Property: vlan SwitchVlanList
	// Handle object
	reflectVlan, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Vlan")
	if err != nil {
		return nil, err
	}
	if reflectVlan != nil {
		attrVlan, err := ToSwitchVlanList(reflectVlan, params...)
		if err != nil {
			return nil, err
		}
		resource.Vlan = attrVlan
	}

	return resource, nil
}

// ToSwitchRole converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchRole(params ...string) (*types.SwitchRole, error) {
	resource := new(types.SwitchRole)

	reflectSwitchRole, err := utils.FindModelPluginObject(d.device, "SwitchRole", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSwitchRole(reflectSwitchRole, params...)
	return resource, err

}

// ToSwitchRole converts gNMI to OAPI relative to a node in the tree.
func ToSwitchRole(ygotObjValue *reflect.Value, params ...string) (*types.SwitchRole, error) {
	resource := new(types.SwitchRole)

	return resource, nil
}

// ToSwitchModel converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchModel(params ...string) (*types.SwitchModel, error) {
	resource := new(types.SwitchModel)

	reflectSwitchModel, err := utils.FindModelPluginObject(d.device, "SwitchModel", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSwitchModel(reflectSwitchModel, params...)
	return resource, err

}

// ToSwitchModel converts gNMI to OAPI relative to a node in the tree.
func ToSwitchModel(ygotObjValue *reflect.Value, params ...string) (*types.SwitchModel, error) {
	resource := new(types.SwitchModel)

	// Property: attribute SwitchModelAttributeList
	// Handle object
	reflectAttribute, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Attribute")
	if err != nil {
		return nil, err
	}
	if reflectAttribute != nil {
		attrAttribute, err := ToSwitchModelAttributeList(reflectAttribute, params...)
		if err != nil {
			return nil, err
		}
		resource.Attribute = attrAttribute
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: form-factor string
	// Enums handling
	reflectFormFactor, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "FormFactor")
	if err != nil {
		return nil, err
	}
	attrFormFactor := reflectFormFactor.Interface()
	_, yangDefFormFactor, err := utils.ExtractGnmiEnumMap(ygotObjValue, "SwitchModelFormFactor", attrFormFactor)
	if err != nil {
		return nil, err
	}
	if yangDefFormFactor != nil {
		resource.FormFactor = (types.SwitchModelFormFactor)(yangDefFormFactor.Name)
	}

	// Property: pipeline string
	// Enums handling
	reflectPipeline, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Pipeline")
	if err != nil {
		return nil, err
	}
	attrPipeline := reflectPipeline.Interface()
	_, yangDefPipeline, err := utils.ExtractGnmiEnumMap(ygotObjValue, "SwitchModelPipeline", attrPipeline)
	if err != nil {
		return nil, err
	}
	if yangDefPipeline != nil {
		resource.Pipeline = (*types.SwitchModelPipeline)(&yangDefPipeline.Name)
	}

	// Property: port SwitchModelPortList
	// Handle object
	reflectPort, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Port")
	if err != nil {
		return nil, err
	}
	if reflectPort != nil {
		attrPort, err := ToSwitchModelPortList(reflectPort, params...)
		if err != nil {
			return nil, err
		}
		resource.Port = attrPort
	}

	// Property: switch-model-id ListKey
	//encoding gNMI attribute to OAPI
	reflectSwitchModelId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SwitchModelId")
	if err != nil {
		return nil, err
	}
	if reflectSwitchModelId != nil {
		attrSwitchModelId := types.ListKey(reflectSwitchModelId.Interface().(string))
		resource.SwitchModelId = attrSwitchModelId
	}

	return resource, nil
}

// ToSwitchModelFormFactor converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchModelFormFactor(params ...string) (*types.SwitchModelFormFactor, error) {
	resource := new(types.SwitchModelFormFactor)

	reflectSwitchModelFormFactor, err := utils.FindModelPluginObject(d.device, "SwitchModelFormFactor", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSwitchModelFormFactor(reflectSwitchModelFormFactor, params...)
	return resource, err

}

// ToSwitchModelFormFactor converts gNMI to OAPI relative to a node in the tree.
func ToSwitchModelFormFactor(ygotObjValue *reflect.Value, params ...string) (*types.SwitchModelFormFactor, error) {
	resource := new(types.SwitchModelFormFactor)

	return resource, nil
}

// ToSwitchModelPipeline converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchModelPipeline(params ...string) (*types.SwitchModelPipeline, error) {
	resource := new(types.SwitchModelPipeline)

	reflectSwitchModelPipeline, err := utils.FindModelPluginObject(d.device, "SwitchModelPipeline", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSwitchModelPipeline(reflectSwitchModelPipeline, params...)
	return resource, err

}

// ToSwitchModelPipeline converts gNMI to OAPI relative to a node in the tree.
func ToSwitchModelPipeline(ygotObjValue *reflect.Value, params ...string) (*types.SwitchModelPipeline, error) {
	resource := new(types.SwitchModelPipeline)

	return resource, nil
}

// ToSwitchModelAttribute converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchModelAttribute(params ...string) (*types.SwitchModelAttribute, error) {
	resource := new(types.SwitchModelAttribute)

	reflectSwitchModelAttribute, err := utils.FindModelPluginObject(d.device, "SwitchModelAttribute", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSwitchModelAttribute(reflectSwitchModelAttribute, params...)
	return resource, err

}

// ToSwitchModelAttribute converts gNMI to OAPI relative to a node in the tree.
func ToSwitchModelAttribute(ygotObjValue *reflect.Value, params ...string) (*types.SwitchModelAttribute, error) {
	resource := new(types.SwitchModelAttribute)

	// Property: attribute-key ListKey
	//encoding gNMI attribute to OAPI
	reflectAttributeKey, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "AttributeKey")
	if err != nil {
		return nil, err
	}
	if reflectAttributeKey != nil {
		attrAttributeKey := types.ListKey(reflectAttributeKey.Interface().(string))
		resource.AttributeKey = attrAttributeKey
	}

	// Property: value string
	//encoding gNMI attribute to OAPI
	reflectValue, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Value")
	if err != nil {
		return nil, err
	}
	if reflectValue != nil {
		attrValue := reflectValue.Interface().(string)
		resource.Value = attrValue
	}

	return resource, nil
}

// ToSwitchModelAttributeList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchModelAttributeList(params ...string) (*types.SwitchModelAttributeList, error) {
	resource := new(types.SwitchModelAttributeList)

	// Array list - Go type SwitchModelAttribute
	mpObject, err := utils.FindModelPluginObject(d.device, "SwitchModelAttribute", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSwitchModelAttribute(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSwitchModelAttributeList converts gNMI to OAPI relative to a node in the tree.
func ToSwitchModelAttributeList(ygotObjValue *reflect.Value, params ...string) (*types.SwitchModelAttributeList, error) {
	resource := new(types.SwitchModelAttributeList)

	// Array list - Go type                                                                            SwitchModelAttribute
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSwitchModelAttribute(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSwitchModelList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchModelList(params ...string) (*types.SwitchModelList, error) {
	resource := new(types.SwitchModelList)

	// Array list - Go type SwitchModel
	mpObject, err := utils.FindModelPluginObject(d.device, "SwitchModel", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSwitchModel(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSwitchModelList converts gNMI to OAPI relative to a node in the tree.
func ToSwitchModelList(ygotObjValue *reflect.Value, params ...string) (*types.SwitchModelList, error) {
	resource := new(types.SwitchModelList)

	// Array list - Go type                                                                                     SwitchModel
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSwitchModel(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSwitchModelPort converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchModelPort(params ...string) (*types.SwitchModelPort, error) {
	resource := new(types.SwitchModelPort)

	reflectSwitchModelPort, err := utils.FindModelPluginObject(d.device, "SwitchModelPort", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSwitchModelPort(reflectSwitchModelPort, params...)
	return resource, err

}

// ToSwitchModelPort converts gNMI to OAPI relative to a node in the tree.
func ToSwitchModelPort(ygotObjValue *reflect.Value, params ...string) (*types.SwitchModelPort, error) {
	resource := new(types.SwitchModelPort)

	// Property: cage-number ListKey
	//encoding gNMI attribute to OAPI
	reflectCageNumber, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "CageNumber")
	if err != nil {
		return nil, err
	}
	if reflectCageNumber != nil {
		attrCageNumber := types.ListKey(reflectCageNumber.Interface().(string))
		resource.CageNumber = attrCageNumber
	}

	// Property: channel-number ListKey
	//encoding gNMI attribute to OAPI
	reflectChannelNumber, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ChannelNumber")
	if err != nil {
		return nil, err
	}
	if reflectChannelNumber != nil {
		attrChannelNumber := types.ListKey(reflectChannelNumber.Interface().(string))
		resource.ChannelNumber = attrChannelNumber
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: speeds SwitchModelPortSpeeds
	// Handle object
	reflectSpeeds, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Speeds")
	if err != nil {
		return nil, err
	}
	if reflectSpeeds != nil {
		attrSpeeds, err := ToSwitchModelPortSpeeds(reflectSpeeds, params...)
		if err != nil {
			return nil, err
		}
		resource.Speeds = attrSpeeds
	}

	return resource, nil
}

// ToSwitchModelPortList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchModelPortList(params ...string) (*types.SwitchModelPortList, error) {
	resource := new(types.SwitchModelPortList)

	// Array list - Go type SwitchModelPort
	mpObject, err := utils.FindModelPluginObject(d.device, "SwitchModelPort", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSwitchModelPort(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSwitchModelPortList converts gNMI to OAPI relative to a node in the tree.
func ToSwitchModelPortList(ygotObjValue *reflect.Value, params ...string) (*types.SwitchModelPortList, error) {
	resource := new(types.SwitchModelPortList)

	// Array list - Go type                                                                                 SwitchModelPort
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSwitchModelPort(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSwitchModelPortSpeeds converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchModelPortSpeeds(params ...string) (*types.SwitchModelPortSpeeds, error) {
	resource := new(types.SwitchModelPortSpeeds)

	// Array list - Go type string
	mpObject, err := utils.FindModelPluginObject(d.device, "string", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSwitchModelPortSpeed(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, r)
	}
	return resource, nil

}

func ToSwitchModelPortSpeeds(ygotObjValue *reflect.Value, params ...string) (*types.SwitchModelPortSpeeds, error) {
	// TODO: implement me
	return nil, nil
}

// ToSwitchModelPortSpeeds converts gNMI to OAPI relative to a node in the tree.
func ToSwitchModelPortSpeed(ygotObjValue *reflect.Value, params ...string) (string, error) {
	strVal, ok := ygotObjValue.Interface().(string)
	if !ok {
		return "", fmt.Errorf("error converting %v to string", ygotObjValue.Interface())
	}

	return strVal, nil
}

// ToSwitchAttribute converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchAttribute(params ...string) (*types.SwitchAttribute, error) {
	resource := new(types.SwitchAttribute)

	reflectSwitchAttribute, err := utils.FindModelPluginObject(d.device, "SwitchAttribute", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSwitchAttribute(reflectSwitchAttribute, params...)
	return resource, err

}

// ToSwitchAttribute converts gNMI to OAPI relative to a node in the tree.
func ToSwitchAttribute(ygotObjValue *reflect.Value, params ...string) (*types.SwitchAttribute, error) {
	resource := new(types.SwitchAttribute)

	// Property: attribute-key ListKey
	//encoding gNMI attribute to OAPI
	reflectAttributeKey, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "AttributeKey")
	if err != nil {
		return nil, err
	}
	if reflectAttributeKey != nil {
		attrAttributeKey := types.ListKey(reflectAttributeKey.Interface().(string))
		resource.AttributeKey = attrAttributeKey
	}

	// Property: value string
	//encoding gNMI attribute to OAPI
	reflectValue, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Value")
	if err != nil {
		return nil, err
	}
	if reflectValue != nil {
		attrValue := reflectValue.Interface().(string)
		resource.Value = attrValue
	}

	return resource, nil
}

// ToSwitchAttributeList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchAttributeList(params ...string) (*types.SwitchAttributeList, error) {
	resource := new(types.SwitchAttributeList)

	// Array list - Go type SwitchAttribute
	mpObject, err := utils.FindModelPluginObject(d.device, "SwitchAttribute", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSwitchAttribute(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSwitchAttributeList converts gNMI to OAPI relative to a node in the tree.
func ToSwitchAttributeList(ygotObjValue *reflect.Value, params ...string) (*types.SwitchAttributeList, error) {
	resource := new(types.SwitchAttributeList)

	// Array list - Go type                                                                                 SwitchAttribute
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSwitchAttribute(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSwitchDhcpConnectPoint converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchDhcpConnectPoint(params ...string) (*types.SwitchDhcpConnectPoint, error) {
	resource := new(types.SwitchDhcpConnectPoint)

	reflectSwitchDhcpConnectPoint, err := utils.FindModelPluginObject(d.device, "SwitchDhcpConnectPoint", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSwitchDhcpConnectPoint(reflectSwitchDhcpConnectPoint, params...)
	return resource, err

}

// ToSwitchDhcpConnectPoint converts gNMI to OAPI relative to a node in the tree.
func ToSwitchDhcpConnectPoint(ygotObjValue *reflect.Value, params ...string) (*types.SwitchDhcpConnectPoint, error) {
	resource := new(types.SwitchDhcpConnectPoint)

	// Property: connect-point SwitchDhcpConnectPointConnectPoint
	// Handle object
	reflectConnectPoint, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ConnectPoint")
	if err != nil {
		return nil, err
	}
	if reflectConnectPoint != nil {
		attrConnectPoint, err := ToSwitchDhcpConnectPointConnectPoint(reflectConnectPoint, params...)
		if err != nil {
			return nil, err
		}
		resource.ConnectPoint = attrConnectPoint
	}

	// Property: dhcp-id ListKey
	//encoding gNMI attribute to OAPI
	reflectDhcpId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DhcpId")
	if err != nil {
		return nil, err
	}
	if reflectDhcpId != nil {
		attrDhcpId := types.ListKey(reflectDhcpId.Interface().(string))
		resource.DhcpId = attrDhcpId
	}

	return resource, nil
}

// ToSwitchDhcpConnectPointConnectPoint converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchDhcpConnectPointConnectPoint(params ...string) (*types.SwitchDhcpConnectPointConnectPoint, error) {
	resource := new(types.SwitchDhcpConnectPointConnectPoint)

	// Array list - Go type string
	_, err := utils.FindModelPluginObject(d.device, "string", params...)
	if err != nil {
		return nil, err
	}

	// TODO -- implement me
	return resource, nil

}

// ToSwitchDhcpConnectPointConnectPoint converts gNMI to OAPI relative to a node in the tree.
func ToSwitchDhcpConnectPointConnectPoint(ygotObjValue *reflect.Value, params ...string) (*types.SwitchDhcpConnectPointConnectPoint, error) {
	resource := new(types.SwitchDhcpConnectPointConnectPoint)

	// TODO -- implement me
	return resource, nil
}

// ToSwitchDhcpConnectPointList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchDhcpConnectPointList(params ...string) (*types.SwitchDhcpConnectPointList, error) {
	resource := new(types.SwitchDhcpConnectPointList)

	// Array list - Go type SwitchDhcpConnectPoint
	mpObject, err := utils.FindModelPluginObject(d.device, "SwitchDhcpConnectPoint", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSwitchDhcpConnectPoint(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSwitchDhcpConnectPointList converts gNMI to OAPI relative to a node in the tree.
func ToSwitchDhcpConnectPointList(ygotObjValue *reflect.Value, params ...string) (*types.SwitchDhcpConnectPointList, error) {
	resource := new(types.SwitchDhcpConnectPointList)

	// Array list - Go type                                                                          SwitchDhcpConnectPoint
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSwitchDhcpConnectPoint(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSwitchList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchList(params ...string) (*types.SwitchList, error) {
	resource := new(types.SwitchList)

	// Array list - Go type Switch
	mpObject, err := utils.FindModelPluginObject(d.device, "Switch", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSwitch(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSwitchList converts gNMI to OAPI relative to a node in the tree.
func ToSwitchList(ygotObjValue *reflect.Value, params ...string) (*types.SwitchList, error) {
	resource := new(types.SwitchList)

	// Array list - Go type                                                                                          Switch
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSwitch(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSwitchManagement converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchManagement(params ...string) (*types.SwitchManagement, error) {
	resource := new(types.SwitchManagement)

	reflectSwitchManagement, err := utils.FindModelPluginObject(d.device, "SwitchManagement", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSwitchManagement(reflectSwitchManagement, params...)
	return resource, err

}

// ToSwitchManagement converts gNMI to OAPI relative to a node in the tree.
func ToSwitchManagement(ygotObjValue *reflect.Value, params ...string) (*types.SwitchManagement, error) {
	resource := new(types.SwitchManagement)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Address")
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := reflectAddress.Interface().(string)
		resource.Address = &attrAddress
	}

	// Property: port-number int
	//encoding gNMI attribute to OAPI
	reflectPortNumber, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "PortNumber")
	if err != nil {
		return nil, err
	}
	if reflectPortNumber != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.PortNumber, err = utils.ToIntPtr(reflectPortNumber); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToSwitchPort converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchPort(params ...string) (*types.SwitchPort, error) {
	resource := new(types.SwitchPort)

	reflectSwitchPort, err := utils.FindModelPluginObject(d.device, "SwitchPort", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSwitchPort(reflectSwitchPort, params...)
	return resource, err

}

// ToSwitchPort converts gNMI to OAPI relative to a node in the tree.
func ToSwitchPort(ygotObjValue *reflect.Value, params ...string) (*types.SwitchPort, error) {
	resource := new(types.SwitchPort)

	// Property: cage-number ListKey
	//encoding gNMI attribute to OAPI
	reflectCageNumber, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "CageNumber")
	if err != nil {
		return nil, err
	}
	if reflectCageNumber != nil {
		attrCageNumber := types.ListKey(reflectCageNumber.Interface().(string))
		resource.CageNumber = attrCageNumber
	}

	// Property: channel-number ListKey
	//encoding gNMI attribute to OAPI
	reflectChannelNumber, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ChannelNumber")
	if err != nil {
		return nil, err
	}
	if reflectChannelNumber != nil {
		attrChannelNumber := types.ListKey(reflectChannelNumber.Interface().(string))
		resource.ChannelNumber = attrChannelNumber
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: dhcp-connect-point string
	//encoding gNMI attribute to OAPI
	reflectDhcpConnectPoint, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DhcpConnectPoint")
	if err != nil {
		return nil, err
	}
	if reflectDhcpConnectPoint != nil {
		attrDhcpConnectPoint := reflectDhcpConnectPoint.Interface().(string)
		resource.DhcpConnectPoint = &attrDhcpConnectPoint
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: speed string
	// Enums handling
	reflectSpeed, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Speed")
	if err != nil {
		return nil, err
	}
	attrSpeed := reflectSpeed.Interface()
	_, yangDefSpeed, err := utils.ExtractGnmiEnumMap(ygotObjValue, "SwitchPortSpeed", attrSpeed)
	if err != nil {
		return nil, err
	}
	if yangDefSpeed != nil {
		resource.Speed = (*types.SwitchPortSpeed)(&yangDefSpeed.Name)
	}

	// Property: vlans SwitchPortVlans
	// Handle object
	reflectVlans, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Vlans")
	if err != nil {
		return nil, err
	}
	if reflectVlans != nil {
		attrVlans, err := ToSwitchPortVlans(reflectVlans, params...)
		if err != nil {
			return nil, err
		}
		resource.Vlans = attrVlans
	}

	return resource, nil
}

// ToSwitchPortSpeed converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchPortSpeed(params ...string) (*types.SwitchPortSpeed, error) {
	resource := new(types.SwitchPortSpeed)

	reflectSwitchPortSpeed, err := utils.FindModelPluginObject(d.device, "SwitchPortSpeed", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSwitchPortSpeed(reflectSwitchPortSpeed, params...)
	return resource, err

}

// ToSwitchPortSpeed converts gNMI to OAPI relative to a node in the tree.
func ToSwitchPortSpeed(ygotObjValue *reflect.Value, params ...string) (*types.SwitchPortSpeed, error) {
	resource := new(types.SwitchPortSpeed)

	return resource, nil
}

// ToSwitchPortList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchPortList(params ...string) (*types.SwitchPortList, error) {
	resource := new(types.SwitchPortList)

	// Array list - Go type SwitchPort
	mpObject, err := utils.FindModelPluginObject(d.device, "SwitchPort", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSwitchPort(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSwitchPortList converts gNMI to OAPI relative to a node in the tree.
func ToSwitchPortList(ygotObjValue *reflect.Value, params ...string) (*types.SwitchPortList, error) {
	resource := new(types.SwitchPortList)

	// Array list - Go type                                                                                      SwitchPort
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSwitchPort(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSwitchPortVlans converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchPortVlans(params ...string) (*types.SwitchPortVlans, error) {
	resource := new(types.SwitchPortVlans)

	reflectSwitchPortVlans, err := utils.FindModelPluginObject(d.device, "SwitchPortVlans", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSwitchPortVlans(reflectSwitchPortVlans, params...)
	return resource, err

}

// ToSwitchPortVlans converts gNMI to OAPI relative to a node in the tree.
func ToSwitchPortVlans(ygotObjValue *reflect.Value, params ...string) (*types.SwitchPortVlans, error) {
	resource := new(types.SwitchPortVlans)

	// Property: leaf-list-tagged []string
	//Leaf list handling
	reflectLeafListTagged, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Tagged")
	if err != nil {
		return nil, err
	}
	asArrayLeafListTagged := reflectLeafListTagged.Interface().([]string)
	resource.LeafListTagged = &asArrayLeafListTagged

	// Property: untagged string
	//encoding gNMI attribute to OAPI
	reflectUntagged, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Untagged")
	if err != nil {
		return nil, err
	}
	if reflectUntagged != nil {
		attrUntagged := reflectUntagged.Interface().(string)
		resource.Untagged = &attrUntagged
	}

	return resource, nil
}

// ToSwitchSwitchPair converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchSwitchPair(params ...string) (*types.SwitchSwitchPair, error) {
	resource := new(types.SwitchSwitchPair)

	reflectSwitchSwitchPair, err := utils.FindModelPluginObject(d.device, "SwitchSwitchPair", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSwitchSwitchPair(reflectSwitchSwitchPair, params...)
	return resource, err

}

// ToSwitchSwitchPair converts gNMI to OAPI relative to a node in the tree.
func ToSwitchSwitchPair(ygotObjValue *reflect.Value, params ...string) (*types.SwitchSwitchPair, error) {
	resource := new(types.SwitchSwitchPair)

	// Property: cage-number string
	//encoding gNMI attribute to OAPI
	reflectCageNumber, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "CageNumber")
	if err != nil {
		return nil, err
	}
	if reflectCageNumber != nil {
		attrCageNumber := reflectCageNumber.Interface().(string)
		resource.CageNumber = &attrCageNumber
	}

	// Property: channel-number string
	//encoding gNMI attribute to OAPI
	reflectChannelNumber, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ChannelNumber")
	if err != nil {
		return nil, err
	}
	if reflectChannelNumber != nil {
		attrChannelNumber := reflectChannelNumber.Interface().(string)
		resource.ChannelNumber = &attrChannelNumber
	}

	// Property: paired-switch string
	//encoding gNMI attribute to OAPI
	reflectPairedSwitch, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "PairedSwitch")
	if err != nil {
		return nil, err
	}
	if reflectPairedSwitch != nil {
		attrPairedSwitch := reflectPairedSwitch.Interface().(string)
		resource.PairedSwitch = &attrPairedSwitch
	}

	return resource, nil
}

// ToSwitchVlan converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchVlan(params ...string) (*types.SwitchVlan, error) {
	resource := new(types.SwitchVlan)

	reflectSwitchVlan, err := utils.FindModelPluginObject(d.device, "SwitchVlan", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSwitchVlan(reflectSwitchVlan, params...)
	return resource, err

}

// ToSwitchVlan converts gNMI to OAPI relative to a node in the tree.
func ToSwitchVlan(ygotObjValue *reflect.Value, params ...string) (*types.SwitchVlan, error) {
	resource := new(types.SwitchVlan)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: subnet string
	//encoding gNMI attribute to OAPI
	reflectSubnet, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Subnet")
	if err != nil {
		return nil, err
	}
	if reflectSubnet != nil {
		attrSubnet := reflectSubnet.Interface().(string)
		resource.Subnet = attrSubnet
	}

	// Property: vlan-id ListKey
	//encoding gNMI attribute to OAPI
	reflectVlanId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "VlanId")
	if err != nil {
		return nil, err
	}
	if reflectVlanId != nil {
		attrVlanId := types.ListKey(reflectVlanId.Interface().(string))
		resource.VlanId = attrVlanId
	}

	return resource, nil
}

// ToSwitchVlanList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSwitchVlanList(params ...string) (*types.SwitchVlanList, error) {
	resource := new(types.SwitchVlanList)

	// Array list - Go type SwitchVlan
	mpObject, err := utils.FindModelPluginObject(d.device, "SwitchVlan", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSwitchVlan(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSwitchVlanList converts gNMI to OAPI relative to a node in the tree.
func ToSwitchVlanList(ygotObjValue *reflect.Value, params ...string) (*types.SwitchVlanList, error) {
	resource := new(types.SwitchVlanList)

	// Array list - Go type                                                                                      SwitchVlan
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSwitchVlan(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToFabricId converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToFabricId(params ...string) (*types.FabricId, error) {
	resource := new(types.FabricId)

	reflectFabricId, err := utils.FindModelPluginObject(d.device, "FabricId", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToFabricId(reflectFabricId, params...)
	return resource, err

}

// ToFabricId converts gNMI to OAPI relative to a node in the tree.
func ToFabricId(ygotObjValue *reflect.Value, params ...string) (*types.FabricId, error) {
	resource := new(types.FabricId)

	return resource, nil
}

//Ignoring RequestBodyRoute

//Ignoring RequestBodyRouteNexthop

//Ignoring RequestBodySwitch

//Ignoring RequestBodySwitchModel

//Ignoring RequestBodySwitchModelAttribute

//Ignoring RequestBodySwitchModelPort

//Ignoring RequestBodySwitchAttribute

//Ignoring RequestBodySwitchDhcpConnectPoint

//Ignoring RequestBodySwitchManagement

//Ignoring RequestBodySwitchPort

//Ignoring RequestBodySwitchPortVlans

//Ignoring RequestBodySwitchSwitchPair

//Ignoring RequestBodySwitchVlan

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating param-types
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating request-bodies

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating additional-properties
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating additional-properties
