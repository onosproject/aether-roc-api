// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
