// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
