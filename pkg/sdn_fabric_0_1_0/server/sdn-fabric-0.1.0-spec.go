// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fw8yigAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
