// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
