// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3Us8aRVc/isAAP//JpDTfAuXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
