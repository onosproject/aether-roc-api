// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"reflect"

	"github.com/labstack/echo/v4"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/sdn_fabric_0_1_0/types"
	"github.com/onosproject/aether-roc-api/pkg/southbound"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	externalRef1 "github.com/onosproject/config-models/models/sdn-fabric-0.1.x/api"
	"github.com/onosproject/onos-lib-go/pkg/logging"
	"github.com/openconfig/gnmi/proto/gnmi"
)

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Defines values for SwitchRole.
const (
	SwitchRoleLeaf externalRef0.SwitchRole = "leaf"

	SwitchRoleSpine externalRef0.SwitchRole = "spine"

	SwitchRoleUndefined externalRef0.SwitchRole = "undefined"
)

// Defines values for SwitchModelFormFactor.
const (
	SwitchModelFormFactorIpu externalRef0.SwitchModelFormFactor = "ipu"

	SwitchModelFormFactorPizzaBox externalRef0.SwitchModelFormFactor = "pizza-box"

	SwitchModelFormFactorSmartNic externalRef0.SwitchModelFormFactor = "smart-nic"

	SwitchModelFormFactorUndefined externalRef0.SwitchModelFormFactor = "undefined"

	SwitchModelFormFactorVSwitch externalRef0.SwitchModelFormFactor = "v-switch"
)

// Defines values for SwitchModelPipeline.
const (
	SwitchModelPipelineDual externalRef0.SwitchModelPipeline = "dual"

	SwitchModelPipelineQuad externalRef0.SwitchModelPipeline = "quad"

	SwitchModelPipelineUnknown externalRef0.SwitchModelPipeline = "unknown"
)

// Defines values for SwitchPortSpeed.
const (
	SwitchPortSpeedSpeed100g externalRef0.SwitchPortSpeed = "speed-100g"

	SwitchPortSpeedSpeed10g externalRef0.SwitchPortSpeed = "speed-10g"

	SwitchPortSpeedSpeed1g externalRef0.SwitchPortSpeed = "speed-1g"

	SwitchPortSpeedSpeed25g externalRef0.SwitchPortSpeed = "speed-2-5g"

	SwitchPortSpeedSpeed25g1 externalRef0.SwitchPortSpeed = "speed-25g"

	SwitchPortSpeedSpeed400g externalRef0.SwitchPortSpeed = "speed-400g"

	SwitchPortSpeedSpeed40g externalRef0.SwitchPortSpeed = "speed-40g"

	SwitchPortSpeedSpeed5g externalRef0.SwitchPortSpeed = "speed-5g"

	SwitchPortSpeedSpeedAutoneg externalRef0.SwitchPortSpeed = "speed-autoneg"
)

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

//Ignoring AdditionalPropertiesUnchTarget

//Ignoring AdditionalPropertyUnchanged

// GnmiDeleteRoute deletes an instance of Route.
func (i *ServerImpl) GnmiDeleteRoute(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetRoute(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetRoute returns an instance of Route.
func (i *ServerImpl) GnmiGetRoute(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.Route, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToRoute(args...)
}

// GnmiPostRoute adds an instance of Route.
func (i *ServerImpl) GnmiPostRoute(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.Route)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Route %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiRoute(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.Route to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteRouteList deletes an instance of Route_List.
func (i *ServerImpl) GnmiDeleteRouteList(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetRouteList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetRouteList returns an instance of Route_List.
func (i *ServerImpl) GnmiGetRouteList(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.RouteList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToRouteList(args...)
}

// GnmiPostRouteList adds an instance of Route_List.
func (i *ServerImpl) GnmiPostRouteList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.RouteList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Route_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiRouteList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.RouteList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteRouteNexthop deletes an instance of Route_Nexthop.
func (i *ServerImpl) GnmiDeleteRouteNexthop(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetRouteNexthop(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetRouteNexthop returns an instance of Route_Nexthop.
func (i *ServerImpl) GnmiGetRouteNexthop(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.RouteNexthop, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToRouteNexthop(args...)
}

// GnmiPostRouteNexthop adds an instance of Route_Nexthop.
func (i *ServerImpl) GnmiPostRouteNexthop(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.RouteNexthop)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Route_Nexthop %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiRouteNexthop(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.RouteNexthop to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteRouteNexthopList deletes an instance of Route_Nexthop_List.
func (i *ServerImpl) GnmiDeleteRouteNexthopList(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetRouteNexthopList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetRouteNexthopList returns an instance of Route_Nexthop_List.
func (i *ServerImpl) GnmiGetRouteNexthopList(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.RouteNexthopList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToRouteNexthopList(args...)
}

// GnmiPostRouteNexthopList adds an instance of Route_Nexthop_List.
func (i *ServerImpl) GnmiPostRouteNexthopList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.RouteNexthopList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Route_Nexthop_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiRouteNexthopList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.RouteNexthopList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitch deletes an instance of Switch.
func (i *ServerImpl) GnmiDeleteSwitch(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitch(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitch returns an instance of Switch.
func (i *ServerImpl) GnmiGetSwitch(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.Switch, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitch(args...)
}

// GnmiPostSwitch adds an instance of Switch.
func (i *ServerImpl) GnmiPostSwitch(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.Switch)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitch(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.Switch to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchRole deletes an instance of Switch.Role.
func (i *ServerImpl) GnmiDeleteSwitchRole(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchRole(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchRole returns an instance of Switch.Role.
func (i *ServerImpl) GnmiGetSwitchRole(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchRole, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchRole(args...)
}

// GnmiPostSwitchRole adds an instance of Switch.Role.
func (i *ServerImpl) GnmiPostSwitchRole(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchRole)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch.Role %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchRole(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchRole to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchModel deletes an instance of Switch-model.
func (i *ServerImpl) GnmiDeleteSwitchModel(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchModel(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchModel returns an instance of Switch-model.
func (i *ServerImpl) GnmiGetSwitchModel(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchModel, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchModel(args...)
}

// GnmiPostSwitchModel adds an instance of Switch-model.
func (i *ServerImpl) GnmiPostSwitchModel(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchModel)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch-model %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchModel(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchModel to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchModelFormFactor deletes an instance of SwitchModel.FormFactor.
func (i *ServerImpl) GnmiDeleteSwitchModelFormFactor(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchModelFormFactor(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchModelFormFactor returns an instance of SwitchModel.FormFactor.
func (i *ServerImpl) GnmiGetSwitchModelFormFactor(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchModelFormFactor, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchModelFormFactor(args...)
}

// GnmiPostSwitchModelFormFactor adds an instance of SwitchModel.FormFactor.
func (i *ServerImpl) GnmiPostSwitchModelFormFactor(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchModelFormFactor)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.SwitchModel.FormFactor %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchModelFormFactor(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchModelFormFactor to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchModelPipeline deletes an instance of SwitchModel.Pipeline.
func (i *ServerImpl) GnmiDeleteSwitchModelPipeline(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchModelPipeline(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchModelPipeline returns an instance of SwitchModel.Pipeline.
func (i *ServerImpl) GnmiGetSwitchModelPipeline(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchModelPipeline, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchModelPipeline(args...)
}

// GnmiPostSwitchModelPipeline adds an instance of SwitchModel.Pipeline.
func (i *ServerImpl) GnmiPostSwitchModelPipeline(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchModelPipeline)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.SwitchModel.Pipeline %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchModelPipeline(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchModelPipeline to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchModelAttribute deletes an instance of Switch-model_Attribute.
func (i *ServerImpl) GnmiDeleteSwitchModelAttribute(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchModelAttribute(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchModelAttribute returns an instance of Switch-model_Attribute.
func (i *ServerImpl) GnmiGetSwitchModelAttribute(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchModelAttribute, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchModelAttribute(args...)
}

// GnmiPostSwitchModelAttribute adds an instance of Switch-model_Attribute.
func (i *ServerImpl) GnmiPostSwitchModelAttribute(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchModelAttribute)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch-model_Attribute %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchModelAttribute(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchModelAttribute to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchModelAttributeList deletes an instance of Switch-model_Attribute_List.
func (i *ServerImpl) GnmiDeleteSwitchModelAttributeList(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchModelAttributeList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchModelAttributeList returns an instance of Switch-model_Attribute_List.
func (i *ServerImpl) GnmiGetSwitchModelAttributeList(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchModelAttributeList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchModelAttributeList(args...)
}

// GnmiPostSwitchModelAttributeList adds an instance of Switch-model_Attribute_List.
func (i *ServerImpl) GnmiPostSwitchModelAttributeList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchModelAttributeList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch-model_Attribute_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchModelAttributeList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchModelAttributeList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchModelList deletes an instance of Switch-model_List.
func (i *ServerImpl) GnmiDeleteSwitchModelList(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchModelList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchModelList returns an instance of Switch-model_List.
func (i *ServerImpl) GnmiGetSwitchModelList(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchModelList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchModelList(args...)
}

// GnmiPostSwitchModelList adds an instance of Switch-model_List.
func (i *ServerImpl) GnmiPostSwitchModelList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchModelList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch-model_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchModelList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchModelList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchModelPort deletes an instance of Switch-model_Port.
func (i *ServerImpl) GnmiDeleteSwitchModelPort(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchModelPort(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchModelPort returns an instance of Switch-model_Port.
func (i *ServerImpl) GnmiGetSwitchModelPort(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchModelPort, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchModelPort(args...)
}

// GnmiPostSwitchModelPort adds an instance of Switch-model_Port.
func (i *ServerImpl) GnmiPostSwitchModelPort(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchModelPort)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch-model_Port %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchModelPort(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchModelPort to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchModelPortList deletes an instance of Switch-model_Port_List.
func (i *ServerImpl) GnmiDeleteSwitchModelPortList(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchModelPortList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchModelPortList returns an instance of Switch-model_Port_List.
func (i *ServerImpl) GnmiGetSwitchModelPortList(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchModelPortList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchModelPortList(args...)
}

// GnmiPostSwitchModelPortList adds an instance of Switch-model_Port_List.
func (i *ServerImpl) GnmiPostSwitchModelPortList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchModelPortList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch-model_Port_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchModelPortList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchModelPortList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchModelPortSpeeds deletes an instance of Switch-model_Port_Speeds.
func (i *ServerImpl) GnmiDeleteSwitchModelPortSpeeds(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchModelPortSpeeds(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchModelPortSpeeds returns an instance of Switch-model_Port_Speeds.
func (i *ServerImpl) GnmiGetSwitchModelPortSpeeds(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchModelPortSpeeds, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchModelPortSpeeds(args...)
}

// GnmiPostSwitchModelPortSpeeds adds an instance of Switch-model_Port_Speeds.
func (i *ServerImpl) GnmiPostSwitchModelPortSpeeds(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchModelPortSpeeds)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch-model_Port_Speeds %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchModelPortSpeeds(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchModelPortSpeeds to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchAttribute deletes an instance of Switch_Attribute.
func (i *ServerImpl) GnmiDeleteSwitchAttribute(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchAttribute(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchAttribute returns an instance of Switch_Attribute.
func (i *ServerImpl) GnmiGetSwitchAttribute(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchAttribute, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchAttribute(args...)
}

// GnmiPostSwitchAttribute adds an instance of Switch_Attribute.
func (i *ServerImpl) GnmiPostSwitchAttribute(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchAttribute)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch_Attribute %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchAttribute(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchAttribute to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchAttributeList deletes an instance of Switch_Attribute_List.
func (i *ServerImpl) GnmiDeleteSwitchAttributeList(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchAttributeList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchAttributeList returns an instance of Switch_Attribute_List.
func (i *ServerImpl) GnmiGetSwitchAttributeList(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchAttributeList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchAttributeList(args...)
}

// GnmiPostSwitchAttributeList adds an instance of Switch_Attribute_List.
func (i *ServerImpl) GnmiPostSwitchAttributeList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchAttributeList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch_Attribute_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchAttributeList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchAttributeList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchDhcpConnectPoint deletes an instance of Switch_Dhcp-connect-point.
func (i *ServerImpl) GnmiDeleteSwitchDhcpConnectPoint(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchDhcpConnectPoint(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchDhcpConnectPoint returns an instance of Switch_Dhcp-connect-point.
func (i *ServerImpl) GnmiGetSwitchDhcpConnectPoint(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchDhcpConnectPoint, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchDhcpConnectPoint(args...)
}

// GnmiPostSwitchDhcpConnectPoint adds an instance of Switch_Dhcp-connect-point.
func (i *ServerImpl) GnmiPostSwitchDhcpConnectPoint(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchDhcpConnectPoint)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch_Dhcp-connect-point %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchDhcpConnectPoint(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchDhcpConnectPoint to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchDhcpConnectPointConnectPoint deletes an instance of Switch_Dhcp-connect-point_Connect-point.
func (i *ServerImpl) GnmiDeleteSwitchDhcpConnectPointConnectPoint(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchDhcpConnectPointConnectPoint(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchDhcpConnectPointConnectPoint returns an instance of Switch_Dhcp-connect-point_Connect-point.
func (i *ServerImpl) GnmiGetSwitchDhcpConnectPointConnectPoint(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchDhcpConnectPointConnectPoint, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchDhcpConnectPointConnectPoint(args...)
}

// GnmiPostSwitchDhcpConnectPointConnectPoint adds an instance of Switch_Dhcp-connect-point_Connect-point.
func (i *ServerImpl) GnmiPostSwitchDhcpConnectPointConnectPoint(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchDhcpConnectPointConnectPoint)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch_Dhcp-connect-point_Connect-point %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchDhcpConnectPointConnectPoint(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchDhcpConnectPointConnectPoint to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchDhcpConnectPointList deletes an instance of Switch_Dhcp-connect-point_List.
func (i *ServerImpl) GnmiDeleteSwitchDhcpConnectPointList(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchDhcpConnectPointList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchDhcpConnectPointList returns an instance of Switch_Dhcp-connect-point_List.
func (i *ServerImpl) GnmiGetSwitchDhcpConnectPointList(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchDhcpConnectPointList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchDhcpConnectPointList(args...)
}

// GnmiPostSwitchDhcpConnectPointList adds an instance of Switch_Dhcp-connect-point_List.
func (i *ServerImpl) GnmiPostSwitchDhcpConnectPointList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchDhcpConnectPointList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch_Dhcp-connect-point_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchDhcpConnectPointList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchDhcpConnectPointList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchList deletes an instance of Switch_List.
func (i *ServerImpl) GnmiDeleteSwitchList(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchList returns an instance of Switch_List.
func (i *ServerImpl) GnmiGetSwitchList(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchList(args...)
}

// GnmiPostSwitchList adds an instance of Switch_List.
func (i *ServerImpl) GnmiPostSwitchList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchManagement deletes an instance of Switch_Management.
func (i *ServerImpl) GnmiDeleteSwitchManagement(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchManagement(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchManagement returns an instance of Switch_Management.
func (i *ServerImpl) GnmiGetSwitchManagement(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchManagement, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchManagement(args...)
}

// GnmiPostSwitchManagement adds an instance of Switch_Management.
func (i *ServerImpl) GnmiPostSwitchManagement(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchManagement)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch_Management %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchManagement(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchManagement to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchPort deletes an instance of Switch_Port.
func (i *ServerImpl) GnmiDeleteSwitchPort(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchPort(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchPort returns an instance of Switch_Port.
func (i *ServerImpl) GnmiGetSwitchPort(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchPort, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchPort(args...)
}

// GnmiPostSwitchPort adds an instance of Switch_Port.
func (i *ServerImpl) GnmiPostSwitchPort(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchPort)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch_Port %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchPort(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchPort to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchPortSpeed deletes an instance of SwitchPort.Speed.
func (i *ServerImpl) GnmiDeleteSwitchPortSpeed(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchPortSpeed(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchPortSpeed returns an instance of SwitchPort.Speed.
func (i *ServerImpl) GnmiGetSwitchPortSpeed(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchPortSpeed, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchPortSpeed(args...)
}

// GnmiPostSwitchPortSpeed adds an instance of SwitchPort.Speed.
func (i *ServerImpl) GnmiPostSwitchPortSpeed(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchPortSpeed)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.SwitchPort.Speed %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchPortSpeed(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchPortSpeed to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchPortList deletes an instance of Switch_Port_List.
func (i *ServerImpl) GnmiDeleteSwitchPortList(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchPortList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchPortList returns an instance of Switch_Port_List.
func (i *ServerImpl) GnmiGetSwitchPortList(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchPortList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchPortList(args...)
}

// GnmiPostSwitchPortList adds an instance of Switch_Port_List.
func (i *ServerImpl) GnmiPostSwitchPortList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchPortList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch_Port_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchPortList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchPortList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchPortVlans deletes an instance of Switch_Port_Vlans.
func (i *ServerImpl) GnmiDeleteSwitchPortVlans(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchPortVlans(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchPortVlans returns an instance of Switch_Port_Vlans.
func (i *ServerImpl) GnmiGetSwitchPortVlans(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchPortVlans, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchPortVlans(args...)
}

// GnmiPostSwitchPortVlans adds an instance of Switch_Port_Vlans.
func (i *ServerImpl) GnmiPostSwitchPortVlans(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchPortVlans)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch_Port_Vlans %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchPortVlans(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchPortVlans to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchSwitchPair deletes an instance of Switch_Switch-pair.
func (i *ServerImpl) GnmiDeleteSwitchSwitchPair(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchSwitchPair(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchSwitchPair returns an instance of Switch_Switch-pair.
func (i *ServerImpl) GnmiGetSwitchSwitchPair(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchSwitchPair, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchSwitchPair(args...)
}

// GnmiPostSwitchSwitchPair adds an instance of Switch_Switch-pair.
func (i *ServerImpl) GnmiPostSwitchSwitchPair(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchSwitchPair)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch_Switch-pair %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchSwitchPair(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchSwitchPair to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchVlan deletes an instance of Switch_Vlan.
func (i *ServerImpl) GnmiDeleteSwitchVlan(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchVlan(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchVlan returns an instance of Switch_Vlan.
func (i *ServerImpl) GnmiGetSwitchVlan(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchVlan, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchVlan(args...)
}

// GnmiPostSwitchVlan adds an instance of Switch_Vlan.
func (i *ServerImpl) GnmiPostSwitchVlan(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchVlan)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch_Vlan %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchVlan(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchVlan to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSwitchVlanList deletes an instance of Switch_Vlan_List.
func (i *ServerImpl) GnmiDeleteSwitchVlanList(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSwitchVlanList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSwitchVlanList returns an instance of Switch_Vlan_List.
func (i *ServerImpl) GnmiGetSwitchVlanList(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.SwitchVlanList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSwitchVlanList(args...)
}

// GnmiPostSwitchVlanList adds an instance of Switch_Vlan_List.
func (i *ServerImpl) GnmiPostSwitchVlanList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SwitchVlanList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Switch_Vlan_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSwitchVlanList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SwitchVlanList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteFabricId deletes an instance of fabric-id.
func (i *ServerImpl) GnmiDeleteFabricId(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetFabricId(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetFabricId returns an instance of fabric-id.
func (i *ServerImpl) GnmiGetFabricId(ctx context.Context,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*externalRef0.FabricId, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToFabricId(args...)
}

// GnmiPostFabricId adds an instance of fabric-id.
func (i *ServerImpl) GnmiPostFabricId(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef0.FabricId, args ...string) (*string, error) {

	jsonObj := new(externalRef0.FabricId)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.fabric-id %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiFabricId(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.FabricId to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

//Ignoring RequestBodyRoute

//Ignoring RequestBodyRouteNexthop

//Ignoring RequestBodySwitch

//Ignoring RequestBodySwitchModel

//Ignoring RequestBodySwitchModelAttribute

//Ignoring RequestBodySwitchModelPort

//Ignoring RequestBodySwitchAttribute

//Ignoring RequestBodySwitchDhcpConnectPoint

//Ignoring RequestBodySwitchManagement

//Ignoring RequestBodySwitchPort

//Ignoring RequestBodySwitchPortVlans

//Ignoring RequestBodySwitchSwitchPair

//Ignoring RequestBodySwitchVlan

type Translator interface {
	toAdditionalPropertiesUnchTarget(args ...string) (*externalRef0.AdditionalPropertiesUnchTarget, error)
	toAdditionalPropertyUnchanged(args ...string) (*externalRef0.AdditionalPropertyUnchanged, error)
	toRoute(args ...string) (*externalRef0.Route, error)
	toRouteList(args ...string) (*externalRef0.RouteList, error)
	toRouteNexthop(args ...string) (*externalRef0.RouteNexthop, error)
	toRouteNexthopList(args ...string) (*externalRef0.RouteNexthopList, error)
	toSwitch(args ...string) (*externalRef0.Switch, error)
	toSwitchRole(args ...string) (*externalRef0.SwitchRole, error)
	toSwitchModel(args ...string) (*externalRef0.SwitchModel, error)
	toSwitchModelFormFactor(args ...string) (*externalRef0.SwitchModelFormFactor, error)
	toSwitchModelPipeline(args ...string) (*externalRef0.SwitchModelPipeline, error)
	toSwitchModelAttribute(args ...string) (*externalRef0.SwitchModelAttribute, error)
	toSwitchModelAttributeList(args ...string) (*externalRef0.SwitchModelAttributeList, error)
	toSwitchModelList(args ...string) (*externalRef0.SwitchModelList, error)
	toSwitchModelPort(args ...string) (*externalRef0.SwitchModelPort, error)
	toSwitchModelPortList(args ...string) (*externalRef0.SwitchModelPortList, error)
	toSwitchModelPortSpeeds(args ...string) (*externalRef0.SwitchModelPortSpeeds, error)
	toSwitchAttribute(args ...string) (*externalRef0.SwitchAttribute, error)
	toSwitchAttributeList(args ...string) (*externalRef0.SwitchAttributeList, error)
	toSwitchDhcpConnectPoint(args ...string) (*externalRef0.SwitchDhcpConnectPoint, error)
	toSwitchDhcpConnectPointConnectPoint(args ...string) (*externalRef0.SwitchDhcpConnectPointConnectPoint, error)
	toSwitchDhcpConnectPointList(args ...string) (*externalRef0.SwitchDhcpConnectPointList, error)
	toSwitchList(args ...string) (*externalRef0.SwitchList, error)
	toSwitchManagement(args ...string) (*externalRef0.SwitchManagement, error)
	toSwitchPort(args ...string) (*externalRef0.SwitchPort, error)
	toSwitchPortSpeed(args ...string) (*externalRef0.SwitchPortSpeed, error)
	toSwitchPortList(args ...string) (*externalRef0.SwitchPortList, error)
	toSwitchPortVlans(args ...string) (*externalRef0.SwitchPortVlans, error)
	toSwitchSwitchPair(args ...string) (*externalRef0.SwitchSwitchPair, error)
	toSwitchVlan(args ...string) (*externalRef0.SwitchVlan, error)
	toSwitchVlanList(args ...string) (*externalRef0.SwitchVlanList, error)
	toFabricId(args ...string) (*externalRef0.FabricId, error)
}

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating param-types
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating request-bodies

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating additional-properties
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating additional-properties
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// server-interface template override

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

const authorization = "Authorization"

// Implement the Server Interface for access to gNMI
var log = logging.GetLogger("model_0_0_0")

// ServerImpl -
type ServerImpl struct {
	GnmiClient  southbound.GnmiClient
	GnmiTimeout time.Duration
}

// GetRouteList impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/route
func (i *ServerImpl) GetRouteList(ctx echo.Context, fabricId externalRef0.FabricId) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetRouteList(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/route", fabricId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetRouteList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteRoute impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/route/{route-id}
func (i *ServerImpl) DeleteRoute(ctx echo.Context, fabricId externalRef0.FabricId, routeId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteRoute(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/route/{route-id}", fabricId, routeId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteRoute")
	return ctx.JSON(http.StatusOK, response)
}

// GetRoute impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/route/{route-id}
func (i *ServerImpl) GetRoute(ctx echo.Context, fabricId externalRef0.FabricId, routeId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetRoute(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/route/{route-id}", fabricId, routeId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetRoute")
	return ctx.JSON(http.StatusOK, response)
}

// PostRoute impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/route/{route-id}
func (i *ServerImpl) PostRoute(ctx echo.Context, fabricId externalRef0.FabricId, routeId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostRoute(gnmiCtx, body, "/sdn-fabric/v0.1.0/{fabric-id}/route/{route-id}", fabricId, routeId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostRoute")
	return ctx.JSON(http.StatusOK, response)
}

// GetRouteNexthopList impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/route/{route-id}/nexthop
func (i *ServerImpl) GetRouteNexthopList(ctx echo.Context, fabricId externalRef0.FabricId, routeId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetRouteNexthopList(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/route/{route-id}/nexthop", fabricId, routeId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetRouteNexthopList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteRouteNexthop impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/route/{route-id}/nexthop/{index}
func (i *ServerImpl) DeleteRouteNexthop(ctx echo.Context, fabricId externalRef0.FabricId, routeId string, index string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteRouteNexthop(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/route/{route-id}/nexthop/{index}", fabricId, routeId, index)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteRouteNexthop")
	return ctx.JSON(http.StatusOK, response)
}

// GetRouteNexthop impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/route/{route-id}/nexthop/{index}
func (i *ServerImpl) GetRouteNexthop(ctx echo.Context, fabricId externalRef0.FabricId, routeId string, index string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetRouteNexthop(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/route/{route-id}/nexthop/{index}", fabricId, routeId, index)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetRouteNexthop")
	return ctx.JSON(http.StatusOK, response)
}

// PostRouteNexthop impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/route/{route-id}/nexthop/{index}
func (i *ServerImpl) PostRouteNexthop(ctx echo.Context, fabricId externalRef0.FabricId, routeId string, index string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostRouteNexthop(gnmiCtx, body, "/sdn-fabric/v0.1.0/{fabric-id}/route/{route-id}/nexthop/{index}", fabricId, routeId, index)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostRouteNexthop")
	return ctx.JSON(http.StatusOK, response)
}

// GetSwitchList impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch
func (i *ServerImpl) GetSwitchList(ctx echo.Context, fabricId externalRef0.FabricId) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSwitchList(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch", fabricId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSwitchList")
	return ctx.JSON(http.StatusOK, response)
}

// GetSwitchModelList impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch-model
func (i *ServerImpl) GetSwitchModelList(ctx echo.Context, fabricId externalRef0.FabricId) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSwitchModelList(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch-model", fabricId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSwitchModelList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSwitchModel impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}
func (i *ServerImpl) DeleteSwitchModel(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSwitchModel(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}", fabricId, switchModelId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSwitchModel")
	return ctx.JSON(http.StatusOK, response)
}

// GetSwitchModel impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}
func (i *ServerImpl) GetSwitchModel(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSwitchModel(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}", fabricId, switchModelId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSwitchModel")
	return ctx.JSON(http.StatusOK, response)
}

// PostSwitchModel impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}
func (i *ServerImpl) PostSwitchModel(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSwitchModel(gnmiCtx, body, "/sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}", fabricId, switchModelId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSwitchModel")
	return ctx.JSON(http.StatusOK, response)
}

// GetSwitchModelAttributeList impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}/attribute
func (i *ServerImpl) GetSwitchModelAttributeList(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSwitchModelAttributeList(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}/attribute", fabricId, switchModelId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSwitchModelAttributeList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSwitchModelAttribute impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}/attribute/{attribute-key}
func (i *ServerImpl) DeleteSwitchModelAttribute(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string, attributeKey string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSwitchModelAttribute(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}/attribute/{attribute-key}", fabricId, switchModelId, attributeKey)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSwitchModelAttribute")
	return ctx.JSON(http.StatusOK, response)
}

// GetSwitchModelAttribute impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}/attribute/{attribute-key}
func (i *ServerImpl) GetSwitchModelAttribute(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string, attributeKey string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSwitchModelAttribute(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}/attribute/{attribute-key}", fabricId, switchModelId, attributeKey)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSwitchModelAttribute")
	return ctx.JSON(http.StatusOK, response)
}

// PostSwitchModelAttribute impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}/attribute/{attribute-key}
func (i *ServerImpl) PostSwitchModelAttribute(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string, attributeKey string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSwitchModelAttribute(gnmiCtx, body, "/sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}/attribute/{attribute-key}", fabricId, switchModelId, attributeKey)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSwitchModelAttribute")
	return ctx.JSON(http.StatusOK, response)
}

// GetSwitchModelPortList impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}/port
func (i *ServerImpl) GetSwitchModelPortList(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSwitchModelPortList(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}/port", fabricId, switchModelId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSwitchModelPortList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSwitchModelPort impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}/port/{cage-number}/{channel-number}
func (i *ServerImpl) DeleteSwitchModelPort(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string, cageNumber string, channelNumber string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSwitchModelPort(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}/port/{cage-number}/{channel-number}", fabricId, switchModelId, cageNumber, channelNumber)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSwitchModelPort")
	return ctx.JSON(http.StatusOK, response)
}

// GetSwitchModelPort impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}/port/{cage-number}/{channel-number}
func (i *ServerImpl) GetSwitchModelPort(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string, cageNumber string, channelNumber string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSwitchModelPort(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}/port/{cage-number}/{channel-number}", fabricId, switchModelId, cageNumber, channelNumber)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSwitchModelPort")
	return ctx.JSON(http.StatusOK, response)
}

// PostSwitchModelPort impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}/port/{cage-number}/{channel-number}
func (i *ServerImpl) PostSwitchModelPort(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string, cageNumber string, channelNumber string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSwitchModelPort(gnmiCtx, body, "/sdn-fabric/v0.1.0/{fabric-id}/switch-model/{switch-model-id}/port/{cage-number}/{channel-number}", fabricId, switchModelId, cageNumber, channelNumber)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSwitchModelPort")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSwitch impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}
func (i *ServerImpl) DeleteSwitch(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSwitch(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}", fabricId, switchId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSwitch")
	return ctx.JSON(http.StatusOK, response)
}

// GetSwitch impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}
func (i *ServerImpl) GetSwitch(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSwitch(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}", fabricId, switchId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSwitch")
	return ctx.JSON(http.StatusOK, response)
}

// PostSwitch impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}
func (i *ServerImpl) PostSwitch(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSwitch(gnmiCtx, body, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}", fabricId, switchId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSwitch")
	return ctx.JSON(http.StatusOK, response)
}

// GetSwitchAttributeList impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/attribute
func (i *ServerImpl) GetSwitchAttributeList(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSwitchAttributeList(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/attribute", fabricId, switchId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSwitchAttributeList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSwitchAttribute impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/attribute/{attribute-key}
func (i *ServerImpl) DeleteSwitchAttribute(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, attributeKey string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSwitchAttribute(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/attribute/{attribute-key}", fabricId, switchId, attributeKey)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSwitchAttribute")
	return ctx.JSON(http.StatusOK, response)
}

// GetSwitchAttribute impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/attribute/{attribute-key}
func (i *ServerImpl) GetSwitchAttribute(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, attributeKey string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSwitchAttribute(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/attribute/{attribute-key}", fabricId, switchId, attributeKey)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSwitchAttribute")
	return ctx.JSON(http.StatusOK, response)
}

// PostSwitchAttribute impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/attribute/{attribute-key}
func (i *ServerImpl) PostSwitchAttribute(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, attributeKey string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSwitchAttribute(gnmiCtx, body, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/attribute/{attribute-key}", fabricId, switchId, attributeKey)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSwitchAttribute")
	return ctx.JSON(http.StatusOK, response)
}

// GetSwitchDhcpConnectPointList impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/dhcp-connect-point
func (i *ServerImpl) GetSwitchDhcpConnectPointList(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSwitchDhcpConnectPointList(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/dhcp-connect-point", fabricId, switchId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSwitchDhcpConnectPointList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSwitchDhcpConnectPoint impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/dhcp-connect-point/{dhcp-id}
func (i *ServerImpl) DeleteSwitchDhcpConnectPoint(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, dhcpId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSwitchDhcpConnectPoint(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/dhcp-connect-point/{dhcp-id}", fabricId, switchId, dhcpId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSwitchDhcpConnectPoint")
	return ctx.JSON(http.StatusOK, response)
}

// GetSwitchDhcpConnectPoint impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/dhcp-connect-point/{dhcp-id}
func (i *ServerImpl) GetSwitchDhcpConnectPoint(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, dhcpId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSwitchDhcpConnectPoint(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/dhcp-connect-point/{dhcp-id}", fabricId, switchId, dhcpId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSwitchDhcpConnectPoint")
	return ctx.JSON(http.StatusOK, response)
}

// PostSwitchDhcpConnectPoint impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/dhcp-connect-point/{dhcp-id}
func (i *ServerImpl) PostSwitchDhcpConnectPoint(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, dhcpId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSwitchDhcpConnectPoint(gnmiCtx, body, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/dhcp-connect-point/{dhcp-id}", fabricId, switchId, dhcpId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSwitchDhcpConnectPoint")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSwitchManagement impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/management
func (i *ServerImpl) DeleteSwitchManagement(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSwitchManagement(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/management", fabricId, switchId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSwitchManagement")
	return ctx.JSON(http.StatusOK, response)
}

// GetSwitchManagement impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/management
func (i *ServerImpl) GetSwitchManagement(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSwitchManagement(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/management", fabricId, switchId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSwitchManagement")
	return ctx.JSON(http.StatusOK, response)
}

// PostSwitchManagement impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/management
func (i *ServerImpl) PostSwitchManagement(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSwitchManagement(gnmiCtx, body, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/management", fabricId, switchId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSwitchManagement")
	return ctx.JSON(http.StatusOK, response)
}

// GetSwitchPortList impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/port
func (i *ServerImpl) GetSwitchPortList(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSwitchPortList(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/port", fabricId, switchId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSwitchPortList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSwitchPort impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number}
func (i *ServerImpl) DeleteSwitchPort(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, cageNumber string, channelNumber string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSwitchPort(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number}", fabricId, switchId, cageNumber, channelNumber)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSwitchPort")
	return ctx.JSON(http.StatusOK, response)
}

// GetSwitchPort impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number}
func (i *ServerImpl) GetSwitchPort(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, cageNumber string, channelNumber string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSwitchPort(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number}", fabricId, switchId, cageNumber, channelNumber)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSwitchPort")
	return ctx.JSON(http.StatusOK, response)
}

// PostSwitchPort impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number}
func (i *ServerImpl) PostSwitchPort(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, cageNumber string, channelNumber string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSwitchPort(gnmiCtx, body, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number}", fabricId, switchId, cageNumber, channelNumber)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSwitchPort")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSwitchPortVlans impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number}/vlans
func (i *ServerImpl) DeleteSwitchPortVlans(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, cageNumber string, channelNumber string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSwitchPortVlans(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number}/vlans", fabricId, switchId, cageNumber, channelNumber)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSwitchPortVlans")
	return ctx.JSON(http.StatusOK, response)
}

// GetSwitchPortVlans impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number}/vlans
func (i *ServerImpl) GetSwitchPortVlans(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, cageNumber string, channelNumber string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSwitchPortVlans(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number}/vlans", fabricId, switchId, cageNumber, channelNumber)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSwitchPortVlans")
	return ctx.JSON(http.StatusOK, response)
}

// PostSwitchPortVlans impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number}/vlans
func (i *ServerImpl) PostSwitchPortVlans(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, cageNumber string, channelNumber string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSwitchPortVlans(gnmiCtx, body, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number}/vlans", fabricId, switchId, cageNumber, channelNumber)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSwitchPortVlans")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSwitchSwitchPair impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/switch-pair
func (i *ServerImpl) DeleteSwitchSwitchPair(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSwitchSwitchPair(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/switch-pair", fabricId, switchId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSwitchSwitchPair")
	return ctx.JSON(http.StatusOK, response)
}

// GetSwitchSwitchPair impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/switch-pair
func (i *ServerImpl) GetSwitchSwitchPair(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSwitchSwitchPair(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/switch-pair", fabricId, switchId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSwitchSwitchPair")
	return ctx.JSON(http.StatusOK, response)
}

// PostSwitchSwitchPair impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/switch-pair
func (i *ServerImpl) PostSwitchSwitchPair(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSwitchSwitchPair(gnmiCtx, body, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/switch-pair", fabricId, switchId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSwitchSwitchPair")
	return ctx.JSON(http.StatusOK, response)
}

// GetSwitchVlanList impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/vlan
func (i *ServerImpl) GetSwitchVlanList(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSwitchVlanList(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/vlan", fabricId, switchId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSwitchVlanList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSwitchVlan impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/vlan/{vlan-id}
func (i *ServerImpl) DeleteSwitchVlan(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, vlanId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSwitchVlan(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/vlan/{vlan-id}", fabricId, switchId, vlanId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSwitchVlan")
	return ctx.JSON(http.StatusOK, response)
}

// GetSwitchVlan impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/vlan/{vlan-id}
func (i *ServerImpl) GetSwitchVlan(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, vlanId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSwitchVlan(gnmiCtx, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/vlan/{vlan-id}", fabricId, switchId, vlanId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSwitchVlan")
	return ctx.JSON(http.StatusOK, response)
}

// PostSwitchVlan impl of gNMI access at /sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/vlan/{vlan-id}
func (i *ServerImpl) PostSwitchVlan(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, vlanId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSwitchVlan(gnmiCtx, body, "/sdn-fabric/v0.1.0/{fabric-id}/switch/{switch-id}/vlan/{vlan-id}", fabricId, switchId, vlanId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSwitchVlan")
	return ctx.JSON(http.StatusOK, response)
}

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// register template override
