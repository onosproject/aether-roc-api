// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"github.com/labstack/echo/v4"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/sdn_fabric_0_1_0/types"
	"github.com/onosproject/aether-roc-api/pkg/middleware/openapi3mw"
)

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// GET /dhcp-server List
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/dhcp-server)
	GetDhcpServerList(ctx echo.Context, fabricId externalRef0.FabricId) error
	// DELETE /dhcp-server
	// (DELETE /sdn-fabric/v0.1.x/{fabric-id}/dhcp-server/{dhcp-server-id})
	DeleteDhcpServer(ctx echo.Context, fabricId externalRef0.FabricId, dhcpServerId string) error
	// GET /dhcp-server Container
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/dhcp-server/{dhcp-server-id})
	GetDhcpServer(ctx echo.Context, fabricId externalRef0.FabricId, dhcpServerId string) error
	// POST /dhcp-server
	// (POST /sdn-fabric/v0.1.x/{fabric-id}/dhcp-server/{dhcp-server-id})
	PostDhcpServer(ctx echo.Context, fabricId externalRef0.FabricId, dhcpServerId string) error
	// GET /route List
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/route)
	GetRouteList(ctx echo.Context, fabricId externalRef0.FabricId) error
	// DELETE /route
	// (DELETE /sdn-fabric/v0.1.x/{fabric-id}/route/{route-id})
	DeleteRoute(ctx echo.Context, fabricId externalRef0.FabricId, routeId string) error
	// GET /route Container
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/route/{route-id})
	GetRoute(ctx echo.Context, fabricId externalRef0.FabricId, routeId string) error
	// POST /route
	// (POST /sdn-fabric/v0.1.x/{fabric-id}/route/{route-id})
	PostRoute(ctx echo.Context, fabricId externalRef0.FabricId, routeId string) error
	// GET /switch List
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch)
	GetSwitchList(ctx echo.Context, fabricId externalRef0.FabricId) error
	// GET /switch-model List
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch-model)
	GetSwitchModelList(ctx echo.Context, fabricId externalRef0.FabricId) error
	// DELETE /switch-model
	// (DELETE /sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id})
	DeleteSwitchModel(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string) error
	// GET /switch-model Container
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id})
	GetSwitchModel(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string) error
	// POST /switch-model
	// (POST /sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id})
	PostSwitchModel(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string) error
	// GET /switch-model/{switch-model-id}/attribute List
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id}/attribute)
	GetSwitchModelAttributeList(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string) error
	// DELETE /switch-model/{switch-model-id}/attribute
	// (DELETE /sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id}/attribute/{attribute-key})
	DeleteSwitchModelAttribute(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string, attributeKey string) error
	// GET /switch-model/{switch-model-id}/attribute Container
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id}/attribute/{attribute-key})
	GetSwitchModelAttribute(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string, attributeKey string) error
	// POST /switch-model/{switch-model-id}/attribute
	// (POST /sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id}/attribute/{attribute-key})
	PostSwitchModelAttribute(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string, attributeKey string) error
	// GET /switch-model/{switch-model-id}/port List
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id}/port)
	GetSwitchModelPortList(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string) error
	// DELETE /switch-model/{switch-model-id}/port
	// (DELETE /sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id}/port/{cage-number})
	DeleteSwitchModelPort(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string, cageNumber string) error
	// GET /switch-model/{switch-model-id}/port Container
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id}/port/{cage-number})
	GetSwitchModelPort(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string, cageNumber string) error
	// POST /switch-model/{switch-model-id}/port
	// (POST /sdn-fabric/v0.1.x/{fabric-id}/switch-model/{switch-model-id}/port/{cage-number})
	PostSwitchModelPort(ctx echo.Context, fabricId externalRef0.FabricId, switchModelId string, cageNumber string) error
	// DELETE /switch
	// (DELETE /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id})
	DeleteSwitch(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error
	// GET /switch Container
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id})
	GetSwitch(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error
	// POST /switch
	// (POST /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id})
	PostSwitch(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error
	// GET /switch/{switch-id}/attribute List
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/attribute)
	GetSwitchAttributeList(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error
	// DELETE /switch/{switch-id}/attribute
	// (DELETE /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/attribute/{attribute-key})
	DeleteSwitchAttribute(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, attributeKey string) error
	// GET /switch/{switch-id}/attribute Container
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/attribute/{attribute-key})
	GetSwitchAttribute(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, attributeKey string) error
	// POST /switch/{switch-id}/attribute
	// (POST /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/attribute/{attribute-key})
	PostSwitchAttribute(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, attributeKey string) error
	// DELETE /switch/{switch-id}/management
	// (DELETE /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/management)
	DeleteSwitchManagement(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error
	// GET /switch/{switch-id}/management Container
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/management)
	GetSwitchManagement(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error
	// POST /switch/{switch-id}/management
	// (POST /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/management)
	PostSwitchManagement(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error
	// GET /switch/{switch-id}/port List
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/port)
	GetSwitchPortList(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error
	// DELETE /switch/{switch-id}/port
	// (DELETE /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number})
	DeleteSwitchPort(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, cageNumber string, channelNumber string) error
	// GET /switch/{switch-id}/port Container
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number})
	GetSwitchPort(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, cageNumber string, channelNumber string) error
	// POST /switch/{switch-id}/port
	// (POST /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number})
	PostSwitchPort(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, cageNumber string, channelNumber string) error
	// GET /switch/{switch-id}/port/{cage-number}/{channel-number}/state Container
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number}/state)
	GetSwitchPortState(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, cageNumber string, channelNumber string) error
	// DELETE /switch/{switch-id}/port/{cage-number}/{channel-number}/vlans
	// (DELETE /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number}/vlans)
	DeleteSwitchPortVlans(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, cageNumber string, channelNumber string) error
	// GET /switch/{switch-id}/port/{cage-number}/{channel-number}/vlans Container
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number}/vlans)
	GetSwitchPortVlans(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, cageNumber string, channelNumber string) error
	// POST /switch/{switch-id}/port/{cage-number}/{channel-number}/vlans
	// (POST /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/port/{cage-number}/{channel-number}/vlans)
	PostSwitchPortVlans(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, cageNumber string, channelNumber string) error
	// GET /switch/{switch-id}/state Container
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/state)
	GetSwitchState(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error
	// DELETE /switch/{switch-id}/switch-pair
	// (DELETE /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/switch-pair)
	DeleteSwitchSwitchPair(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error
	// GET /switch/{switch-id}/switch-pair Container
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/switch-pair)
	GetSwitchSwitchPair(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error
	// POST /switch/{switch-id}/switch-pair
	// (POST /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/switch-pair)
	PostSwitchSwitchPair(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error
	// GET /switch/{switch-id}/switch-pair/pairing-port List
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/switch-pair/pairing-port)
	GetSwitchSwitchPairPairingPortList(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error
	// DELETE /switch/{switch-id}/switch-pair/pairing-port
	// (DELETE /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/switch-pair/pairing-port/{cage-number}/{channel-number})
	DeleteSwitchSwitchPairPairingPort(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, cageNumber string, channelNumber string) error
	// GET /switch/{switch-id}/switch-pair/pairing-port Container
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/switch-pair/pairing-port/{cage-number}/{channel-number})
	GetSwitchSwitchPairPairingPort(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, cageNumber string, channelNumber string) error
	// POST /switch/{switch-id}/switch-pair/pairing-port
	// (POST /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/switch-pair/pairing-port/{cage-number}/{channel-number})
	PostSwitchSwitchPairPairingPort(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, cageNumber string, channelNumber string) error
	// GET /switch/{switch-id}/vlan List
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/vlan)
	GetSwitchVlanList(ctx echo.Context, fabricId externalRef0.FabricId, switchId string) error
	// DELETE /switch/{switch-id}/vlan
	// (DELETE /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/vlan/{vlan-id})
	DeleteSwitchVlan(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, vlanId string) error
	// GET /switch/{switch-id}/vlan Container
	// (GET /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/vlan/{vlan-id})
	GetSwitchVlan(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, vlanId string) error
	// POST /switch/{switch-id}/vlan
	// (POST /sdn-fabric/v0.1.x/{fabric-id}/switch/{switch-id}/vlan/{vlan-id})
	PostSwitchVlan(ctx echo.Context, fabricId externalRef0.FabricId, switchId string, vlanId string) error
}

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// serverInterfaceWrapper converts echo contexts to parameters.
type serverInterfaceWrapper struct {
	handler ServerInterface
}

// GetDhcpServerList converts echo context to params.
func (w *serverInterfaceWrapper) GetDhcpServerList(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetDhcpServerList(ctx, fabricId)
}

// DeleteDhcpServer converts echo context to params.
func (w *serverInterfaceWrapper) DeleteDhcpServer(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "dhcp-server-id" -------------

	var dhcpServerId string
	dhcpServerId = ctx.Param("dhcp-server-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteDhcpServer(ctx, fabricId, dhcpServerId)
}

// GetDhcpServer converts echo context to params.
func (w *serverInterfaceWrapper) GetDhcpServer(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "dhcp-server-id" -------------

	var dhcpServerId string
	dhcpServerId = ctx.Param("dhcp-server-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetDhcpServer(ctx, fabricId, dhcpServerId)
}

// PostDhcpServer converts echo context to params.
func (w *serverInterfaceWrapper) PostDhcpServer(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "dhcp-server-id" -------------

	var dhcpServerId string
	dhcpServerId = ctx.Param("dhcp-server-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostDhcpServer(ctx, fabricId, dhcpServerId)
}

// GetRouteList converts echo context to params.
func (w *serverInterfaceWrapper) GetRouteList(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetRouteList(ctx, fabricId)
}

// DeleteRoute converts echo context to params.
func (w *serverInterfaceWrapper) DeleteRoute(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "route-id" -------------

	var routeId string
	routeId = ctx.Param("route-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteRoute(ctx, fabricId, routeId)
}

// GetRoute converts echo context to params.
func (w *serverInterfaceWrapper) GetRoute(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "route-id" -------------

	var routeId string
	routeId = ctx.Param("route-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetRoute(ctx, fabricId, routeId)
}

// PostRoute converts echo context to params.
func (w *serverInterfaceWrapper) PostRoute(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "route-id" -------------

	var routeId string
	routeId = ctx.Param("route-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostRoute(ctx, fabricId, routeId)
}

// GetSwitchList converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitchList(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitchList(ctx, fabricId)
}

// GetSwitchModelList converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitchModelList(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitchModelList(ctx, fabricId)
}

// DeleteSwitchModel converts echo context to params.
func (w *serverInterfaceWrapper) DeleteSwitchModel(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-model-id" -------------

	var switchModelId string
	switchModelId = ctx.Param("switch-model-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteSwitchModel(ctx, fabricId, switchModelId)
}

// GetSwitchModel converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitchModel(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-model-id" -------------

	var switchModelId string
	switchModelId = ctx.Param("switch-model-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitchModel(ctx, fabricId, switchModelId)
}

// PostSwitchModel converts echo context to params.
func (w *serverInterfaceWrapper) PostSwitchModel(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-model-id" -------------

	var switchModelId string
	switchModelId = ctx.Param("switch-model-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostSwitchModel(ctx, fabricId, switchModelId)
}

// GetSwitchModelAttributeList converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitchModelAttributeList(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-model-id" -------------

	var switchModelId string
	switchModelId = ctx.Param("switch-model-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitchModelAttributeList(ctx, fabricId, switchModelId)
}

// DeleteSwitchModelAttribute converts echo context to params.
func (w *serverInterfaceWrapper) DeleteSwitchModelAttribute(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-model-id" -------------

	var switchModelId string
	switchModelId = ctx.Param("switch-model-id")

	// ------------- Path parameter "attribute-key" -------------

	var attributeKey string
	attributeKey = ctx.Param("attribute-key")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteSwitchModelAttribute(ctx, fabricId, switchModelId, attributeKey)
}

// GetSwitchModelAttribute converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitchModelAttribute(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-model-id" -------------

	var switchModelId string
	switchModelId = ctx.Param("switch-model-id")

	// ------------- Path parameter "attribute-key" -------------

	var attributeKey string
	attributeKey = ctx.Param("attribute-key")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitchModelAttribute(ctx, fabricId, switchModelId, attributeKey)
}

// PostSwitchModelAttribute converts echo context to params.
func (w *serverInterfaceWrapper) PostSwitchModelAttribute(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-model-id" -------------

	var switchModelId string
	switchModelId = ctx.Param("switch-model-id")

	// ------------- Path parameter "attribute-key" -------------

	var attributeKey string
	attributeKey = ctx.Param("attribute-key")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostSwitchModelAttribute(ctx, fabricId, switchModelId, attributeKey)
}

// GetSwitchModelPortList converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitchModelPortList(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-model-id" -------------

	var switchModelId string
	switchModelId = ctx.Param("switch-model-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitchModelPortList(ctx, fabricId, switchModelId)
}

// DeleteSwitchModelPort converts echo context to params.
func (w *serverInterfaceWrapper) DeleteSwitchModelPort(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-model-id" -------------

	var switchModelId string
	switchModelId = ctx.Param("switch-model-id")

	// ------------- Path parameter "cage-number" -------------

	var cageNumber string
	cageNumber = ctx.Param("cage-number")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteSwitchModelPort(ctx, fabricId, switchModelId, cageNumber)
}

// GetSwitchModelPort converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitchModelPort(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-model-id" -------------

	var switchModelId string
	switchModelId = ctx.Param("switch-model-id")

	// ------------- Path parameter "cage-number" -------------

	var cageNumber string
	cageNumber = ctx.Param("cage-number")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitchModelPort(ctx, fabricId, switchModelId, cageNumber)
}

// PostSwitchModelPort converts echo context to params.
func (w *serverInterfaceWrapper) PostSwitchModelPort(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-model-id" -------------

	var switchModelId string
	switchModelId = ctx.Param("switch-model-id")

	// ------------- Path parameter "cage-number" -------------

	var cageNumber string
	cageNumber = ctx.Param("cage-number")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostSwitchModelPort(ctx, fabricId, switchModelId, cageNumber)
}

// DeleteSwitch converts echo context to params.
func (w *serverInterfaceWrapper) DeleteSwitch(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteSwitch(ctx, fabricId, switchId)
}

// GetSwitch converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitch(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitch(ctx, fabricId, switchId)
}

// PostSwitch converts echo context to params.
func (w *serverInterfaceWrapper) PostSwitch(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostSwitch(ctx, fabricId, switchId)
}

// GetSwitchAttributeList converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitchAttributeList(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitchAttributeList(ctx, fabricId, switchId)
}

// DeleteSwitchAttribute converts echo context to params.
func (w *serverInterfaceWrapper) DeleteSwitchAttribute(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// ------------- Path parameter "attribute-key" -------------

	var attributeKey string
	attributeKey = ctx.Param("attribute-key")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteSwitchAttribute(ctx, fabricId, switchId, attributeKey)
}

// GetSwitchAttribute converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitchAttribute(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// ------------- Path parameter "attribute-key" -------------

	var attributeKey string
	attributeKey = ctx.Param("attribute-key")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitchAttribute(ctx, fabricId, switchId, attributeKey)
}

// PostSwitchAttribute converts echo context to params.
func (w *serverInterfaceWrapper) PostSwitchAttribute(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// ------------- Path parameter "attribute-key" -------------

	var attributeKey string
	attributeKey = ctx.Param("attribute-key")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostSwitchAttribute(ctx, fabricId, switchId, attributeKey)
}

// DeleteSwitchManagement converts echo context to params.
func (w *serverInterfaceWrapper) DeleteSwitchManagement(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteSwitchManagement(ctx, fabricId, switchId)
}

// GetSwitchManagement converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitchManagement(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitchManagement(ctx, fabricId, switchId)
}

// PostSwitchManagement converts echo context to params.
func (w *serverInterfaceWrapper) PostSwitchManagement(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostSwitchManagement(ctx, fabricId, switchId)
}

// GetSwitchPortList converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitchPortList(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitchPortList(ctx, fabricId, switchId)
}

// DeleteSwitchPort converts echo context to params.
func (w *serverInterfaceWrapper) DeleteSwitchPort(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// ------------- Path parameter "cage-number" -------------

	var cageNumber string
	cageNumber = ctx.Param("cage-number")

	// ------------- Path parameter "channel-number" -------------

	var channelNumber string
	channelNumber = ctx.Param("channel-number")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteSwitchPort(ctx, fabricId, switchId, cageNumber, channelNumber)
}

// GetSwitchPort converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitchPort(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// ------------- Path parameter "cage-number" -------------

	var cageNumber string
	cageNumber = ctx.Param("cage-number")

	// ------------- Path parameter "channel-number" -------------

	var channelNumber string
	channelNumber = ctx.Param("channel-number")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitchPort(ctx, fabricId, switchId, cageNumber, channelNumber)
}

// PostSwitchPort converts echo context to params.
func (w *serverInterfaceWrapper) PostSwitchPort(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// ------------- Path parameter "cage-number" -------------

	var cageNumber string
	cageNumber = ctx.Param("cage-number")

	// ------------- Path parameter "channel-number" -------------

	var channelNumber string
	channelNumber = ctx.Param("channel-number")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostSwitchPort(ctx, fabricId, switchId, cageNumber, channelNumber)
}

// GetSwitchPortState converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitchPortState(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// ------------- Path parameter "cage-number" -------------

	var cageNumber string
	cageNumber = ctx.Param("cage-number")

	// ------------- Path parameter "channel-number" -------------

	var channelNumber string
	channelNumber = ctx.Param("channel-number")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitchPortState(ctx, fabricId, switchId, cageNumber, channelNumber)
}

// DeleteSwitchPortVlans converts echo context to params.
func (w *serverInterfaceWrapper) DeleteSwitchPortVlans(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// ------------- Path parameter "cage-number" -------------

	var cageNumber string
	cageNumber = ctx.Param("cage-number")

	// ------------- Path parameter "channel-number" -------------

	var channelNumber string
	channelNumber = ctx.Param("channel-number")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteSwitchPortVlans(ctx, fabricId, switchId, cageNumber, channelNumber)
}

// GetSwitchPortVlans converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitchPortVlans(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// ------------- Path parameter "cage-number" -------------

	var cageNumber string
	cageNumber = ctx.Param("cage-number")

	// ------------- Path parameter "channel-number" -------------

	var channelNumber string
	channelNumber = ctx.Param("channel-number")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitchPortVlans(ctx, fabricId, switchId, cageNumber, channelNumber)
}

// PostSwitchPortVlans converts echo context to params.
func (w *serverInterfaceWrapper) PostSwitchPortVlans(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// ------------- Path parameter "cage-number" -------------

	var cageNumber string
	cageNumber = ctx.Param("cage-number")

	// ------------- Path parameter "channel-number" -------------

	var channelNumber string
	channelNumber = ctx.Param("channel-number")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostSwitchPortVlans(ctx, fabricId, switchId, cageNumber, channelNumber)
}

// GetSwitchState converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitchState(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitchState(ctx, fabricId, switchId)
}

// DeleteSwitchSwitchPair converts echo context to params.
func (w *serverInterfaceWrapper) DeleteSwitchSwitchPair(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteSwitchSwitchPair(ctx, fabricId, switchId)
}

// GetSwitchSwitchPair converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitchSwitchPair(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitchSwitchPair(ctx, fabricId, switchId)
}

// PostSwitchSwitchPair converts echo context to params.
func (w *serverInterfaceWrapper) PostSwitchSwitchPair(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostSwitchSwitchPair(ctx, fabricId, switchId)
}

// GetSwitchSwitchPairPairingPortList converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitchSwitchPairPairingPortList(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitchSwitchPairPairingPortList(ctx, fabricId, switchId)
}

// DeleteSwitchSwitchPairPairingPort converts echo context to params.
func (w *serverInterfaceWrapper) DeleteSwitchSwitchPairPairingPort(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// ------------- Path parameter "cage-number" -------------

	var cageNumber string
	cageNumber = ctx.Param("cage-number")

	// ------------- Path parameter "channel-number" -------------

	var channelNumber string
	channelNumber = ctx.Param("channel-number")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteSwitchSwitchPairPairingPort(ctx, fabricId, switchId, cageNumber, channelNumber)
}

// GetSwitchSwitchPairPairingPort converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitchSwitchPairPairingPort(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// ------------- Path parameter "cage-number" -------------

	var cageNumber string
	cageNumber = ctx.Param("cage-number")

	// ------------- Path parameter "channel-number" -------------

	var channelNumber string
	channelNumber = ctx.Param("channel-number")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitchSwitchPairPairingPort(ctx, fabricId, switchId, cageNumber, channelNumber)
}

// PostSwitchSwitchPairPairingPort converts echo context to params.
func (w *serverInterfaceWrapper) PostSwitchSwitchPairPairingPort(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// ------------- Path parameter "cage-number" -------------

	var cageNumber string
	cageNumber = ctx.Param("cage-number")

	// ------------- Path parameter "channel-number" -------------

	var channelNumber string
	channelNumber = ctx.Param("channel-number")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostSwitchSwitchPairPairingPort(ctx, fabricId, switchId, cageNumber, channelNumber)
}

// GetSwitchVlanList converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitchVlanList(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitchVlanList(ctx, fabricId, switchId)
}

// DeleteSwitchVlan converts echo context to params.
func (w *serverInterfaceWrapper) DeleteSwitchVlan(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// ------------- Path parameter "vlan-id" -------------

	var vlanId string
	vlanId = ctx.Param("vlan-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteSwitchVlan(ctx, fabricId, switchId, vlanId)
}

// GetSwitchVlan converts echo context to params.
func (w *serverInterfaceWrapper) GetSwitchVlan(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// ------------- Path parameter "vlan-id" -------------

	var vlanId string
	vlanId = ctx.Param("vlan-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetSwitchVlan(ctx, fabricId, switchId, vlanId)
}

// PostSwitchVlan converts echo context to params.
func (w *serverInterfaceWrapper) PostSwitchVlan(ctx echo.Context) error {

	// ------------- Path parameter "fabric-id" -------------

	var fabricId externalRef0.FabricId
	fabricId = externalRef0.FabricId(ctx.Param("fabric-id"))

	// ------------- Path parameter "switch-id" -------------

	var switchId string
	switchId = ctx.Param("switch-id")

	// ------------- Path parameter "vlan-id" -------------

	var vlanId string
	vlanId = ctx.Param("vlan-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostSwitchVlan(ctx, fabricId, switchId, vlanId)
}

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, validateResponse bool) error {

	openApiDefinition, err := GetSwagger()
	if err != nil {
		return err
	}
	wrapper := serverInterfaceWrapper{
		handler: si,
	}

	router.GET("/sdn-fabric/v0.1.x/:fabric-id/dhcp-server", wrapper.GetDhcpServerList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sdn-fabric/v0.1.x/:fabric-id/dhcp-server/:dhcp-server-id", wrapper.DeleteDhcpServer, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/dhcp-server/:dhcp-server-id", wrapper.GetDhcpServer, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sdn-fabric/v0.1.x/:fabric-id/dhcp-server/:dhcp-server-id", wrapper.PostDhcpServer, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/route", wrapper.GetRouteList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sdn-fabric/v0.1.x/:fabric-id/route/:route-id", wrapper.DeleteRoute, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/route/:route-id", wrapper.GetRoute, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sdn-fabric/v0.1.x/:fabric-id/route/:route-id", wrapper.PostRoute, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch", wrapper.GetSwitchList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch-model", wrapper.GetSwitchModelList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sdn-fabric/v0.1.x/:fabric-id/switch-model/:switch-model-id", wrapper.DeleteSwitchModel, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch-model/:switch-model-id", wrapper.GetSwitchModel, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sdn-fabric/v0.1.x/:fabric-id/switch-model/:switch-model-id", wrapper.PostSwitchModel, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch-model/:switch-model-id/attribute", wrapper.GetSwitchModelAttributeList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sdn-fabric/v0.1.x/:fabric-id/switch-model/:switch-model-id/attribute/:attribute-key", wrapper.DeleteSwitchModelAttribute, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch-model/:switch-model-id/attribute/:attribute-key", wrapper.GetSwitchModelAttribute, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sdn-fabric/v0.1.x/:fabric-id/switch-model/:switch-model-id/attribute/:attribute-key", wrapper.PostSwitchModelAttribute, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch-model/:switch-model-id/port", wrapper.GetSwitchModelPortList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sdn-fabric/v0.1.x/:fabric-id/switch-model/:switch-model-id/port/:cage-number", wrapper.DeleteSwitchModelPort, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch-model/:switch-model-id/port/:cage-number", wrapper.GetSwitchModelPort, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sdn-fabric/v0.1.x/:fabric-id/switch-model/:switch-model-id/port/:cage-number", wrapper.PostSwitchModelPort, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id", wrapper.DeleteSwitch, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id", wrapper.GetSwitch, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id", wrapper.PostSwitch, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/attribute", wrapper.GetSwitchAttributeList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/attribute/:attribute-key", wrapper.DeleteSwitchAttribute, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/attribute/:attribute-key", wrapper.GetSwitchAttribute, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/attribute/:attribute-key", wrapper.PostSwitchAttribute, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/management", wrapper.DeleteSwitchManagement, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/management", wrapper.GetSwitchManagement, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/management", wrapper.PostSwitchManagement, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/port", wrapper.GetSwitchPortList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/port/:cage-number/:channel-number", wrapper.DeleteSwitchPort, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/port/:cage-number/:channel-number", wrapper.GetSwitchPort, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/port/:cage-number/:channel-number", wrapper.PostSwitchPort, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/port/:cage-number/:channel-number/state", wrapper.GetSwitchPortState, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/port/:cage-number/:channel-number/vlans", wrapper.DeleteSwitchPortVlans, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/port/:cage-number/:channel-number/vlans", wrapper.GetSwitchPortVlans, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/port/:cage-number/:channel-number/vlans", wrapper.PostSwitchPortVlans, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/state", wrapper.GetSwitchState, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/switch-pair", wrapper.DeleteSwitchSwitchPair, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/switch-pair", wrapper.GetSwitchSwitchPair, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/switch-pair", wrapper.PostSwitchSwitchPair, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/switch-pair/pairing-port", wrapper.GetSwitchSwitchPairPairingPortList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/switch-pair/pairing-port/:cage-number/:channel-number", wrapper.DeleteSwitchSwitchPairPairingPort, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/switch-pair/pairing-port/:cage-number/:channel-number", wrapper.GetSwitchSwitchPairPairingPort, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/switch-pair/pairing-port/:cage-number/:channel-number", wrapper.PostSwitchSwitchPairPairingPort, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/vlan", wrapper.GetSwitchVlanList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/vlan/:vlan-id", wrapper.DeleteSwitchVlan, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/vlan/:vlan-id", wrapper.GetSwitchVlan, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/sdn-fabric/v0.1.x/:fabric-id/switch/:switch-id/vlan/:vlan-id", wrapper.PostSwitchVlan, openapi3mw.ValidateOpenapi3(openApiDefinition))

	return nil
}
