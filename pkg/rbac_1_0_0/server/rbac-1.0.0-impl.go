// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// server-interface template override

import (
	"github.com/onosproject/aether-roc-api/pkg/rbac_1_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/southbound"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	"github.com/onosproject/onos-lib-go/pkg/logging"
	"reflect"
)

const authorization = "Authorization"

// Implement the Server Interface for access to gNMI
var log = logging.GetLogger("rbac_1_0_0")

// ServerImpl -
type ServerImpl struct {
	GnmiClient southbound.GnmiClient
}

// DeleteRbac impl of gNMI access at /rbac/v1.0.0/{target}/rbac
func (i *ServerImpl) DeleteRbac(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteRbac(utils.NewGnmiContext(ctx), "/rbac/v1.0.0/{target}/rbac", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteRbac")
	return ctx.JSON(http.StatusOK, response)
}

// GetRbac impl of gNMI access at /rbac/v1.0.0/{target}/rbac
func (i *ServerImpl) GetRbac(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetRbac(utils.NewGnmiContext(ctx), "/rbac/v1.0.0/{target}/rbac", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetRbac")
	return ctx.JSON(http.StatusOK, response)
}

// PostRbac impl of gNMI access at /rbac/v1.0.0/{target}/rbac
func (i *ServerImpl) PostRbac(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostRbac(utils.NewGnmiContext(ctx), body, "/rbac/v1.0.0/{target}/rbac", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostRbac")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteRbacGroup impl of gNMI access at /rbac/v1.0.0/{target}/rbac/group/{groupid}
func (i *ServerImpl) DeleteRbacGroup(ctx echo.Context, target types.Target, groupid string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteRbacGroup(utils.NewGnmiContext(ctx), "/rbac/v1.0.0/{target}/rbac/group/{groupid}", target, groupid)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteRbacGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetRbacGroup impl of gNMI access at /rbac/v1.0.0/{target}/rbac/group/{groupid}
func (i *ServerImpl) GetRbacGroup(ctx echo.Context, target types.Target, groupid string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetRbacGroup(utils.NewGnmiContext(ctx), "/rbac/v1.0.0/{target}/rbac/group/{groupid}", target, groupid)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetRbacGroup")
	return ctx.JSON(http.StatusOK, response)
}

// PostRbacGroup impl of gNMI access at /rbac/v1.0.0/{target}/rbac/group/{groupid}
func (i *ServerImpl) PostRbacGroup(ctx echo.Context, target types.Target, groupid string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostRbacGroup(utils.NewGnmiContext(ctx), body, "/rbac/v1.0.0/{target}/rbac/group/{groupid}", target, groupid)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostRbacGroup")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteRbacGroupRole impl of gNMI access at /rbac/v1.0.0/{target}/rbac/group/{groupid}/role/{roleid}
func (i *ServerImpl) DeleteRbacGroupRole(ctx echo.Context, target types.Target, groupid string, roleid string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteRbacGroupRole(utils.NewGnmiContext(ctx), "/rbac/v1.0.0/{target}/rbac/group/{groupid}/role/{roleid}", target, groupid, roleid)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteRbacGroupRole")
	return ctx.JSON(http.StatusOK, response)
}

// GetRbacGroupRole impl of gNMI access at /rbac/v1.0.0/{target}/rbac/group/{groupid}/role/{roleid}
func (i *ServerImpl) GetRbacGroupRole(ctx echo.Context, target types.Target, groupid string, roleid string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetRbacGroupRole(utils.NewGnmiContext(ctx), "/rbac/v1.0.0/{target}/rbac/group/{groupid}/role/{roleid}", target, groupid, roleid)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetRbacGroupRole")
	return ctx.JSON(http.StatusOK, response)
}

// PostRbacGroupRole impl of gNMI access at /rbac/v1.0.0/{target}/rbac/group/{groupid}/role/{roleid}
func (i *ServerImpl) PostRbacGroupRole(ctx echo.Context, target types.Target, groupid string, roleid string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostRbacGroupRole(utils.NewGnmiContext(ctx), body, "/rbac/v1.0.0/{target}/rbac/group/{groupid}/role/{roleid}", target, groupid, roleid)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostRbacGroupRole")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteRbacRole impl of gNMI access at /rbac/v1.0.0/{target}/rbac/role/{roleid}
func (i *ServerImpl) DeleteRbacRole(ctx echo.Context, target types.Target, roleid string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteRbacRole(utils.NewGnmiContext(ctx), "/rbac/v1.0.0/{target}/rbac/role/{roleid}", target, roleid)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteRbacRole")
	return ctx.JSON(http.StatusOK, response)
}

// GetRbacRole impl of gNMI access at /rbac/v1.0.0/{target}/rbac/role/{roleid}
func (i *ServerImpl) GetRbacRole(ctx echo.Context, target types.Target, roleid string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetRbacRole(utils.NewGnmiContext(ctx), "/rbac/v1.0.0/{target}/rbac/role/{roleid}", target, roleid)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetRbacRole")
	return ctx.JSON(http.StatusOK, response)
}

// PostRbacRole impl of gNMI access at /rbac/v1.0.0/{target}/rbac/role/{roleid}
func (i *ServerImpl) PostRbacRole(ctx echo.Context, target types.Target, roleid string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostRbacRole(utils.NewGnmiContext(ctx), body, "/rbac/v1.0.0/{target}/rbac/role/{roleid}", target, roleid)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostRbacRole")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteRbacRolePermission impl of gNMI access at /rbac/v1.0.0/{target}/rbac/role/{roleid}/permission
func (i *ServerImpl) DeleteRbacRolePermission(ctx echo.Context, target types.Target, roleid string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteRbacRolePermission(utils.NewGnmiContext(ctx), "/rbac/v1.0.0/{target}/rbac/role/{roleid}/permission", target, roleid)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteRbacRolePermission")
	return ctx.JSON(http.StatusOK, response)
}

// GetRbacRolePermission impl of gNMI access at /rbac/v1.0.0/{target}/rbac/role/{roleid}/permission
func (i *ServerImpl) GetRbacRolePermission(ctx echo.Context, target types.Target, roleid string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetRbacRolePermission(utils.NewGnmiContext(ctx), "/rbac/v1.0.0/{target}/rbac/role/{roleid}/permission", target, roleid)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetRbacRolePermission")
	return ctx.JSON(http.StatusOK, response)
}

// PostRbacRolePermission impl of gNMI access at /rbac/v1.0.0/{target}/rbac/role/{roleid}/permission
func (i *ServerImpl) PostRbacRolePermission(ctx echo.Context, target types.Target, roleid string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostRbacRolePermission(utils.NewGnmiContext(ctx), body, "/rbac/v1.0.0/{target}/rbac/role/{roleid}/permission", target, roleid)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostRbacRolePermission")
	return ctx.JSON(http.StatusOK, response)
}

// register template override
