// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"github.com/labstack/echo/v4"
	"github.com/onosproject/aether-roc-api/pkg/middleware/openapi3mw"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/rbac_1_0_0/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// DELETE Generated from YANG model
	// (DELETE /rbac/v1.0.0/{target}/rbac)
	DeleteRbac(ctx echo.Context, target externalRef0.Target) error
	// GET /rbac Generated from YANG model
	// (GET /rbac/v1.0.0/{target}/rbac)
	GetRbac(ctx echo.Context, target externalRef0.Target) error
	// POST Generated from YANG model
	// (POST /rbac/v1.0.0/{target}/rbac)
	PostRbac(ctx echo.Context, target externalRef0.Target) error
	// DELETE Generated from YANG model
	// (DELETE /rbac/v1.0.0/{target}/rbac/group/{groupid})
	DeleteRbacGroup(ctx echo.Context, target externalRef0.Target, groupid string) error
	// GET /rbac/group Generated from YANG model
	// (GET /rbac/v1.0.0/{target}/rbac/group/{groupid})
	GetRbacGroup(ctx echo.Context, target externalRef0.Target, groupid string) error
	// POST Generated from YANG model
	// (POST /rbac/v1.0.0/{target}/rbac/group/{groupid})
	PostRbacGroup(ctx echo.Context, target externalRef0.Target, groupid string) error
	// DELETE Generated from YANG model
	// (DELETE /rbac/v1.0.0/{target}/rbac/group/{groupid}/role/{roleid})
	DeleteRbacGroupRole(ctx echo.Context, target externalRef0.Target, groupid string, roleid string) error
	// GET /rbac/group/{groupid}/role Generated from YANG model
	// (GET /rbac/v1.0.0/{target}/rbac/group/{groupid}/role/{roleid})
	GetRbacGroupRole(ctx echo.Context, target externalRef0.Target, groupid string, roleid string) error
	// POST Generated from YANG model
	// (POST /rbac/v1.0.0/{target}/rbac/group/{groupid}/role/{roleid})
	PostRbacGroupRole(ctx echo.Context, target externalRef0.Target, groupid string, roleid string) error
	// DELETE Generated from YANG model
	// (DELETE /rbac/v1.0.0/{target}/rbac/role/{roleid})
	DeleteRbacRole(ctx echo.Context, target externalRef0.Target, roleid string) error
	// GET /rbac/role Generated from YANG model
	// (GET /rbac/v1.0.0/{target}/rbac/role/{roleid})
	GetRbacRole(ctx echo.Context, target externalRef0.Target, roleid string) error
	// POST Generated from YANG model
	// (POST /rbac/v1.0.0/{target}/rbac/role/{roleid})
	PostRbacRole(ctx echo.Context, target externalRef0.Target, roleid string) error
	// DELETE Generated from YANG model
	// (DELETE /rbac/v1.0.0/{target}/rbac/role/{roleid}/permission)
	DeleteRbacRolePermission(ctx echo.Context, target externalRef0.Target, roleid string) error
	// GET /rbac/role/{roleid}/permission Generated from YANG model
	// (GET /rbac/v1.0.0/{target}/rbac/role/{roleid}/permission)
	GetRbacRolePermission(ctx echo.Context, target externalRef0.Target, roleid string) error
	// POST Generated from YANG model
	// (POST /rbac/v1.0.0/{target}/rbac/role/{roleid}/permission)
	PostRbacRolePermission(ctx echo.Context, target externalRef0.Target, roleid string) error
}

// serverInterfaceWrapper converts echo contexts to parameters.
type serverInterfaceWrapper struct {
	handler ServerInterface
}

// DeleteRbac converts echo context to params.
func (w *serverInterfaceWrapper) DeleteRbac(ctx echo.Context) error {

	// ------------- Path parameter "target" -------------

	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteRbac(ctx, target)
}

// GetRbac converts echo context to params.
func (w *serverInterfaceWrapper) GetRbac(ctx echo.Context) error {

	// ------------- Path parameter "target" -------------

	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetRbac(ctx, target)
}

// PostRbac converts echo context to params.
func (w *serverInterfaceWrapper) PostRbac(ctx echo.Context) error {

	// ------------- Path parameter "target" -------------

	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostRbac(ctx, target)
}

// DeleteRbacGroup converts echo context to params.
func (w *serverInterfaceWrapper) DeleteRbacGroup(ctx echo.Context) error {

	// ------------- Path parameter "target" -------------

	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// ------------- Path parameter "groupid" -------------

	var groupid string
	groupid = ctx.Param("groupid")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteRbacGroup(ctx, target, groupid)
}

// GetRbacGroup converts echo context to params.
func (w *serverInterfaceWrapper) GetRbacGroup(ctx echo.Context) error {

	// ------------- Path parameter "target" -------------

	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// ------------- Path parameter "groupid" -------------

	var groupid string
	groupid = ctx.Param("groupid")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetRbacGroup(ctx, target, groupid)
}

// PostRbacGroup converts echo context to params.
func (w *serverInterfaceWrapper) PostRbacGroup(ctx echo.Context) error {

	// ------------- Path parameter "target" -------------

	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// ------------- Path parameter "groupid" -------------

	var groupid string
	groupid = ctx.Param("groupid")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostRbacGroup(ctx, target, groupid)
}

// DeleteRbacGroupRole converts echo context to params.
func (w *serverInterfaceWrapper) DeleteRbacGroupRole(ctx echo.Context) error {

	// ------------- Path parameter "target" -------------

	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// ------------- Path parameter "groupid" -------------

	var groupid string
	groupid = ctx.Param("groupid")

	// ------------- Path parameter "roleid" -------------

	var roleid string
	roleid = ctx.Param("roleid")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteRbacGroupRole(ctx, target, groupid, roleid)
}

// GetRbacGroupRole converts echo context to params.
func (w *serverInterfaceWrapper) GetRbacGroupRole(ctx echo.Context) error {

	// ------------- Path parameter "target" -------------

	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// ------------- Path parameter "groupid" -------------

	var groupid string
	groupid = ctx.Param("groupid")

	// ------------- Path parameter "roleid" -------------

	var roleid string
	roleid = ctx.Param("roleid")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetRbacGroupRole(ctx, target, groupid, roleid)
}

// PostRbacGroupRole converts echo context to params.
func (w *serverInterfaceWrapper) PostRbacGroupRole(ctx echo.Context) error {

	// ------------- Path parameter "target" -------------

	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// ------------- Path parameter "groupid" -------------

	var groupid string
	groupid = ctx.Param("groupid")

	// ------------- Path parameter "roleid" -------------

	var roleid string
	roleid = ctx.Param("roleid")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostRbacGroupRole(ctx, target, groupid, roleid)
}

// DeleteRbacRole converts echo context to params.
func (w *serverInterfaceWrapper) DeleteRbacRole(ctx echo.Context) error {

	// ------------- Path parameter "target" -------------

	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// ------------- Path parameter "roleid" -------------

	var roleid string
	roleid = ctx.Param("roleid")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteRbacRole(ctx, target, roleid)
}

// GetRbacRole converts echo context to params.
func (w *serverInterfaceWrapper) GetRbacRole(ctx echo.Context) error {

	// ------------- Path parameter "target" -------------

	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// ------------- Path parameter "roleid" -------------

	var roleid string
	roleid = ctx.Param("roleid")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetRbacRole(ctx, target, roleid)
}

// PostRbacRole converts echo context to params.
func (w *serverInterfaceWrapper) PostRbacRole(ctx echo.Context) error {

	// ------------- Path parameter "target" -------------

	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// ------------- Path parameter "roleid" -------------

	var roleid string
	roleid = ctx.Param("roleid")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostRbacRole(ctx, target, roleid)
}

// DeleteRbacRolePermission converts echo context to params.
func (w *serverInterfaceWrapper) DeleteRbacRolePermission(ctx echo.Context) error {

	// ------------- Path parameter "target" -------------

	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// ------------- Path parameter "roleid" -------------

	var roleid string
	roleid = ctx.Param("roleid")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteRbacRolePermission(ctx, target, roleid)
}

// GetRbacRolePermission converts echo context to params.
func (w *serverInterfaceWrapper) GetRbacRolePermission(ctx echo.Context) error {

	// ------------- Path parameter "target" -------------

	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// ------------- Path parameter "roleid" -------------

	var roleid string
	roleid = ctx.Param("roleid")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetRbacRolePermission(ctx, target, roleid)
}

// PostRbacRolePermission converts echo context to params.
func (w *serverInterfaceWrapper) PostRbacRolePermission(ctx echo.Context) error {

	// ------------- Path parameter "target" -------------

	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// ------------- Path parameter "roleid" -------------

	var roleid string
	roleid = ctx.Param("roleid")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostRbacRolePermission(ctx, target, roleid)
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, validateResponse bool) error {

	openApiDefinition, err := GetSwagger()
	if err != nil {
		return err
	}
	wrapper := serverInterfaceWrapper{
		handler: si,
	}

	router.DELETE("/rbac/v1.0.0/:target/rbac", wrapper.DeleteRbac, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/rbac/v1.0.0/:target/rbac", wrapper.GetRbac, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/rbac/v1.0.0/:target/rbac", wrapper.PostRbac, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/rbac/v1.0.0/:target/rbac/group/:groupid", wrapper.DeleteRbacGroup, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/rbac/v1.0.0/:target/rbac/group/:groupid", wrapper.GetRbacGroup, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/rbac/v1.0.0/:target/rbac/group/:groupid", wrapper.PostRbacGroup, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/rbac/v1.0.0/:target/rbac/group/:groupid/role/:roleid", wrapper.DeleteRbacGroupRole, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/rbac/v1.0.0/:target/rbac/group/:groupid/role/:roleid", wrapper.GetRbacGroupRole, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/rbac/v1.0.0/:target/rbac/group/:groupid/role/:roleid", wrapper.PostRbacGroupRole, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/rbac/v1.0.0/:target/rbac/role/:roleid", wrapper.DeleteRbacRole, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/rbac/v1.0.0/:target/rbac/role/:roleid", wrapper.GetRbacRole, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/rbac/v1.0.0/:target/rbac/role/:roleid", wrapper.PostRbacRole, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/rbac/v1.0.0/:target/rbac/role/:roleid/permission", wrapper.DeleteRbacRolePermission, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/rbac/v1.0.0/:target/rbac/role/:roleid/permission", wrapper.GetRbacRolePermission, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/rbac/v1.0.0/:target/rbac/role/:roleid/permission", wrapper.PostRbacRolePermission, openapi3mw.ValidateOpenapi3(openApiDefinition))

	return nil
}
