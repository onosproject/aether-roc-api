// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"fmt"
	"strings"
)

import (
	"github.com/onosproject/aether-roc-api/pkg/rbac_1_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	modelplugin "github.com/onosproject/config-models/modelplugin/rbac-1.0.0/rbac_1_0_0"
	"strconv"
)

// ModelPluginDevice - a wrapper for the model plugin
type ModelPluginDevice struct {
	device modelplugin.Device
}

// toRbacV100targetRbac converts gNMI to OAPI.
func (d *ModelPluginDevice) toRbacV100targetRbac(params ...string) (*types.RbacV100targetRbac, error) {
	resource := new(types.RbacV100targetRbac)

	//Property: {Group ListRbacV100targetRbacGroup {[]RbacV100targetRbacGroup  map[] [] false <nil> [] false} false false}

	listRbacV100targetRbacGroup := make([]types.RbacV100targetRbacGroup, 0)
	for _, v := range d.device.Rbac.Group {
		// Pass down all top level properties as we don't know which one(s) is key
		attribs, err := utils.ExtractGnmiListKeyMap(v)
		if err != nil {
			return nil, err
		}
		childParams := make([]string, len(params))
		copy(childParams, params)
		for _, attribVal := range attribs {
			childParams = append(childParams, fmt.Sprintf("%v", attribVal))
		}
		rbacV100targetRbacGroup, err := d.toRbacV100targetRbacGroup(childParams...)
		if err != nil {
			return nil, err
		}
		listRbacV100targetRbacGroup = append(listRbacV100targetRbacGroup, *rbacV100targetRbacGroup)
	}
	resource.ListRbacV100targetRbacGroup = &listRbacV100targetRbacGroup

	//Property: {Role ListRbacV100targetRbacRole {[]RbacV100targetRbacRole  map[] [] false <nil> [] false} false false}

	listRbacV100targetRbacRole := make([]types.RbacV100targetRbacRole, 0)
	for _, v := range d.device.Rbac.Role {
		// Pass down all top level properties as we don't know which one(s) is key
		attribs, err := utils.ExtractGnmiListKeyMap(v)
		if err != nil {
			return nil, err
		}
		childParams := make([]string, len(params))
		copy(childParams, params)
		for _, attribVal := range attribs {
			childParams = append(childParams, fmt.Sprintf("%v", attribVal))
		}
		rbacV100targetRbacRole, err := d.toRbacV100targetRbacRole(childParams...)
		if err != nil {
			return nil, err
		}
		listRbacV100targetRbacRole = append(listRbacV100targetRbacRole, *rbacV100targetRbacRole)
	}
	resource.ListRbacV100targetRbacRole = &listRbacV100targetRbacRole

	return resource, nil
}

// toRbacV100targetRbacGroup converts gNMI to OAPI.
func (d *ModelPluginDevice) toRbacV100targetRbacGroup(params ...string) (*types.RbacV100targetRbacGroup, error) {
	resource := new(types.RbacV100targetRbacGroup)

	//Property: {Role ListRbacV100targetRbacGroupgroupidRole {[]RbacV100targetRbacGroupgroupidRole  map[] [] false <nil> [] false} false false}

	listRbacV100targetRbacGroupgroupidRole := make([]types.RbacV100targetRbacGroupgroupidRole, 0)
	for _, v := range d.device.Rbac.Role {
		// Pass down all top level properties as we don't know which one(s) is key
		attribs, err := utils.ExtractGnmiListKeyMap(v)
		if err != nil {
			return nil, err
		}
		childParams := make([]string, len(params))
		copy(childParams, params)
		for _, attribVal := range attribs {
			childParams = append(childParams, fmt.Sprintf("%v", attribVal))
		}
		rbacV100targetRbacGroupgroupidRole, err := d.toRbacV100targetRbacGroupgroupidRole(childParams...)
		if err != nil {
			return nil, err
		}
		listRbacV100targetRbacGroupgroupidRole = append(listRbacV100targetRbacGroupgroupidRole, *rbacV100targetRbacGroupgroupidRole)
	}
	resource.ListRbacV100targetRbacGroupgroupidRole = &listRbacV100targetRbacGroupgroupidRole

	//Property: {Rbac_Rbac_Group description {string  map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	attrDescription, err := utils.ExtractGnmiAttribute(d.device, "Rbac_Rbac_Group", "Description", params)
	if err != nil {
		return nil, err
	}
	resource.Description = &attrDescription

	//Property: {Rbac_Rbac_Group groupid {string  map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	attrGroupid, err := utils.ExtractGnmiAttribute(d.device, "Rbac_Rbac_Group", "Groupid", params)
	if err != nil {
		return nil, err
	}
	resource.Groupid = &attrGroupid

	return resource, nil
}

// toRbacV100targetRbacGroupgroupidRole converts gNMI to OAPI.
func (d *ModelPluginDevice) toRbacV100targetRbacGroupgroupidRole(params ...string) (*types.RbacV100targetRbacGroupgroupidRole, error) {
	resource := new(types.RbacV100targetRbacGroupgroupidRole)

	//Property: {Rbac_Rbac_Group_Role description {string  map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	attrDescription, err := utils.ExtractGnmiAttribute(d.device, "Rbac_Rbac_Group_Role", "Description", params)
	if err != nil {
		return nil, err
	}
	resource.Description = &attrDescription

	//Property: {Rbac_Rbac_Group_Role roleid {string  map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	attrRoleid, err := utils.ExtractGnmiAttribute(d.device, "Rbac_Rbac_Group_Role", "Roleid", params)
	if err != nil {
		return nil, err
	}
	resource.Roleid = &attrRoleid

	return resource, nil
}

// toRbacV100targetRbacRole converts gNMI to OAPI.
func (d *ModelPluginDevice) toRbacV100targetRbacRole(params ...string) (*types.RbacV100targetRbacRole, error) {
	resource := new(types.RbacV100targetRbacRole)

	//Property: {Rbac_Rbac_Role RbacV100targetRbacRoleroleidPermission {RbacV100targetRbacRoleroleidPermission  map[] [] false <nil> [] false} false false}
	rbacV100targetRbacRoleroleidPermission, err := d.toRbacV100targetRbacRoleroleidPermission(params...)
	if err != nil {
		return nil, err
	}
	resource.RbacV100targetRbacRoleroleidPermission = rbacV100targetRbacRoleroleidPermission

	//Property: {Rbac_Rbac_Role description {string  map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	attrDescription, err := utils.ExtractGnmiAttribute(d.device, "Rbac_Rbac_Role", "Description", params)
	if err != nil {
		return nil, err
	}
	resource.Description = &attrDescription

	//Property: {Rbac_Rbac_Role roleid {string  map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	attrRoleid, err := utils.ExtractGnmiAttribute(d.device, "Rbac_Rbac_Role", "Roleid", params)
	if err != nil {
		return nil, err
	}
	resource.Roleid = &attrRoleid

	return resource, nil
}

// toRbacV100targetRbacRoleroleidPermission converts gNMI to OAPI.
func (d *ModelPluginDevice) toRbacV100targetRbacRoleroleidPermission(params ...string) (*types.RbacV100targetRbacRoleroleidPermission, error) {
	resource := new(types.RbacV100targetRbacRoleroleidPermission)

	//Property: {Rbac_Rbac_Role_Permission leaf-list-noun {[]string  map[] [] false <nil> [] false} false false}
	//Leaf list handling
	attrLeafListNoun, err := utils.ExtractGnmiAttribute(d.device, "Rbac_Rbac_Role_Permission", "Noun", params)
	if err != nil {
		return nil, err
	}
	asArrayLeafListNoun := strings.Split(attrLeafListNoun, "\n")
	resource.LeafListNoun = &asArrayLeafListNoun

	//Property: {Rbac_Rbac_Role_Permission operation {string  map[ALL:ALL CREATE:CREATE READ:READ UNSET:UNSET] [] false <nil> [] false} false false}
	// Enums handling
	attrOperation, err := utils.ExtractGnmiAttribute(d.device, "Rbac_Rbac_Role_Permission", "Operation", params)
	if err != nil {
		return nil, err
	}
	attrOperationInt, err := strconv.Atoi(attrOperation)
	if err != nil {
		return nil, err
	}
	_, yangDefOperation, err := utils.ExtractGnmiEnumMap(&d.device, "Rbac_Rbac_Role_Permission", "operation", attrOperationInt)
	if err != nil {
		return nil, err
	}
	resource.Operation = &yangDefOperation.Name

	//Property: {Rbac_Rbac_Role_Permission type {string  map[CONFIG:CONFIG GRPC:GRPC UNSET:UNSET] [] false <nil> [] false} false false}
	// Enums handling
	attrType, err := utils.ExtractGnmiAttribute(d.device, "Rbac_Rbac_Role_Permission", "Type", params)
	if err != nil {
		return nil, err
	}
	attrTypeInt, err := strconv.Atoi(attrType)
	if err != nil {
		return nil, err
	}
	_, yangDefType, err := utils.ExtractGnmiEnumMap(&d.device, "Rbac_Rbac_Role_Permission", "type", attrTypeInt)
	if err != nil {
		return nil, err
	}
	resource.Type = &yangDefType.Name

	return resource, nil
}

// toTarget converts gNMI to OAPI.
func (d *ModelPluginDevice) toTarget(params ...string) (*types.Target, error) {
	resource := new(types.Target)

	return resource, nil
}

//Ignoring RequestBodyRbacV100targetRbac

//Ignoring RequestBodyRbacV100targetRbacGroup

//Ignoring RequestBodyRbacV100targetRbacGroupgroupidRole

//Ignoring RequestBodyRbacV100targetRbacRole

//Ignoring RequestBodyRbacV100targetRbacRoleroleidPermission

// Not generating param-types
// Not generating request-bodies
