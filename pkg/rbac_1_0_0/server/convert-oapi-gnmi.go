// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"fmt"
	"strings"
)

import (
	"github.com/onosproject/aether-roc-api/pkg/rbac_1_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	modelplugin "github.com/onosproject/config-models/modelplugin/rbac-1.0.0/rbac_1_0_0"
	"github.com/openconfig/gnmi/proto/gnmi"
	"regexp"
)

// encodeToGnmiRbacV100targetRbac converts OAPI to gNMI.
func encodeToGnmiRbacV100targetRbac(
	jsonObj *types.RbacV100targetRbac, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)

	//Property: {Group ListRbacV100targetRbacGroup {[]RbacV100targetRbacGroup  map[] [] false <nil> [] false} false false}
	if jsonObj.ListRbacV100targetRbacGroup != nil {
		for _, item := range *jsonObj.ListRbacV100targetRbacGroup {
			item := item //Pinning
			updateListRbacV100targetRbacGroup, err :=
				encodeToGnmiRbacV100targetRbacGroup(&item,
					fmt.Sprintf("%s/%s/{%sid}", parentPath, "group", "group"), *item.Groupid)
			if err != nil {
				return nil, err
			}
			updates = append(updates, updateListRbacV100targetRbacGroup...)
		}
	}
	//Property: {Role ListRbacV100targetRbacRole {[]RbacV100targetRbacRole  map[] [] false <nil> [] false} false false}
	if jsonObj.ListRbacV100targetRbacRole != nil {
		for _, item := range *jsonObj.ListRbacV100targetRbacRole {
			item := item //Pinning
			updateListRbacV100targetRbacRole, err :=
				encodeToGnmiRbacV100targetRbacRole(&item,
					fmt.Sprintf("%s/%s/{%sid}", parentPath, "role", "role"), *item.Roleid)
			if err != nil {
				return nil, err
			}
			updates = append(updates, updateListRbacV100targetRbacRole...)
		}
	}

	return updates, nil
}

// encodeToGnmiRbacV100targetRbacGroup converts OAPI to gNMI.
func encodeToGnmiRbacV100targetRbacGroup(
	jsonObj *types.RbacV100targetRbacGroup, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)

	//Property: {Role ListRbacV100targetRbacGroupgroupidRole {[]RbacV100targetRbacGroupgroupidRole  map[] [] false <nil> [] false} false false}
	if jsonObj.ListRbacV100targetRbacGroupgroupidRole != nil {
		for _, item := range *jsonObj.ListRbacV100targetRbacGroupgroupidRole {
			item := item //Pinning
			updateListRbacV100targetRbacGroupgroupidRole, err :=
				encodeToGnmiRbacV100targetRbacGroupgroupidRole(&item,
					fmt.Sprintf("%s/%s/{%sid}", parentPath, "role", "role"), *item.Roleid)
			if err != nil {
				return nil, err
			}
			updates = append(updates, updateListRbacV100targetRbacGroupgroupidRole...)
		}
	}
	//Property: {Rbac_Rbac_Group description {string  map[] [] false <nil> [] false} false false}
	if jsonObj.Description != nil {
		updateDescription, err := utils.UpdateForElement(modelplugin.Rbac_Rbac_Group{
			Description: jsonObj.Description,
		}.Description, fmt.Sprintf("%s%s", parentPath, "/description"), params...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, updateDescription)

	}
	//Property: {Rbac_Rbac_Group groupid {string  map[] [] false <nil> [] false} false false}
	if jsonObj.Groupid != nil {
		updateGroupid, err := utils.UpdateForElement(modelplugin.Rbac_Rbac_Group{
			Groupid: jsonObj.Groupid,
		}.Groupid, fmt.Sprintf("%s%s", parentPath, "/groupid"), params...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, updateGroupid)

	}

	return updates, nil
}

// encodeToGnmiRbacV100targetRbacGroupgroupidRole converts OAPI to gNMI.
func encodeToGnmiRbacV100targetRbacGroupgroupidRole(
	jsonObj *types.RbacV100targetRbacGroupgroupidRole, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)

	//Property: {Rbac_Rbac_Group_Role description {string  map[] [] false <nil> [] false} false false}
	if jsonObj.Description != nil {
		updateDescription, err := utils.UpdateForElement(modelplugin.Rbac_Rbac_Group_Role{
			Description: jsonObj.Description,
		}.Description, fmt.Sprintf("%s%s", parentPath, "/description"), params...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, updateDescription)

	}
	//Property: {Rbac_Rbac_Group_Role roleid {string  map[] [] false <nil> [] false} false false}
	if jsonObj.Roleid != nil {
		updateRoleid, err := utils.UpdateForElement(modelplugin.Rbac_Rbac_Group_Role{
			Roleid: jsonObj.Roleid,
		}.Roleid, fmt.Sprintf("%s%s", parentPath, "/roleid"), params...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, updateRoleid)

	}

	return updates, nil
}

// encodeToGnmiRbacV100targetRbacRole converts OAPI to gNMI.
func encodeToGnmiRbacV100targetRbacRole(
	jsonObj *types.RbacV100targetRbacRole, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)

	//Property: { RbacV100targetRbacRoleroleidPermission {RbacV100targetRbacRoleroleidPermission  map[] [] false <nil> [] false} false false}
	if jsonObj.RbacV100targetRbacRoleroleidPermission != nil {

		re := regexp.MustCompile(`[A-Z][^A-Z]*`)
		submatchall := re.FindAllString("roleidPermission", -1)
		updateRbacV100targetRbacRoleroleidPermission, err := encodeToGnmiRbacV100targetRbacRoleroleidPermission(
			jsonObj.RbacV100targetRbacRoleroleidPermission,
			fmt.Sprintf("%s/%s", parentPath, strings.ToLower(strings.Join(submatchall, "/"))), params...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, updateRbacV100targetRbacRoleroleidPermission...)
	}
	//Property: {Rbac_Rbac_Role description {string  map[] [] false <nil> [] false} false false}
	if jsonObj.Description != nil {
		updateDescription, err := utils.UpdateForElement(modelplugin.Rbac_Rbac_Role{
			Description: jsonObj.Description,
		}.Description, fmt.Sprintf("%s%s", parentPath, "/description"), params...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, updateDescription)

	}
	//Property: {Rbac_Rbac_Role roleid {string  map[] [] false <nil> [] false} false false}
	if jsonObj.Roleid != nil {
		updateRoleid, err := utils.UpdateForElement(modelplugin.Rbac_Rbac_Role{
			Roleid: jsonObj.Roleid,
		}.Roleid, fmt.Sprintf("%s%s", parentPath, "/roleid"), params...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, updateRoleid)

	}

	return updates, nil
}

// encodeToGnmiRbacV100targetRbacRoleroleidPermission converts OAPI to gNMI.
func encodeToGnmiRbacV100targetRbacRoleroleidPermission(
	jsonObj *types.RbacV100targetRbacRoleroleidPermission, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)

	//Property: {Rbac_Rbac_Role_Permission leaf-list-noun {[]string  map[] [] false <nil> [] false} false false}
	if jsonObj.LeafListNoun != nil {

		val := modelplugin.Rbac_Rbac_Role_Permission{
			Noun: *jsonObj.LeafListNoun,
		}
		updateLeafListNoun, err := utils.UpdateForElement(val.Noun, fmt.Sprintf("%s%s", parentPath, "/noun"), params...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, updateLeafListNoun)
	}
	//Property: {Rbac_Rbac_Role_Permission operation {string  map[ALL:ALL CREATE:CREATE READ:READ UNSET:UNSET] [] false <nil> [] false} false false}
	if jsonObj.Operation != nil {
		updateOperation, err := utils.UpdateForElement(jsonObj.Operation,
			fmt.Sprintf("%s%s", parentPath, "/operation"), params...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, updateOperation)

	}
	//Property: {Rbac_Rbac_Role_Permission type {string  map[CONFIG:CONFIG GRPC:GRPC UNSET:UNSET] [] false <nil> [] false} false false}
	if jsonObj.Type != nil {
		updateType, err := utils.UpdateForElement(jsonObj.Type,
			fmt.Sprintf("%s%s", parentPath, "/type"), params...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, updateType)

	}

	return updates, nil
}

//Ignoring Target

//Ignoring RequestBodyRbacV100targetRbac

//Ignoring RequestBodyRbacV100targetRbacGroup

//Ignoring RequestBodyRbacV100targetRbacGroupgroupidRole

//Ignoring RequestBodyRbacV100targetRbacRole

//Ignoring RequestBodyRbacV100targetRbacRoleroleidPermission

// Not generating param-types
// Not generating request-bodies
