// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"fmt"
	"strings"
)

import (
	"github.com/onosproject/aether-roc-api/pkg/rbac_1_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	modelplugin "github.com/onosproject/config-models/modelplugin/rbac-1.0.0/rbac_1_0_0"
	"github.com/openconfig/gnmi/proto/gnmi"
	"regexp"
)

// encodeToGnmiRbac converts OAPI to gNMI.
func encodeToGnmiRbac(
	jsonObj *types.Rbac, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)

	//Property: { Group {[]RbacGroup  map[] [] false <nil> [] false} false false}
	if jsonObj.Group != nil {
		for _, item := range *jsonObj.Group {
			item := item //Pinning
			paramsRbacGroup := make([]string, len(params))
			copy(paramsRbacGroup, params)
			paramsRbacGroup = append(paramsRbacGroup, *item.Groupid)
			updateGroup, err :=
				encodeToGnmiRbacGroup(&item,
					fmt.Sprintf("%s/%s/{%sid}", parentPath, "group", "group"), paramsRbacGroup...)
			if err != nil {
				return nil, err
			}
			updates = append(updates, updateGroup...)
		}
	}
	//Property: { Role {[]RbacRole  map[] [] false <nil> [] false} false false}
	if jsonObj.Role != nil {
		for _, item := range *jsonObj.Role {
			item := item //Pinning
			paramsRbacRole := make([]string, len(params))
			copy(paramsRbacRole, params)
			paramsRbacRole = append(paramsRbacRole, *item.Roleid)
			updateRole, err :=
				encodeToGnmiRbacRole(&item,
					fmt.Sprintf("%s/%s/{%sid}", parentPath, "role", "role"), paramsRbacRole...)
			if err != nil {
				return nil, err
			}
			updates = append(updates, updateRole...)
		}
	}

	return updates, nil
}

// encodeToGnmiRbacGroup converts OAPI to gNMI.
func encodeToGnmiRbacGroup(
	jsonObj *types.RbacGroup, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)

	//Property: { Role {[]RbacGroupRole  map[] [] false <nil> [] false} false false}
	if jsonObj.Role != nil {
		for _, item := range *jsonObj.Role {
			item := item //Pinning
			paramsRbacGroupRole := make([]string, len(params))
			copy(paramsRbacGroupRole, params)
			paramsRbacGroupRole = append(paramsRbacGroupRole, *item.Roleid)
			updateRole, err :=
				encodeToGnmiRbacGroupRole(&item,
					fmt.Sprintf("%s/%s/{%sid}", parentPath, "role", "role"), paramsRbacGroupRole...)
			if err != nil {
				return nil, err
			}
			updates = append(updates, updateRole...)
		}
	}
	//Property: { description {string  map[] [] false <nil> [] false} false false}
	if jsonObj.Description != nil {

		paramsDescription := make([]string, len(params))
		copy(paramsDescription, params)
		paramsDescription = append(paramsDescription, *jsonObj.Description)
		mp := modelplugin.Device{}
		mpField, err := utils.CreateModelPluginObject(&mp, "RbacGroupDescription", paramsDescription...)
		if err != nil {
			return nil, err
		}
		updateDescription, err := utils.UpdateForElement(mpField, fmt.Sprintf("%s%s", parentPath, "/description"), paramsDescription...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, updateDescription)

	}
	//Property: { groupid {string  map[] [] false <nil> [] false} false false}
	if jsonObj.Groupid != nil {

		paramsGroupid := make([]string, len(params))
		copy(paramsGroupid, params)
		paramsGroupid = append(paramsGroupid, *jsonObj.Groupid)
		mp := modelplugin.Device{}
		mpField, err := utils.CreateModelPluginObject(&mp, "RbacGroupGroupid", paramsGroupid...)
		if err != nil {
			return nil, err
		}
		updateGroupid, err := utils.UpdateForElement(mpField, fmt.Sprintf("%s%s", parentPath, "/groupid"), paramsGroupid...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, updateGroupid)

	}

	return updates, nil
}

// encodeToGnmiRbacGroupRole converts OAPI to gNMI.
func encodeToGnmiRbacGroupRole(
	jsonObj *types.RbacGroupRole, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)

	//Property: { description {string  map[] [] false <nil> [] false} false false}
	if jsonObj.Description != nil {

		paramsDescription := make([]string, len(params))
		copy(paramsDescription, params)
		paramsDescription = append(paramsDescription, *jsonObj.Description)
		mp := modelplugin.Device{}
		mpField, err := utils.CreateModelPluginObject(&mp, "RbacGroupRoleDescription", paramsDescription...)
		if err != nil {
			return nil, err
		}
		updateDescription, err := utils.UpdateForElement(mpField, fmt.Sprintf("%s%s", parentPath, "/description"), paramsDescription...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, updateDescription)

	}
	//Property: { roleid {string  map[] [] false <nil> [] false} false false}
	if jsonObj.Roleid != nil {

		paramsRoleid := make([]string, len(params))
		copy(paramsRoleid, params)
		paramsRoleid = append(paramsRoleid, *jsonObj.Roleid)
		mp := modelplugin.Device{}
		mpField, err := utils.CreateModelPluginObject(&mp, "RbacGroupRoleRoleid", paramsRoleid...)
		if err != nil {
			return nil, err
		}
		updateRoleid, err := utils.UpdateForElement(mpField, fmt.Sprintf("%s%s", parentPath, "/roleid"), paramsRoleid...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, updateRoleid)

	}

	return updates, nil
}

// encodeToGnmiRbacRole converts OAPI to gNMI.
func encodeToGnmiRbacRole(
	jsonObj *types.RbacRole, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)

	//Property: { Permission {RbacRolePermission  map[] [] false <nil> [] false} false false}
	if jsonObj.Permission != nil {

		re := regexp.MustCompile(`[A-Z][^A-Z]*`)
		submatchall := re.FindAllString("Permission", -1)
		updatePermission, err := encodeToGnmiRbacRolePermission(
			jsonObj.Permission,
			fmt.Sprintf("%s/%s", parentPath, strings.ToLower(strings.Join(submatchall, "/"))), params...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, updatePermission...)
	}
	//Property: { description {string  map[] [] false <nil> [] false} false false}
	if jsonObj.Description != nil {

		paramsDescription := make([]string, len(params))
		copy(paramsDescription, params)
		paramsDescription = append(paramsDescription, *jsonObj.Description)
		mp := modelplugin.Device{}
		mpField, err := utils.CreateModelPluginObject(&mp, "RbacRoleDescription", paramsDescription...)
		if err != nil {
			return nil, err
		}
		updateDescription, err := utils.UpdateForElement(mpField, fmt.Sprintf("%s%s", parentPath, "/description"), paramsDescription...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, updateDescription)

	}
	//Property: { roleid {string  map[] [] false <nil> [] false} false false}
	if jsonObj.Roleid != nil {

		paramsRoleid := make([]string, len(params))
		copy(paramsRoleid, params)
		paramsRoleid = append(paramsRoleid, *jsonObj.Roleid)
		mp := modelplugin.Device{}
		mpField, err := utils.CreateModelPluginObject(&mp, "RbacRoleRoleid", paramsRoleid...)
		if err != nil {
			return nil, err
		}
		updateRoleid, err := utils.UpdateForElement(mpField, fmt.Sprintf("%s%s", parentPath, "/roleid"), paramsRoleid...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, updateRoleid)

	}

	return updates, nil
}

// encodeToGnmiRbacRolePermission converts OAPI to gNMI.
func encodeToGnmiRbacRolePermission(
	jsonObj *types.RbacRolePermission, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)

	//Property: { leaf-list-noun {[]string  map[] [] false <nil> [] false} false false}
	if jsonObj.LeafListNoun != nil {

		paramsLeafListNoun := make([]string, len(params))
		copy(paramsLeafListNoun, params)
		paramsLeafListNoun = append(paramsLeafListNoun, *jsonObj.LeafListNoun...)
		mp := modelplugin.Device{}
		mpField, err := utils.CreateModelPluginObject(&mp, "RbacRolePermissionNoun", paramsLeafListNoun...)
		if err != nil {
			return nil, err
		}
		updateLeafListNoun, err := utils.UpdateForElement(mpField, fmt.Sprintf("%s%s", parentPath, "/noun"), paramsLeafListNoun...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, updateLeafListNoun)

	}
	//Property: { operation {string  map[ALL:ALL CREATE:CREATE READ:READ] [] false <nil> [] false} false false}
	if jsonObj.Operation != nil {

		paramsOperation := make([]string, len(params))
		copy(paramsOperation, params)
		paramsOperation = append(paramsOperation, *jsonObj.Operation)
		mp := modelplugin.Device{}
		mpField, err := utils.CreateModelPluginObject(&mp, "RbacRolePermissionOperation", paramsOperation...)
		if err != nil {
			return nil, err
		}
		updateOperation, err := utils.UpdateForElement(mpField,
			fmt.Sprintf("%s%s", parentPath, "/operation"), paramsOperation...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, updateOperation)

	}
	//Property: { type {string  map[CONFIG:CONFIG GRPC:GRPC] [] false <nil> [] false} false false}
	if jsonObj.Type != nil {

		paramsType := make([]string, len(params))
		copy(paramsType, params)
		paramsType = append(paramsType, *jsonObj.Type)
		mp := modelplugin.Device{}
		mpField, err := utils.CreateModelPluginObject(&mp, "RbacRolePermissionType", paramsType...)
		if err != nil {
			return nil, err
		}
		updateType, err := utils.UpdateForElement(mpField,
			fmt.Sprintf("%s%s", parentPath, "/type"), paramsType...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, updateType)

	}

	return updates, nil
}

//Ignoring Target

//Ignoring RequestBodyRbac

//Ignoring RequestBodyRbacGroup

//Ignoring RequestBodyRbacGroupRole

//Ignoring RequestBodyRbacRole

//Ignoring RequestBodyRbacRolePermission

// Not generating param-types
// Not generating request-bodies
