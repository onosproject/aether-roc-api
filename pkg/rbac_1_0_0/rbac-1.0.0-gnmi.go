// Code generated by oapi-codegen. DO NOT EDIT.
// Package rbac_1_0_0 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package rbac_1_0_0

import (
	"context"
	"fmt"
)

import (
	"github.com/onosproject/aether-roc-api/pkg/gnmiutils"
	modelplugin "github.com/onosproject/config-models/modelplugin/rbac-1.0.0/rbac_1_0_0"
)

// gnmiDeleteRbacV100targetRbac deletes an instance of RbacV100targetRbac.
func (w *ServerImpl) gnmiDeleteRbacV100targetRbac(ctx context.Context, openApiPath string, target Target, args ...string) (*RbacV100targetRbac, error) {
	var response RbacV100targetRbac

	return &response, nil
}

// gnmiGetRbacV100targetRbac returns an instance of RbacV100targetRbac.
func (i *ServerImpl) gnmiGetRbacV100targetRbac(ctx context.Context, openApiPath string, target Target, args ...string) (*RbacV100targetRbac, error) {

	gnmiGet, err := gnmiutils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	jsonVal, err := gnmiutils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}

	log.Infof("gNMI Json %s", string(jsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(jsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	response := mpd.handlePropListRbacV100targetRbac()

	return response, nil
}

// gnmiPostRbacV100targetRbac adds an instance of RbacV100targetRbac.
func (w *ServerImpl) gnmiPostRbacV100targetRbac(ctx context.Context, openApiPath string, target Target, args ...string) (*RbacV100targetRbac, error) {
	var response RbacV100targetRbac

	return &response, nil
}

// gnmiDeleteRbacV100targetRbacGroup deletes an instance of RbacV100targetRbacGroup.
func (w *ServerImpl) gnmiDeleteRbacV100targetRbacGroup(ctx context.Context, openApiPath string, target Target, args ...string) (*RbacV100targetRbacGroup, error) {
	var response RbacV100targetRbacGroup

	return &response, nil
}

// gnmiGetRbacV100targetRbacGroup returns an instance of RbacV100targetRbacGroup.
func (i *ServerImpl) gnmiGetRbacV100targetRbacGroup(ctx context.Context, openApiPath string, target Target, args ...string) (*RbacV100targetRbacGroup, error) {

	gnmiGet, err := gnmiutils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	jsonVal, err := gnmiutils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}

	log.Infof("gNMI Json %s", string(jsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(jsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	response := mpd.handlePropListRbacV100targetRbacGroup()

	return response, nil
}

// gnmiPostRbacV100targetRbacGroup adds an instance of RbacV100targetRbacGroup.
func (w *ServerImpl) gnmiPostRbacV100targetRbacGroup(ctx context.Context, openApiPath string, target Target, args ...string) (*RbacV100targetRbacGroup, error) {
	var response RbacV100targetRbacGroup

	return &response, nil
}

// gnmiDeleteRbacV100targetRbacGroupRole deletes an instance of RbacV100targetRbacGroupRole.
func (w *ServerImpl) gnmiDeleteRbacV100targetRbacGroupRole(ctx context.Context, openApiPath string, target Target, args ...string) (*RbacV100targetRbacGroupRole, error) {
	var response RbacV100targetRbacGroupRole

	return &response, nil
}

// gnmiGetRbacV100targetRbacGroupRole returns an instance of RbacV100targetRbacGroupRole.
func (i *ServerImpl) gnmiGetRbacV100targetRbacGroupRole(ctx context.Context, openApiPath string, target Target, args ...string) (*RbacV100targetRbacGroupRole, error) {

	gnmiGet, err := gnmiutils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	jsonVal, err := gnmiutils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}

	log.Infof("gNMI Json %s", string(jsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(jsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	response := mpd.handlePropListRbacV100targetRbacGroupRole()

	return response, nil
}

// gnmiPostRbacV100targetRbacGroupRole adds an instance of RbacV100targetRbacGroupRole.
func (w *ServerImpl) gnmiPostRbacV100targetRbacGroupRole(ctx context.Context, openApiPath string, target Target, args ...string) (*RbacV100targetRbacGroupRole, error) {
	var response RbacV100targetRbacGroupRole

	return &response, nil
}

// gnmiDeleteRbacV100targetRbacRole deletes an instance of RbacV100targetRbacRole.
func (w *ServerImpl) gnmiDeleteRbacV100targetRbacRole(ctx context.Context, openApiPath string, target Target, args ...string) (*RbacV100targetRbacRole, error) {
	var response RbacV100targetRbacRole

	return &response, nil
}

// gnmiGetRbacV100targetRbacRole returns an instance of RbacV100targetRbacRole.
func (i *ServerImpl) gnmiGetRbacV100targetRbacRole(ctx context.Context, openApiPath string, target Target, args ...string) (*RbacV100targetRbacRole, error) {

	gnmiGet, err := gnmiutils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	jsonVal, err := gnmiutils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}

	log.Infof("gNMI Json %s", string(jsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(jsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	response := mpd.handlePropListRbacV100targetRbacRole()

	return response, nil
}

// gnmiPostRbacV100targetRbacRole adds an instance of RbacV100targetRbacRole.
func (w *ServerImpl) gnmiPostRbacV100targetRbacRole(ctx context.Context, openApiPath string, target Target, args ...string) (*RbacV100targetRbacRole, error) {
	var response RbacV100targetRbacRole

	return &response, nil
}

// gnmiDeleteRbacV100targetRbacRolePermission deletes an instance of RbacV100targetRbacRolePermission.
func (w *ServerImpl) gnmiDeleteRbacV100targetRbacRolePermission(ctx context.Context, openApiPath string, target Target, args ...string) (*RbacV100targetRbacRolePermission, error) {
	var response RbacV100targetRbacRolePermission

	return &response, nil
}

// gnmiGetRbacV100targetRbacRolePermission returns an instance of RbacV100targetRbacRolePermission.
func (i *ServerImpl) gnmiGetRbacV100targetRbacRolePermission(ctx context.Context, openApiPath string, target Target, args ...string) (*RbacV100targetRbacRolePermission, error) {

	gnmiGet, err := gnmiutils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	jsonVal, err := gnmiutils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}

	log.Infof("gNMI Json %s", string(jsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(jsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	response := mpd.handlePropListRbacV100targetRbacRolePermission()

	return response, nil
}

// gnmiPostRbacV100targetRbacRolePermission adds an instance of RbacV100targetRbacRolePermission.
func (w *ServerImpl) gnmiPostRbacV100targetRbacRolePermission(ctx context.Context, openApiPath string, target Target, args ...string) (*RbacV100targetRbacRolePermission, error) {
	var response RbacV100targetRbacRolePermission

	return &response, nil
}

// gnmiDeleteTarget deletes an instance of target.
func (w *ServerImpl) gnmiDeleteTarget(ctx context.Context, openApiPath string, target Target, args ...string) (*Target, error) {
	var response Target

	return &response, nil
}

// gnmiGetTarget returns an instance of target.
func (i *ServerImpl) gnmiGetTarget(ctx context.Context, openApiPath string, target Target, args ...string) (*Target, error) {

	gnmiGet, err := gnmiutils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	jsonVal, err := gnmiutils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}

	log.Infof("gNMI Json %s", string(jsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(jsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	response := mpd.handlePropListTarget()

	return response, nil
}

// gnmiPostTarget adds an instance of target.
func (w *ServerImpl) gnmiPostTarget(ctx context.Context, openApiPath string, target Target, args ...string) (*Target, error) {
	var response Target

	return &response, nil
}

type Translator interface {
	handlePropListRbacV100targetRbac() *RbacV100targetRbac
	handlePropListRbacV100targetRbacGroup() *RbacV100targetRbacGroup
	handlePropListRbacV100targetRbacGroupRole() *RbacV100targetRbacGroupRole
	handlePropListRbacV100targetRbacRole() *RbacV100targetRbacRole
	handlePropListRbacV100targetRbacRolePermission() *RbacV100targetRbacRolePermission
	handlePropListTarget() *Target
}
