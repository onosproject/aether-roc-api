// Code generated by oapi-codegen. DO NOT EDIT.
// Code generated by oapi-codegen. DO NOT EDIT.
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: LicenseRef-ONF-Member-1.0
//
package rbac_1_0_0

import modelplugin "github.com/onosproject/config-models/modelplugin/rbac-1.0.0/rbac_1_0_0"

type ModelPluginDevice struct {
	device modelplugin.Device
}

// Hand coded for the moment until we generate a template
func (d *ModelPluginDevice) handlePropListRbacV100targetRbac() *RbacV100targetRbac {
	groups := make([]RbacV100targetRbacGroup, 0)
	roles := make([]RbacV100targetRbacRole, 0)
	resource := RbacV100targetRbac{
		ListRbacV100targetRbacGroup: &groups,
		ListRbacV100targetRbacRole:  &roles,
	}
	for _, v := range d.device.Rbac.Group {
		group := RbacV100targetRbacGroup{
			Description: v.Description,
			Groupid:     v.Groupid,
		}
		groupRoles := make([]RbacV100targetRbacGroupRole, 0)
		for _, v1 := range v.Role {
			groupRole := RbacV100targetRbacGroupRole{
				Description: v1.Description,
				Roleid:      v1.Roleid,
			}
			groupRoles = append(groupRoles, groupRole)
		}
		group.ListRbacV100targetRbacGroupRole = &groupRoles
		groups = append(groups, group)
	}
	for _, v := range d.device.Rbac.Role {
		role := RbacV100targetRbacRole{
			Description: v.Description,
			Roleid:      v.Roleid,
		}
		opStr := convertOperation(v.Permission.Operation)
		rolePermission := RbacV100targetRbacRolePermission{
			Operation:    &opStr,
			Type:         v.Description,
		}
		rolePermissionNouns := make([]string, 0)
		for _, noun := range v.Permission.Noun {
			rolePermissionNouns = append(rolePermissionNouns, noun)
		}
		rolePermission.LeafListNoun = &rolePermissionNouns
		role.RbacV100targetRbacRolePermission = &rolePermission
		roles = append(roles, role)
	}

	return &resource
}

func convertOperation(op modelplugin.E_RbacIdentities_PERMISSION) string {
	switch op {
	case modelplugin.RbacIdentities_PERMISSION_ALL:
		return "all"
	case modelplugin.RbacIdentities_PERMISSION_CREATE:
		return "create"
	case modelplugin.RbacIdentities_PERMISSION_READ:
		return "read"
	default:
		return "unset"
	}
}

func (d *ModelPluginDevice) handlePropListRbacV100targetRbacGroup() *RbacV100targetRbacGroup {
	return nil
}

func (d *ModelPluginDevice) handlePropListRbacV100targetRbacGroupRole() *RbacV100targetRbacGroupRole {
	return nil
}

func (d *ModelPluginDevice) handlePropListRbacV100targetRbacRole() *RbacV100targetRbacRole {
	return nil
}

func (d *ModelPluginDevice) handlePropListRbacV100targetRbacRolePermission() *RbacV100targetRbacRolePermission {
	return nil
}

func (d *ModelPluginDevice) handlePropListTarget() *Target {
	return nil
}
