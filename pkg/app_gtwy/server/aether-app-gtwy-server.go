// Code generated by GENERATOR. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"github.com/labstack/echo/v4"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/middleware/openapi3mw"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// GET /enterprises/{enterprise-id}/site/{site-id}/devices
	// (GET /appgtwy/v1/{target}/enterprises/{enterprise-id}/sites/{site-id}/devices)
	GetDevices(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string) error
	// GET /enterprises/{enterprise-id}/sites/{site-id}/devices/{device-id}
	// (GET /appgtwy/v1/{target}/enterprises/{enterprise-id}/sites/{site-id}/devices/{device-id})
	GetDevice(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, deviceId string) error
}

// serverInterfaceWrapper converts echo contexts to parameters.
type serverInterfaceWrapper struct {
	handler ServerInterface
}

// GetDevices converts echo context to params.
func (w *serverInterfaceWrapper) GetDevices(ctx echo.Context) error {

	// ------------- Path parameter "target" -------------

	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// ------------- Path parameter "enterprise-id" -------------

	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")

	// ------------- Path parameter "site-id" -------------

	var siteId string
	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetDevices(ctx, target, enterpriseId, siteId)
}

// GetDevice converts echo context to params.
func (w *serverInterfaceWrapper) GetDevice(ctx echo.Context) error {

	// ------------- Path parameter "target" -------------

	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// ------------- Path parameter "enterprise-id" -------------

	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")

	// ------------- Path parameter "site-id" -------------

	var siteId string
	siteId = ctx.Param("site-id")

	// ------------- Path parameter "device-id" -------------

	var deviceId string
	deviceId = ctx.Param("device-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetDevice(ctx, target, enterpriseId, siteId, deviceId)
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, validateResponse bool) error {

	openApiDefinition, err := GetSwagger()
	if err != nil {
		return err
	}
	wrapper := serverInterfaceWrapper{
		handler: si,
	}

	router.GET("/appgtwy/v1/:target/enterprises/:enterprise-id/sites/:site-id/devices", wrapper.GetDevices, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/appgtwy/v1/:target/enterprises/:enterprise-id/sites/:site-id/devices/:device-id", wrapper.GetDevice, openapi3mw.ValidateOpenapi3(openApiDefinition))

	return nil
}
