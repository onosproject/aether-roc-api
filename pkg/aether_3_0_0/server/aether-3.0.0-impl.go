// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"reflect"

	"github.com/labstack/echo/v4"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_3_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/southbound"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	externalRef1 "github.com/onosproject/config-models/modelplugin/aether-3.0.0/aether_3_0_0"
	"github.com/onosproject/onos-lib-go/pkg/logging"
	"github.com/openconfig/gnmi/proto/gnmi"
)

//Ignoring AdditionalPropertyTarget

// gnmiDeleteApList deletes an instance of Ap-list.
func (i *ServerImpl) gnmiDeleteApList(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetApList returns an instance of Ap-list.
func (i *ServerImpl) gnmiGetApList(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.ApList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toApList(args...)
}

// gnmiPostApList adds an instance of Ap-list.
func (i *ServerImpl) gnmiPostApList(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.ApList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Ap-list %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.ApList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteApListApList deletes an instance of Ap-list_Ap-list.
func (i *ServerImpl) gnmiDeleteApListApList(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetApListApList returns an instance of Ap-list_Ap-list.
func (i *ServerImpl) gnmiGetApListApList(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.ApListApList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toApListApList(args...)
}

// gnmiPostApListApList adds an instance of Ap-list_Ap-list.
func (i *ServerImpl) gnmiPostApListApList(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.ApListApList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Ap-list_Ap-list %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApListApList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.ApListApList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteApListApListAccessPoints deletes an instance of Ap-list_Ap-list_Access-points.
func (i *ServerImpl) gnmiDeleteApListApListAccessPoints(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetApListApListAccessPoints returns an instance of Ap-list_Ap-list_Access-points.
func (i *ServerImpl) gnmiGetApListApListAccessPoints(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.ApListApListAccessPoints, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toApListApListAccessPoints(args...)
}

// gnmiPostApListApListAccessPoints adds an instance of Ap-list_Ap-list_Access-points.
func (i *ServerImpl) gnmiPostApListApListAccessPoints(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.ApListApListAccessPoints)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Ap-list_Ap-list_Access-points %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApListApListAccessPoints(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.ApListApListAccessPoints to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteApplication deletes an instance of Application.
func (i *ServerImpl) gnmiDeleteApplication(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetApplication returns an instance of Application.
func (i *ServerImpl) gnmiGetApplication(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.Application, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toApplication(args...)
}

// gnmiPostApplication adds an instance of Application.
func (i *ServerImpl) gnmiPostApplication(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.Application)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Application %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApplication(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.Application to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteApplicationApplication deletes an instance of Application_Application.
func (i *ServerImpl) gnmiDeleteApplicationApplication(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetApplicationApplication returns an instance of Application_Application.
func (i *ServerImpl) gnmiGetApplicationApplication(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.ApplicationApplication, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toApplicationApplication(args...)
}

// gnmiPostApplicationApplication adds an instance of Application_Application.
func (i *ServerImpl) gnmiPostApplicationApplication(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.ApplicationApplication)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Application_Application %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApplicationApplication(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.ApplicationApplication to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteApplicationApplicationEndpoint deletes an instance of Application_Application_Endpoint.
func (i *ServerImpl) gnmiDeleteApplicationApplicationEndpoint(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetApplicationApplicationEndpoint returns an instance of Application_Application_Endpoint.
func (i *ServerImpl) gnmiGetApplicationApplicationEndpoint(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.ApplicationApplicationEndpoint, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toApplicationApplicationEndpoint(args...)
}

// gnmiPostApplicationApplicationEndpoint adds an instance of Application_Application_Endpoint.
func (i *ServerImpl) gnmiPostApplicationApplicationEndpoint(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.ApplicationApplicationEndpoint)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Application_Application_Endpoint %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApplicationApplicationEndpoint(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.ApplicationApplicationEndpoint to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteConnectivityService deletes an instance of Connectivity-service.
func (i *ServerImpl) gnmiDeleteConnectivityService(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetConnectivityService returns an instance of Connectivity-service.
func (i *ServerImpl) gnmiGetConnectivityService(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.ConnectivityService, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toConnectivityService(args...)
}

// gnmiPostConnectivityService adds an instance of Connectivity-service.
func (i *ServerImpl) gnmiPostConnectivityService(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.ConnectivityService)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Connectivity-service %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiConnectivityService(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.ConnectivityService to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteConnectivityServiceConnectivityService deletes an instance of Connectivity-service_Connectivity-service.
func (i *ServerImpl) gnmiDeleteConnectivityServiceConnectivityService(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetConnectivityServiceConnectivityService returns an instance of Connectivity-service_Connectivity-service.
func (i *ServerImpl) gnmiGetConnectivityServiceConnectivityService(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.ConnectivityServiceConnectivityService, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toConnectivityServiceConnectivityService(args...)
}

// gnmiPostConnectivityServiceConnectivityService adds an instance of Connectivity-service_Connectivity-service.
func (i *ServerImpl) gnmiPostConnectivityServiceConnectivityService(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.ConnectivityServiceConnectivityService)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Connectivity-service_Connectivity-service %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiConnectivityServiceConnectivityService(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.ConnectivityServiceConnectivityService to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteDeviceGroup deletes an instance of Device-group.
func (i *ServerImpl) gnmiDeleteDeviceGroup(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetDeviceGroup returns an instance of Device-group.
func (i *ServerImpl) gnmiGetDeviceGroup(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.DeviceGroup, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toDeviceGroup(args...)
}

// gnmiPostDeviceGroup adds an instance of Device-group.
func (i *ServerImpl) gnmiPostDeviceGroup(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.DeviceGroup)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Device-group %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiDeviceGroup(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.DeviceGroup to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteDeviceGroupDeviceGroup deletes an instance of Device-group_Device-group.
func (i *ServerImpl) gnmiDeleteDeviceGroupDeviceGroup(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetDeviceGroupDeviceGroup returns an instance of Device-group_Device-group.
func (i *ServerImpl) gnmiGetDeviceGroupDeviceGroup(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.DeviceGroupDeviceGroup, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toDeviceGroupDeviceGroup(args...)
}

// gnmiPostDeviceGroupDeviceGroup adds an instance of Device-group_Device-group.
func (i *ServerImpl) gnmiPostDeviceGroupDeviceGroup(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.DeviceGroupDeviceGroup)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Device-group_Device-group %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiDeviceGroupDeviceGroup(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.DeviceGroupDeviceGroup to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteDeviceGroupDeviceGroupImsis deletes an instance of Device-group_Device-group_Imsis.
func (i *ServerImpl) gnmiDeleteDeviceGroupDeviceGroupImsis(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetDeviceGroupDeviceGroupImsis returns an instance of Device-group_Device-group_Imsis.
func (i *ServerImpl) gnmiGetDeviceGroupDeviceGroupImsis(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.DeviceGroupDeviceGroupImsis, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toDeviceGroupDeviceGroupImsis(args...)
}

// gnmiPostDeviceGroupDeviceGroupImsis adds an instance of Device-group_Device-group_Imsis.
func (i *ServerImpl) gnmiPostDeviceGroupDeviceGroupImsis(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.DeviceGroupDeviceGroupImsis)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Device-group_Device-group_Imsis %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiDeviceGroupDeviceGroupImsis(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.DeviceGroupDeviceGroupImsis to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteEnterprise deletes an instance of Enterprise.
func (i *ServerImpl) gnmiDeleteEnterprise(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetEnterprise returns an instance of Enterprise.
func (i *ServerImpl) gnmiGetEnterprise(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.Enterprise, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprise(args...)
}

// gnmiPostEnterprise adds an instance of Enterprise.
func (i *ServerImpl) gnmiPostEnterprise(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.Enterprise)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Enterprise %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprise(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.Enterprise to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteEnterpriseEnterprise deletes an instance of Enterprise_Enterprise.
func (i *ServerImpl) gnmiDeleteEnterpriseEnterprise(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetEnterpriseEnterprise returns an instance of Enterprise_Enterprise.
func (i *ServerImpl) gnmiGetEnterpriseEnterprise(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.EnterpriseEnterprise, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterpriseEnterprise(args...)
}

// gnmiPostEnterpriseEnterprise adds an instance of Enterprise_Enterprise.
func (i *ServerImpl) gnmiPostEnterpriseEnterprise(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.EnterpriseEnterprise)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Enterprise_Enterprise %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterpriseEnterprise(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.EnterpriseEnterprise to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteEnterpriseEnterpriseConnectivityService deletes an instance of Enterprise_Enterprise_Connectivity-service.
func (i *ServerImpl) gnmiDeleteEnterpriseEnterpriseConnectivityService(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetEnterpriseEnterpriseConnectivityService returns an instance of Enterprise_Enterprise_Connectivity-service.
func (i *ServerImpl) gnmiGetEnterpriseEnterpriseConnectivityService(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.EnterpriseEnterpriseConnectivityService, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterpriseEnterpriseConnectivityService(args...)
}

// gnmiPostEnterpriseEnterpriseConnectivityService adds an instance of Enterprise_Enterprise_Connectivity-service.
func (i *ServerImpl) gnmiPostEnterpriseEnterpriseConnectivityService(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.EnterpriseEnterpriseConnectivityService)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Enterprise_Enterprise_Connectivity-service %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterpriseEnterpriseConnectivityService(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.EnterpriseEnterpriseConnectivityService to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteIpDomain deletes an instance of Ip-domain.
func (i *ServerImpl) gnmiDeleteIpDomain(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetIpDomain returns an instance of Ip-domain.
func (i *ServerImpl) gnmiGetIpDomain(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.IpDomain, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toIpDomain(args...)
}

// gnmiPostIpDomain adds an instance of Ip-domain.
func (i *ServerImpl) gnmiPostIpDomain(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.IpDomain)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Ip-domain %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiIpDomain(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.IpDomain to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteIpDomainIpDomain deletes an instance of Ip-domain_Ip-domain.
func (i *ServerImpl) gnmiDeleteIpDomainIpDomain(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetIpDomainIpDomain returns an instance of Ip-domain_Ip-domain.
func (i *ServerImpl) gnmiGetIpDomainIpDomain(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.IpDomainIpDomain, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toIpDomainIpDomain(args...)
}

// gnmiPostIpDomainIpDomain adds an instance of Ip-domain_Ip-domain.
func (i *ServerImpl) gnmiPostIpDomainIpDomain(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.IpDomainIpDomain)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Ip-domain_Ip-domain %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiIpDomainIpDomain(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.IpDomainIpDomain to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteNetwork deletes an instance of Network.
func (i *ServerImpl) gnmiDeleteNetwork(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetNetwork returns an instance of Network.
func (i *ServerImpl) gnmiGetNetwork(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.Network, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toNetwork(args...)
}

// gnmiPostNetwork adds an instance of Network.
func (i *ServerImpl) gnmiPostNetwork(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.Network)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Network %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiNetwork(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.Network to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteNetworkNetwork deletes an instance of Network_Network.
func (i *ServerImpl) gnmiDeleteNetworkNetwork(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetNetworkNetwork returns an instance of Network_Network.
func (i *ServerImpl) gnmiGetNetworkNetwork(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.NetworkNetwork, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toNetworkNetwork(args...)
}

// gnmiPostNetworkNetwork adds an instance of Network_Network.
func (i *ServerImpl) gnmiPostNetworkNetwork(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.NetworkNetwork)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Network_Network %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiNetworkNetwork(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.NetworkNetwork to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteSite deletes an instance of Site.
func (i *ServerImpl) gnmiDeleteSite(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetSite returns an instance of Site.
func (i *ServerImpl) gnmiGetSite(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.Site, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSite(args...)
}

// gnmiPostSite adds an instance of Site.
func (i *ServerImpl) gnmiPostSite(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.Site)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Site %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSite(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.Site to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteSiteSite deletes an instance of Site_Site.
func (i *ServerImpl) gnmiDeleteSiteSite(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetSiteSite returns an instance of Site_Site.
func (i *ServerImpl) gnmiGetSiteSite(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.SiteSite, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSite(args...)
}

// gnmiPostSiteSite adds an instance of Site_Site.
func (i *ServerImpl) gnmiPostSiteSite(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SiteSite)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Site_Site %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSite(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SiteSite to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteTemplate deletes an instance of Template.
func (i *ServerImpl) gnmiDeleteTemplate(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetTemplate returns an instance of Template.
func (i *ServerImpl) gnmiGetTemplate(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.Template, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toTemplate(args...)
}

// gnmiPostTemplate adds an instance of Template.
func (i *ServerImpl) gnmiPostTemplate(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.Template)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Template %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTemplate(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.Template to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteTemplateTemplate deletes an instance of Template_Template.
func (i *ServerImpl) gnmiDeleteTemplateTemplate(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetTemplateTemplate returns an instance of Template_Template.
func (i *ServerImpl) gnmiGetTemplateTemplate(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.TemplateTemplate, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toTemplateTemplate(args...)
}

// gnmiPostTemplateTemplate adds an instance of Template_Template.
func (i *ServerImpl) gnmiPostTemplateTemplate(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.TemplateTemplate)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Template_Template %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTemplateTemplate(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.TemplateTemplate to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteTrafficClass deletes an instance of Traffic-class.
func (i *ServerImpl) gnmiDeleteTrafficClass(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetTrafficClass returns an instance of Traffic-class.
func (i *ServerImpl) gnmiGetTrafficClass(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.TrafficClass, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toTrafficClass(args...)
}

// gnmiPostTrafficClass adds an instance of Traffic-class.
func (i *ServerImpl) gnmiPostTrafficClass(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.TrafficClass)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Traffic-class %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTrafficClass(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.TrafficClass to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteTrafficClassTrafficClass deletes an instance of Traffic-class_Traffic-class.
func (i *ServerImpl) gnmiDeleteTrafficClassTrafficClass(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetTrafficClassTrafficClass returns an instance of Traffic-class_Traffic-class.
func (i *ServerImpl) gnmiGetTrafficClassTrafficClass(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.TrafficClassTrafficClass, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toTrafficClassTrafficClass(args...)
}

// gnmiPostTrafficClassTrafficClass adds an instance of Traffic-class_Traffic-class.
func (i *ServerImpl) gnmiPostTrafficClassTrafficClass(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.TrafficClassTrafficClass)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Traffic-class_Traffic-class %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTrafficClassTrafficClass(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.TrafficClassTrafficClass to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteUpf deletes an instance of Upf.
func (i *ServerImpl) gnmiDeleteUpf(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetUpf returns an instance of Upf.
func (i *ServerImpl) gnmiGetUpf(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.Upf, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toUpf(args...)
}

// gnmiPostUpf adds an instance of Upf.
func (i *ServerImpl) gnmiPostUpf(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.Upf)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Upf %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiUpf(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.Upf to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteUpfUpf deletes an instance of Upf_Upf.
func (i *ServerImpl) gnmiDeleteUpfUpf(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetUpfUpf returns an instance of Upf_Upf.
func (i *ServerImpl) gnmiGetUpfUpf(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.UpfUpf, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toUpfUpf(args...)
}

// gnmiPostUpfUpf adds an instance of Upf_Upf.
func (i *ServerImpl) gnmiPostUpfUpf(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.UpfUpf)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Upf_Upf %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiUpfUpf(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.UpfUpf to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteVcs deletes an instance of Vcs.
func (i *ServerImpl) gnmiDeleteVcs(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetVcs returns an instance of Vcs.
func (i *ServerImpl) gnmiGetVcs(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.Vcs, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toVcs(args...)
}

// gnmiPostVcs adds an instance of Vcs.
func (i *ServerImpl) gnmiPostVcs(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.Vcs)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Vcs %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiVcs(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.Vcs to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteVcsVcs deletes an instance of Vcs_Vcs.
func (i *ServerImpl) gnmiDeleteVcsVcs(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetVcsVcs returns an instance of Vcs_Vcs.
func (i *ServerImpl) gnmiGetVcsVcs(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.VcsVcs, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toVcsVcs(args...)
}

// gnmiPostVcsVcs adds an instance of Vcs_Vcs.
func (i *ServerImpl) gnmiPostVcsVcs(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.VcsVcs)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Vcs_Vcs %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiVcsVcs(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.VcsVcs to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteVcsVcsApplication deletes an instance of Vcs_Vcs_Application.
func (i *ServerImpl) gnmiDeleteVcsVcsApplication(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetVcsVcsApplication returns an instance of Vcs_Vcs_Application.
func (i *ServerImpl) gnmiGetVcsVcsApplication(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.VcsVcsApplication, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toVcsVcsApplication(args...)
}

// gnmiPostVcsVcsApplication adds an instance of Vcs_Vcs_Application.
func (i *ServerImpl) gnmiPostVcsVcsApplication(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.VcsVcsApplication)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Vcs_Vcs_Application %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiVcsVcsApplication(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.VcsVcsApplication to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteTarget deletes an instance of target.
func (i *ServerImpl) gnmiDeleteTarget(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetTarget returns an instance of target.
func (i *ServerImpl) gnmiGetTarget(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.Target, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toTarget(args...)
}

// gnmiPostTarget adds an instance of target.
func (i *ServerImpl) gnmiPostTarget(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	return nil, fmt.Errorf("Not implemented")

}

//Ignoring RequestBodyApList

//Ignoring RequestBodyApListApList

//Ignoring RequestBodyApListApListAccessPoints

//Ignoring RequestBodyApplication

//Ignoring RequestBodyApplicationApplication

//Ignoring RequestBodyApplicationApplicationEndpoint

//Ignoring RequestBodyConnectivityService

//Ignoring RequestBodyConnectivityServiceConnectivityService

//Ignoring RequestBodyDeviceGroup

//Ignoring RequestBodyDeviceGroupDeviceGroup

//Ignoring RequestBodyDeviceGroupDeviceGroupImsis

//Ignoring RequestBodyEnterprise

//Ignoring RequestBodyEnterpriseEnterprise

//Ignoring RequestBodyEnterpriseEnterpriseConnectivityService

//Ignoring RequestBodyIpDomain

//Ignoring RequestBodyIpDomainIpDomain

//Ignoring RequestBodyNetwork

//Ignoring RequestBodyNetworkNetwork

//Ignoring RequestBodySite

//Ignoring RequestBodySiteSite

//Ignoring RequestBodyTemplate

//Ignoring RequestBodyTemplateTemplate

//Ignoring RequestBodyTrafficClass

//Ignoring RequestBodyTrafficClassTrafficClass

//Ignoring RequestBodyUpf

//Ignoring RequestBodyUpfUpf

//Ignoring RequestBodyVcs

//Ignoring RequestBodyVcsVcs

//Ignoring RequestBodyVcsVcsApplication

type Translator interface {
	toAdditionalPropertyTarget(args ...string) (*externalRef0.AdditionalPropertyTarget, error)
	toApList(args ...string) (*externalRef0.ApList, error)
	toApListApList(args ...string) (*externalRef0.ApListApList, error)
	toApListApListAccessPoints(args ...string) (*externalRef0.ApListApListAccessPoints, error)
	toApplication(args ...string) (*externalRef0.Application, error)
	toApplicationApplication(args ...string) (*externalRef0.ApplicationApplication, error)
	toApplicationApplicationEndpoint(args ...string) (*externalRef0.ApplicationApplicationEndpoint, error)
	toConnectivityService(args ...string) (*externalRef0.ConnectivityService, error)
	toConnectivityServiceConnectivityService(args ...string) (*externalRef0.ConnectivityServiceConnectivityService, error)
	toDeviceGroup(args ...string) (*externalRef0.DeviceGroup, error)
	toDeviceGroupDeviceGroup(args ...string) (*externalRef0.DeviceGroupDeviceGroup, error)
	toDeviceGroupDeviceGroupImsis(args ...string) (*externalRef0.DeviceGroupDeviceGroupImsis, error)
	toEnterprise(args ...string) (*externalRef0.Enterprise, error)
	toEnterpriseEnterprise(args ...string) (*externalRef0.EnterpriseEnterprise, error)
	toEnterpriseEnterpriseConnectivityService(args ...string) (*externalRef0.EnterpriseEnterpriseConnectivityService, error)
	toIpDomain(args ...string) (*externalRef0.IpDomain, error)
	toIpDomainIpDomain(args ...string) (*externalRef0.IpDomainIpDomain, error)
	toNetwork(args ...string) (*externalRef0.Network, error)
	toNetworkNetwork(args ...string) (*externalRef0.NetworkNetwork, error)
	toSite(args ...string) (*externalRef0.Site, error)
	toSiteSite(args ...string) (*externalRef0.SiteSite, error)
	toTemplate(args ...string) (*externalRef0.Template, error)
	toTemplateTemplate(args ...string) (*externalRef0.TemplateTemplate, error)
	toTrafficClass(args ...string) (*externalRef0.TrafficClass, error)
	toTrafficClassTrafficClass(args ...string) (*externalRef0.TrafficClassTrafficClass, error)
	toUpf(args ...string) (*externalRef0.Upf, error)
	toUpfUpf(args ...string) (*externalRef0.UpfUpf, error)
	toVcs(args ...string) (*externalRef0.Vcs, error)
	toVcsVcs(args ...string) (*externalRef0.VcsVcs, error)
	toVcsVcsApplication(args ...string) (*externalRef0.VcsVcsApplication, error)
	toTarget(args ...string) (*externalRef0.Target, error)
}

// Not generating param-types
// Not generating request-bodies

// Not generating additional-properties
// Not generating additional-properties
// server-interface template override

const authorization = "Authorization"

// Implement the Server Interface for access to gNMI
var log = logging.GetLogger("model_0_0_0")

// ServerImpl -
type ServerImpl struct {
	GnmiClient southbound.GnmiClient
}

// DeleteApList impl of gNMI access at /aether/v3.0.0/{target}/ap-list
func (i *ServerImpl) DeleteApList(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteApList(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/ap-list", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteApList")
	return ctx.JSON(http.StatusOK, response)
}

// GetApList impl of gNMI access at /aether/v3.0.0/{target}/ap-list
func (i *ServerImpl) GetApList(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetApList(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/ap-list", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetApList")
	return ctx.JSON(http.StatusOK, response)
}

// PostApList impl of gNMI access at /aether/v3.0.0/{target}/ap-list
func (i *ServerImpl) PostApList(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostApList(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/ap-list", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostApList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteApListApList impl of gNMI access at /aether/v3.0.0/{target}/ap-list/ap-list/{id}
func (i *ServerImpl) DeleteApListApList(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteApListApList(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/ap-list/ap-list/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteApListApList")
	return ctx.JSON(http.StatusOK, response)
}

// GetApListApList impl of gNMI access at /aether/v3.0.0/{target}/ap-list/ap-list/{id}
func (i *ServerImpl) GetApListApList(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetApListApList(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/ap-list/ap-list/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetApListApList")
	return ctx.JSON(http.StatusOK, response)
}

// PostApListApList impl of gNMI access at /aether/v3.0.0/{target}/ap-list/ap-list/{id}
func (i *ServerImpl) PostApListApList(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostApListApList(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/ap-list/ap-list/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostApListApList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteApListApListAccessPoints impl of gNMI access at /aether/v3.0.0/{target}/ap-list/ap-list/{id}/access-points/{address}
func (i *ServerImpl) DeleteApListApListAccessPoints(ctx echo.Context, target externalRef0.Target, id string, address string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteApListApListAccessPoints(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/ap-list/ap-list/{id}/access-points/{address}", target, id, address)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteApListApListAccessPoints")
	return ctx.JSON(http.StatusOK, response)
}

// GetApListApListAccessPoints impl of gNMI access at /aether/v3.0.0/{target}/ap-list/ap-list/{id}/access-points/{address}
func (i *ServerImpl) GetApListApListAccessPoints(ctx echo.Context, target externalRef0.Target, id string, address string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetApListApListAccessPoints(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/ap-list/ap-list/{id}/access-points/{address}", target, id, address)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetApListApListAccessPoints")
	return ctx.JSON(http.StatusOK, response)
}

// PostApListApListAccessPoints impl of gNMI access at /aether/v3.0.0/{target}/ap-list/ap-list/{id}/access-points/{address}
func (i *ServerImpl) PostApListApListAccessPoints(ctx echo.Context, target externalRef0.Target, id string, address string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostApListApListAccessPoints(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/ap-list/ap-list/{id}/access-points/{address}", target, id, address)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostApListApListAccessPoints")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteApplication impl of gNMI access at /aether/v3.0.0/{target}/application
func (i *ServerImpl) DeleteApplication(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteApplication(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/application", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteApplication")
	return ctx.JSON(http.StatusOK, response)
}

// GetApplication impl of gNMI access at /aether/v3.0.0/{target}/application
func (i *ServerImpl) GetApplication(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetApplication(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/application", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetApplication")
	return ctx.JSON(http.StatusOK, response)
}

// PostApplication impl of gNMI access at /aether/v3.0.0/{target}/application
func (i *ServerImpl) PostApplication(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostApplication(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/application", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostApplication")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteApplicationApplication impl of gNMI access at /aether/v3.0.0/{target}/application/application/{id}
func (i *ServerImpl) DeleteApplicationApplication(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteApplicationApplication(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/application/application/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteApplicationApplication")
	return ctx.JSON(http.StatusOK, response)
}

// GetApplicationApplication impl of gNMI access at /aether/v3.0.0/{target}/application/application/{id}
func (i *ServerImpl) GetApplicationApplication(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetApplicationApplication(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/application/application/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetApplicationApplication")
	return ctx.JSON(http.StatusOK, response)
}

// PostApplicationApplication impl of gNMI access at /aether/v3.0.0/{target}/application/application/{id}
func (i *ServerImpl) PostApplicationApplication(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostApplicationApplication(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/application/application/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostApplicationApplication")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteApplicationApplicationEndpoint impl of gNMI access at /aether/v3.0.0/{target}/application/application/{id}/endpoint/{name}
func (i *ServerImpl) DeleteApplicationApplicationEndpoint(ctx echo.Context, target externalRef0.Target, id string, name string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteApplicationApplicationEndpoint(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/application/application/{id}/endpoint/{name}", target, id, name)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteApplicationApplicationEndpoint")
	return ctx.JSON(http.StatusOK, response)
}

// GetApplicationApplicationEndpoint impl of gNMI access at /aether/v3.0.0/{target}/application/application/{id}/endpoint/{name}
func (i *ServerImpl) GetApplicationApplicationEndpoint(ctx echo.Context, target externalRef0.Target, id string, name string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetApplicationApplicationEndpoint(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/application/application/{id}/endpoint/{name}", target, id, name)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetApplicationApplicationEndpoint")
	return ctx.JSON(http.StatusOK, response)
}

// PostApplicationApplicationEndpoint impl of gNMI access at /aether/v3.0.0/{target}/application/application/{id}/endpoint/{name}
func (i *ServerImpl) PostApplicationApplicationEndpoint(ctx echo.Context, target externalRef0.Target, id string, name string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostApplicationApplicationEndpoint(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/application/application/{id}/endpoint/{name}", target, id, name)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostApplicationApplicationEndpoint")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteConnectivityService impl of gNMI access at /aether/v3.0.0/{target}/connectivity-service
func (i *ServerImpl) DeleteConnectivityService(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteConnectivityService(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/connectivity-service", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// GetConnectivityService impl of gNMI access at /aether/v3.0.0/{target}/connectivity-service
func (i *ServerImpl) GetConnectivityService(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetConnectivityService(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/connectivity-service", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// PostConnectivityService impl of gNMI access at /aether/v3.0.0/{target}/connectivity-service
func (i *ServerImpl) PostConnectivityService(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostConnectivityService(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/connectivity-service", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteConnectivityServiceConnectivityService impl of gNMI access at /aether/v3.0.0/{target}/connectivity-service/connectivity-service/{id}
func (i *ServerImpl) DeleteConnectivityServiceConnectivityService(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteConnectivityServiceConnectivityService(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/connectivity-service/connectivity-service/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteConnectivityServiceConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// GetConnectivityServiceConnectivityService impl of gNMI access at /aether/v3.0.0/{target}/connectivity-service/connectivity-service/{id}
func (i *ServerImpl) GetConnectivityServiceConnectivityService(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetConnectivityServiceConnectivityService(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/connectivity-service/connectivity-service/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetConnectivityServiceConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// PostConnectivityServiceConnectivityService impl of gNMI access at /aether/v3.0.0/{target}/connectivity-service/connectivity-service/{id}
func (i *ServerImpl) PostConnectivityServiceConnectivityService(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostConnectivityServiceConnectivityService(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/connectivity-service/connectivity-service/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostConnectivityServiceConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteDeviceGroup impl of gNMI access at /aether/v3.0.0/{target}/device-group
func (i *ServerImpl) DeleteDeviceGroup(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteDeviceGroup(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/device-group", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetDeviceGroup impl of gNMI access at /aether/v3.0.0/{target}/device-group
func (i *ServerImpl) GetDeviceGroup(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetDeviceGroup(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/device-group", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// PostDeviceGroup impl of gNMI access at /aether/v3.0.0/{target}/device-group
func (i *ServerImpl) PostDeviceGroup(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostDeviceGroup(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/device-group", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteDeviceGroupDeviceGroup impl of gNMI access at /aether/v3.0.0/{target}/device-group/device-group/{id}
func (i *ServerImpl) DeleteDeviceGroupDeviceGroup(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteDeviceGroupDeviceGroup(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/device-group/device-group/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteDeviceGroupDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetDeviceGroupDeviceGroup impl of gNMI access at /aether/v3.0.0/{target}/device-group/device-group/{id}
func (i *ServerImpl) GetDeviceGroupDeviceGroup(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetDeviceGroupDeviceGroup(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/device-group/device-group/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetDeviceGroupDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// PostDeviceGroupDeviceGroup impl of gNMI access at /aether/v3.0.0/{target}/device-group/device-group/{id}
func (i *ServerImpl) PostDeviceGroupDeviceGroup(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostDeviceGroupDeviceGroup(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/device-group/device-group/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostDeviceGroupDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteDeviceGroupDeviceGroupImsis impl of gNMI access at /aether/v3.0.0/{target}/device-group/device-group/{id}/imsis/{name}
func (i *ServerImpl) DeleteDeviceGroupDeviceGroupImsis(ctx echo.Context, target externalRef0.Target, id string, name string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteDeviceGroupDeviceGroupImsis(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/device-group/device-group/{id}/imsis/{name}", target, id, name)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteDeviceGroupDeviceGroupImsis")
	return ctx.JSON(http.StatusOK, response)
}

// GetDeviceGroupDeviceGroupImsis impl of gNMI access at /aether/v3.0.0/{target}/device-group/device-group/{id}/imsis/{name}
func (i *ServerImpl) GetDeviceGroupDeviceGroupImsis(ctx echo.Context, target externalRef0.Target, id string, name string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetDeviceGroupDeviceGroupImsis(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/device-group/device-group/{id}/imsis/{name}", target, id, name)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetDeviceGroupDeviceGroupImsis")
	return ctx.JSON(http.StatusOK, response)
}

// PostDeviceGroupDeviceGroupImsis impl of gNMI access at /aether/v3.0.0/{target}/device-group/device-group/{id}/imsis/{name}
func (i *ServerImpl) PostDeviceGroupDeviceGroupImsis(ctx echo.Context, target externalRef0.Target, id string, name string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostDeviceGroupDeviceGroupImsis(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/device-group/device-group/{id}/imsis/{name}", target, id, name)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostDeviceGroupDeviceGroupImsis")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprise impl of gNMI access at /aether/v3.0.0/{target}/enterprise
func (i *ServerImpl) DeleteEnterprise(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteEnterprise(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/enterprise", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprise impl of gNMI access at /aether/v3.0.0/{target}/enterprise
func (i *ServerImpl) GetEnterprise(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetEnterprise(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/enterprise", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprise impl of gNMI access at /aether/v3.0.0/{target}/enterprise
func (i *ServerImpl) PostEnterprise(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprise(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/enterprise", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterpriseEnterprise impl of gNMI access at /aether/v3.0.0/{target}/enterprise/enterprise/{id}
func (i *ServerImpl) DeleteEnterpriseEnterprise(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteEnterpriseEnterprise(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/enterprise/enterprise/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteEnterpriseEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterpriseEnterprise impl of gNMI access at /aether/v3.0.0/{target}/enterprise/enterprise/{id}
func (i *ServerImpl) GetEnterpriseEnterprise(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetEnterpriseEnterprise(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/enterprise/enterprise/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetEnterpriseEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterpriseEnterprise impl of gNMI access at /aether/v3.0.0/{target}/enterprise/enterprise/{id}
func (i *ServerImpl) PostEnterpriseEnterprise(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterpriseEnterprise(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/enterprise/enterprise/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostEnterpriseEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterpriseEnterpriseConnectivityService impl of gNMI access at /aether/v3.0.0/{target}/enterprise/enterprise/{id}/connectivity-service/{connectivity-service}
func (i *ServerImpl) DeleteEnterpriseEnterpriseConnectivityService(ctx echo.Context, target externalRef0.Target, id string, connectivityService string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteEnterpriseEnterpriseConnectivityService(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/enterprise/enterprise/{id}/connectivity-service/{connectivity-service}", target, id, connectivityService)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteEnterpriseEnterpriseConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterpriseEnterpriseConnectivityService impl of gNMI access at /aether/v3.0.0/{target}/enterprise/enterprise/{id}/connectivity-service/{connectivity-service}
func (i *ServerImpl) GetEnterpriseEnterpriseConnectivityService(ctx echo.Context, target externalRef0.Target, id string, connectivityService string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetEnterpriseEnterpriseConnectivityService(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/enterprise/enterprise/{id}/connectivity-service/{connectivity-service}", target, id, connectivityService)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetEnterpriseEnterpriseConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterpriseEnterpriseConnectivityService impl of gNMI access at /aether/v3.0.0/{target}/enterprise/enterprise/{id}/connectivity-service/{connectivity-service}
func (i *ServerImpl) PostEnterpriseEnterpriseConnectivityService(ctx echo.Context, target externalRef0.Target, id string, connectivityService string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterpriseEnterpriseConnectivityService(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/enterprise/enterprise/{id}/connectivity-service/{connectivity-service}", target, id, connectivityService)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostEnterpriseEnterpriseConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteIpDomain impl of gNMI access at /aether/v3.0.0/{target}/ip-domain
func (i *ServerImpl) DeleteIpDomain(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteIpDomain(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/ip-domain", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// GetIpDomain impl of gNMI access at /aether/v3.0.0/{target}/ip-domain
func (i *ServerImpl) GetIpDomain(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetIpDomain(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/ip-domain", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// PostIpDomain impl of gNMI access at /aether/v3.0.0/{target}/ip-domain
func (i *ServerImpl) PostIpDomain(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostIpDomain(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/ip-domain", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteIpDomainIpDomain impl of gNMI access at /aether/v3.0.0/{target}/ip-domain/ip-domain/{id}
func (i *ServerImpl) DeleteIpDomainIpDomain(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteIpDomainIpDomain(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/ip-domain/ip-domain/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteIpDomainIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// GetIpDomainIpDomain impl of gNMI access at /aether/v3.0.0/{target}/ip-domain/ip-domain/{id}
func (i *ServerImpl) GetIpDomainIpDomain(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetIpDomainIpDomain(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/ip-domain/ip-domain/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetIpDomainIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// PostIpDomainIpDomain impl of gNMI access at /aether/v3.0.0/{target}/ip-domain/ip-domain/{id}
func (i *ServerImpl) PostIpDomainIpDomain(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostIpDomainIpDomain(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/ip-domain/ip-domain/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostIpDomainIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteNetwork impl of gNMI access at /aether/v3.0.0/{target}/network
func (i *ServerImpl) DeleteNetwork(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteNetwork(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/network", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteNetwork")
	return ctx.JSON(http.StatusOK, response)
}

// GetNetwork impl of gNMI access at /aether/v3.0.0/{target}/network
func (i *ServerImpl) GetNetwork(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetNetwork(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/network", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetNetwork")
	return ctx.JSON(http.StatusOK, response)
}

// PostNetwork impl of gNMI access at /aether/v3.0.0/{target}/network
func (i *ServerImpl) PostNetwork(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostNetwork(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/network", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostNetwork")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteNetworkNetwork impl of gNMI access at /aether/v3.0.0/{target}/network/network/{id}
func (i *ServerImpl) DeleteNetworkNetwork(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteNetworkNetwork(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/network/network/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteNetworkNetwork")
	return ctx.JSON(http.StatusOK, response)
}

// GetNetworkNetwork impl of gNMI access at /aether/v3.0.0/{target}/network/network/{id}
func (i *ServerImpl) GetNetworkNetwork(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetNetworkNetwork(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/network/network/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetNetworkNetwork")
	return ctx.JSON(http.StatusOK, response)
}

// PostNetworkNetwork impl of gNMI access at /aether/v3.0.0/{target}/network/network/{id}
func (i *ServerImpl) PostNetworkNetwork(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostNetworkNetwork(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/network/network/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostNetworkNetwork")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSite impl of gNMI access at /aether/v3.0.0/{target}/site
func (i *ServerImpl) DeleteSite(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteSite(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/site", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteSite")
	return ctx.JSON(http.StatusOK, response)
}

// GetSite impl of gNMI access at /aether/v3.0.0/{target}/site
func (i *ServerImpl) GetSite(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetSite(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/site", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetSite")
	return ctx.JSON(http.StatusOK, response)
}

// PostSite impl of gNMI access at /aether/v3.0.0/{target}/site
func (i *ServerImpl) PostSite(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSite(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/site", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostSite")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteSite impl of gNMI access at /aether/v3.0.0/{target}/site/site/{id}
func (i *ServerImpl) DeleteSiteSite(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteSiteSite(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/site/site/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteSiteSite")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSite impl of gNMI access at /aether/v3.0.0/{target}/site/site/{id}
func (i *ServerImpl) GetSiteSite(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetSiteSite(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/site/site/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetSiteSite")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteSite impl of gNMI access at /aether/v3.0.0/{target}/site/site/{id}
func (i *ServerImpl) PostSiteSite(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteSite(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/site/site/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostSiteSite")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteTemplate impl of gNMI access at /aether/v3.0.0/{target}/template
func (i *ServerImpl) DeleteTemplate(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteTemplate(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/template", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// GetTemplate impl of gNMI access at /aether/v3.0.0/{target}/template
func (i *ServerImpl) GetTemplate(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetTemplate(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/template", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// PostTemplate impl of gNMI access at /aether/v3.0.0/{target}/template
func (i *ServerImpl) PostTemplate(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostTemplate(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/template", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteTemplateTemplate impl of gNMI access at /aether/v3.0.0/{target}/template/template/{id}
func (i *ServerImpl) DeleteTemplateTemplate(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteTemplateTemplate(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/template/template/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteTemplateTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// GetTemplateTemplate impl of gNMI access at /aether/v3.0.0/{target}/template/template/{id}
func (i *ServerImpl) GetTemplateTemplate(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetTemplateTemplate(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/template/template/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetTemplateTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// PostTemplateTemplate impl of gNMI access at /aether/v3.0.0/{target}/template/template/{id}
func (i *ServerImpl) PostTemplateTemplate(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostTemplateTemplate(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/template/template/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostTemplateTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteTrafficClass impl of gNMI access at /aether/v3.0.0/{target}/traffic-class
func (i *ServerImpl) DeleteTrafficClass(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteTrafficClass(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/traffic-class", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// GetTrafficClass impl of gNMI access at /aether/v3.0.0/{target}/traffic-class
func (i *ServerImpl) GetTrafficClass(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetTrafficClass(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/traffic-class", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// PostTrafficClass impl of gNMI access at /aether/v3.0.0/{target}/traffic-class
func (i *ServerImpl) PostTrafficClass(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostTrafficClass(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/traffic-class", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteTrafficClassTrafficClass impl of gNMI access at /aether/v3.0.0/{target}/traffic-class/traffic-class/{id}
func (i *ServerImpl) DeleteTrafficClassTrafficClass(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteTrafficClassTrafficClass(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/traffic-class/traffic-class/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteTrafficClassTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// GetTrafficClassTrafficClass impl of gNMI access at /aether/v3.0.0/{target}/traffic-class/traffic-class/{id}
func (i *ServerImpl) GetTrafficClassTrafficClass(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetTrafficClassTrafficClass(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/traffic-class/traffic-class/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetTrafficClassTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// PostTrafficClassTrafficClass impl of gNMI access at /aether/v3.0.0/{target}/traffic-class/traffic-class/{id}
func (i *ServerImpl) PostTrafficClassTrafficClass(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostTrafficClassTrafficClass(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/traffic-class/traffic-class/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostTrafficClassTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteUpf impl of gNMI access at /aether/v3.0.0/{target}/upf
func (i *ServerImpl) DeleteUpf(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteUpf(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/upf", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteUpf")
	return ctx.JSON(http.StatusOK, response)
}

// GetUpf impl of gNMI access at /aether/v3.0.0/{target}/upf
func (i *ServerImpl) GetUpf(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetUpf(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/upf", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetUpf")
	return ctx.JSON(http.StatusOK, response)
}

// PostUpf impl of gNMI access at /aether/v3.0.0/{target}/upf
func (i *ServerImpl) PostUpf(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostUpf(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/upf", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostUpf")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteUpfUpf impl of gNMI access at /aether/v3.0.0/{target}/upf/upf/{id}
func (i *ServerImpl) DeleteUpfUpf(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteUpfUpf(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/upf/upf/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteUpfUpf")
	return ctx.JSON(http.StatusOK, response)
}

// GetUpfUpf impl of gNMI access at /aether/v3.0.0/{target}/upf/upf/{id}
func (i *ServerImpl) GetUpfUpf(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetUpfUpf(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/upf/upf/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetUpfUpf")
	return ctx.JSON(http.StatusOK, response)
}

// PostUpfUpf impl of gNMI access at /aether/v3.0.0/{target}/upf/upf/{id}
func (i *ServerImpl) PostUpfUpf(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostUpfUpf(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/upf/upf/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostUpfUpf")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteVcs impl of gNMI access at /aether/v3.0.0/{target}/vcs
func (i *ServerImpl) DeleteVcs(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteVcs(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/vcs", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteVcs")
	return ctx.JSON(http.StatusOK, response)
}

// GetVcs impl of gNMI access at /aether/v3.0.0/{target}/vcs
func (i *ServerImpl) GetVcs(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetVcs(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/vcs", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetVcs")
	return ctx.JSON(http.StatusOK, response)
}

// PostVcs impl of gNMI access at /aether/v3.0.0/{target}/vcs
func (i *ServerImpl) PostVcs(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostVcs(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/vcs", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostVcs")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteVcsVcs impl of gNMI access at /aether/v3.0.0/{target}/vcs/vcs/{id}
func (i *ServerImpl) DeleteVcsVcs(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteVcsVcs(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/vcs/vcs/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteVcsVcs")
	return ctx.JSON(http.StatusOK, response)
}

// GetVcsVcs impl of gNMI access at /aether/v3.0.0/{target}/vcs/vcs/{id}
func (i *ServerImpl) GetVcsVcs(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetVcsVcs(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/vcs/vcs/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetVcsVcs")
	return ctx.JSON(http.StatusOK, response)
}

// PostVcsVcs impl of gNMI access at /aether/v3.0.0/{target}/vcs/vcs/{id}
func (i *ServerImpl) PostVcsVcs(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostVcsVcs(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/vcs/vcs/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostVcsVcs")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteVcsVcsApplication impl of gNMI access at /aether/v3.0.0/{target}/vcs/vcs/{id}/application/{application}
func (i *ServerImpl) DeleteVcsVcsApplication(ctx echo.Context, target externalRef0.Target, id string, application string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteVcsVcsApplication(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/vcs/vcs/{id}/application/{application}", target, id, application)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteVcsVcsApplication")
	return ctx.JSON(http.StatusOK, response)
}

// GetVcsVcsApplication impl of gNMI access at /aether/v3.0.0/{target}/vcs/vcs/{id}/application/{application}
func (i *ServerImpl) GetVcsVcsApplication(ctx echo.Context, target externalRef0.Target, id string, application string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetVcsVcsApplication(utils.NewGnmiContext(ctx), "/aether/v3.0.0/{target}/vcs/vcs/{id}/application/{application}", target, id, application)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetVcsVcsApplication")
	return ctx.JSON(http.StatusOK, response)
}

// PostVcsVcsApplication impl of gNMI access at /aether/v3.0.0/{target}/vcs/vcs/{id}/application/{application}
func (i *ServerImpl) PostVcsVcsApplication(ctx echo.Context, target externalRef0.Target, id string, application string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostVcsVcsApplication(utils.NewGnmiContext(ctx), body, "/aether/v3.0.0/{target}/vcs/vcs/{id}/application/{application}", target, id, application)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostVcsVcsApplication")
	return ctx.JSON(http.StatusOK, response)
}

// register template override
