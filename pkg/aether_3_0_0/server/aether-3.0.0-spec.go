// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
