// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
