// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
