// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/wAAAP//2NiPcWDlAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
