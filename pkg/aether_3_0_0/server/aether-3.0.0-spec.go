// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8/P/BQAA//+IBv64b7wAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
