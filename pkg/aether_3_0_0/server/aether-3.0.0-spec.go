// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
