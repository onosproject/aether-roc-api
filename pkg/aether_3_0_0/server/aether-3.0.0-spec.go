// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
