// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4YudEdTLy/8FAAD///GH88MvwQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
