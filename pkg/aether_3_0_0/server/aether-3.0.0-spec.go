// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
