// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
