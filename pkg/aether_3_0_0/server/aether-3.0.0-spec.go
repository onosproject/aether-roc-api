// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
