// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
