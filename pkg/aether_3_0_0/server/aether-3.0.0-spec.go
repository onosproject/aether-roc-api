// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdD2/bOJb/KoTvgJ0eLNtJm3bawwGXSdLCuDTNTtIB9pJAYCTa5laitCSdTLbNdz+Q",
	"+kdKlCzZ+uPNdYCZcSSK7/Hx93uPpMin7yMn8MOAIMLZ6MP3UQgp9BFHVP7FIV0iLn45AeGIyJ8c/cmn",
	"oQcx+U/grCBliP/Xmi+sX8VN5qyQD2WxpxCNPowYp5gsR8/Pz+ORi5hDcchxQEYf4srBLy56wA4CmICA",
	"BMxyArLAy1ej8QiLUiHkq9F4RKCP0mdG4xFF/1hjitzRB07XSFQuriDGfwtcjKTyv6cXnuzj0PIwy7cE",
	"hqGHHSj0mf6dCaXUBvw7RYvRh9G/TTMLTaO7bJrU9yzbZZDUlUS7tmT72HEQY1YY4Lhvu9AjJ8WkVSqp",
	"RR2yOisldi3d3koT+4y40l5dq5QJKup2EhCCHI4fMH+yGKKCg63pY6y8ng79K2bX1PZU+ilrSYN12JpC",
	"WqXVMrtXwN5WG3vuM8y61ymWU9TsjHBEQ4pZe1BRqqyS161ou7kW3RKogciivvPQcgMf4vZ8cVZjhbQu",
	"5dpVGlxh3p7lZWVmGe0LsjdJk0y0XLTABLcaXcslFLW5Rn7owRabnlZYLqs7oXaVdAoXC+xYjgdZe35W",
	"r3WD1D50sDdp9DVctCZZ1GWU0LYU2yzpD6c9K4q6jBLalmJXSupkvG2qu1yDTgZJxsqfIyXiMqKKY9eV",
	"rgp6lzQIEeVP1+kEWp/7fmXIBYuAgnXoQo7YaDwKo0fiyWs28+aYe9rUNzexHo/WxFlBshST4bycY+AE",
	"vg8BQyGikCMXiEkbCBYgfQj4kLiQB/QJQM4pvl9zBMR0WyiVCM9EFOQ/Z6VK258+FNz/HTlcKK3Mj2H+",
	"sdgGlTOeMlHPeUvCTBDmyGeNJ9pZ++Yc+fnbadMgpfBJN0e+SKH1dn9WyC8GbGOL/GRfaap2I2+T3MpP",
	"HqTKXwKZfIUZgKntfPjnOSJLvhp9OJjNxiMfk/TvTAG1RgNFXMxCDz5Z0TJSQYHorkQ94AFYM7kc9enr",
	"HAQUnJzPdTV+LddCFWNQA2lzBV2Jc0y+CeFZGcBXkIPgkbDIJpGRwaUwMjiPkRVLVmo2yMUG1zA/lQ5I",
	"tfZEb+frw3w7Q8g5ouLpG2j989j6X/su/jGz3t/eWvbk7j8UpbDZXWRrdzeq3nebeVJc0+qYNa5LUTTY",
	"yfnV6IaAa8QsEK2zZG1PHjWiAN57BgScyetxj5hrjR9NK70PAg9BIqkInWKV108hAseeF0RhD5wErnh6",
	"EVAfctFDhL8+jHod+2t/9OF9/I/s+ejSbKzEICeTjQlHS0QLXSoKmftSGxt07fU1YTW9XcnCXj4CmItV",
	"RgJDMaNl7F6ttIVbVhvyslxztia7C1qUNddMeHqtGBl3DAmZ4An4DJ/APQIMcfHQRUAQwKLfkNptADOw",
	"9IJ76IlC0PNAto7DJi1GlEyxPYwqm9flhw8s0o4JLCfgDPMVogCCVcC4QPEYQOKC+eVYMAECtr4niE/q",
	"hSAz2S4EyfKSlQrLuBMGlFuIGCBxDhkH4rYgLRUziMro8+bw/Zv3b98dvj8yx59UUDEIxVowDqlhvvUR",
	"0/YViWQZVaEBD5zAq29ilSAaP16r/Lg+ufzx9fRS6ZJU0iZKaBonyDCRo2z5uFtCOCVSa7niBm919FBe",
	"/8GK4F5dvtqw9lDWpsg6Wlpq0NNxuqZeBFMEjpZAlFdAV3jcFNabDi1UBIDMjC9pjLFirJ7JV4wpJkiq",
	"1x7fIiabLNxHcB6PQocu6rVclDQ0Xa/AIIGFy0ennghZ1CAjV4VxoSvP6fxqY9fDdV1aLedY8YJXd4bl",
	"BSucn7mc2UB2z9baD9JvYmW8/UkapR824uRl/W74SV7GKyiSF4pzHKy+fzVPcdIiYvrCMVmyaKrjIo6o",
	"jwmKvEMQSBrPL0E8hEFsfEsgA4/I8wBkslRcEUUs8B4QVWqU3azaJ1XM5FLil6pmheVdxXnEf1aOwWSh",
	"uyYsyTZWdMsVAQlLDoutBQ18cUkdHL99ow6OD3598+btuzdvZu9ev5u9Pzo6nMWBuTBMzldrGisrZXjQ",
	"gWAeGMUmXqF6bmPy+fqGj277RV8dqMXXks0juq83F6rw86ZSJpPYfVpnp0lDk50sdQf727/v0FZbXtKY",
	"d1P4yxre0zpRPfDa+zUNNscg04CegccVoghE26jXNFr0Y6tg7bngHoFwzVbxu+ec/f+SjEWYNtWrwnv+",
	"nYbpDbTnBY8CUy5mUP6WGshgXDXv0994uIZXHqa+1HZ6dRwyVVG1PI5x05jul01FKryyoZDBFnaPVoGu",
	"j4nFOORrw+qmvIsZF6h8QCAupju8tyrRzy6Ofzs/+/H5eH5xfXZxfHFy9uN0fiWuaeucisw2liJwCFKz",
	"viRf7BKDAU4vLqbHlxdF55vWSsxtIswKKfYhfSpWGt8ALokWMhAFiVJprdnjJbUz5ATENdaf3togIavi",
	"X+htfAq/fqaDPl8X9YnH3IBTSJiPGRP8WBPMK5fN3x4dvVZXzN/+mgkXYkwD8ei9haGL5fX4JVXgQI6E",
	"YdJpH4gnFJkJfvnlZma9v/txc2C9v4t+Hsj/Rb8Pb2bWm+T30c3MOrp7dXs7efX99XPzB6exsFc/frk5",
	"sA7vkj9e38ysw7tXr9SZYdS+Bq+sUpuYporJVt9u3Xgy960V15QNw3o0y25UxDD9vt5Qu5/WNg4Q8Wz/",
	"59akxBnmVkN283+isv5WwnKb2Lfdm97oBXTlNvo+VxT0TsjuWSxEDl5gB2AXEY4XGNFN+4bMKzEmKCje",
	"P6mxgIfPV3MQ3QSxLoiOQVToHjGwCh7BAiPPZQBSBELofEMuwETECwLE4xPwec24mPOgP6HDvSdwcCQP",
	"rEKHI8qAF5DlBHwMqLjvhx4ag5OTk4uLi7Ozsyv5Tw6EB0c6CI+yVsbNMEVXx7Atyw/usSfmaGvC6RNw",
	"auzKMltX1G4yq0/KpRLEHwP6bReppMY2sEi1qKgGgljgnR4CzHQwcEc9f9EtVbgiqVYgNJzk0ANisUBF",
	"YCyWKRrB7s8ajYPkg8MAz9rwoiZSwSPxMPlmmE3Fd4ALOQRUjloJ8O9DttN+k1SgcQV9QzxVO6KfuMoM",
	"Gl152EHAxYsFoiKkQB5Uh5SDt+/evTs8KLEIM28CYoyXiJ5eRWtLQD5UJfjwSJWpwIIx83Yfnj8ZZR4+",
	"xcVAVEzZVas9bjrgEZrB9jXsAGqxMKN/L/qhfMs79sh5cfXcctURs5yDriha5arNBUvsZPdstcaeOw/U",
	"/0/vI7S297Q7xr0v6nR5+lu1dyx99ymqM25KRB41yDk7/x2gPyN0bZBYIk/UaxL4DwcX5f31ZF4pJbZx",
	"wfeKyur5pPj0ZrecWkdCavmf9Aio7muSyxV+RbuttdDupZV1til/vfxYb89xYzcU1fxzkaX7Fed1uOjJ",
	"1QWm3dmXAeVSmajHd9uWvXlmqtkqfqRqR3R8hLpbqj049Qc06Tls3aEklyscinZba6HdSythWA589Ygq",
	"8HR4w9CEpm0OeRlPk284qbX9to4Hp73x0zabP80H1zdt38za+3O6vdV0e79m2RMw9/01h/eenP4PM+Ou",
	"rUTz2beyBGb2LGuGqLYKEkXWR8jELVfuPyWYY+jhf6JbInvxj5MrdYpeWIvLuqH72f9iQ9NCD5K4TdgP",
	"PeQLH5CAcaGmcVDHk3u4vqAdI87ZRcJPYOCuPID1e3pWbmeq2vGEyJPp2Gwa1OTzprPcucBWEi/NlZoC",
	"WMk7Z7VslVWHPeVgbr26bV7d9GEMaM3O3pdUXXr2vjgJFZcwWQRJAhroSB+JfIg9CflF8N9BiEj8KgaT",
	"5SSgyyzN6ZcQEXCR3gQfgzVxkz5dU1HHivOQfZhODdU8j0fC/ZJolhFXeR5d+R0trC8XH63PyL9H1DqY",
	"zGrUOH0MrTiPznQdegF02fRwdjibzt5Olcq+EO/JugoW/BFSZMUCrYeDyWwSutH0F1GffVlcJRsbG8s8",
	"eD+dHUqZUfWYLC1IXGt++bv18fivltDKmr2V8pRBHZJHZ19PZrK5D4iyqNejK8/jkZAPQ5xekhF6JeE4",
	"hfLp6YO8M/0e5eF5nip5ZVzkoSj+BDLNDg7I3JWjK3H9OIznahSxMCAsQfkCrj1D6JR4Yms/2lg1Oj07",
	"P7s+A58QiRP4LGjgg78dX3wCfuAirzAsHV2vxGgsBB56QB6Q8MNEvr6NMwrpSn5C3Kzh4WzWRb7cvLqf",
	"zq7Bl/8BQprecnEjsXJF+8cjDpdMuLPRnfAlSgLjG7NSWZFpnFTp+U5MBJnBOpcBU82T5psqa7CWhXhq",
	"SkH8XDDzQREEDkWisTmLXH65uq5CwvN4E1rT/3/H7nNd6PYN4OM0SZXwXW6SnUaOqqsh3BuQ7V0B3QjY",
	"eaHb43zcSSbvb+gJSEAZc3bLyUsuX3cNvrXKuj1k31RLyTX9Hq9ANWRltCZ4meTd6omh5zE/1SxF2dbM",
	"mjStUr1DyhYzlu9EYENfbsPpnFb/+gzvUI+UKUZlsjcQ2/qcAjDb8z/FDHqDeKPc7LLa2ajzyT0ewpaq",
	"2a4v0XKQNvUcWRamYcezuq12gre2ij4smLXfdQe46RODAD0NpJlwVg/l/QPebgv8jYlQpsSLHweX9nY7",
	"lN1z+k6TXCzT78KEW9NZyb7XGa2bMbZMox6Yq30TphUK6321C6Ez3X6Ofyv0iMhg1CR+g7q7l9EQ2r63",
	"0bJkDuB2ys/ZV7kXNSfAVXpSfW/HxDXUbdPhlH0EppmTMfXMoKPlMivuQIqyJCN7QgTzxXoDaoO1BmVN",
	"MsA2pspoxp09oJPdHce2J159RV/4eL0BZlp2HvvkUYqv76v8RbS14FP8qn1vQ2mFmm1yPv99mWa0Vi0/",
	"aMjMW2sHtOc3Lg4MaP2PeiFRscYgaE9CoLqthdXD+gCwt9vjQHNClCvywkNXRZ+3RN79Z/JU5kWtvdZk",
	"NlmSArVnbgvVo7T2cd5U0T/xGRLM4uSyYM7/En1ZJpT7cMEioLcERs9Fe+qWsWjx1z3CZAkgYJgsPcTl",
	"ymMzn2E0Ri+OI/tQbEvuQ0HIbp4k1uznAldvC1ybsNmFg8tyIw/g5vKnzKq8mJbXdW+H3+VatulN9G8t",
	"N3Mcyqm9IUfeOUPtAG09d/CgKFZ/1htyZ8oPge8kKGdqs1rY7hvldjuAb4p9swIvfIBd2sutUHSf2Vqy",
	"mmy6uiWze15gbkLknteMm32dvwXCl/fw9q7gpa4dd6iHmUxGzUoSeu/qyzpY6G6WoH8An5f7rEmV25qH",
	"p0lC6b0dZJfp2KaDUhKfN/U/2Rdihhxga0baAdxaBvghsav8qje2TizQP6TTxa4kPzargeZeUW23ge+G",
	"SDcJf+GDaWPftkHGwWmZfXOqioJxyuy9jSQm/drkW5RrvCnBhG0HjR2pWXaAapJmfSBsRv+pFyiEqv0i",
	"NQkQcTbyKnj2AVF7e5zWB2sm6IU7fa3XdmTQ/tBoakhBX49Wc5/hUzVTdu8LHvU06YRVhgT827LM2A0/",
	"qWeinqGj2yBisTMHIaaeR6qKgkpm9r0dg5Xp2CYdszT3TdmXJuIacjymmWgHIKvZ/gfEbfaj3vgsUbt/",
	"NCfjNDUlG6uB5T4xbe8O7mYoLwp+4VHF2Kst0HBwPhbzAVbSMCp+Eqe529+AUqFnqwTU8/M3Jp/6+LDh",
	"JW+wXbCd/2jB0LjO/VUz4igWGQb2SeTJJ+OsA/pBCGC3SYctyFGlzEuPT1V93xaX94LZaYbZKvJG3yLY",
	"2/BkUK9NUsrvNzQl3zpcDBqBEpvsANb4uxXDgFL+Wy+0fA0XvQI0n6NwHS4q8xOa9WsZofa2KK2N1ETI",
	"C3f9Sm/txp0B+RN/UKKaNtH3IPbWqRvUa5My8hsaTeny4Aw7rUhssgMw42+HDANK+W89p/6Hw3oFaLou",
	"hSlfQw84yPPWHqR1EgaYdW0Zrfa2iK2N2kTIC3fwSm/txqM94ZKej0n5ozbLBkl/d0xAQF1EkZsOp9RM",
	"eMnH/x8BJK78nMIEiCAiP6xA1x5it+QRe170jWfkrKVQTBkfg0UgHkQuuH8CfIXieuRDUSWynLxwS3gA",
	"fMidFcAMUMTXlCB3Ao6J/JwGdjAHp2cXfwPH5+fAw4gByGWdiLiTjS6hp0R9xu8abekpCpBq4jpeWIa+",
	"LvPYqjQ157ItpP1r5uBaTBtY8t2sof2efkZX/au25xskKUM2f9TSMkyA1IMB6dYC4j2BEFKOHRxG39+5",
	"JcLx/HFyBfAi9kHRUW6MPFe4L4a4cJvXdI02uqae0juYP0K2k29qnNnBqMNP71Shh84lo0a5j+00908t",
	"5poo+9JdZw7q+fn/AgAA//9IwFV5PL0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
