// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdC2/ctpb+K4R2gdsAI8/YiZMmiwXWN3ECY13HWzsFLpJAoCXODFuJ0pKUXW/i/74g",
	"9SIlSpZGr6nTC/TGowfP4eF3Ph4+dPjNcsMgCgkinFlvvlkRpDBAHFH5i0O6QVz85YaEIyL/5OhPvox8",
	"iMl/AHcLKUP8P2O+tn8WN5m7RQGUj91HyHpjMU4x2VgPDw8Ly0PMpTjiOCTWm7Rw8JOHbrGLACYgJCGz",
	"3ZCs8eaZtbDQnzCIfFGIGxKCXI5vMb+3GaLiBfv2yFpYWJQUQb61FhaBAcrLtRYWRf8bY4o86w2nMRIK",
	"iCuI8X+GHkaygr/mF+6dk8j2MSvXFkaRj10odF7+zoTiaiX/naK19cb6t2VhxWVyly2z8h5k3Q2SxpLo",
	"tJbsnLguYsyOQpy2/xh6lKSYtMolDahDUWajxLGlOztp4pwST9prbJUKQVXd3hrcbjB9jIW302F6xZyW",
	"2r6TXGZvaBhHgymkFdosc3wFnF21cc4Chtn4OqVyajULQg/5w/JuteQW0qfUxxlIQ+caulNqKeVVNT0l",
	"HNGIYjac0ytFNskbV7TTXYtxqbCDyKq+Z5HthQHEw/WqRYkN0saU6zRpcIH4XUj/GExqVl6tpLEkOvWS",
	"rzAfDl2yMLOM4QU5NdKuURD5cEBheYH1ssYT6jRI/xStB5MnyjJKGFqKY5b0mztcJCHKMkoYWorTKGmU",
	"cYip7IdEhfQRUcKJ52FxC/qXNIwQ5ffX+cBfH7N/YsgD65CCOPIgR8xaWFHySjqgLmYMOOa+NhwvTwgs",
	"8kdq5ecvhTe/I5dbDwtLGTPD8mupDo2joDpRD+WawEIQ5ihgnQffRf3OOArKt/OqQUrhvW6O8iOV2jvT",
	"WaE8QbCLLcoTAEpVtRtlm5RmjMpgVH6BcA34FjMAc9sF8M9zRDZ8a705XK0WVoBJ/rtQQC2xAtGF5WEW",
	"+fDeTqaWKgokd4G4C3gIYiansT58OgMhBW/Pz3Q1fq7XQhVjUAN7VeFn76QjqrU+0OU9P6qThz2zPz4C",
	"t+p00cjg8zyKGKvW/SS5IVo9AShIpjCKGmavGoyJCLzxDa15Kq+nBjWXmr6aF3oThj6CRCI6GRnpRV7f",
	"Rwic+H6YUC94G3ri7XVIA8hFOxD+/ChpNBzEgfXmdfo/2XDJpdVCoVK3kI0JRxtE6xpO60vGZkpNWEuG",
	"qJkgK7Om+bFG9jQ8ZrSMM6mVdqAytSJPic6QMrfZBy3K3GUhPL9W7U0ep9G86BGo9PF53vnZVJoha54D",
	"cIr5FlEAwTZkXLTmAkDigbPLhUAEBCy+IUh2Oy141wy6CwG2smSlwDoMRSHlNiKGFj2HjANxW4CXQrJp",
	"ptwXR69fvH756uj1sZl0c0FV5k21YBxSQ6z8HtPhFUlkGVWhIQ/d0G9vYhXfGryfL6wIco6o7MPeXn7/",
	"9O5SaZJcUivg101QjQt2t0ZqK7rpsAKgd1ftX2zowJqfbzasM5e1KbKPN7ZK7DoGY+onEETgeAPE8wqg",
	"Kq+buq6u3aeKAFCY8Sn1o1vG2pl8y5higqx47fUdRh0mC/fqNxdW5NJ1uyqJJw110gswSGDR5s5tJ0I+",
	"apBRKqIVC5bX5caONXVprVivYZVPZ7n6BxtYzfyc2UDOxNb6awzy030y0ig93QxnS7H9gJEttSrwkBcM",
	"kbe6JlMK1zD5Q9g1fwQwxDkmGwb4FnLgIY5ogAlK3D4MpX+eXYI01ERs8YVABu6Q7wPI5FNpQRSx0L9F",
	"VClRtp/iy4ViJq5IFyHMCsu7CiukP7txQc0S+biAF81vy4DUXtMwEJfUsPTlCzUsPfz5xYuXr168WL16",
	"/mr1+vj4aJV2m5UAtVysKUpVnuHhCIJ5aBSbuXbzqKKhsfRV+knYWxfZxVObF/6NZN74yuO0bnq4wYbO",
	"LFbtGEB6hqr9SJPKlfr37HTSGdKhgJzsDSmEXquTowpQdwBjts1l5PkY3w/vkKERTsQN0dgeZvKhpD3i",
	"HA7yJ4eu9tsE13xWJhW1/xPX+v6acRsAabJa4bJmr45OqeaHGkjU9JTJJM6U1uk1g9Jl41DbmY/dFwWR",
	"at8ficKLig8+n91tN9o8UDXH7aZpCwbutogikHx8ENOE9dg2jH0P3CAQxWyb7nwoGfYfGfMybUKrCcjl",
	"pchWXYDUQA5gmma39IVKE+Gb2lLbMTfy0EMV1YpKjJvvdMI1PdJAt4aHDLZwJrQK9AJMbMYhjw3rM/Iu",
	"Zlyg8haB9DGdyV6qU/anFyf/PD/9/svJ2cX16cXJxdvT7+/OrsQ1baVGkTnEhCuOQG7Wp0SyHmF2RHEA",
	"6X1Vi/QG8Egyw4ooyMrJilderymdITcknrH8/NYjEooidugm8pbrGeEHPK4KSkNEwCkkLMCMCczEBPPG",
	"ePLl8fHzmnUwIcU0xk8WIw0mlNcFRGAS0CJR4Xz2CKRzFYX7/PTT55X9+uv3z4f266/Jn4fyn+Tvo88r",
	"+0X29/HnlX389dmXLwfPvj1/6P7iMhX27PtPnw/to6/Zj+efV/bR12fP1AmmpH6temdlZ/C4zEUKQa3Y",
	"vLLFWGfy8u0GFq88Uqm9M5kVOnMlyZX/kcLRtNZ9WcY1DFiD8Ab7In6LCaf3wG0xXq1hF9c1sktA6qWm",
	"9eojlbQdIGcb48cFdDbz3cqnle31ujcXNxr8WL+vV9SZprad3Ted639ae7LUqQXzyKl4JlmaCe8ISwzy",
	"qbQYggwzGu15QhTWkySUfslcl8xnc6G3rjqCI+Xepam3VT/nGBepXJHUyjcNH4boPlp9oMFXq89UjeBM",
	"Z43OfnvrMsCLOjypUUp4R3xMDIh/l94BHuQQUBn/EhDcRKzXdrRcoHGZ7xEPVxuip6czg6grH7sIeHi9",
	"RhQRjiEPaWNlD1++evXq6LCmqsy8+Y8xXiN6eZXMyAD5UpPgo2NVplJZxszb/DiF6zV2bdeHpr2cb8Vl",
	"iffkOYXS9DcNlowjM4A+RSPAJxXWLuhJPyobl03iREgrWs2/TNPJNLvcQKHaba2GziS1bLML+NPl+3Zb",
	"ejsTcFLyjzTmiaN13z1x4VS7i1t6Y/pZ5Lg4vXXbb1DKv63UvTG73OCN2m2ths4ktYRRfYSqfnoHygu6",
	"kQkpu3yIY/xC9JGvaXZfiUuC7GH8v7RH0GxEddOcOmVq3I34d1DXN6ibKJY7AGdBEHN448vocZ64rrUS",
	"3WM8ZQRlhnXMENWC6GRAfgeZuOXJ/ZQEcwx9/H/oC5HN89vbKzUarAzllJ06Y8aY60dqFfmQpNXBQeSj",
	"QNBVBrC1pUaQ679WFFvzof8Eu4yaFpgRuTd9b6htHTJuHCr1NjWdmLlQU69SP8MiLmGyDrO0CNCVDooC",
	"iH1p9HX4X2GESDppg8nmIKSbIiPgxwgRcJHfBO/DmHiZ9JiKMracR+zNcmko5mFhCd8nycxYWuR5cuVX",
	"tLY/Xry3f0HBDaL24cGqRYnLu8hOszss48gPoceWR6uj1XL1cqkU9pH49/ZVuOZ3kCI7FWjfHh6sDiIv",
	"GXogGrCP66tsx0NnmYevl6sjKTMpHpONDYlnn13+ar8/+R9baGWvXkp5SkyA5FeBzw9Wsrq3iLKk0ZMr",
	"DwtLyIcRzi/J1bWtxOMSyreXt/LO8luSHuJhqaRb8JCPEvITQJbtdObJvabi+kl0nsRCFLEoJCybClrD",
	"2DfwtsQTi4Nk+dZ6d3p+en0KPiAiSkaeXP0D/zq5+ADkzrlKVGNdb0UfHwEf3SIfSPhhgqi1sNJEF7qS",
	"HxA3a3i0Wo2RWrKs7ofTa/Dxv4GQptdc3Mis3FD/hcXhhllvPlvWV0EmSj7Qz2alikeWaa6Ph69i1MIM",
	"1rkMmWqePAlKXYW1hJ1LU7bOh4qZD6sgcCkSlS1Z5PLj1XUTEh4Wj6E1//cb9h7aQndqAJ/IwYPorwV3",
	"eVmyCBmrNUN4MiA7fQHdCdhlobvjfDFKYtw/0D2QgDKmt5WRcym1bQt/G9Tr9tD7llqmmuW3dNaqo1cm",
	"CU4us3Q0E3noeeqfataRYoNKSzdtUn1El60m9+3lwIa23MWnS1r99T18RD1yTzEqU8z+7so5FWAOxz/V",
	"xFKzsFFpHNRMNurIZ49D2Fo1h+USLS1dV+bIX545ntVt1Qve2iTsvGDW/m4b4OZvzAL0vCMthLN2KJ8e",
	"8M5Q4O/sCHVKPPk4uLa1h3HZPXffZZaxYvlNmHBnd1YSbI3m1t08tk6jCTxXOz5hEBfW26qPQxe6/R3/",
	"NuiROINRk3Rdrj/LaAgdnm20RHgz0E79B3hN9KJ+LHiVf8K2tzFxC3WHJJy6LPvdSMbUMrNGy3VW7OEU",
	"dZ8V74kjmC+2C6gN1prVa7IA2/gNbTff2QN3csbzsd0dr72iTzxe74CZgcljnxilus2piS+SVCYf0m1N",
	"e9uVNqg5pM+Xj6rq5taq5WftMsvW6oH2clq/mQGt/2jXJSrWmAXtWReo7ixk7bA+A+yd4Xygu0PUK/LE",
	"u66GNh/Iefffk5cyyWTruSazybJ8khP7tlA92VOfJqEU7ZN+94hZmoITnPF/JCdFRHITKFiH9AuByXvJ",
	"3uNNKlr8ukGYbAAEDJONj7iceezGGUZjTEIcxZmKA9GHgpB+TJJq9vcE12QTXI9hcwyCKxLNzkdzeq7K",
	"NmT2i3hj3zcrPqLqCPSiH0K6E6EURexBYK7brj/89Vyt+wB4w5UusXpuoNncQo/ZlXqw9p4xp6M4Y7jO",
	"js7URrkfIrxvRMaQNPCXI4Ylh654y+1NEUlS38mXmTsrNbH3Z+diD84AefMNRQVS07+j8wY9pJsYFeEp",
	"zoYipuu8vDG5KcvLPQM/lXMYNfGOlnN5b6Pzei2HZBz92PlupKLkhJozFC8ZqgfE9bzes6JY/bNdwF0o",
	"Pwe+szC7UJu1wvbUKHeGAXxX7JsVeOKxcm0rD+Ki++ytNfs+TFd39OyJt4J0ceSJd3d0OW9gEIevb+Hd",
	"qeCp7vIYUQ+zMxk1q8nJ35fLRtiS0u3wjBk4r3SaWxNtnUXvspzwextk1+k4JEEpZxd05Z/iYLw5A2zN",
	"SD3ArR3iMCd2lb/axdaZBaaHdL4sneXpZy3QPCmqnSHw3RHpJuFPPJg2tu0Qzji7W2r5mpu8sEj7v7f9",
	"SY2KQzpefnxCV2fL0l7P2ZWo9ukBXuUIifkAm//brg9JdZ4cxFkPkmrLHkfvdCB2+oK5E6jLQp94j2Fo",
	"zf4uN7PrFccyN7laeq7E3vYSJv2G9K7kQI6uLiVsO2vnkJulB0yzs0hmwmbyf+06BKHqtEjNuoL0xI4m",
	"eE4BUWd3nLYHayHoidO91mo9PWhON9Iz4DY5kHIkyd5SfZ2OQ/pScb5LV1fKUwjPSfuaiXoAVz3mZkbc",
	"Fn+06wYytadHc9YdqMmkWQssT4lppz+4u6G8KviJ9xvGVh3ADef2xzzdeJPzJUey7G3vYVBvSCeTx9h0",
	"das4Ws/aXWQ26QHR9PieeUAp/2vXNXyK1pMCtJwuOI7WjamCzfoNjFBnV5S2Rmom5IkTvdJa/XxnRv9J",
	"jwZqdpvkZJ+9JXWDekO6jDwNqau7iBBwTlLPbNIDmOkpUPOAUv7XjtR/c9mkAM2jfEx5DH3gIt+PfUjb",
	"5O4x6zowWp1dEdsatZmQJ07wSmv186M98SU9NaLyo7WXzZKJ9oSAkHqIIi8Pp9SktPJoHHkEDySePIPn",
	"AIhORJ7GQ2MfsS/kDvs+uEEA/YncWArFlPEFWIfiReSBm3vAtygtR76UFCKfkxe+EB6CAHJ3CzADFPGY",
	"EuQdgBMiz1bCLubg3enFv8DJ+TnwMWIAclkmIt7Bo5QwUc5c4wl1OzJFBVJdqOOJJcsdM6W86qbmtPKV",
	"DLzdCG7ADL41JyCOxnsPD/8fAAD///oCgN91uwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
