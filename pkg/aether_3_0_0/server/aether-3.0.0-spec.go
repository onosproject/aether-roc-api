// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
