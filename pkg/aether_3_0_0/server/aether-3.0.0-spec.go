// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"G8zubTb/HwAA//+DdD6HlL4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
