// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"KmprBPX8/K8AAAD//w9lqz5syAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
