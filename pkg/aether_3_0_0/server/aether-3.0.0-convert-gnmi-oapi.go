// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"fmt"

	"github.com/onosproject/aether-roc-api/pkg/aether_3_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	externalRef0 "github.com/onosproject/config-models/modelplugin/aether-3.0.0/aether_3_0_0"
)

// ModelPluginDevice - a wrapper for the model plugin
type ModelPluginDevice struct {
	device externalRef0.Device
}

// toAdditionalPropertyTarget converts gNMI to OAPI.
func (d *ModelPluginDevice) toAdditionalPropertyTarget(params ...string) (*types.AdditionalPropertyTarget, error) {
	resource := new(types.AdditionalPropertyTarget)

	// Property: target string
	//encoding gNMI attribute to OAPI
	reflectTarget, err := utils.FindModelPluginObject(d.device, "AdditionalPropertyTargetTarget", params...)
	if err != nil {
		return nil, err
	}
	if reflectTarget != nil {
		attrTarget := reflectTarget.Interface().(string)
		resource.Target = &attrTarget
	}

	return resource, nil
}

// toApList converts gNMI to OAPI.
func (d *ModelPluginDevice) toApList(params ...string) (*types.ApList, error) {
	resource := new(types.ApList)

	// Property: ap-list []ApListApList
	// Handle []Object
	apLists := make([]types.ApListApList, 0)
	reflectApListApList, err := utils.FindModelPluginObject(d.device, "ApListApList", params...)
	if err != nil {
		return nil, err
	}
	if reflectApListApList != nil {
		for _, key := range reflectApListApList.MapKeys() {
			v := reflectApListApList.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			apList, err := d.toApListApList(childParams...)
			if err != nil {
				return nil, err
			}
			apLists = append(apLists, *apList)
		}
	}
	resource.ApList = &apLists

	return resource, nil
}

// toApListApList converts gNMI to OAPI.
func (d *ModelPluginDevice) toApListApList(params ...string) (*types.ApListApList, error) {
	resource := new(types.ApListApList)

	// Property: access-points []ApListApListAccessPoints
	// Handle []Object
	accessPointss := make([]types.ApListApListAccessPoints, 0)
	reflectApListApListAccessPoints, err := utils.FindModelPluginObject(d.device, "ApListApListAccessPoints", params...)
	if err != nil {
		return nil, err
	}
	if reflectApListApListAccessPoints != nil {
		for _, key := range reflectApListApListAccessPoints.MapKeys() {
			v := reflectApListApListAccessPoints.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			accessPoints, err := d.toApListApListAccessPoints(childParams...)
			if err != nil {
				return nil, err
			}
			accessPointss = append(accessPointss, *accessPoints)
		}
	}
	resource.AccessPoints = &accessPointss

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "ApListApListDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "ApListApListDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: enterprise string
	//encoding gNMI attribute to OAPI
	reflectEnterprise, err := utils.FindModelPluginObject(d.device, "ApListApListEnterprise", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprise != nil {
		attrEnterprise := reflectEnterprise.Interface().(string)
		resource.Enterprise = attrEnterprise
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "ApListApListId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = &attrId
	}

	return resource, nil
}

// toApListApListAccessPoints converts gNMI to OAPI.
func (d *ModelPluginDevice) toApListApListAccessPoints(params ...string) (*types.ApListApListAccessPoints, error) {
	resource := new(types.ApListApListAccessPoints)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(d.device, "ApListApListAccessPointsAddress", params...)
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := reflectAddress.Interface().(string)
		resource.Address = &attrAddress
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(d.device, "ApListApListAccessPointsEnable", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = &boolEnable
	}

	// Property: tac int32
	//encoding gNMI attribute to OAPI
	reflectTac, err := utils.FindModelPluginObject(d.device, "ApListApListAccessPointsTac", params...)
	if err != nil {
		return nil, err
	}
	if reflectTac != nil {
		//OpenAPI does not have unsigned numbers
		int32Tac, ok := reflectTac.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Tac, ok := reflectTac.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectTac.Interface())
			}
			int32Tac = int32(uint32Tac)
		}
		resource.Tac = int32Tac
	}

	return resource, nil
}

// toApplication converts gNMI to OAPI.
func (d *ModelPluginDevice) toApplication(params ...string) (*types.Application, error) {
	resource := new(types.Application)

	// Property: application []ApplicationApplication
	// Handle []Object
	applications := make([]types.ApplicationApplication, 0)
	reflectApplicationApplication, err := utils.FindModelPluginObject(d.device, "ApplicationApplication", params...)
	if err != nil {
		return nil, err
	}
	if reflectApplicationApplication != nil {
		for _, key := range reflectApplicationApplication.MapKeys() {
			v := reflectApplicationApplication.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			application, err := d.toApplicationApplication(childParams...)
			if err != nil {
				return nil, err
			}
			applications = append(applications, *application)
		}
	}
	resource.Application = &applications

	return resource, nil
}

// toApplicationApplication converts gNMI to OAPI.
func (d *ModelPluginDevice) toApplicationApplication(params ...string) (*types.ApplicationApplication, error) {
	resource := new(types.ApplicationApplication)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: endpoint []ApplicationApplicationEndpoint
	// Handle []Object
	endpoints := make([]types.ApplicationApplicationEndpoint, 0)
	reflectApplicationApplicationEndpoint, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationEndpoint", params...)
	if err != nil {
		return nil, err
	}
	if reflectApplicationApplicationEndpoint != nil {
		for _, key := range reflectApplicationApplicationEndpoint.MapKeys() {
			v := reflectApplicationApplicationEndpoint.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			endpoint, err := d.toApplicationApplicationEndpoint(childParams...)
			if err != nil {
				return nil, err
			}
			endpoints = append(endpoints, *endpoint)
		}
	}
	resource.Endpoint = &endpoints

	// Property: enterprise string
	//encoding gNMI attribute to OAPI
	reflectEnterprise, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationEnterprise", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprise != nil {
		attrEnterprise := reflectEnterprise.Interface().(string)
		resource.Enterprise = attrEnterprise
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = &attrId
	}

	return resource, nil
}

// toApplicationApplicationEndpoint converts gNMI to OAPI.
func (d *ModelPluginDevice) toApplicationApplicationEndpoint(params ...string) (*types.ApplicationApplicationEndpoint, error) {
	resource := new(types.ApplicationApplicationEndpoint)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationEndpointAddress", params...)
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := reflectAddress.Interface().(string)
		resource.Address = attrAddress
	}

	// Property: name string
	//encoding gNMI attribute to OAPI
	reflectName, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationEndpointName", params...)
	if err != nil {
		return nil, err
	}
	if reflectName != nil {
		attrName := reflectName.Interface().(string)
		resource.Name = &attrName
	}

	// Property: port-end int32
	//encoding gNMI attribute to OAPI
	reflectPortEnd, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationEndpointPortEnd", params...)
	if err != nil {
		return nil, err
	}
	if reflectPortEnd != nil {
		//OpenAPI does not have unsigned numbers
		int32PortEnd, ok := reflectPortEnd.Interface().(int32)
		if !ok { // Might be a uint32
			uint32PortEnd, ok := reflectPortEnd.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectPortEnd.Interface())
			}
			int32PortEnd = int32(uint32PortEnd)
		}
		resource.PortEnd = &int32PortEnd
	}

	// Property: port-start int32
	//encoding gNMI attribute to OAPI
	reflectPortStart, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationEndpointPortStart", params...)
	if err != nil {
		return nil, err
	}
	if reflectPortStart != nil {
		//OpenAPI does not have unsigned numbers
		int32PortStart, ok := reflectPortStart.Interface().(int32)
		if !ok { // Might be a uint32
			uint32PortStart, ok := reflectPortStart.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectPortStart.Interface())
			}
			int32PortStart = int32(uint32PortStart)
		}
		resource.PortStart = int32PortStart
	}

	// Property: protocol string
	//encoding gNMI attribute to OAPI
	reflectProtocol, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationEndpointProtocol", params...)
	if err != nil {
		return nil, err
	}
	if reflectProtocol != nil {
		attrProtocol := reflectProtocol.Interface().(string)
		resource.Protocol = &attrProtocol
	}

	return resource, nil
}

// toConnectivityService converts gNMI to OAPI.
func (d *ModelPluginDevice) toConnectivityService(params ...string) (*types.ConnectivityService, error) {
	resource := new(types.ConnectivityService)

	// Property: connectivity-service []ConnectivityServiceConnectivityService
	// Handle []Object
	connectivityServices := make([]types.ConnectivityServiceConnectivityService, 0)
	reflectConnectivityServiceConnectivityService, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	if reflectConnectivityServiceConnectivityService != nil {
		for _, key := range reflectConnectivityServiceConnectivityService.MapKeys() {
			v := reflectConnectivityServiceConnectivityService.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			connectivityService, err := d.toConnectivityServiceConnectivityService(childParams...)
			if err != nil {
				return nil, err
			}
			connectivityServices = append(connectivityServices, *connectivityService)
		}
	}
	resource.ConnectivityService = &connectivityServices

	return resource, nil
}

// toConnectivityServiceConnectivityService converts gNMI to OAPI.
func (d *ModelPluginDevice) toConnectivityServiceConnectivityService(params ...string) (*types.ConnectivityServiceConnectivityService, error) {
	resource := new(types.ConnectivityServiceConnectivityService)

	// Property: core-5g-endpoint string
	//encoding gNMI attribute to OAPI
	reflectCore5gEndpoint, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityServiceCore5gEndpoint", params...)
	if err != nil {
		return nil, err
	}
	if reflectCore5gEndpoint != nil {
		attrCore5gEndpoint := reflectCore5gEndpoint.Interface().(string)
		resource.Core5gEndpoint = &attrCore5gEndpoint
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityServiceDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityServiceDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: hss-endpoint string
	//encoding gNMI attribute to OAPI
	reflectHssEndpoint, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityServiceHssEndpoint", params...)
	if err != nil {
		return nil, err
	}
	if reflectHssEndpoint != nil {
		attrHssEndpoint := reflectHssEndpoint.Interface().(string)
		resource.HssEndpoint = &attrHssEndpoint
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityServiceId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = &attrId
	}

	// Property: pcrf-endpoint string
	//encoding gNMI attribute to OAPI
	reflectPcrfEndpoint, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityServicePcrfEndpoint", params...)
	if err != nil {
		return nil, err
	}
	if reflectPcrfEndpoint != nil {
		attrPcrfEndpoint := reflectPcrfEndpoint.Interface().(string)
		resource.PcrfEndpoint = &attrPcrfEndpoint
	}

	// Property: spgwc-endpoint string
	//encoding gNMI attribute to OAPI
	reflectSpgwcEndpoint, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityServiceSpgwcEndpoint", params...)
	if err != nil {
		return nil, err
	}
	if reflectSpgwcEndpoint != nil {
		attrSpgwcEndpoint := reflectSpgwcEndpoint.Interface().(string)
		resource.SpgwcEndpoint = &attrSpgwcEndpoint
	}

	return resource, nil
}

// toDeviceGroup converts gNMI to OAPI.
func (d *ModelPluginDevice) toDeviceGroup(params ...string) (*types.DeviceGroup, error) {
	resource := new(types.DeviceGroup)

	// Property: device-group []DeviceGroupDeviceGroup
	// Handle []Object
	deviceGroups := make([]types.DeviceGroupDeviceGroup, 0)
	reflectDeviceGroupDeviceGroup, err := utils.FindModelPluginObject(d.device, "DeviceGroupDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroupDeviceGroup != nil {
		for _, key := range reflectDeviceGroupDeviceGroup.MapKeys() {
			v := reflectDeviceGroupDeviceGroup.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			deviceGroup, err := d.toDeviceGroupDeviceGroup(childParams...)
			if err != nil {
				return nil, err
			}
			deviceGroups = append(deviceGroups, *deviceGroup)
		}
	}
	resource.DeviceGroup = &deviceGroups

	return resource, nil
}

// toDeviceGroupDeviceGroup converts gNMI to OAPI.
func (d *ModelPluginDevice) toDeviceGroupDeviceGroup(params ...string) (*types.DeviceGroupDeviceGroup, error) {
	resource := new(types.DeviceGroupDeviceGroup)

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "DeviceGroupDeviceGroupDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "DeviceGroupDeviceGroupId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = &attrId
	}

	// Property: imsis []DeviceGroupDeviceGroupImsis
	// Handle []Object
	imsiss := make([]types.DeviceGroupDeviceGroupImsis, 0)
	reflectDeviceGroupDeviceGroupImsis, err := utils.FindModelPluginObject(d.device, "DeviceGroupDeviceGroupImsis", params...)
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroupDeviceGroupImsis != nil {
		for _, key := range reflectDeviceGroupDeviceGroupImsis.MapKeys() {
			v := reflectDeviceGroupDeviceGroupImsis.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			imsis, err := d.toDeviceGroupDeviceGroupImsis(childParams...)
			if err != nil {
				return nil, err
			}
			imsiss = append(imsiss, *imsis)
		}
	}
	resource.Imsis = &imsiss

	// Property: ip-domain string
	//encoding gNMI attribute to OAPI
	reflectIpDomain, err := utils.FindModelPluginObject(d.device, "DeviceGroupDeviceGroupIpDomain", params...)
	if err != nil {
		return nil, err
	}
	if reflectIpDomain != nil {
		attrIpDomain := reflectIpDomain.Interface().(string)
		resource.IpDomain = &attrIpDomain
	}

	// Property: site string
	//encoding gNMI attribute to OAPI
	reflectSite, err := utils.FindModelPluginObject(d.device, "DeviceGroupDeviceGroupSite", params...)
	if err != nil {
		return nil, err
	}
	if reflectSite != nil {
		attrSite := reflectSite.Interface().(string)
		resource.Site = attrSite
	}

	return resource, nil
}

// toDeviceGroupDeviceGroupImsis converts gNMI to OAPI.
func (d *ModelPluginDevice) toDeviceGroupDeviceGroupImsis(params ...string) (*types.DeviceGroupDeviceGroupImsis, error) {
	resource := new(types.DeviceGroupDeviceGroupImsis)

	// Property: imsi-range-from int64
	//encoding gNMI attribute to OAPI
	reflectImsiRangeFrom, err := utils.FindModelPluginObject(d.device, "DeviceGroupDeviceGroupImsisImsiRangeFrom", params...)
	if err != nil {
		return nil, err
	}
	if reflectImsiRangeFrom != nil {

		int64ImsiRangeFrom, ok := reflectImsiRangeFrom.Interface().(int64)
		if !ok { // Might be a uint64
			uint64ImsiRangeFrom, ok := reflectImsiRangeFrom.Interface().(uint64)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int64 or uint64", reflectImsiRangeFrom.Interface())
			}
			int64ImsiRangeFrom = int64(uint64ImsiRangeFrom)
		}
		resource.ImsiRangeFrom = &int64ImsiRangeFrom
	}

	// Property: imsi-range-to int64
	//encoding gNMI attribute to OAPI
	reflectImsiRangeTo, err := utils.FindModelPluginObject(d.device, "DeviceGroupDeviceGroupImsisImsiRangeTo", params...)
	if err != nil {
		return nil, err
	}
	if reflectImsiRangeTo != nil {

		int64ImsiRangeTo, ok := reflectImsiRangeTo.Interface().(int64)
		if !ok { // Might be a uint64
			uint64ImsiRangeTo, ok := reflectImsiRangeTo.Interface().(uint64)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int64 or uint64", reflectImsiRangeTo.Interface())
			}
			int64ImsiRangeTo = int64(uint64ImsiRangeTo)
		}
		resource.ImsiRangeTo = &int64ImsiRangeTo
	}

	// Property: name string
	//encoding gNMI attribute to OAPI
	reflectName, err := utils.FindModelPluginObject(d.device, "DeviceGroupDeviceGroupImsisName", params...)
	if err != nil {
		return nil, err
	}
	if reflectName != nil {
		attrName := reflectName.Interface().(string)
		resource.Name = &attrName
	}

	return resource, nil
}

// toEnterprise converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprise(params ...string) (*types.Enterprise, error) {
	resource := new(types.Enterprise)

	// Property: enterprise []EnterpriseEnterprise
	// Handle []Object
	enterprises := make([]types.EnterpriseEnterprise, 0)
	reflectEnterpriseEnterprise, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterprise", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterpriseEnterprise != nil {
		for _, key := range reflectEnterpriseEnterprise.MapKeys() {
			v := reflectEnterpriseEnterprise.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			enterprise, err := d.toEnterpriseEnterprise(childParams...)
			if err != nil {
				return nil, err
			}
			enterprises = append(enterprises, *enterprise)
		}
	}
	resource.Enterprise = &enterprises

	return resource, nil
}

// toEnterpriseEnterprise converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterpriseEnterprise(params ...string) (*types.EnterpriseEnterprise, error) {
	resource := new(types.EnterpriseEnterprise)

	// Property: connectivity-service []EnterpriseEnterpriseConnectivityService
	// Handle []Object
	connectivityServices := make([]types.EnterpriseEnterpriseConnectivityService, 0)
	reflectEnterpriseEnterpriseConnectivityService, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterpriseConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterpriseEnterpriseConnectivityService != nil {
		for _, key := range reflectEnterpriseEnterpriseConnectivityService.MapKeys() {
			v := reflectEnterpriseEnterpriseConnectivityService.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			connectivityService, err := d.toEnterpriseEnterpriseConnectivityService(childParams...)
			if err != nil {
				return nil, err
			}
			connectivityServices = append(connectivityServices, *connectivityService)
		}
	}
	resource.ConnectivityService = &connectivityServices

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterpriseDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterpriseDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterpriseId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = &attrId
	}

	return resource, nil
}

// toEnterpriseEnterpriseConnectivityService converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterpriseEnterpriseConnectivityService(params ...string) (*types.EnterpriseEnterpriseConnectivityService, error) {
	resource := new(types.EnterpriseEnterpriseConnectivityService)

	// Property: connectivity-service string
	//encoding gNMI attribute to OAPI
	reflectConnectivityService, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterpriseConnectivityServiceConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	if reflectConnectivityService != nil {
		attrConnectivityService := reflectConnectivityService.Interface().(string)
		resource.ConnectivityService = &attrConnectivityService
	}

	// Property: enabled bool
	//encoding gNMI attribute to OAPI
	reflectEnabled, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterpriseConnectivityServiceEnabled", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnabled != nil {
		boolEnabled := reflectEnabled.Interface().(bool)
		resource.Enabled = &boolEnabled
	}

	return resource, nil
}

// toIpDomain converts gNMI to OAPI.
func (d *ModelPluginDevice) toIpDomain(params ...string) (*types.IpDomain, error) {
	resource := new(types.IpDomain)

	// Property: ip-domain []IpDomainIpDomain
	// Handle []Object
	ipDomains := make([]types.IpDomainIpDomain, 0)
	reflectIpDomainIpDomain, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomain", params...)
	if err != nil {
		return nil, err
	}
	if reflectIpDomainIpDomain != nil {
		for _, key := range reflectIpDomainIpDomain.MapKeys() {
			v := reflectIpDomainIpDomain.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			ipDomain, err := d.toIpDomainIpDomain(childParams...)
			if err != nil {
				return nil, err
			}
			ipDomains = append(ipDomains, *ipDomain)
		}
	}
	resource.IpDomain = &ipDomains

	return resource, nil
}

// toIpDomainIpDomain converts gNMI to OAPI.
func (d *ModelPluginDevice) toIpDomainIpDomain(params ...string) (*types.IpDomainIpDomain, error) {
	resource := new(types.IpDomainIpDomain)

	// Property: admin-status string
	//encoding gNMI attribute to OAPI
	reflectAdminStatus, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomainAdminStatus", params...)
	if err != nil {
		return nil, err
	}
	if reflectAdminStatus != nil {
		attrAdminStatus := reflectAdminStatus.Interface().(string)
		resource.AdminStatus = &attrAdminStatus
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomainDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomainDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: dns-primary string
	//encoding gNMI attribute to OAPI
	reflectDnsPrimary, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomainDnsPrimary", params...)
	if err != nil {
		return nil, err
	}
	if reflectDnsPrimary != nil {
		attrDnsPrimary := reflectDnsPrimary.Interface().(string)
		resource.DnsPrimary = &attrDnsPrimary
	}

	// Property: dns-secondary string
	//encoding gNMI attribute to OAPI
	reflectDnsSecondary, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomainDnsSecondary", params...)
	if err != nil {
		return nil, err
	}
	if reflectDnsSecondary != nil {
		attrDnsSecondary := reflectDnsSecondary.Interface().(string)
		resource.DnsSecondary = &attrDnsSecondary
	}

	// Property: enterprise string
	//encoding gNMI attribute to OAPI
	reflectEnterprise, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomainEnterprise", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprise != nil {
		attrEnterprise := reflectEnterprise.Interface().(string)
		resource.Enterprise = attrEnterprise
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomainId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = &attrId
	}

	// Property: mtu int32
	//encoding gNMI attribute to OAPI
	reflectMtu, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomainMtu", params...)
	if err != nil {
		return nil, err
	}
	if reflectMtu != nil {
		//OpenAPI does not have unsigned numbers
		int32Mtu, ok := reflectMtu.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Mtu, ok := reflectMtu.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectMtu.Interface())
			}
			int32Mtu = int32(uint32Mtu)
		}
		resource.Mtu = &int32Mtu
	}

	// Property: subnet string
	//encoding gNMI attribute to OAPI
	reflectSubnet, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomainSubnet", params...)
	if err != nil {
		return nil, err
	}
	if reflectSubnet != nil {
		attrSubnet := reflectSubnet.Interface().(string)
		resource.Subnet = attrSubnet
	}

	return resource, nil
}

// toSite converts gNMI to OAPI.
func (d *ModelPluginDevice) toSite(params ...string) (*types.Site, error) {
	resource := new(types.Site)

	// Property: site []SiteSite
	// Handle []Object
	sites := make([]types.SiteSite, 0)
	reflectSiteSite, err := utils.FindModelPluginObject(d.device, "SiteSite", params...)
	if err != nil {
		return nil, err
	}
	if reflectSiteSite != nil {
		for _, key := range reflectSiteSite.MapKeys() {
			v := reflectSiteSite.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			site, err := d.toSiteSite(childParams...)
			if err != nil {
				return nil, err
			}
			sites = append(sites, *site)
		}
	}
	resource.Site = &sites

	return resource, nil
}

// toSiteSite converts gNMI to OAPI.
func (d *ModelPluginDevice) toSiteSite(params ...string) (*types.SiteSite, error) {
	resource := new(types.SiteSite)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "SiteSiteDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "SiteSiteDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: enterprise string
	//encoding gNMI attribute to OAPI
	reflectEnterprise, err := utils.FindModelPluginObject(d.device, "SiteSiteEnterprise", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprise != nil {
		attrEnterprise := reflectEnterprise.Interface().(string)
		resource.Enterprise = attrEnterprise
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "SiteSiteId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = &attrId
	}

	// Property: imsi-definition SiteSiteImsiDefinition
	//Handle object
	attrImsiDefinition, err := d.toSiteSiteImsiDefinition(params...)
	if err != nil {
		return nil, err
	}
	resource.ImsiDefinition = attrImsiDefinition

	return resource, nil
}

// toSiteSiteImsiDefinition converts gNMI to OAPI.
func (d *ModelPluginDevice) toSiteSiteImsiDefinition(params ...string) (*types.SiteSiteImsiDefinition, error) {
	resource := new(types.SiteSiteImsiDefinition)

	// Property: enterprise int32
	//encoding gNMI attribute to OAPI
	reflectEnterprise, err := utils.FindModelPluginObject(d.device, "SiteSiteImsiDefinitionEnterprise", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprise != nil {
		//OpenAPI does not have unsigned numbers
		int32Enterprise, ok := reflectEnterprise.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Enterprise, ok := reflectEnterprise.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectEnterprise.Interface())
			}
			int32Enterprise = int32(uint32Enterprise)
		}
		resource.Enterprise = &int32Enterprise
	}

	// Property: format string
	//encoding gNMI attribute to OAPI
	reflectFormat, err := utils.FindModelPluginObject(d.device, "SiteSiteImsiDefinitionFormat", params...)
	if err != nil {
		return nil, err
	}
	if reflectFormat != nil {
		attrFormat := reflectFormat.Interface().(string)
		resource.Format = &attrFormat
	}

	// Property: mcc int32
	//encoding gNMI attribute to OAPI
	reflectMcc, err := utils.FindModelPluginObject(d.device, "SiteSiteImsiDefinitionMcc", params...)
	if err != nil {
		return nil, err
	}
	if reflectMcc != nil {
		//OpenAPI does not have unsigned numbers
		int32Mcc, ok := reflectMcc.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Mcc, ok := reflectMcc.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectMcc.Interface())
			}
			int32Mcc = int32(uint32Mcc)
		}
		resource.Mcc = &int32Mcc
	}

	// Property: mnc int32
	//encoding gNMI attribute to OAPI
	reflectMnc, err := utils.FindModelPluginObject(d.device, "SiteSiteImsiDefinitionMnc", params...)
	if err != nil {
		return nil, err
	}
	if reflectMnc != nil {
		//OpenAPI does not have unsigned numbers
		int32Mnc, ok := reflectMnc.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Mnc, ok := reflectMnc.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectMnc.Interface())
			}
			int32Mnc = int32(uint32Mnc)
		}
		resource.Mnc = &int32Mnc
	}

	return resource, nil
}

// toTemplate converts gNMI to OAPI.
func (d *ModelPluginDevice) toTemplate(params ...string) (*types.Template, error) {
	resource := new(types.Template)

	// Property: template []TemplateTemplate
	// Handle []Object
	templates := make([]types.TemplateTemplate, 0)
	reflectTemplateTemplate, err := utils.FindModelPluginObject(d.device, "TemplateTemplate", params...)
	if err != nil {
		return nil, err
	}
	if reflectTemplateTemplate != nil {
		for _, key := range reflectTemplateTemplate.MapKeys() {
			v := reflectTemplateTemplate.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			template, err := d.toTemplateTemplate(childParams...)
			if err != nil {
				return nil, err
			}
			templates = append(templates, *template)
		}
	}
	resource.Template = &templates

	return resource, nil
}

// toTemplateTemplate converts gNMI to OAPI.
func (d *ModelPluginDevice) toTemplateTemplate(params ...string) (*types.TemplateTemplate, error) {
	resource := new(types.TemplateTemplate)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "TemplateTemplateDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "TemplateTemplateDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: downlink int32
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(d.device, "TemplateTemplateDownlink", params...)
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers
		int32Downlink, ok := reflectDownlink.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Downlink, ok := reflectDownlink.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectDownlink.Interface())
			}
			int32Downlink = int32(uint32Downlink)
		}
		resource.Downlink = &int32Downlink
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "TemplateTemplateId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = &attrId
	}

	// Property: sd int32
	//encoding gNMI attribute to OAPI
	reflectSd, err := utils.FindModelPluginObject(d.device, "TemplateTemplateSd", params...)
	if err != nil {
		return nil, err
	}
	if reflectSd != nil {
		//OpenAPI does not have unsigned numbers
		int32Sd, ok := reflectSd.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Sd, ok := reflectSd.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectSd.Interface())
			}
			int32Sd = int32(uint32Sd)
		}
		resource.Sd = &int32Sd
	}

	// Property: sst int32
	//encoding gNMI attribute to OAPI
	reflectSst, err := utils.FindModelPluginObject(d.device, "TemplateTemplateSst", params...)
	if err != nil {
		return nil, err
	}
	if reflectSst != nil {
		//OpenAPI does not have unsigned numbers
		int32Sst, ok := reflectSst.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Sst, ok := reflectSst.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectSst.Interface())
			}
			int32Sst = int32(uint32Sst)
		}
		resource.Sst = &int32Sst
	}

	// Property: traffic-class string
	//encoding gNMI attribute to OAPI
	reflectTrafficClass, err := utils.FindModelPluginObject(d.device, "TemplateTemplateTrafficClass", params...)
	if err != nil {
		return nil, err
	}
	if reflectTrafficClass != nil {
		attrTrafficClass := reflectTrafficClass.Interface().(string)
		resource.TrafficClass = &attrTrafficClass
	}

	// Property: uplink int32
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(d.device, "TemplateTemplateUplink", params...)
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers
		int32Uplink, ok := reflectUplink.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Uplink, ok := reflectUplink.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectUplink.Interface())
			}
			int32Uplink = int32(uint32Uplink)
		}
		resource.Uplink = &int32Uplink
	}

	return resource, nil
}

// toTrafficClass converts gNMI to OAPI.
func (d *ModelPluginDevice) toTrafficClass(params ...string) (*types.TrafficClass, error) {
	resource := new(types.TrafficClass)

	// Property: traffic-class []TrafficClassTrafficClass
	// Handle []Object
	trafficClasss := make([]types.TrafficClassTrafficClass, 0)
	reflectTrafficClassTrafficClass, err := utils.FindModelPluginObject(d.device, "TrafficClassTrafficClass", params...)
	if err != nil {
		return nil, err
	}
	if reflectTrafficClassTrafficClass != nil {
		for _, key := range reflectTrafficClassTrafficClass.MapKeys() {
			v := reflectTrafficClassTrafficClass.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			trafficClass, err := d.toTrafficClassTrafficClass(childParams...)
			if err != nil {
				return nil, err
			}
			trafficClasss = append(trafficClasss, *trafficClass)
		}
	}
	resource.TrafficClass = &trafficClasss

	return resource, nil
}

// toTrafficClassTrafficClass converts gNMI to OAPI.
func (d *ModelPluginDevice) toTrafficClassTrafficClass(params ...string) (*types.TrafficClassTrafficClass, error) {
	resource := new(types.TrafficClassTrafficClass)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "TrafficClassTrafficClassDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "TrafficClassTrafficClassDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "TrafficClassTrafficClassId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = &attrId
	}

	// Property: pdb int32
	//encoding gNMI attribute to OAPI
	reflectPdb, err := utils.FindModelPluginObject(d.device, "TrafficClassTrafficClassPdb", params...)
	if err != nil {
		return nil, err
	}
	if reflectPdb != nil {
		//OpenAPI does not have unsigned numbers
		int32Pdb, ok := reflectPdb.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Pdb, ok := reflectPdb.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectPdb.Interface())
			}
			int32Pdb = int32(uint32Pdb)
		}
		resource.Pdb = &int32Pdb
	}

	// Property: pelr int32
	//encoding gNMI attribute to OAPI
	reflectPelr, err := utils.FindModelPluginObject(d.device, "TrafficClassTrafficClassPelr", params...)
	if err != nil {
		return nil, err
	}
	if reflectPelr != nil {
		//OpenAPI does not have unsigned numbers
		int32Pelr, ok := reflectPelr.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Pelr, ok := reflectPelr.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectPelr.Interface())
			}
			int32Pelr = int32(uint32Pelr)
		}
		resource.Pelr = &int32Pelr
	}

	// Property: qci int32
	//encoding gNMI attribute to OAPI
	reflectQci, err := utils.FindModelPluginObject(d.device, "TrafficClassTrafficClassQci", params...)
	if err != nil {
		return nil, err
	}
	if reflectQci != nil {
		//OpenAPI does not have unsigned numbers
		int32Qci, ok := reflectQci.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Qci, ok := reflectQci.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectQci.Interface())
			}
			int32Qci = int32(uint32Qci)
		}
		resource.Qci = &int32Qci
	}

	return resource, nil
}

// toUpf converts gNMI to OAPI.
func (d *ModelPluginDevice) toUpf(params ...string) (*types.Upf, error) {
	resource := new(types.Upf)

	// Property: upf []UpfUpf
	// Handle []Object
	upfs := make([]types.UpfUpf, 0)
	reflectUpfUpf, err := utils.FindModelPluginObject(d.device, "UpfUpf", params...)
	if err != nil {
		return nil, err
	}
	if reflectUpfUpf != nil {
		for _, key := range reflectUpfUpf.MapKeys() {
			v := reflectUpfUpf.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			upf, err := d.toUpfUpf(childParams...)
			if err != nil {
				return nil, err
			}
			upfs = append(upfs, *upf)
		}
	}
	resource.Upf = &upfs

	return resource, nil
}

// toUpfUpf converts gNMI to OAPI.
func (d *ModelPluginDevice) toUpfUpf(params ...string) (*types.UpfUpf, error) {
	resource := new(types.UpfUpf)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(d.device, "UpfUpfAddress", params...)
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := reflectAddress.Interface().(string)
		resource.Address = attrAddress
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "UpfUpfDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "UpfUpfDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: enterprise string
	//encoding gNMI attribute to OAPI
	reflectEnterprise, err := utils.FindModelPluginObject(d.device, "UpfUpfEnterprise", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprise != nil {
		attrEnterprise := reflectEnterprise.Interface().(string)
		resource.Enterprise = attrEnterprise
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "UpfUpfId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = &attrId
	}

	// Property: port int32
	//encoding gNMI attribute to OAPI
	reflectPort, err := utils.FindModelPluginObject(d.device, "UpfUpfPort", params...)
	if err != nil {
		return nil, err
	}
	if reflectPort != nil {
		//OpenAPI does not have unsigned numbers
		int32Port, ok := reflectPort.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Port, ok := reflectPort.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectPort.Interface())
			}
			int32Port = int32(uint32Port)
		}
		resource.Port = int32Port
	}

	return resource, nil
}

// toVcs converts gNMI to OAPI.
func (d *ModelPluginDevice) toVcs(params ...string) (*types.Vcs, error) {
	resource := new(types.Vcs)

	// Property: vcs []VcsVcs
	// Handle []Object
	vcss := make([]types.VcsVcs, 0)
	reflectVcsVcs, err := utils.FindModelPluginObject(d.device, "VcsVcs", params...)
	if err != nil {
		return nil, err
	}
	if reflectVcsVcs != nil {
		for _, key := range reflectVcsVcs.MapKeys() {
			v := reflectVcsVcs.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			vcs, err := d.toVcsVcs(childParams...)
			if err != nil {
				return nil, err
			}
			vcss = append(vcss, *vcs)
		}
	}
	resource.Vcs = &vcss

	return resource, nil
}

// toVcsVcs converts gNMI to OAPI.
func (d *ModelPluginDevice) toVcsVcs(params ...string) (*types.VcsVcs, error) {
	resource := new(types.VcsVcs)

	// Property: ap string
	//encoding gNMI attribute to OAPI
	reflectAp, err := utils.FindModelPluginObject(d.device, "VcsVcsAp", params...)
	if err != nil {
		return nil, err
	}
	if reflectAp != nil {
		attrAp := reflectAp.Interface().(string)
		resource.Ap = &attrAp
	}

	// Property: application []VcsVcsApplication
	// Handle []Object
	applications := make([]types.VcsVcsApplication, 0)
	reflectVcsVcsApplication, err := utils.FindModelPluginObject(d.device, "VcsVcsApplication", params...)
	if err != nil {
		return nil, err
	}
	if reflectVcsVcsApplication != nil {
		for _, key := range reflectVcsVcsApplication.MapKeys() {
			v := reflectVcsVcsApplication.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			application, err := d.toVcsVcsApplication(childParams...)
			if err != nil {
				return nil, err
			}
			applications = append(applications, *application)
		}
	}
	resource.Application = &applications

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "VcsVcsDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device-group []VcsVcsDeviceGroup
	// Handle []Object
	deviceGroups := make([]types.VcsVcsDeviceGroup, 0)
	reflectVcsVcsDeviceGroup, err := utils.FindModelPluginObject(d.device, "VcsVcsDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	if reflectVcsVcsDeviceGroup != nil {
		for _, key := range reflectVcsVcsDeviceGroup.MapKeys() {
			v := reflectVcsVcsDeviceGroup.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			deviceGroup, err := d.toVcsVcsDeviceGroup(childParams...)
			if err != nil {
				return nil, err
			}
			deviceGroups = append(deviceGroups, *deviceGroup)
		}
	}
	resource.DeviceGroup = &deviceGroups

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "VcsVcsDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: downlink int32
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(d.device, "VcsVcsDownlink", params...)
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers
		int32Downlink, ok := reflectDownlink.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Downlink, ok := reflectDownlink.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectDownlink.Interface())
			}
			int32Downlink = int32(uint32Downlink)
		}
		resource.Downlink = &int32Downlink
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "VcsVcsId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = &attrId
	}

	// Property: sd int32
	//encoding gNMI attribute to OAPI
	reflectSd, err := utils.FindModelPluginObject(d.device, "VcsVcsSd", params...)
	if err != nil {
		return nil, err
	}
	if reflectSd != nil {
		//OpenAPI does not have unsigned numbers
		int32Sd, ok := reflectSd.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Sd, ok := reflectSd.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectSd.Interface())
			}
			int32Sd = int32(uint32Sd)
		}
		resource.Sd = int32Sd
	}

	// Property: sst int32
	//encoding gNMI attribute to OAPI
	reflectSst, err := utils.FindModelPluginObject(d.device, "VcsVcsSst", params...)
	if err != nil {
		return nil, err
	}
	if reflectSst != nil {
		//OpenAPI does not have unsigned numbers
		int32Sst, ok := reflectSst.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Sst, ok := reflectSst.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectSst.Interface())
			}
			int32Sst = int32(uint32Sst)
		}
		resource.Sst = int32Sst
	}

	// Property: template string
	//encoding gNMI attribute to OAPI
	reflectTemplate, err := utils.FindModelPluginObject(d.device, "VcsVcsTemplate", params...)
	if err != nil {
		return nil, err
	}
	if reflectTemplate != nil {
		attrTemplate := reflectTemplate.Interface().(string)
		resource.Template = &attrTemplate
	}

	// Property: traffic-class string
	//encoding gNMI attribute to OAPI
	reflectTrafficClass, err := utils.FindModelPluginObject(d.device, "VcsVcsTrafficClass", params...)
	if err != nil {
		return nil, err
	}
	if reflectTrafficClass != nil {
		attrTrafficClass := reflectTrafficClass.Interface().(string)
		resource.TrafficClass = attrTrafficClass
	}

	// Property: upf string
	//encoding gNMI attribute to OAPI
	reflectUpf, err := utils.FindModelPluginObject(d.device, "VcsVcsUpf", params...)
	if err != nil {
		return nil, err
	}
	if reflectUpf != nil {
		attrUpf := reflectUpf.Interface().(string)
		resource.Upf = &attrUpf
	}

	// Property: uplink int32
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(d.device, "VcsVcsUplink", params...)
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers
		int32Uplink, ok := reflectUplink.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Uplink, ok := reflectUplink.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectUplink.Interface())
			}
			int32Uplink = int32(uint32Uplink)
		}
		resource.Uplink = &int32Uplink
	}

	return resource, nil
}

// toVcsVcsApplication converts gNMI to OAPI.
func (d *ModelPluginDevice) toVcsVcsApplication(params ...string) (*types.VcsVcsApplication, error) {
	resource := new(types.VcsVcsApplication)

	// Property: allow bool
	//encoding gNMI attribute to OAPI
	reflectAllow, err := utils.FindModelPluginObject(d.device, "VcsVcsApplicationAllow", params...)
	if err != nil {
		return nil, err
	}
	if reflectAllow != nil {
		boolAllow := reflectAllow.Interface().(bool)
		resource.Allow = &boolAllow
	}

	// Property: application string
	//encoding gNMI attribute to OAPI
	reflectApplication, err := utils.FindModelPluginObject(d.device, "VcsVcsApplicationApplication", params...)
	if err != nil {
		return nil, err
	}
	if reflectApplication != nil {
		attrApplication := reflectApplication.Interface().(string)
		resource.Application = attrApplication
	}

	return resource, nil
}

// toVcsVcsDeviceGroup converts gNMI to OAPI.
func (d *ModelPluginDevice) toVcsVcsDeviceGroup(params ...string) (*types.VcsVcsDeviceGroup, error) {
	resource := new(types.VcsVcsDeviceGroup)

	// Property: device-group string
	//encoding gNMI attribute to OAPI
	reflectDeviceGroup, err := utils.FindModelPluginObject(d.device, "VcsVcsDeviceGroupDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroup != nil {
		attrDeviceGroup := reflectDeviceGroup.Interface().(string)
		resource.DeviceGroup = &attrDeviceGroup
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(d.device, "VcsVcsDeviceGroupEnable", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = &boolEnable
	}

	return resource, nil
}

// toTarget converts gNMI to OAPI.
func (d *ModelPluginDevice) toTarget(params ...string) (*types.Target, error) {
	resource := new(types.Target)

	return resource, nil
}

//Ignoring RequestBodyApList

//Ignoring RequestBodyApListApList

//Ignoring RequestBodyApListApListAccessPoints

//Ignoring RequestBodyApplication

//Ignoring RequestBodyApplicationApplication

//Ignoring RequestBodyApplicationApplicationEndpoint

//Ignoring RequestBodyConnectivityService

//Ignoring RequestBodyConnectivityServiceConnectivityService

//Ignoring RequestBodyDeviceGroup

//Ignoring RequestBodyDeviceGroupDeviceGroup

//Ignoring RequestBodyDeviceGroupDeviceGroupImsis

//Ignoring RequestBodyEnterprise

//Ignoring RequestBodyEnterpriseEnterprise

//Ignoring RequestBodyEnterpriseEnterpriseConnectivityService

//Ignoring RequestBodyIpDomain

//Ignoring RequestBodyIpDomainIpDomain

//Ignoring RequestBodySite

//Ignoring RequestBodySiteSite

//Ignoring RequestBodySiteSiteImsiDefinition

//Ignoring RequestBodyTemplate

//Ignoring RequestBodyTemplateTemplate

//Ignoring RequestBodyTrafficClass

//Ignoring RequestBodyTrafficClassTrafficClass

//Ignoring RequestBodyUpf

//Ignoring RequestBodyUpfUpf

//Ignoring RequestBodyVcs

//Ignoring RequestBodyVcsVcs

//Ignoring RequestBodyVcsVcsApplication

//Ignoring RequestBodyVcsVcsDeviceGroup

// Not generating param-types
// Not generating request-bodies

// Not generating additional-properties
// Not generating additional-properties
