// Code generated by oapi-codegen. DO NOT EDIT.
// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package types

import (
	"encoding/json"
	"fmt"

	"github.com/pkg/errors"
)

// Used for updates
type AdditionalPropertyTarget struct {
	Target *string `json:"target,omitempty"`
}

// ApList defines model for Ap-list.
type ApList struct {
	ApList               *[]ApListApList                     `json:"ap-list,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ApListApList defines model for Ap-list_Ap-list.
type ApListApList struct {
	AccessPoints *[]ApListApListAccessPoints `json:"access-points,omitempty"`

	// description of this ap-list
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// Link to enterprise that owns this Access Point List
	Enterprise *string `json:"enterprise,omitempty"`

	// ID for this ap-list.
	Id                   *string                             `json:"id,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ApListApListAccessPoints defines model for Ap-list_Ap-list_Access-points.
type ApListApListAccessPoints struct {

	// Address of access point
	Address *string `json:"address,omitempty"`

	// Enable this access point
	Enable *bool `json:"enable,omitempty"`

	// Type Allocation Code
	Tac                  int32                               `json:"tac"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// Application defines model for Application.
type Application struct {
	Application          *[]ApplicationApplication           `json:"application,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ApplicationApplication defines model for Application_Application.
type ApplicationApplication struct {

	// description of this application
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string                           `json:"display-name,omitempty"`
	Endpoint    *[]ApplicationApplicationEndpoint `json:"endpoint,omitempty"`

	// Link to enterprise that owns this Application. May be set to None if the application is global to all Enterprises.
	Enterprise *string `json:"enterprise,omitempty"`

	// ID for this application.
	Id                   *string                             `json:"id,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ApplicationApplicationEndpoint defines model for Application_Application_Endpoint.
type ApplicationApplicationEndpoint struct {

	// Address of this endpoint. Either a hostname, and IP, or a subnet.
	Address string `json:"address"`

	// Name of this endpoint
	Name *string `json:"name,omitempty"`

	// Last port in range
	PortEnd *int32 `json:"port-end,omitempty"`

	// First port in range
	PortStart int32 `json:"port-start"`

	// Name of this endpoint
	Protocol             *string                             `json:"protocol,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ConnectivityService defines model for Connectivity-service.
type ConnectivityService struct {
	ConnectivityService  *[]ConnectivityServiceConnectivityService `json:"connectivity-service,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget       `json:"-"`
}

// ConnectivityServiceConnectivityService defines model for Connectivity-service_Connectivity-service.
type ConnectivityServiceConnectivityService struct {

	// url of the 5g core
	Core5gEndpoint *string `json:"core-5g-endpoint,omitempty"`

	// description of this connectivity service
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// url of the hss service
	HssEndpoint *string `json:"hss-endpoint,omitempty"`

	// ID for this connectivity service.
	Id *string `json:"id,omitempty"`

	// url of the pcrf service
	PcrfEndpoint *string `json:"pcrf-endpoint,omitempty"`

	// url of the spgwc service
	SpgwcEndpoint        *string                             `json:"spgwc-endpoint,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// DeviceGroup defines model for Device-group.
type DeviceGroup struct {
	DeviceGroup          *[]DeviceGroupDeviceGroup           `json:"device-group,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// DeviceGroupDeviceGroup defines model for Device-group_Device-group.
type DeviceGroupDeviceGroup struct {

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// ID for this device group.
	Id    *string                        `json:"id,omitempty"`
	Imsis *[]DeviceGroupDeviceGroupImsis `json:"imsis,omitempty"`

	// Link to ip-domain settings that determine the pool of IP addresses,
	// as well as the domain resolver settings to use
	IpDomain *string `json:"ip-domain,omitempty"`

	// Link to site
	Site                 *string                             `json:"site,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// DeviceGroupDeviceGroupImsis defines model for Device-group_Device-group_Imsis.
type DeviceGroupDeviceGroupImsis struct {
	ImsiRangeFrom        *int64                              `json:"imsi-range-from,omitempty"`
	ImsiRangeTo          *int64                              `json:"imsi-range-to,omitempty"`
	Name                 *string                             `json:"name,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// Enterprise defines model for Enterprise.
type Enterprise struct {
	Enterprise           *[]EnterpriseEnterprise             `json:"enterprise,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// EnterpriseEnterprise defines model for Enterprise_Enterprise.
type EnterpriseEnterprise struct {
	ConnectivityService *[]EnterpriseEnterpriseConnectivityService `json:"connectivity-service,omitempty"`

	// description of this enterprise
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// ID for this enterprise.
	Id                   *string                             `json:"id,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// EnterpriseEnterpriseConnectivityService defines model for Enterprise_Enterprise_Connectivity-service.
type EnterpriseEnterpriseConnectivityService struct {

	// Link to connectivity services where configuration should be pushed for this enterprise's devices
	ConnectivityService *string `json:"connectivity-service,omitempty"`

	// Allow or disallow pushes to this connectivity service
	Enabled              *bool                               `json:"enabled,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// IpDomain defines model for Ip-domain.
type IpDomain struct {
	IpDomain             *[]IpDomainIpDomain                 `json:"ip-domain,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// IpDomainIpDomain defines model for Ip-domain_Ip-domain.
type IpDomainIpDomain struct {

	// administrative status
	AdminStatus *string `json:"admin-status,omitempty"`

	// description of this ip domain
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// primary dns server name
	DnsPrimary *string `json:"dns-primary,omitempty"`

	// secondary dns server name
	DnsSecondary *string `json:"dns-secondary,omitempty"`

	// Link to enterprise that owns this Access Point List
	Enterprise *string `json:"enterprise,omitempty"`

	// ID for this ip domain.
	Id *string `json:"id,omitempty"`

	// maximum transmission unit
	Mtu *int32 `json:"mtu,omitempty"`

	// subnet to allocate ip addresses from
	Subnet               string                              `json:"subnet"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// Network defines model for Network.
type Network struct {
	Network              *[]NetworkNetwork                   `json:"network,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// NetworkNetwork defines model for Network_Network.
type NetworkNetwork struct {

	// description of this network
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// Link to enterprise that owns this Network. If this is set to None, then the Network is globally provided by Aether.
	Enterprise *string `json:"enterprise,omitempty"`

	// ID for this network.
	Id *string `json:"id,omitempty"`

	// mobile country code
	Mcc int32 `json:"mcc"`

	// mobile network code
	Mnc                  int32                               `json:"mnc"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// Site defines model for Site.
type Site struct {
	Site                 *[]SiteSite                         `json:"site,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// SiteSite defines model for Site_Site.
type SiteSite struct {

	// description of this site
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// Link to enterprise that owns this site
	Enterprise *string `json:"enterprise,omitempty"`

	// ID for this site.
	Id *string `json:"id,omitempty"`

	// Link to network for this vcs
	Network              *string                             `json:"network,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// Template defines model for Template.
type Template struct {
	Template             *[]TemplateTemplate                 `json:"template,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// TemplateTemplate defines model for Template_Template.
type TemplateTemplate struct {

	// description of this vcs template
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// Downlink data rate in mbps
	Downlink *int32 `json:"downlink,omitempty"`

	// ID for this vcs template.
	Id *string `json:"id,omitempty"`

	// Slice differentiator
	Sd *int32 `json:"sd,omitempty"`

	// Slice/Service type
	Sst *int32 `json:"sst,omitempty"`

	// Link to traffic class
	TrafficClass *string `json:"traffic-class,omitempty"`

	// Uplink data rate in mbps
	Uplink               *int32                              `json:"uplink,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// TrafficClass defines model for Traffic-class.
type TrafficClass struct {
	TrafficClass         *[]TrafficClassTrafficClass         `json:"traffic-class,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// TrafficClassTrafficClass defines model for Traffic-class_Traffic-class.
type TrafficClassTrafficClass struct {

	// description of this traffic class
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// ID for this traffic class.
	Id *string `json:"id,omitempty"`

	// PDB
	Pdb *int32 `json:"pdb,omitempty"`

	// PELR exponent
	Pelr *int32 `json:"pelr,omitempty"`

	// QCI
	Qci                  *int32                              `json:"qci,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// Upf defines model for Upf.
type Upf struct {
	Upf                  *[]UpfUpf                           `json:"upf,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// UpfUpf defines model for Upf_Upf.
type UpfUpf struct {

	// Address of UPF
	Address string `json:"address"`

	// description of this UPF
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// Link to enterprise that owns this Access Point List
	Enterprise *string `json:"enterprise,omitempty"`

	// ID for this upf.
	Id *string `json:"id,omitempty"`

	// Port for UPF
	Port                 int32                               `json:"port"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// Vcs defines model for Vcs.
type Vcs struct {
	Vcs                  *[]VcsVcs                           `json:"vcs,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// VcsVcs defines model for Vcs_Vcs.
type VcsVcs struct {

	// Link to access-point list
	Ap          *string              `json:"ap,omitempty"`
	Application *[]VcsVcsApplication `json:"application,omitempty"`

	// description of this vcs
	Description *string              `json:"description,omitempty"`
	DeviceGroup *[]VcsVcsDeviceGroup `json:"device-group,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// Downlink data rate in mbps
	Downlink *int32 `json:"downlink,omitempty"`

	// ID for this vcs.
	Id *string `json:"id,omitempty"`

	// Slice differentiator. Immutable.
	Sd int32 `json:"sd"`

	// Slice/Service type. Immutable.
	Sst int32 `json:"sst"`

	// Link to user vcs template that was used to initialize
	// this VCS
	Template *string `json:"template,omitempty"`

	// Link to traffic class
	TrafficClass string `json:"traffic-class"`

	// Link to user plane that implements this vcf
	Upf *string `json:"upf,omitempty"`

	// Uplink data rate in mbps
	Uplink               *int32                              `json:"uplink,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// VcsVcsApplication defines model for Vcs_Vcs_Application.
type VcsVcsApplication struct {

	// Allow or deny this application
	Allow *bool `json:"allow,omitempty"`

	// Link to application
	Application          *string                             `json:"application,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// VcsVcsDeviceGroup defines model for Vcs_Vcs_Device-group.
type VcsVcsDeviceGroup struct {

	// Link to device group
	DeviceGroup *string `json:"device-group,omitempty"`

	// Enable this device group
	Enable               *bool                               `json:"enable,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// target (device in onos-config)
type Target string

// RequestBodyApList defines model for RequestBody_Ap-list.
type RequestBodyApList ApList

// RequestBodyApListApList defines model for RequestBody_Ap-list_Ap-list.
type RequestBodyApListApList ApListApList

// RequestBodyApListApListAccessPoints defines model for RequestBody_Ap-list_Ap-list_Access-points.
type RequestBodyApListApListAccessPoints ApListApListAccessPoints

// RequestBodyApplication defines model for RequestBody_Application.
type RequestBodyApplication Application

// RequestBodyApplicationApplication defines model for RequestBody_Application_Application.
type RequestBodyApplicationApplication ApplicationApplication

// RequestBodyApplicationApplicationEndpoint defines model for RequestBody_Application_Application_Endpoint.
type RequestBodyApplicationApplicationEndpoint ApplicationApplicationEndpoint

// RequestBodyConnectivityService defines model for RequestBody_Connectivity-service.
type RequestBodyConnectivityService ConnectivityService

// RequestBodyConnectivityServiceConnectivityService defines model for RequestBody_Connectivity-service_Connectivity-service.
type RequestBodyConnectivityServiceConnectivityService ConnectivityServiceConnectivityService

// RequestBodyDeviceGroup defines model for RequestBody_Device-group.
type RequestBodyDeviceGroup DeviceGroup

// RequestBodyDeviceGroupDeviceGroup defines model for RequestBody_Device-group_Device-group.
type RequestBodyDeviceGroupDeviceGroup DeviceGroupDeviceGroup

// RequestBodyDeviceGroupDeviceGroupImsis defines model for RequestBody_Device-group_Device-group_Imsis.
type RequestBodyDeviceGroupDeviceGroupImsis DeviceGroupDeviceGroupImsis

// RequestBodyEnterprise defines model for RequestBody_Enterprise.
type RequestBodyEnterprise Enterprise

// RequestBodyEnterpriseEnterprise defines model for RequestBody_Enterprise_Enterprise.
type RequestBodyEnterpriseEnterprise EnterpriseEnterprise

// RequestBodyEnterpriseEnterpriseConnectivityService defines model for RequestBody_Enterprise_Enterprise_Connectivity-service.
type RequestBodyEnterpriseEnterpriseConnectivityService EnterpriseEnterpriseConnectivityService

// RequestBodyIpDomain defines model for RequestBody_Ip-domain.
type RequestBodyIpDomain IpDomain

// RequestBodyIpDomainIpDomain defines model for RequestBody_Ip-domain_Ip-domain.
type RequestBodyIpDomainIpDomain IpDomainIpDomain

// RequestBodyNetwork defines model for RequestBody_Network.
type RequestBodyNetwork Network

// RequestBodyNetworkNetwork defines model for RequestBody_Network_Network.
type RequestBodyNetworkNetwork NetworkNetwork

// RequestBodySite defines model for RequestBody_Site.
type RequestBodySite Site

// RequestBodySiteSite defines model for RequestBody_Site_Site.
type RequestBodySiteSite SiteSite

// RequestBodyTemplate defines model for RequestBody_Template.
type RequestBodyTemplate Template

// RequestBodyTemplateTemplate defines model for RequestBody_Template_Template.
type RequestBodyTemplateTemplate TemplateTemplate

// RequestBodyTrafficClass defines model for RequestBody_Traffic-class.
type RequestBodyTrafficClass TrafficClass

// RequestBodyTrafficClassTrafficClass defines model for RequestBody_Traffic-class_Traffic-class.
type RequestBodyTrafficClassTrafficClass TrafficClassTrafficClass

// RequestBodyUpf defines model for RequestBody_Upf.
type RequestBodyUpf Upf

// RequestBodyUpfUpf defines model for RequestBody_Upf_Upf.
type RequestBodyUpfUpf UpfUpf

// RequestBodyVcs defines model for RequestBody_Vcs.
type RequestBodyVcs Vcs

// RequestBodyVcsVcs defines model for RequestBody_Vcs_Vcs.
type RequestBodyVcsVcs VcsVcs

// RequestBodyVcsVcsApplication defines model for RequestBody_Vcs_Vcs_Application.
type RequestBodyVcsVcsApplication VcsVcsApplication

// RequestBodyVcsVcsDeviceGroup defines model for RequestBody_Vcs_Vcs_Device-group.
type RequestBodyVcsVcsDeviceGroup VcsVcsDeviceGroup

// PostApListJSONRequestBody defines body for PostApList for application/json ContentType.
type PostApListJSONRequestBody RequestBodyApList

// PostApListApListJSONRequestBody defines body for PostApListApList for application/json ContentType.
type PostApListApListJSONRequestBody RequestBodyApListApList

// PostApListApListAccessPointsJSONRequestBody defines body for PostApListApListAccessPoints for application/json ContentType.
type PostApListApListAccessPointsJSONRequestBody RequestBodyApListApListAccessPoints

// PostApplicationJSONRequestBody defines body for PostApplication for application/json ContentType.
type PostApplicationJSONRequestBody RequestBodyApplication

// PostApplicationApplicationJSONRequestBody defines body for PostApplicationApplication for application/json ContentType.
type PostApplicationApplicationJSONRequestBody RequestBodyApplicationApplication

// PostApplicationApplicationEndpointJSONRequestBody defines body for PostApplicationApplicationEndpoint for application/json ContentType.
type PostApplicationApplicationEndpointJSONRequestBody RequestBodyApplicationApplicationEndpoint

// PostConnectivityServiceJSONRequestBody defines body for PostConnectivityService for application/json ContentType.
type PostConnectivityServiceJSONRequestBody RequestBodyConnectivityService

// PostConnectivityServiceConnectivityServiceJSONRequestBody defines body for PostConnectivityServiceConnectivityService for application/json ContentType.
type PostConnectivityServiceConnectivityServiceJSONRequestBody RequestBodyConnectivityServiceConnectivityService

// PostDeviceGroupJSONRequestBody defines body for PostDeviceGroup for application/json ContentType.
type PostDeviceGroupJSONRequestBody RequestBodyDeviceGroup

// PostDeviceGroupDeviceGroupJSONRequestBody defines body for PostDeviceGroupDeviceGroup for application/json ContentType.
type PostDeviceGroupDeviceGroupJSONRequestBody RequestBodyDeviceGroupDeviceGroup

// PostDeviceGroupDeviceGroupImsisJSONRequestBody defines body for PostDeviceGroupDeviceGroupImsis for application/json ContentType.
type PostDeviceGroupDeviceGroupImsisJSONRequestBody RequestBodyDeviceGroupDeviceGroupImsis

// PostEnterpriseJSONRequestBody defines body for PostEnterprise for application/json ContentType.
type PostEnterpriseJSONRequestBody RequestBodyEnterprise

// PostEnterpriseEnterpriseJSONRequestBody defines body for PostEnterpriseEnterprise for application/json ContentType.
type PostEnterpriseEnterpriseJSONRequestBody RequestBodyEnterpriseEnterprise

// PostEnterpriseEnterpriseConnectivityServiceJSONRequestBody defines body for PostEnterpriseEnterpriseConnectivityService for application/json ContentType.
type PostEnterpriseEnterpriseConnectivityServiceJSONRequestBody RequestBodyEnterpriseEnterpriseConnectivityService

// PostIpDomainJSONRequestBody defines body for PostIpDomain for application/json ContentType.
type PostIpDomainJSONRequestBody RequestBodyIpDomain

// PostIpDomainIpDomainJSONRequestBody defines body for PostIpDomainIpDomain for application/json ContentType.
type PostIpDomainIpDomainJSONRequestBody RequestBodyIpDomainIpDomain

// PostNetworkJSONRequestBody defines body for PostNetwork for application/json ContentType.
type PostNetworkJSONRequestBody RequestBodyNetwork

// PostNetworkNetworkJSONRequestBody defines body for PostNetworkNetwork for application/json ContentType.
type PostNetworkNetworkJSONRequestBody RequestBodyNetworkNetwork

// PostSiteJSONRequestBody defines body for PostSite for application/json ContentType.
type PostSiteJSONRequestBody RequestBodySite

// PostSiteSiteJSONRequestBody defines body for PostSiteSite for application/json ContentType.
type PostSiteSiteJSONRequestBody RequestBodySiteSite

// PostTemplateJSONRequestBody defines body for PostTemplate for application/json ContentType.
type PostTemplateJSONRequestBody RequestBodyTemplate

// PostTemplateTemplateJSONRequestBody defines body for PostTemplateTemplate for application/json ContentType.
type PostTemplateTemplateJSONRequestBody RequestBodyTemplateTemplate

// PostTrafficClassJSONRequestBody defines body for PostTrafficClass for application/json ContentType.
type PostTrafficClassJSONRequestBody RequestBodyTrafficClass

// PostTrafficClassTrafficClassJSONRequestBody defines body for PostTrafficClassTrafficClass for application/json ContentType.
type PostTrafficClassTrafficClassJSONRequestBody RequestBodyTrafficClassTrafficClass

// PostUpfJSONRequestBody defines body for PostUpf for application/json ContentType.
type PostUpfJSONRequestBody RequestBodyUpf

// PostUpfUpfJSONRequestBody defines body for PostUpfUpf for application/json ContentType.
type PostUpfUpfJSONRequestBody RequestBodyUpfUpf

// PostVcsJSONRequestBody defines body for PostVcs for application/json ContentType.
type PostVcsJSONRequestBody RequestBodyVcs

// PostVcsVcsJSONRequestBody defines body for PostVcsVcs for application/json ContentType.
type PostVcsVcsJSONRequestBody RequestBodyVcsVcs

// PostVcsVcsApplicationJSONRequestBody defines body for PostVcsVcsApplication for application/json ContentType.
type PostVcsVcsApplicationJSONRequestBody RequestBodyVcsVcsApplication

// PostVcsVcsDeviceGroupJSONRequestBody defines body for PostVcsVcsDeviceGroup for application/json ContentType.
type PostVcsVcsDeviceGroupJSONRequestBody RequestBodyVcsVcsDeviceGroup

// Getter for additional properties for ApList. Returns the specified
// element and whether it was found
func (a ApList) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApList
func (a *ApList) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApList to handle AdditionalProperties
func (a *ApList) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ap-list"]; found {
		err = json.Unmarshal(raw, &a.ApList)
		if err != nil {
			return errors.Wrap(err, "error reading 'ap-list'")
		}
		delete(object, "ap-list")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApList to handle AdditionalProperties
func (a ApList) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ApList != nil {
		object["ap-list"], err = json.Marshal(a.ApList)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'ap-list'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ApListApList. Returns the specified
// element and whether it was found
func (a ApListApList) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApListApList
func (a *ApListApList) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApListApList to handle AdditionalProperties
func (a *ApListApList) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["access-points"]; found {
		err = json.Unmarshal(raw, &a.AccessPoints)
		if err != nil {
			return errors.Wrap(err, "error reading 'access-points'")
		}
		delete(object, "access-points")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["enterprise"]; found {
		err = json.Unmarshal(raw, &a.Enterprise)
		if err != nil {
			return errors.Wrap(err, "error reading 'enterprise'")
		}
		delete(object, "enterprise")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApListApList to handle AdditionalProperties
func (a ApListApList) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccessPoints != nil {
		object["access-points"], err = json.Marshal(a.AccessPoints)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'access-points'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Enterprise != nil {
		object["enterprise"], err = json.Marshal(a.Enterprise)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'enterprise'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ApListApListAccessPoints. Returns the specified
// element and whether it was found
func (a ApListApListAccessPoints) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApListApListAccessPoints
func (a *ApListApListAccessPoints) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApListApListAccessPoints to handle AdditionalProperties
func (a *ApListApListAccessPoints) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["address"]; found {
		err = json.Unmarshal(raw, &a.Address)
		if err != nil {
			return errors.Wrap(err, "error reading 'address'")
		}
		delete(object, "address")
	}

	if raw, found := object["enable"]; found {
		err = json.Unmarshal(raw, &a.Enable)
		if err != nil {
			return errors.Wrap(err, "error reading 'enable'")
		}
		delete(object, "enable")
	}

	if raw, found := object["tac"]; found {
		err = json.Unmarshal(raw, &a.Tac)
		if err != nil {
			return errors.Wrap(err, "error reading 'tac'")
		}
		delete(object, "tac")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApListApListAccessPoints to handle AdditionalProperties
func (a ApListApListAccessPoints) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Address != nil {
		object["address"], err = json.Marshal(a.Address)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'address'"))
		}
	}

	if a.Enable != nil {
		object["enable"], err = json.Marshal(a.Enable)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'enable'"))
		}
	}

	object["tac"], err = json.Marshal(a.Tac)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'tac'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Application. Returns the specified
// element and whether it was found
func (a Application) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Application
func (a *Application) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Application to handle AdditionalProperties
func (a *Application) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["application"]; found {
		err = json.Unmarshal(raw, &a.Application)
		if err != nil {
			return errors.Wrap(err, "error reading 'application'")
		}
		delete(object, "application")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Application to handle AdditionalProperties
func (a Application) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Application != nil {
		object["application"], err = json.Marshal(a.Application)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'application'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ApplicationApplication. Returns the specified
// element and whether it was found
func (a ApplicationApplication) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApplicationApplication
func (a *ApplicationApplication) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApplicationApplication to handle AdditionalProperties
func (a *ApplicationApplication) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["endpoint"]; found {
		err = json.Unmarshal(raw, &a.Endpoint)
		if err != nil {
			return errors.Wrap(err, "error reading 'endpoint'")
		}
		delete(object, "endpoint")
	}

	if raw, found := object["enterprise"]; found {
		err = json.Unmarshal(raw, &a.Enterprise)
		if err != nil {
			return errors.Wrap(err, "error reading 'enterprise'")
		}
		delete(object, "enterprise")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApplicationApplication to handle AdditionalProperties
func (a ApplicationApplication) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Endpoint != nil {
		object["endpoint"], err = json.Marshal(a.Endpoint)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'endpoint'"))
		}
	}

	if a.Enterprise != nil {
		object["enterprise"], err = json.Marshal(a.Enterprise)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'enterprise'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ApplicationApplicationEndpoint. Returns the specified
// element and whether it was found
func (a ApplicationApplicationEndpoint) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApplicationApplicationEndpoint
func (a *ApplicationApplicationEndpoint) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApplicationApplicationEndpoint to handle AdditionalProperties
func (a *ApplicationApplicationEndpoint) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["address"]; found {
		err = json.Unmarshal(raw, &a.Address)
		if err != nil {
			return errors.Wrap(err, "error reading 'address'")
		}
		delete(object, "address")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return errors.Wrap(err, "error reading 'name'")
		}
		delete(object, "name")
	}

	if raw, found := object["port-end"]; found {
		err = json.Unmarshal(raw, &a.PortEnd)
		if err != nil {
			return errors.Wrap(err, "error reading 'port-end'")
		}
		delete(object, "port-end")
	}

	if raw, found := object["port-start"]; found {
		err = json.Unmarshal(raw, &a.PortStart)
		if err != nil {
			return errors.Wrap(err, "error reading 'port-start'")
		}
		delete(object, "port-start")
	}

	if raw, found := object["protocol"]; found {
		err = json.Unmarshal(raw, &a.Protocol)
		if err != nil {
			return errors.Wrap(err, "error reading 'protocol'")
		}
		delete(object, "protocol")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApplicationApplicationEndpoint to handle AdditionalProperties
func (a ApplicationApplicationEndpoint) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["address"], err = json.Marshal(a.Address)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'address'"))
	}

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'name'"))
		}
	}

	if a.PortEnd != nil {
		object["port-end"], err = json.Marshal(a.PortEnd)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'port-end'"))
		}
	}

	object["port-start"], err = json.Marshal(a.PortStart)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'port-start'"))
	}

	if a.Protocol != nil {
		object["protocol"], err = json.Marshal(a.Protocol)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'protocol'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ConnectivityService. Returns the specified
// element and whether it was found
func (a ConnectivityService) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ConnectivityService
func (a *ConnectivityService) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ConnectivityService to handle AdditionalProperties
func (a *ConnectivityService) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["connectivity-service"]; found {
		err = json.Unmarshal(raw, &a.ConnectivityService)
		if err != nil {
			return errors.Wrap(err, "error reading 'connectivity-service'")
		}
		delete(object, "connectivity-service")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ConnectivityService to handle AdditionalProperties
func (a ConnectivityService) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ConnectivityService != nil {
		object["connectivity-service"], err = json.Marshal(a.ConnectivityService)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'connectivity-service'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ConnectivityServiceConnectivityService. Returns the specified
// element and whether it was found
func (a ConnectivityServiceConnectivityService) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ConnectivityServiceConnectivityService
func (a *ConnectivityServiceConnectivityService) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ConnectivityServiceConnectivityService to handle AdditionalProperties
func (a *ConnectivityServiceConnectivityService) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["core-5g-endpoint"]; found {
		err = json.Unmarshal(raw, &a.Core5gEndpoint)
		if err != nil {
			return errors.Wrap(err, "error reading 'core-5g-endpoint'")
		}
		delete(object, "core-5g-endpoint")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["hss-endpoint"]; found {
		err = json.Unmarshal(raw, &a.HssEndpoint)
		if err != nil {
			return errors.Wrap(err, "error reading 'hss-endpoint'")
		}
		delete(object, "hss-endpoint")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if raw, found := object["pcrf-endpoint"]; found {
		err = json.Unmarshal(raw, &a.PcrfEndpoint)
		if err != nil {
			return errors.Wrap(err, "error reading 'pcrf-endpoint'")
		}
		delete(object, "pcrf-endpoint")
	}

	if raw, found := object["spgwc-endpoint"]; found {
		err = json.Unmarshal(raw, &a.SpgwcEndpoint)
		if err != nil {
			return errors.Wrap(err, "error reading 'spgwc-endpoint'")
		}
		delete(object, "spgwc-endpoint")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ConnectivityServiceConnectivityService to handle AdditionalProperties
func (a ConnectivityServiceConnectivityService) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Core5gEndpoint != nil {
		object["core-5g-endpoint"], err = json.Marshal(a.Core5gEndpoint)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'core-5g-endpoint'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.HssEndpoint != nil {
		object["hss-endpoint"], err = json.Marshal(a.HssEndpoint)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'hss-endpoint'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	if a.PcrfEndpoint != nil {
		object["pcrf-endpoint"], err = json.Marshal(a.PcrfEndpoint)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'pcrf-endpoint'"))
		}
	}

	if a.SpgwcEndpoint != nil {
		object["spgwc-endpoint"], err = json.Marshal(a.SpgwcEndpoint)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'spgwc-endpoint'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DeviceGroup. Returns the specified
// element and whether it was found
func (a DeviceGroup) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DeviceGroup
func (a *DeviceGroup) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DeviceGroup to handle AdditionalProperties
func (a *DeviceGroup) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["device-group"]; found {
		err = json.Unmarshal(raw, &a.DeviceGroup)
		if err != nil {
			return errors.Wrap(err, "error reading 'device-group'")
		}
		delete(object, "device-group")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DeviceGroup to handle AdditionalProperties
func (a DeviceGroup) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DeviceGroup != nil {
		object["device-group"], err = json.Marshal(a.DeviceGroup)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'device-group'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DeviceGroupDeviceGroup. Returns the specified
// element and whether it was found
func (a DeviceGroupDeviceGroup) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DeviceGroupDeviceGroup
func (a *DeviceGroupDeviceGroup) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DeviceGroupDeviceGroup to handle AdditionalProperties
func (a *DeviceGroupDeviceGroup) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if raw, found := object["imsis"]; found {
		err = json.Unmarshal(raw, &a.Imsis)
		if err != nil {
			return errors.Wrap(err, "error reading 'imsis'")
		}
		delete(object, "imsis")
	}

	if raw, found := object["ip-domain"]; found {
		err = json.Unmarshal(raw, &a.IpDomain)
		if err != nil {
			return errors.Wrap(err, "error reading 'ip-domain'")
		}
		delete(object, "ip-domain")
	}

	if raw, found := object["site"]; found {
		err = json.Unmarshal(raw, &a.Site)
		if err != nil {
			return errors.Wrap(err, "error reading 'site'")
		}
		delete(object, "site")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DeviceGroupDeviceGroup to handle AdditionalProperties
func (a DeviceGroupDeviceGroup) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	if a.Imsis != nil {
		object["imsis"], err = json.Marshal(a.Imsis)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'imsis'"))
		}
	}

	if a.IpDomain != nil {
		object["ip-domain"], err = json.Marshal(a.IpDomain)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'ip-domain'"))
		}
	}

	if a.Site != nil {
		object["site"], err = json.Marshal(a.Site)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'site'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DeviceGroupDeviceGroupImsis. Returns the specified
// element and whether it was found
func (a DeviceGroupDeviceGroupImsis) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DeviceGroupDeviceGroupImsis
func (a *DeviceGroupDeviceGroupImsis) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DeviceGroupDeviceGroupImsis to handle AdditionalProperties
func (a *DeviceGroupDeviceGroupImsis) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["imsi-range-from"]; found {
		err = json.Unmarshal(raw, &a.ImsiRangeFrom)
		if err != nil {
			return errors.Wrap(err, "error reading 'imsi-range-from'")
		}
		delete(object, "imsi-range-from")
	}

	if raw, found := object["imsi-range-to"]; found {
		err = json.Unmarshal(raw, &a.ImsiRangeTo)
		if err != nil {
			return errors.Wrap(err, "error reading 'imsi-range-to'")
		}
		delete(object, "imsi-range-to")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return errors.Wrap(err, "error reading 'name'")
		}
		delete(object, "name")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DeviceGroupDeviceGroupImsis to handle AdditionalProperties
func (a DeviceGroupDeviceGroupImsis) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ImsiRangeFrom != nil {
		object["imsi-range-from"], err = json.Marshal(a.ImsiRangeFrom)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'imsi-range-from'"))
		}
	}

	if a.ImsiRangeTo != nil {
		object["imsi-range-to"], err = json.Marshal(a.ImsiRangeTo)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'imsi-range-to'"))
		}
	}

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'name'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Enterprise. Returns the specified
// element and whether it was found
func (a Enterprise) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Enterprise
func (a *Enterprise) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Enterprise to handle AdditionalProperties
func (a *Enterprise) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["enterprise"]; found {
		err = json.Unmarshal(raw, &a.Enterprise)
		if err != nil {
			return errors.Wrap(err, "error reading 'enterprise'")
		}
		delete(object, "enterprise")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Enterprise to handle AdditionalProperties
func (a Enterprise) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Enterprise != nil {
		object["enterprise"], err = json.Marshal(a.Enterprise)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'enterprise'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EnterpriseEnterprise. Returns the specified
// element and whether it was found
func (a EnterpriseEnterprise) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EnterpriseEnterprise
func (a *EnterpriseEnterprise) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EnterpriseEnterprise to handle AdditionalProperties
func (a *EnterpriseEnterprise) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["connectivity-service"]; found {
		err = json.Unmarshal(raw, &a.ConnectivityService)
		if err != nil {
			return errors.Wrap(err, "error reading 'connectivity-service'")
		}
		delete(object, "connectivity-service")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EnterpriseEnterprise to handle AdditionalProperties
func (a EnterpriseEnterprise) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ConnectivityService != nil {
		object["connectivity-service"], err = json.Marshal(a.ConnectivityService)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'connectivity-service'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EnterpriseEnterpriseConnectivityService. Returns the specified
// element and whether it was found
func (a EnterpriseEnterpriseConnectivityService) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EnterpriseEnterpriseConnectivityService
func (a *EnterpriseEnterpriseConnectivityService) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EnterpriseEnterpriseConnectivityService to handle AdditionalProperties
func (a *EnterpriseEnterpriseConnectivityService) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["connectivity-service"]; found {
		err = json.Unmarshal(raw, &a.ConnectivityService)
		if err != nil {
			return errors.Wrap(err, "error reading 'connectivity-service'")
		}
		delete(object, "connectivity-service")
	}

	if raw, found := object["enabled"]; found {
		err = json.Unmarshal(raw, &a.Enabled)
		if err != nil {
			return errors.Wrap(err, "error reading 'enabled'")
		}
		delete(object, "enabled")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EnterpriseEnterpriseConnectivityService to handle AdditionalProperties
func (a EnterpriseEnterpriseConnectivityService) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ConnectivityService != nil {
		object["connectivity-service"], err = json.Marshal(a.ConnectivityService)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'connectivity-service'"))
		}
	}

	if a.Enabled != nil {
		object["enabled"], err = json.Marshal(a.Enabled)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'enabled'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IpDomain. Returns the specified
// element and whether it was found
func (a IpDomain) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IpDomain
func (a *IpDomain) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IpDomain to handle AdditionalProperties
func (a *IpDomain) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ip-domain"]; found {
		err = json.Unmarshal(raw, &a.IpDomain)
		if err != nil {
			return errors.Wrap(err, "error reading 'ip-domain'")
		}
		delete(object, "ip-domain")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IpDomain to handle AdditionalProperties
func (a IpDomain) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.IpDomain != nil {
		object["ip-domain"], err = json.Marshal(a.IpDomain)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'ip-domain'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IpDomainIpDomain. Returns the specified
// element and whether it was found
func (a IpDomainIpDomain) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IpDomainIpDomain
func (a *IpDomainIpDomain) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IpDomainIpDomain to handle AdditionalProperties
func (a *IpDomainIpDomain) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["admin-status"]; found {
		err = json.Unmarshal(raw, &a.AdminStatus)
		if err != nil {
			return errors.Wrap(err, "error reading 'admin-status'")
		}
		delete(object, "admin-status")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["dns-primary"]; found {
		err = json.Unmarshal(raw, &a.DnsPrimary)
		if err != nil {
			return errors.Wrap(err, "error reading 'dns-primary'")
		}
		delete(object, "dns-primary")
	}

	if raw, found := object["dns-secondary"]; found {
		err = json.Unmarshal(raw, &a.DnsSecondary)
		if err != nil {
			return errors.Wrap(err, "error reading 'dns-secondary'")
		}
		delete(object, "dns-secondary")
	}

	if raw, found := object["enterprise"]; found {
		err = json.Unmarshal(raw, &a.Enterprise)
		if err != nil {
			return errors.Wrap(err, "error reading 'enterprise'")
		}
		delete(object, "enterprise")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if raw, found := object["mtu"]; found {
		err = json.Unmarshal(raw, &a.Mtu)
		if err != nil {
			return errors.Wrap(err, "error reading 'mtu'")
		}
		delete(object, "mtu")
	}

	if raw, found := object["subnet"]; found {
		err = json.Unmarshal(raw, &a.Subnet)
		if err != nil {
			return errors.Wrap(err, "error reading 'subnet'")
		}
		delete(object, "subnet")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IpDomainIpDomain to handle AdditionalProperties
func (a IpDomainIpDomain) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AdminStatus != nil {
		object["admin-status"], err = json.Marshal(a.AdminStatus)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'admin-status'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.DnsPrimary != nil {
		object["dns-primary"], err = json.Marshal(a.DnsPrimary)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'dns-primary'"))
		}
	}

	if a.DnsSecondary != nil {
		object["dns-secondary"], err = json.Marshal(a.DnsSecondary)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'dns-secondary'"))
		}
	}

	if a.Enterprise != nil {
		object["enterprise"], err = json.Marshal(a.Enterprise)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'enterprise'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	if a.Mtu != nil {
		object["mtu"], err = json.Marshal(a.Mtu)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'mtu'"))
		}
	}

	object["subnet"], err = json.Marshal(a.Subnet)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'subnet'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Network. Returns the specified
// element and whether it was found
func (a Network) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Network
func (a *Network) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Network to handle AdditionalProperties
func (a *Network) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["network"]; found {
		err = json.Unmarshal(raw, &a.Network)
		if err != nil {
			return errors.Wrap(err, "error reading 'network'")
		}
		delete(object, "network")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Network to handle AdditionalProperties
func (a Network) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Network != nil {
		object["network"], err = json.Marshal(a.Network)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'network'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NetworkNetwork. Returns the specified
// element and whether it was found
func (a NetworkNetwork) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NetworkNetwork
func (a *NetworkNetwork) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NetworkNetwork to handle AdditionalProperties
func (a *NetworkNetwork) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["enterprise"]; found {
		err = json.Unmarshal(raw, &a.Enterprise)
		if err != nil {
			return errors.Wrap(err, "error reading 'enterprise'")
		}
		delete(object, "enterprise")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if raw, found := object["mcc"]; found {
		err = json.Unmarshal(raw, &a.Mcc)
		if err != nil {
			return errors.Wrap(err, "error reading 'mcc'")
		}
		delete(object, "mcc")
	}

	if raw, found := object["mnc"]; found {
		err = json.Unmarshal(raw, &a.Mnc)
		if err != nil {
			return errors.Wrap(err, "error reading 'mnc'")
		}
		delete(object, "mnc")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NetworkNetwork to handle AdditionalProperties
func (a NetworkNetwork) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Enterprise != nil {
		object["enterprise"], err = json.Marshal(a.Enterprise)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'enterprise'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	object["mcc"], err = json.Marshal(a.Mcc)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'mcc'"))
	}

	object["mnc"], err = json.Marshal(a.Mnc)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'mnc'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Site. Returns the specified
// element and whether it was found
func (a Site) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Site
func (a *Site) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Site to handle AdditionalProperties
func (a *Site) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["site"]; found {
		err = json.Unmarshal(raw, &a.Site)
		if err != nil {
			return errors.Wrap(err, "error reading 'site'")
		}
		delete(object, "site")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Site to handle AdditionalProperties
func (a Site) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Site != nil {
		object["site"], err = json.Marshal(a.Site)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'site'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SiteSite. Returns the specified
// element and whether it was found
func (a SiteSite) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SiteSite
func (a *SiteSite) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SiteSite to handle AdditionalProperties
func (a *SiteSite) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["enterprise"]; found {
		err = json.Unmarshal(raw, &a.Enterprise)
		if err != nil {
			return errors.Wrap(err, "error reading 'enterprise'")
		}
		delete(object, "enterprise")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if raw, found := object["network"]; found {
		err = json.Unmarshal(raw, &a.Network)
		if err != nil {
			return errors.Wrap(err, "error reading 'network'")
		}
		delete(object, "network")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SiteSite to handle AdditionalProperties
func (a SiteSite) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Enterprise != nil {
		object["enterprise"], err = json.Marshal(a.Enterprise)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'enterprise'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	if a.Network != nil {
		object["network"], err = json.Marshal(a.Network)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'network'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Template. Returns the specified
// element and whether it was found
func (a Template) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Template
func (a *Template) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Template to handle AdditionalProperties
func (a *Template) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["template"]; found {
		err = json.Unmarshal(raw, &a.Template)
		if err != nil {
			return errors.Wrap(err, "error reading 'template'")
		}
		delete(object, "template")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Template to handle AdditionalProperties
func (a Template) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Template != nil {
		object["template"], err = json.Marshal(a.Template)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'template'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TemplateTemplate. Returns the specified
// element and whether it was found
func (a TemplateTemplate) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TemplateTemplate
func (a *TemplateTemplate) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TemplateTemplate to handle AdditionalProperties
func (a *TemplateTemplate) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["downlink"]; found {
		err = json.Unmarshal(raw, &a.Downlink)
		if err != nil {
			return errors.Wrap(err, "error reading 'downlink'")
		}
		delete(object, "downlink")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if raw, found := object["sd"]; found {
		err = json.Unmarshal(raw, &a.Sd)
		if err != nil {
			return errors.Wrap(err, "error reading 'sd'")
		}
		delete(object, "sd")
	}

	if raw, found := object["sst"]; found {
		err = json.Unmarshal(raw, &a.Sst)
		if err != nil {
			return errors.Wrap(err, "error reading 'sst'")
		}
		delete(object, "sst")
	}

	if raw, found := object["traffic-class"]; found {
		err = json.Unmarshal(raw, &a.TrafficClass)
		if err != nil {
			return errors.Wrap(err, "error reading 'traffic-class'")
		}
		delete(object, "traffic-class")
	}

	if raw, found := object["uplink"]; found {
		err = json.Unmarshal(raw, &a.Uplink)
		if err != nil {
			return errors.Wrap(err, "error reading 'uplink'")
		}
		delete(object, "uplink")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TemplateTemplate to handle AdditionalProperties
func (a TemplateTemplate) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Downlink != nil {
		object["downlink"], err = json.Marshal(a.Downlink)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'downlink'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	if a.Sd != nil {
		object["sd"], err = json.Marshal(a.Sd)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'sd'"))
		}
	}

	if a.Sst != nil {
		object["sst"], err = json.Marshal(a.Sst)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'sst'"))
		}
	}

	if a.TrafficClass != nil {
		object["traffic-class"], err = json.Marshal(a.TrafficClass)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'traffic-class'"))
		}
	}

	if a.Uplink != nil {
		object["uplink"], err = json.Marshal(a.Uplink)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'uplink'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TrafficClass. Returns the specified
// element and whether it was found
func (a TrafficClass) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TrafficClass
func (a *TrafficClass) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TrafficClass to handle AdditionalProperties
func (a *TrafficClass) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["traffic-class"]; found {
		err = json.Unmarshal(raw, &a.TrafficClass)
		if err != nil {
			return errors.Wrap(err, "error reading 'traffic-class'")
		}
		delete(object, "traffic-class")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TrafficClass to handle AdditionalProperties
func (a TrafficClass) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.TrafficClass != nil {
		object["traffic-class"], err = json.Marshal(a.TrafficClass)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'traffic-class'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TrafficClassTrafficClass. Returns the specified
// element and whether it was found
func (a TrafficClassTrafficClass) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TrafficClassTrafficClass
func (a *TrafficClassTrafficClass) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TrafficClassTrafficClass to handle AdditionalProperties
func (a *TrafficClassTrafficClass) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if raw, found := object["pdb"]; found {
		err = json.Unmarshal(raw, &a.Pdb)
		if err != nil {
			return errors.Wrap(err, "error reading 'pdb'")
		}
		delete(object, "pdb")
	}

	if raw, found := object["pelr"]; found {
		err = json.Unmarshal(raw, &a.Pelr)
		if err != nil {
			return errors.Wrap(err, "error reading 'pelr'")
		}
		delete(object, "pelr")
	}

	if raw, found := object["qci"]; found {
		err = json.Unmarshal(raw, &a.Qci)
		if err != nil {
			return errors.Wrap(err, "error reading 'qci'")
		}
		delete(object, "qci")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TrafficClassTrafficClass to handle AdditionalProperties
func (a TrafficClassTrafficClass) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	if a.Pdb != nil {
		object["pdb"], err = json.Marshal(a.Pdb)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'pdb'"))
		}
	}

	if a.Pelr != nil {
		object["pelr"], err = json.Marshal(a.Pelr)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'pelr'"))
		}
	}

	if a.Qci != nil {
		object["qci"], err = json.Marshal(a.Qci)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'qci'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Upf. Returns the specified
// element and whether it was found
func (a Upf) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Upf
func (a *Upf) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Upf to handle AdditionalProperties
func (a *Upf) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["upf"]; found {
		err = json.Unmarshal(raw, &a.Upf)
		if err != nil {
			return errors.Wrap(err, "error reading 'upf'")
		}
		delete(object, "upf")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Upf to handle AdditionalProperties
func (a Upf) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Upf != nil {
		object["upf"], err = json.Marshal(a.Upf)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'upf'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpfUpf. Returns the specified
// element and whether it was found
func (a UpfUpf) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpfUpf
func (a *UpfUpf) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpfUpf to handle AdditionalProperties
func (a *UpfUpf) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["address"]; found {
		err = json.Unmarshal(raw, &a.Address)
		if err != nil {
			return errors.Wrap(err, "error reading 'address'")
		}
		delete(object, "address")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["enterprise"]; found {
		err = json.Unmarshal(raw, &a.Enterprise)
		if err != nil {
			return errors.Wrap(err, "error reading 'enterprise'")
		}
		delete(object, "enterprise")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if raw, found := object["port"]; found {
		err = json.Unmarshal(raw, &a.Port)
		if err != nil {
			return errors.Wrap(err, "error reading 'port'")
		}
		delete(object, "port")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpfUpf to handle AdditionalProperties
func (a UpfUpf) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["address"], err = json.Marshal(a.Address)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'address'"))
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Enterprise != nil {
		object["enterprise"], err = json.Marshal(a.Enterprise)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'enterprise'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	object["port"], err = json.Marshal(a.Port)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'port'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Vcs. Returns the specified
// element and whether it was found
func (a Vcs) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Vcs
func (a *Vcs) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Vcs to handle AdditionalProperties
func (a *Vcs) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["vcs"]; found {
		err = json.Unmarshal(raw, &a.Vcs)
		if err != nil {
			return errors.Wrap(err, "error reading 'vcs'")
		}
		delete(object, "vcs")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Vcs to handle AdditionalProperties
func (a Vcs) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Vcs != nil {
		object["vcs"], err = json.Marshal(a.Vcs)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'vcs'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VcsVcs. Returns the specified
// element and whether it was found
func (a VcsVcs) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VcsVcs
func (a *VcsVcs) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VcsVcs to handle AdditionalProperties
func (a *VcsVcs) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ap"]; found {
		err = json.Unmarshal(raw, &a.Ap)
		if err != nil {
			return errors.Wrap(err, "error reading 'ap'")
		}
		delete(object, "ap")
	}

	if raw, found := object["application"]; found {
		err = json.Unmarshal(raw, &a.Application)
		if err != nil {
			return errors.Wrap(err, "error reading 'application'")
		}
		delete(object, "application")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["device-group"]; found {
		err = json.Unmarshal(raw, &a.DeviceGroup)
		if err != nil {
			return errors.Wrap(err, "error reading 'device-group'")
		}
		delete(object, "device-group")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["downlink"]; found {
		err = json.Unmarshal(raw, &a.Downlink)
		if err != nil {
			return errors.Wrap(err, "error reading 'downlink'")
		}
		delete(object, "downlink")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if raw, found := object["sd"]; found {
		err = json.Unmarshal(raw, &a.Sd)
		if err != nil {
			return errors.Wrap(err, "error reading 'sd'")
		}
		delete(object, "sd")
	}

	if raw, found := object["sst"]; found {
		err = json.Unmarshal(raw, &a.Sst)
		if err != nil {
			return errors.Wrap(err, "error reading 'sst'")
		}
		delete(object, "sst")
	}

	if raw, found := object["template"]; found {
		err = json.Unmarshal(raw, &a.Template)
		if err != nil {
			return errors.Wrap(err, "error reading 'template'")
		}
		delete(object, "template")
	}

	if raw, found := object["traffic-class"]; found {
		err = json.Unmarshal(raw, &a.TrafficClass)
		if err != nil {
			return errors.Wrap(err, "error reading 'traffic-class'")
		}
		delete(object, "traffic-class")
	}

	if raw, found := object["upf"]; found {
		err = json.Unmarshal(raw, &a.Upf)
		if err != nil {
			return errors.Wrap(err, "error reading 'upf'")
		}
		delete(object, "upf")
	}

	if raw, found := object["uplink"]; found {
		err = json.Unmarshal(raw, &a.Uplink)
		if err != nil {
			return errors.Wrap(err, "error reading 'uplink'")
		}
		delete(object, "uplink")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VcsVcs to handle AdditionalProperties
func (a VcsVcs) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Ap != nil {
		object["ap"], err = json.Marshal(a.Ap)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'ap'"))
		}
	}

	if a.Application != nil {
		object["application"], err = json.Marshal(a.Application)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'application'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DeviceGroup != nil {
		object["device-group"], err = json.Marshal(a.DeviceGroup)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'device-group'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Downlink != nil {
		object["downlink"], err = json.Marshal(a.Downlink)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'downlink'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	object["sd"], err = json.Marshal(a.Sd)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'sd'"))
	}

	object["sst"], err = json.Marshal(a.Sst)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'sst'"))
	}

	if a.Template != nil {
		object["template"], err = json.Marshal(a.Template)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'template'"))
		}
	}

	object["traffic-class"], err = json.Marshal(a.TrafficClass)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'traffic-class'"))
	}

	if a.Upf != nil {
		object["upf"], err = json.Marshal(a.Upf)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'upf'"))
		}
	}

	if a.Uplink != nil {
		object["uplink"], err = json.Marshal(a.Uplink)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'uplink'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VcsVcsApplication. Returns the specified
// element and whether it was found
func (a VcsVcsApplication) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VcsVcsApplication
func (a *VcsVcsApplication) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VcsVcsApplication to handle AdditionalProperties
func (a *VcsVcsApplication) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allow"]; found {
		err = json.Unmarshal(raw, &a.Allow)
		if err != nil {
			return errors.Wrap(err, "error reading 'allow'")
		}
		delete(object, "allow")
	}

	if raw, found := object["application"]; found {
		err = json.Unmarshal(raw, &a.Application)
		if err != nil {
			return errors.Wrap(err, "error reading 'application'")
		}
		delete(object, "application")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VcsVcsApplication to handle AdditionalProperties
func (a VcsVcsApplication) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Allow != nil {
		object["allow"], err = json.Marshal(a.Allow)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'allow'"))
		}
	}

	if a.Application != nil {
		object["application"], err = json.Marshal(a.Application)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'application'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VcsVcsDeviceGroup. Returns the specified
// element and whether it was found
func (a VcsVcsDeviceGroup) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VcsVcsDeviceGroup
func (a *VcsVcsDeviceGroup) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VcsVcsDeviceGroup to handle AdditionalProperties
func (a *VcsVcsDeviceGroup) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["device-group"]; found {
		err = json.Unmarshal(raw, &a.DeviceGroup)
		if err != nil {
			return errors.Wrap(err, "error reading 'device-group'")
		}
		delete(object, "device-group")
	}

	if raw, found := object["enable"]; found {
		err = json.Unmarshal(raw, &a.Enable)
		if err != nil {
			return errors.Wrap(err, "error reading 'enable'")
		}
		delete(object, "enable")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VcsVcsDeviceGroup to handle AdditionalProperties
func (a VcsVcsDeviceGroup) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DeviceGroup != nil {
		object["device-group"], err = json.Marshal(a.DeviceGroup)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'device-group'"))
		}
	}

	if a.Enable != nil {
		object["enable"], err = json.Marshal(a.Enable)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'enable'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
