// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"context"
	"encoding/json"
	"fmt"
)

import (
	"github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	modelplugin "github.com/onosproject/config-models/modelplugin/aether-2.0.0/aether_2_0_0"
)

// gnmiDeleteAccessProfile deletes an instance of Access-profile.
func (i *ServerImpl) gnmiDeleteAccessProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetAccessProfile returns an instance of Access-profile.
func (i *ServerImpl) gnmiGetAccessProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.AccessProfile, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toAccessProfile(args...)
}

// gnmiPostAccessProfile adds an instance of Access-profile.
func (i *ServerImpl) gnmiPostAccessProfile(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.AccessProfile)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Access-profile %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiAccessProfile(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.AccessProfile to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteAccessProfileAccessProfile deletes an instance of Access-profile_Access-profile.
func (i *ServerImpl) gnmiDeleteAccessProfileAccessProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetAccessProfileAccessProfile returns an instance of Access-profile_Access-profile.
func (i *ServerImpl) gnmiGetAccessProfileAccessProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.AccessProfileAccessProfile, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toAccessProfileAccessProfile(args...)
}

// gnmiPostAccessProfileAccessProfile adds an instance of Access-profile_Access-profile.
func (i *ServerImpl) gnmiPostAccessProfileAccessProfile(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.AccessProfileAccessProfile)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Access-profile_Access-profile %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiAccessProfileAccessProfile(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.AccessProfileAccessProfile to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

//Ignoring AdditionalPropertyTarget

// gnmiDeleteApnProfile deletes an instance of Apn-profile.
func (i *ServerImpl) gnmiDeleteApnProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetApnProfile returns an instance of Apn-profile.
func (i *ServerImpl) gnmiGetApnProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.ApnProfile, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toApnProfile(args...)
}

// gnmiPostApnProfile adds an instance of Apn-profile.
func (i *ServerImpl) gnmiPostApnProfile(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.ApnProfile)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Apn-profile %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApnProfile(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.ApnProfile to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteApnProfileApnProfile deletes an instance of Apn-profile_Apn-profile.
func (i *ServerImpl) gnmiDeleteApnProfileApnProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetApnProfileApnProfile returns an instance of Apn-profile_Apn-profile.
func (i *ServerImpl) gnmiGetApnProfileApnProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.ApnProfileApnProfile, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toApnProfileApnProfile(args...)
}

// gnmiPostApnProfileApnProfile adds an instance of Apn-profile_Apn-profile.
func (i *ServerImpl) gnmiPostApnProfileApnProfile(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.ApnProfileApnProfile)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Apn-profile_Apn-profile %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApnProfileApnProfile(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.ApnProfileApnProfile to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteConnectivityService deletes an instance of Connectivity-service.
func (i *ServerImpl) gnmiDeleteConnectivityService(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetConnectivityService returns an instance of Connectivity-service.
func (i *ServerImpl) gnmiGetConnectivityService(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.ConnectivityService, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toConnectivityService(args...)
}

// gnmiPostConnectivityService adds an instance of Connectivity-service.
func (i *ServerImpl) gnmiPostConnectivityService(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.ConnectivityService)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Connectivity-service %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiConnectivityService(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.ConnectivityService to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteConnectivityServiceConnectivityService deletes an instance of Connectivity-service_Connectivity-service.
func (i *ServerImpl) gnmiDeleteConnectivityServiceConnectivityService(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetConnectivityServiceConnectivityService returns an instance of Connectivity-service_Connectivity-service.
func (i *ServerImpl) gnmiGetConnectivityServiceConnectivityService(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.ConnectivityServiceConnectivityService, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toConnectivityServiceConnectivityService(args...)
}

// gnmiPostConnectivityServiceConnectivityService adds an instance of Connectivity-service_Connectivity-service.
func (i *ServerImpl) gnmiPostConnectivityServiceConnectivityService(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.ConnectivityServiceConnectivityService)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Connectivity-service_Connectivity-service %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiConnectivityServiceConnectivityService(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.ConnectivityServiceConnectivityService to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteEnterprise deletes an instance of Enterprise.
func (i *ServerImpl) gnmiDeleteEnterprise(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetEnterprise returns an instance of Enterprise.
func (i *ServerImpl) gnmiGetEnterprise(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.Enterprise, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprise(args...)
}

// gnmiPostEnterprise adds an instance of Enterprise.
func (i *ServerImpl) gnmiPostEnterprise(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.Enterprise)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Enterprise %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprise(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.Enterprise to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteEnterpriseEnterprise deletes an instance of Enterprise_Enterprise.
func (i *ServerImpl) gnmiDeleteEnterpriseEnterprise(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetEnterpriseEnterprise returns an instance of Enterprise_Enterprise.
func (i *ServerImpl) gnmiGetEnterpriseEnterprise(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.EnterpriseEnterprise, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterpriseEnterprise(args...)
}

// gnmiPostEnterpriseEnterprise adds an instance of Enterprise_Enterprise.
func (i *ServerImpl) gnmiPostEnterpriseEnterprise(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.EnterpriseEnterprise)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Enterprise_Enterprise %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterpriseEnterprise(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.EnterpriseEnterprise to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteEnterpriseEnterpriseConnectivityService deletes an instance of Enterprise_Enterprise_Connectivity-service.
func (i *ServerImpl) gnmiDeleteEnterpriseEnterpriseConnectivityService(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetEnterpriseEnterpriseConnectivityService returns an instance of Enterprise_Enterprise_Connectivity-service.
func (i *ServerImpl) gnmiGetEnterpriseEnterpriseConnectivityService(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.EnterpriseEnterpriseConnectivityService, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterpriseEnterpriseConnectivityService(args...)
}

// gnmiPostEnterpriseEnterpriseConnectivityService adds an instance of Enterprise_Enterprise_Connectivity-service.
func (i *ServerImpl) gnmiPostEnterpriseEnterpriseConnectivityService(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.EnterpriseEnterpriseConnectivityService)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Enterprise_Enterprise_Connectivity-service %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterpriseEnterpriseConnectivityService(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.EnterpriseEnterpriseConnectivityService to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteQosProfile deletes an instance of Qos-profile.
func (i *ServerImpl) gnmiDeleteQosProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetQosProfile returns an instance of Qos-profile.
func (i *ServerImpl) gnmiGetQosProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.QosProfile, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toQosProfile(args...)
}

// gnmiPostQosProfile adds an instance of Qos-profile.
func (i *ServerImpl) gnmiPostQosProfile(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.QosProfile)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Qos-profile %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiQosProfile(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.QosProfile to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteQosProfileQosProfile deletes an instance of Qos-profile_Qos-profile.
func (i *ServerImpl) gnmiDeleteQosProfileQosProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetQosProfileQosProfile returns an instance of Qos-profile_Qos-profile.
func (i *ServerImpl) gnmiGetQosProfileQosProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.QosProfileQosProfile, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toQosProfileQosProfile(args...)
}

// gnmiPostQosProfileQosProfile adds an instance of Qos-profile_Qos-profile.
func (i *ServerImpl) gnmiPostQosProfileQosProfile(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.QosProfileQosProfile)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Qos-profile_Qos-profile %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiQosProfileQosProfile(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.QosProfileQosProfile to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteQosProfileQosProfileApnAmbr deletes an instance of Qos-profile_Qos-profile_Apn-ambr.
func (i *ServerImpl) gnmiDeleteQosProfileQosProfileApnAmbr(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetQosProfileQosProfileApnAmbr returns an instance of Qos-profile_Qos-profile_Apn-ambr.
func (i *ServerImpl) gnmiGetQosProfileQosProfileApnAmbr(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.QosProfileQosProfileApnAmbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toQosProfileQosProfileApnAmbr(args...)
}

// gnmiPostQosProfileQosProfileApnAmbr adds an instance of Qos-profile_Qos-profile_Apn-ambr.
func (i *ServerImpl) gnmiPostQosProfileQosProfileApnAmbr(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.QosProfileQosProfileApnAmbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Qos-profile_Qos-profile_Apn-ambr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiQosProfileQosProfileApnAmbr(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.QosProfileQosProfileApnAmbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteQosProfileQosProfileArp deletes an instance of Qos-profile_Qos-profile_Arp.
func (i *ServerImpl) gnmiDeleteQosProfileQosProfileArp(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetQosProfileQosProfileArp returns an instance of Qos-profile_Qos-profile_Arp.
func (i *ServerImpl) gnmiGetQosProfileQosProfileArp(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.QosProfileQosProfileArp, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toQosProfileQosProfileArp(args...)
}

// gnmiPostQosProfileQosProfileArp adds an instance of Qos-profile_Qos-profile_Arp.
func (i *ServerImpl) gnmiPostQosProfileQosProfileArp(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.QosProfileQosProfileArp)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Qos-profile_Qos-profile_Arp %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiQosProfileQosProfileArp(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.QosProfileQosProfileArp to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteSecurityProfile deletes an instance of Security-profile.
func (i *ServerImpl) gnmiDeleteSecurityProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetSecurityProfile returns an instance of Security-profile.
func (i *ServerImpl) gnmiGetSecurityProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.SecurityProfile, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSecurityProfile(args...)
}

// gnmiPostSecurityProfile adds an instance of Security-profile.
func (i *ServerImpl) gnmiPostSecurityProfile(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.SecurityProfile)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Security-profile %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSecurityProfile(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.SecurityProfile to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteSecurityProfileSecurityProfile deletes an instance of Security-profile_Security-profile.
func (i *ServerImpl) gnmiDeleteSecurityProfileSecurityProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetSecurityProfileSecurityProfile returns an instance of Security-profile_Security-profile.
func (i *ServerImpl) gnmiGetSecurityProfileSecurityProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.SecurityProfileSecurityProfile, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSecurityProfileSecurityProfile(args...)
}

// gnmiPostSecurityProfileSecurityProfile adds an instance of Security-profile_Security-profile.
func (i *ServerImpl) gnmiPostSecurityProfileSecurityProfile(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.SecurityProfileSecurityProfile)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Security-profile_Security-profile %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSecurityProfileSecurityProfile(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.SecurityProfileSecurityProfile to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteSubscriber deletes an instance of Subscriber.
func (i *ServerImpl) gnmiDeleteSubscriber(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetSubscriber returns an instance of Subscriber.
func (i *ServerImpl) gnmiGetSubscriber(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.Subscriber, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSubscriber(args...)
}

// gnmiPostSubscriber adds an instance of Subscriber.
func (i *ServerImpl) gnmiPostSubscriber(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.Subscriber)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Subscriber %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSubscriber(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.Subscriber to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteSubscriberUe deletes an instance of Subscriber_Ue.
func (i *ServerImpl) gnmiDeleteSubscriberUe(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetSubscriberUe returns an instance of Subscriber_Ue.
func (i *ServerImpl) gnmiGetSubscriberUe(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.SubscriberUe, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSubscriberUe(args...)
}

// gnmiPostSubscriberUe adds an instance of Subscriber_Ue.
func (i *ServerImpl) gnmiPostSubscriberUe(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.SubscriberUe)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Subscriber_Ue %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSubscriberUe(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.SubscriberUe to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteSubscriberUeProfiles deletes an instance of Subscriber_Ue_Profiles.
func (i *ServerImpl) gnmiDeleteSubscriberUeProfiles(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetSubscriberUeProfiles returns an instance of Subscriber_Ue_Profiles.
func (i *ServerImpl) gnmiGetSubscriberUeProfiles(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.SubscriberUeProfiles, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSubscriberUeProfiles(args...)
}

// gnmiPostSubscriberUeProfiles adds an instance of Subscriber_Ue_Profiles.
func (i *ServerImpl) gnmiPostSubscriberUeProfiles(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.SubscriberUeProfiles)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Subscriber_Ue_Profiles %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSubscriberUeProfiles(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.SubscriberUeProfiles to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteSubscriberUeProfilesAccessProfile deletes an instance of Subscriber_Ue_Profiles_Access-profile.
func (i *ServerImpl) gnmiDeleteSubscriberUeProfilesAccessProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetSubscriberUeProfilesAccessProfile returns an instance of Subscriber_Ue_Profiles_Access-profile.
func (i *ServerImpl) gnmiGetSubscriberUeProfilesAccessProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.SubscriberUeProfilesAccessProfile, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSubscriberUeProfilesAccessProfile(args...)
}

// gnmiPostSubscriberUeProfilesAccessProfile adds an instance of Subscriber_Ue_Profiles_Access-profile.
func (i *ServerImpl) gnmiPostSubscriberUeProfilesAccessProfile(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.SubscriberUeProfilesAccessProfile)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Subscriber_Ue_Profiles_Access-profile %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSubscriberUeProfilesAccessProfile(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.SubscriberUeProfilesAccessProfile to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteSubscriberUeServingPlmn deletes an instance of Subscriber_Ue_Serving-plmn.
func (i *ServerImpl) gnmiDeleteSubscriberUeServingPlmn(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetSubscriberUeServingPlmn returns an instance of Subscriber_Ue_Serving-plmn.
func (i *ServerImpl) gnmiGetSubscriberUeServingPlmn(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.SubscriberUeServingPlmn, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSubscriberUeServingPlmn(args...)
}

// gnmiPostSubscriberUeServingPlmn adds an instance of Subscriber_Ue_Serving-plmn.
func (i *ServerImpl) gnmiPostSubscriberUeServingPlmn(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.SubscriberUeServingPlmn)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Subscriber_Ue_Serving-plmn %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSubscriberUeServingPlmn(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.SubscriberUeServingPlmn to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteUpProfile deletes an instance of Up-profile.
func (i *ServerImpl) gnmiDeleteUpProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetUpProfile returns an instance of Up-profile.
func (i *ServerImpl) gnmiGetUpProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.UpProfile, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toUpProfile(args...)
}

// gnmiPostUpProfile adds an instance of Up-profile.
func (i *ServerImpl) gnmiPostUpProfile(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.UpProfile)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Up-profile %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiUpProfile(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.UpProfile to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteUpProfileUpProfile deletes an instance of Up-profile_Up-profile.
func (i *ServerImpl) gnmiDeleteUpProfileUpProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetUpProfileUpProfile returns an instance of Up-profile_Up-profile.
func (i *ServerImpl) gnmiGetUpProfileUpProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.UpProfileUpProfile, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toUpProfileUpProfile(args...)
}

// gnmiPostUpProfileUpProfile adds an instance of Up-profile_Up-profile.
func (i *ServerImpl) gnmiPostUpProfileUpProfile(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.UpProfileUpProfile)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.Up-profile_Up-profile %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiUpProfileUpProfile(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.UpProfileUpProfile to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteTarget deletes an instance of target.
func (i *ServerImpl) gnmiDeleteTarget(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetTarget returns an instance of target.
func (i *ServerImpl) gnmiGetTarget(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.Target, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toTarget(args...)
}

// gnmiPostTarget adds an instance of target.
func (i *ServerImpl) gnmiPostTarget(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	return nil, fmt.Errorf("Not implemented")

}

//Ignoring RequestBodyAccessProfile

//Ignoring RequestBodyAccessProfileAccessProfile

//Ignoring RequestBodyApnProfile

//Ignoring RequestBodyApnProfileApnProfile

//Ignoring RequestBodyConnectivityService

//Ignoring RequestBodyConnectivityServiceConnectivityService

//Ignoring RequestBodyEnterprise

//Ignoring RequestBodyEnterpriseEnterprise

//Ignoring RequestBodyEnterpriseEnterpriseConnectivityService

//Ignoring RequestBodyQosProfile

//Ignoring RequestBodyQosProfileQosProfile

//Ignoring RequestBodyQosProfileQosProfileApnAmbr

//Ignoring RequestBodyQosProfileQosProfileArp

//Ignoring RequestBodySecurityProfile

//Ignoring RequestBodySecurityProfileSecurityProfile

//Ignoring RequestBodySubscriber

//Ignoring RequestBodySubscriberUe

//Ignoring RequestBodySubscriberUeProfiles

//Ignoring RequestBodySubscriberUeProfilesAccessProfile

//Ignoring RequestBodySubscriberUeServingPlmn

//Ignoring RequestBodyUpProfile

//Ignoring RequestBodyUpProfileUpProfile

type Translator interface {
	toAccessProfile(args ...string) (*types.AccessProfile, error)
	toAccessProfileAccessProfile(args ...string) (*types.AccessProfileAccessProfile, error)
	toAdditionalPropertyTarget(args ...string) (*types.AdditionalPropertyTarget, error)
	toApnProfile(args ...string) (*types.ApnProfile, error)
	toApnProfileApnProfile(args ...string) (*types.ApnProfileApnProfile, error)
	toConnectivityService(args ...string) (*types.ConnectivityService, error)
	toConnectivityServiceConnectivityService(args ...string) (*types.ConnectivityServiceConnectivityService, error)
	toEnterprise(args ...string) (*types.Enterprise, error)
	toEnterpriseEnterprise(args ...string) (*types.EnterpriseEnterprise, error)
	toEnterpriseEnterpriseConnectivityService(args ...string) (*types.EnterpriseEnterpriseConnectivityService, error)
	toQosProfile(args ...string) (*types.QosProfile, error)
	toQosProfileQosProfile(args ...string) (*types.QosProfileQosProfile, error)
	toQosProfileQosProfileApnAmbr(args ...string) (*types.QosProfileQosProfileApnAmbr, error)
	toQosProfileQosProfileArp(args ...string) (*types.QosProfileQosProfileArp, error)
	toSecurityProfile(args ...string) (*types.SecurityProfile, error)
	toSecurityProfileSecurityProfile(args ...string) (*types.SecurityProfileSecurityProfile, error)
	toSubscriber(args ...string) (*types.Subscriber, error)
	toSubscriberUe(args ...string) (*types.SubscriberUe, error)
	toSubscriberUeProfiles(args ...string) (*types.SubscriberUeProfiles, error)
	toSubscriberUeProfilesAccessProfile(args ...string) (*types.SubscriberUeProfilesAccessProfile, error)
	toSubscriberUeServingPlmn(args ...string) (*types.SubscriberUeServingPlmn, error)
	toUpProfile(args ...string) (*types.UpProfile, error)
	toUpProfileUpProfile(args ...string) (*types.UpProfileUpProfile, error)
	toTarget(args ...string) (*types.Target, error)
}

// Not generating param-types
// Not generating request-bodies

// Not generating additional-properties
// Not generating additional-properties
