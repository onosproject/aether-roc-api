// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// server-interface template override

import (
	"github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/southbound"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	"github.com/onosproject/onos-lib-go/pkg/logging"
	"reflect"
)

const authorization = "Authorization"

// Implement the Server Interface for access to gNMI
var log = logging.GetLogger("aether_2_0_0")

// ServerImpl -
type ServerImpl struct {
	GnmiClient southbound.GnmiClient
}

// DeleteAccessProfile impl of gNMI access at /aether/v2.0.0/{target}/access-profile
func (i *ServerImpl) DeleteAccessProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteAccessProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/access-profile", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteAccessProfile")
	return ctx.JSON(http.StatusOK, response)
}

// GetAccessProfile impl of gNMI access at /aether/v2.0.0/{target}/access-profile
func (i *ServerImpl) GetAccessProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetAccessProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/access-profile", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetAccessProfile")
	return ctx.JSON(http.StatusOK, response)
}

// PostAccessProfile impl of gNMI access at /aether/v2.0.0/{target}/access-profile
func (i *ServerImpl) PostAccessProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostAccessProfile(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/access-profile", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostAccessProfile")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteAccessProfileAccessProfile impl of gNMI access at /aether/v2.0.0/{target}/access-profile/access-profile/{id}
func (i *ServerImpl) DeleteAccessProfileAccessProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteAccessProfileAccessProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/access-profile/access-profile/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteAccessProfileAccessProfile")
	return ctx.JSON(http.StatusOK, response)
}

// GetAccessProfileAccessProfile impl of gNMI access at /aether/v2.0.0/{target}/access-profile/access-profile/{id}
func (i *ServerImpl) GetAccessProfileAccessProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetAccessProfileAccessProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/access-profile/access-profile/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetAccessProfileAccessProfile")
	return ctx.JSON(http.StatusOK, response)
}

// PostAccessProfileAccessProfile impl of gNMI access at /aether/v2.0.0/{target}/access-profile/access-profile/{id}
func (i *ServerImpl) PostAccessProfileAccessProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostAccessProfileAccessProfile(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/access-profile/access-profile/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostAccessProfileAccessProfile")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteApnProfile impl of gNMI access at /aether/v2.0.0/{target}/apn-profile
func (i *ServerImpl) DeleteApnProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteApnProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/apn-profile", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteApnProfile")
	return ctx.JSON(http.StatusOK, response)
}

// GetApnProfile impl of gNMI access at /aether/v2.0.0/{target}/apn-profile
func (i *ServerImpl) GetApnProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetApnProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/apn-profile", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetApnProfile")
	return ctx.JSON(http.StatusOK, response)
}

// PostApnProfile impl of gNMI access at /aether/v2.0.0/{target}/apn-profile
func (i *ServerImpl) PostApnProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostApnProfile(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/apn-profile", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostApnProfile")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteApnProfileApnProfile impl of gNMI access at /aether/v2.0.0/{target}/apn-profile/apn-profile/{id}
func (i *ServerImpl) DeleteApnProfileApnProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteApnProfileApnProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/apn-profile/apn-profile/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteApnProfileApnProfile")
	return ctx.JSON(http.StatusOK, response)
}

// GetApnProfileApnProfile impl of gNMI access at /aether/v2.0.0/{target}/apn-profile/apn-profile/{id}
func (i *ServerImpl) GetApnProfileApnProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetApnProfileApnProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/apn-profile/apn-profile/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetApnProfileApnProfile")
	return ctx.JSON(http.StatusOK, response)
}

// PostApnProfileApnProfile impl of gNMI access at /aether/v2.0.0/{target}/apn-profile/apn-profile/{id}
func (i *ServerImpl) PostApnProfileApnProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostApnProfileApnProfile(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/apn-profile/apn-profile/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostApnProfileApnProfile")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteConnectivityService impl of gNMI access at /aether/v2.0.0/{target}/connectivity-service
func (i *ServerImpl) DeleteConnectivityService(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteConnectivityService(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/connectivity-service", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// GetConnectivityService impl of gNMI access at /aether/v2.0.0/{target}/connectivity-service
func (i *ServerImpl) GetConnectivityService(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetConnectivityService(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/connectivity-service", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// PostConnectivityService impl of gNMI access at /aether/v2.0.0/{target}/connectivity-service
func (i *ServerImpl) PostConnectivityService(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostConnectivityService(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/connectivity-service", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteConnectivityServiceConnectivityService impl of gNMI access at /aether/v2.0.0/{target}/connectivity-service/connectivity-service/{id}
func (i *ServerImpl) DeleteConnectivityServiceConnectivityService(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteConnectivityServiceConnectivityService(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/connectivity-service/connectivity-service/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteConnectivityServiceConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// GetConnectivityServiceConnectivityService impl of gNMI access at /aether/v2.0.0/{target}/connectivity-service/connectivity-service/{id}
func (i *ServerImpl) GetConnectivityServiceConnectivityService(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetConnectivityServiceConnectivityService(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/connectivity-service/connectivity-service/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetConnectivityServiceConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// PostConnectivityServiceConnectivityService impl of gNMI access at /aether/v2.0.0/{target}/connectivity-service/connectivity-service/{id}
func (i *ServerImpl) PostConnectivityServiceConnectivityService(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostConnectivityServiceConnectivityService(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/connectivity-service/connectivity-service/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostConnectivityServiceConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprise impl of gNMI access at /aether/v2.0.0/{target}/enterprise
func (i *ServerImpl) DeleteEnterprise(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteEnterprise(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/enterprise", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprise impl of gNMI access at /aether/v2.0.0/{target}/enterprise
func (i *ServerImpl) GetEnterprise(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetEnterprise(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/enterprise", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprise impl of gNMI access at /aether/v2.0.0/{target}/enterprise
func (i *ServerImpl) PostEnterprise(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprise(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/enterprise", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterpriseEnterprise impl of gNMI access at /aether/v2.0.0/{target}/enterprise/enterprise/{id}
func (i *ServerImpl) DeleteEnterpriseEnterprise(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteEnterpriseEnterprise(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/enterprise/enterprise/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteEnterpriseEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterpriseEnterprise impl of gNMI access at /aether/v2.0.0/{target}/enterprise/enterprise/{id}
func (i *ServerImpl) GetEnterpriseEnterprise(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetEnterpriseEnterprise(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/enterprise/enterprise/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetEnterpriseEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterpriseEnterprise impl of gNMI access at /aether/v2.0.0/{target}/enterprise/enterprise/{id}
func (i *ServerImpl) PostEnterpriseEnterprise(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterpriseEnterprise(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/enterprise/enterprise/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostEnterpriseEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterpriseEnterpriseConnectivityService impl of gNMI access at /aether/v2.0.0/{target}/enterprise/enterprise/{id}/connectivity-service/{connectivity-service}
func (i *ServerImpl) DeleteEnterpriseEnterpriseConnectivityService(ctx echo.Context, target types.Target, id string, connectivityService string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteEnterpriseEnterpriseConnectivityService(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/enterprise/enterprise/{id}/connectivity-service/{connectivity-service}", target, id, connectivityService)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteEnterpriseEnterpriseConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterpriseEnterpriseConnectivityService impl of gNMI access at /aether/v2.0.0/{target}/enterprise/enterprise/{id}/connectivity-service/{connectivity-service}
func (i *ServerImpl) GetEnterpriseEnterpriseConnectivityService(ctx echo.Context, target types.Target, id string, connectivityService string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetEnterpriseEnterpriseConnectivityService(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/enterprise/enterprise/{id}/connectivity-service/{connectivity-service}", target, id, connectivityService)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetEnterpriseEnterpriseConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterpriseEnterpriseConnectivityService impl of gNMI access at /aether/v2.0.0/{target}/enterprise/enterprise/{id}/connectivity-service/{connectivity-service}
func (i *ServerImpl) PostEnterpriseEnterpriseConnectivityService(ctx echo.Context, target types.Target, id string, connectivityService string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterpriseEnterpriseConnectivityService(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/enterprise/enterprise/{id}/connectivity-service/{connectivity-service}", target, id, connectivityService)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostEnterpriseEnterpriseConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteQosProfile impl of gNMI access at /aether/v2.0.0/{target}/qos-profile
func (i *ServerImpl) DeleteQosProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteQosProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/qos-profile", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteQosProfile")
	return ctx.JSON(http.StatusOK, response)
}

// GetQosProfile impl of gNMI access at /aether/v2.0.0/{target}/qos-profile
func (i *ServerImpl) GetQosProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetQosProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/qos-profile", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetQosProfile")
	return ctx.JSON(http.StatusOK, response)
}

// PostQosProfile impl of gNMI access at /aether/v2.0.0/{target}/qos-profile
func (i *ServerImpl) PostQosProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostQosProfile(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/qos-profile", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostQosProfile")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteQosProfileQosProfile impl of gNMI access at /aether/v2.0.0/{target}/qos-profile/qos-profile/{id}
func (i *ServerImpl) DeleteQosProfileQosProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteQosProfileQosProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/qos-profile/qos-profile/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteQosProfileQosProfile")
	return ctx.JSON(http.StatusOK, response)
}

// GetQosProfileQosProfile impl of gNMI access at /aether/v2.0.0/{target}/qos-profile/qos-profile/{id}
func (i *ServerImpl) GetQosProfileQosProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetQosProfileQosProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/qos-profile/qos-profile/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetQosProfileQosProfile")
	return ctx.JSON(http.StatusOK, response)
}

// PostQosProfileQosProfile impl of gNMI access at /aether/v2.0.0/{target}/qos-profile/qos-profile/{id}
func (i *ServerImpl) PostQosProfileQosProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostQosProfileQosProfile(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/qos-profile/qos-profile/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostQosProfileQosProfile")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteQosProfileQosProfileApnAmbr impl of gNMI access at /aether/v2.0.0/{target}/qos-profile/qos-profile/{id}/apn-ambr
func (i *ServerImpl) DeleteQosProfileQosProfileApnAmbr(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteQosProfileQosProfileApnAmbr(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/qos-profile/qos-profile/{id}/apn-ambr", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteQosProfileQosProfileApnAmbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetQosProfileQosProfileApnAmbr impl of gNMI access at /aether/v2.0.0/{target}/qos-profile/qos-profile/{id}/apn-ambr
func (i *ServerImpl) GetQosProfileQosProfileApnAmbr(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetQosProfileQosProfileApnAmbr(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/qos-profile/qos-profile/{id}/apn-ambr", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetQosProfileQosProfileApnAmbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostQosProfileQosProfileApnAmbr impl of gNMI access at /aether/v2.0.0/{target}/qos-profile/qos-profile/{id}/apn-ambr
func (i *ServerImpl) PostQosProfileQosProfileApnAmbr(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostQosProfileQosProfileApnAmbr(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/qos-profile/qos-profile/{id}/apn-ambr", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostQosProfileQosProfileApnAmbr")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteQosProfileQosProfileArp impl of gNMI access at /aether/v2.0.0/{target}/qos-profile/qos-profile/{id}/arp
func (i *ServerImpl) DeleteQosProfileQosProfileArp(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteQosProfileQosProfileArp(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/qos-profile/qos-profile/{id}/arp", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteQosProfileQosProfileArp")
	return ctx.JSON(http.StatusOK, response)
}

// GetQosProfileQosProfileArp impl of gNMI access at /aether/v2.0.0/{target}/qos-profile/qos-profile/{id}/arp
func (i *ServerImpl) GetQosProfileQosProfileArp(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetQosProfileQosProfileArp(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/qos-profile/qos-profile/{id}/arp", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetQosProfileQosProfileArp")
	return ctx.JSON(http.StatusOK, response)
}

// PostQosProfileQosProfileArp impl of gNMI access at /aether/v2.0.0/{target}/qos-profile/qos-profile/{id}/arp
func (i *ServerImpl) PostQosProfileQosProfileArp(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostQosProfileQosProfileArp(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/qos-profile/qos-profile/{id}/arp", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostQosProfileQosProfileArp")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSecurityProfile impl of gNMI access at /aether/v2.0.0/{target}/security-profile
func (i *ServerImpl) DeleteSecurityProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteSecurityProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/security-profile", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteSecurityProfile")
	return ctx.JSON(http.StatusOK, response)
}

// GetSecurityProfile impl of gNMI access at /aether/v2.0.0/{target}/security-profile
func (i *ServerImpl) GetSecurityProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetSecurityProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/security-profile", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetSecurityProfile")
	return ctx.JSON(http.StatusOK, response)
}

// PostSecurityProfile impl of gNMI access at /aether/v2.0.0/{target}/security-profile
func (i *ServerImpl) PostSecurityProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSecurityProfile(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/security-profile", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostSecurityProfile")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSecurityProfileSecurityProfile impl of gNMI access at /aether/v2.0.0/{target}/security-profile/security-profile/{id}
func (i *ServerImpl) DeleteSecurityProfileSecurityProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteSecurityProfileSecurityProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/security-profile/security-profile/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteSecurityProfileSecurityProfile")
	return ctx.JSON(http.StatusOK, response)
}

// GetSecurityProfileSecurityProfile impl of gNMI access at /aether/v2.0.0/{target}/security-profile/security-profile/{id}
func (i *ServerImpl) GetSecurityProfileSecurityProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetSecurityProfileSecurityProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/security-profile/security-profile/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetSecurityProfileSecurityProfile")
	return ctx.JSON(http.StatusOK, response)
}

// PostSecurityProfileSecurityProfile impl of gNMI access at /aether/v2.0.0/{target}/security-profile/security-profile/{id}
func (i *ServerImpl) PostSecurityProfileSecurityProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSecurityProfileSecurityProfile(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/security-profile/security-profile/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostSecurityProfileSecurityProfile")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSubscriber impl of gNMI access at /aether/v2.0.0/{target}/subscriber
func (i *ServerImpl) DeleteSubscriber(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteSubscriber(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/subscriber", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteSubscriber")
	return ctx.JSON(http.StatusOK, response)
}

// GetSubscriber impl of gNMI access at /aether/v2.0.0/{target}/subscriber
func (i *ServerImpl) GetSubscriber(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetSubscriber(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/subscriber", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetSubscriber")
	return ctx.JSON(http.StatusOK, response)
}

// PostSubscriber impl of gNMI access at /aether/v2.0.0/{target}/subscriber
func (i *ServerImpl) PostSubscriber(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSubscriber(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/subscriber", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostSubscriber")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSubscriberUe impl of gNMI access at /aether/v2.0.0/{target}/subscriber/ue/{id}
func (i *ServerImpl) DeleteSubscriberUe(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteSubscriberUe(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/subscriber/ue/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteSubscriberUe")
	return ctx.JSON(http.StatusOK, response)
}

// GetSubscriberUe impl of gNMI access at /aether/v2.0.0/{target}/subscriber/ue/{id}
func (i *ServerImpl) GetSubscriberUe(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetSubscriberUe(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/subscriber/ue/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetSubscriberUe")
	return ctx.JSON(http.StatusOK, response)
}

// PostSubscriberUe impl of gNMI access at /aether/v2.0.0/{target}/subscriber/ue/{id}
func (i *ServerImpl) PostSubscriberUe(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSubscriberUe(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/subscriber/ue/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostSubscriberUe")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSubscriberUeProfiles impl of gNMI access at /aether/v2.0.0/{target}/subscriber/ue/{id}/profiles
func (i *ServerImpl) DeleteSubscriberUeProfiles(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteSubscriberUeProfiles(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/subscriber/ue/{id}/profiles", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteSubscriberUeProfiles")
	return ctx.JSON(http.StatusOK, response)
}

// GetSubscriberUeProfiles impl of gNMI access at /aether/v2.0.0/{target}/subscriber/ue/{id}/profiles
func (i *ServerImpl) GetSubscriberUeProfiles(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetSubscriberUeProfiles(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/subscriber/ue/{id}/profiles", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetSubscriberUeProfiles")
	return ctx.JSON(http.StatusOK, response)
}

// PostSubscriberUeProfiles impl of gNMI access at /aether/v2.0.0/{target}/subscriber/ue/{id}/profiles
func (i *ServerImpl) PostSubscriberUeProfiles(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSubscriberUeProfiles(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/subscriber/ue/{id}/profiles", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostSubscriberUeProfiles")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSubscriberUeProfilesAccessProfile impl of gNMI access at /aether/v2.0.0/{target}/subscriber/ue/{id}/profiles/access-profile/{access-profile}
func (i *ServerImpl) DeleteSubscriberUeProfilesAccessProfile(ctx echo.Context, target types.Target, id string, accessProfile string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteSubscriberUeProfilesAccessProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/subscriber/ue/{id}/profiles/access-profile/{access-profile}", target, id, accessProfile)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteSubscriberUeProfilesAccessProfile")
	return ctx.JSON(http.StatusOK, response)
}

// GetSubscriberUeProfilesAccessProfile impl of gNMI access at /aether/v2.0.0/{target}/subscriber/ue/{id}/profiles/access-profile/{access-profile}
func (i *ServerImpl) GetSubscriberUeProfilesAccessProfile(ctx echo.Context, target types.Target, id string, accessProfile string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetSubscriberUeProfilesAccessProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/subscriber/ue/{id}/profiles/access-profile/{access-profile}", target, id, accessProfile)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetSubscriberUeProfilesAccessProfile")
	return ctx.JSON(http.StatusOK, response)
}

// PostSubscriberUeProfilesAccessProfile impl of gNMI access at /aether/v2.0.0/{target}/subscriber/ue/{id}/profiles/access-profile/{access-profile}
func (i *ServerImpl) PostSubscriberUeProfilesAccessProfile(ctx echo.Context, target types.Target, id string, accessProfile string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSubscriberUeProfilesAccessProfile(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/subscriber/ue/{id}/profiles/access-profile/{access-profile}", target, id, accessProfile)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostSubscriberUeProfilesAccessProfile")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSubscriberUeServingPlmn impl of gNMI access at /aether/v2.0.0/{target}/subscriber/ue/{id}/serving-plmn
func (i *ServerImpl) DeleteSubscriberUeServingPlmn(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteSubscriberUeServingPlmn(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/subscriber/ue/{id}/serving-plmn", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteSubscriberUeServingPlmn")
	return ctx.JSON(http.StatusOK, response)
}

// GetSubscriberUeServingPlmn impl of gNMI access at /aether/v2.0.0/{target}/subscriber/ue/{id}/serving-plmn
func (i *ServerImpl) GetSubscriberUeServingPlmn(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetSubscriberUeServingPlmn(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/subscriber/ue/{id}/serving-plmn", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetSubscriberUeServingPlmn")
	return ctx.JSON(http.StatusOK, response)
}

// PostSubscriberUeServingPlmn impl of gNMI access at /aether/v2.0.0/{target}/subscriber/ue/{id}/serving-plmn
func (i *ServerImpl) PostSubscriberUeServingPlmn(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSubscriberUeServingPlmn(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/subscriber/ue/{id}/serving-plmn", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostSubscriberUeServingPlmn")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteUpProfile impl of gNMI access at /aether/v2.0.0/{target}/up-profile
func (i *ServerImpl) DeleteUpProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteUpProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/up-profile", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteUpProfile")
	return ctx.JSON(http.StatusOK, response)
}

// GetUpProfile impl of gNMI access at /aether/v2.0.0/{target}/up-profile
func (i *ServerImpl) GetUpProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetUpProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/up-profile", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetUpProfile")
	return ctx.JSON(http.StatusOK, response)
}

// PostUpProfile impl of gNMI access at /aether/v2.0.0/{target}/up-profile
func (i *ServerImpl) PostUpProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostUpProfile(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/up-profile", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostUpProfile")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteUpProfileUpProfile impl of gNMI access at /aether/v2.0.0/{target}/up-profile/up-profile/{id}
func (i *ServerImpl) DeleteUpProfileUpProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteUpProfileUpProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/up-profile/up-profile/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteUpProfileUpProfile")
	return ctx.JSON(http.StatusOK, response)
}

// GetUpProfileUpProfile impl of gNMI access at /aether/v2.0.0/{target}/up-profile/up-profile/{id}
func (i *ServerImpl) GetUpProfileUpProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetUpProfileUpProfile(utils.NewGnmiContext(ctx), "/aether/v2.0.0/{target}/up-profile/up-profile/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetUpProfileUpProfile")
	return ctx.JSON(http.StatusOK, response)
}

// PostUpProfileUpProfile impl of gNMI access at /aether/v2.0.0/{target}/up-profile/up-profile/{id}
func (i *ServerImpl) PostUpProfileUpProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostUpProfileUpProfile(utils.NewGnmiContext(ctx), body, "/aether/v2.0.0/{target}/up-profile/up-profile/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else if strings.HasPrefix(err.Error(), "rpc error: code = Unauthenticated desc =") {
			return echo.NewHTTPError(http.StatusUnauthorized, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostUpProfileUpProfile")
	return ctx.JSON(http.StatusOK, response)
}

// register template override
