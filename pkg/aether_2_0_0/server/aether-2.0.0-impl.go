// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"reflect"

	"github.com/labstack/echo/v4"
	externalRef0 "github.com/onosproject/aether-models/models/aether-2.0.x/v2/api"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/southbound"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	"github.com/onosproject/onos-lib-go/pkg/logging"
	"github.com/openconfig/gnmi/proto/gnmi"
)

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

//Ignoring AdditionalPropertyTarget

//Ignoring AdditionalPropertyUnchanged

// GnmiDeleteConnectivityServices deletes an instance of Connectivity-services.
func (i *ServerImpl) GnmiDeleteConnectivityServices(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetConnectivityServices(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetConnectivityServices returns an instance of Connectivity-services.
func (i *ServerImpl) GnmiGetConnectivityServices(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.ConnectivityServices, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToConnectivityServices(args...)
}

// GnmiPostConnectivityServices adds an instance of Connectivity-services.
func (i *ServerImpl) GnmiPostConnectivityServices(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.ConnectivityServices)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Connectivity-services %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiConnectivityServices(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.ConnectivityServices to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteConnectivityServicesConnectivityService deletes an instance of Connectivity-services_Connectivity-service.
func (i *ServerImpl) GnmiDeleteConnectivityServicesConnectivityService(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetConnectivityServicesConnectivityService(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetConnectivityServicesConnectivityService returns an instance of Connectivity-services_Connectivity-service.
func (i *ServerImpl) GnmiGetConnectivityServicesConnectivityService(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.ConnectivityServicesConnectivityService, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToConnectivityServicesConnectivityService(args...)
}

// GnmiPostConnectivityServicesConnectivityService adds an instance of Connectivity-services_Connectivity-service.
func (i *ServerImpl) GnmiPostConnectivityServicesConnectivityService(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.ConnectivityServicesConnectivityService)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Connectivity-services_Connectivity-service %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiConnectivityServicesConnectivityService(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.ConnectivityServicesConnectivityService to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteConnectivityServicesConnectivityServiceList deletes an instance of Connectivity-services_Connectivity-service_List.
func (i *ServerImpl) GnmiDeleteConnectivityServicesConnectivityServiceList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetConnectivityServicesConnectivityServiceList(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetConnectivityServicesConnectivityServiceList returns an instance of Connectivity-services_Connectivity-service_List.
func (i *ServerImpl) GnmiGetConnectivityServicesConnectivityServiceList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.ConnectivityServicesConnectivityServiceList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToConnectivityServicesConnectivityServiceList(args...)
}

// GnmiPostConnectivityServicesConnectivityServiceList adds an instance of Connectivity-services_Connectivity-service_List.
func (i *ServerImpl) GnmiPostConnectivityServicesConnectivityServiceList(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.ConnectivityServicesConnectivityServiceList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Connectivity-services_Connectivity-service_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiConnectivityServicesConnectivityServiceList(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.ConnectivityServicesConnectivityServiceList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprises deletes an instance of Enterprises.
func (i *ServerImpl) GnmiDeleteEnterprises(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprises(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprises returns an instance of Enterprises.
func (i *ServerImpl) GnmiGetEnterprises(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.Enterprises, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprises(args...)
}

// GnmiPostEnterprises adds an instance of Enterprises.
func (i *ServerImpl) GnmiPostEnterprises(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.Enterprises)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprises(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.Enterprises to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterprise deletes an instance of Enterprises_Enterprise.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterprise(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterprise(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterprise returns an instance of Enterprises_Enterprise.
func (i *ServerImpl) GnmiGetEnterprisesEnterprise(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterprise, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterprise(args...)
}

// GnmiPostEnterprisesEnterprise adds an instance of Enterprises_Enterprise.
func (i *ServerImpl) GnmiPostEnterprisesEnterprise(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterprise)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterprise(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterprise to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseApplication deletes an instance of Enterprises_Enterprise_Application.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseApplication(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseApplication(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseApplication returns an instance of Enterprises_Enterprise_Application.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseApplication(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseApplication, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseApplication(args...)
}

// GnmiPostEnterprisesEnterpriseApplication adds an instance of Enterprises_Enterprise_Application.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseApplication(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseApplication)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Application %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseApplication(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseApplication to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseApplicationEndpoint deletes an instance of Enterprises_Enterprise_Application_Endpoint.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseApplicationEndpoint(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseApplicationEndpoint(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseApplicationEndpoint returns an instance of Enterprises_Enterprise_Application_Endpoint.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseApplicationEndpoint(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseApplicationEndpoint, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseApplicationEndpoint(args...)
}

// GnmiPostEnterprisesEnterpriseApplicationEndpoint adds an instance of Enterprises_Enterprise_Application_Endpoint.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseApplicationEndpoint(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseApplicationEndpoint)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Application_Endpoint %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseApplicationEndpoint(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseApplicationEndpoint to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseApplicationEndpointList deletes an instance of Enterprises_Enterprise_Application_Endpoint_List.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseApplicationEndpointList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseApplicationEndpointList(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseApplicationEndpointList returns an instance of Enterprises_Enterprise_Application_Endpoint_List.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseApplicationEndpointList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseApplicationEndpointList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseApplicationEndpointList(args...)
}

// GnmiPostEnterprisesEnterpriseApplicationEndpointList adds an instance of Enterprises_Enterprise_Application_Endpoint_List.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseApplicationEndpointList(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseApplicationEndpointList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Application_Endpoint_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseApplicationEndpointList(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseApplicationEndpointList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseApplicationEndpointMbr deletes an instance of Enterprises_Enterprise_Application_Endpoint_Mbr.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseApplicationEndpointMbr(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseApplicationEndpointMbr(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseApplicationEndpointMbr returns an instance of Enterprises_Enterprise_Application_Endpoint_Mbr.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseApplicationEndpointMbr(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseApplicationEndpointMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseApplicationEndpointMbr(args...)
}

// GnmiPostEnterprisesEnterpriseApplicationEndpointMbr adds an instance of Enterprises_Enterprise_Application_Endpoint_Mbr.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseApplicationEndpointMbr(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseApplicationEndpointMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Application_Endpoint_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseApplicationEndpointMbr(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseApplicationEndpointMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseApplicationList deletes an instance of Enterprises_Enterprise_Application_List.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseApplicationList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseApplicationList(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseApplicationList returns an instance of Enterprises_Enterprise_Application_List.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseApplicationList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseApplicationList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseApplicationList(args...)
}

// GnmiPostEnterprisesEnterpriseApplicationList adds an instance of Enterprises_Enterprise_Application_List.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseApplicationList(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseApplicationList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Application_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseApplicationList(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseApplicationList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseConnectivityService deletes an instance of Enterprises_Enterprise_Connectivity-service.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseConnectivityService(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseConnectivityService(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseConnectivityService returns an instance of Enterprises_Enterprise_Connectivity-service.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseConnectivityService(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseConnectivityService, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseConnectivityService(args...)
}

// GnmiPostEnterprisesEnterpriseConnectivityService adds an instance of Enterprises_Enterprise_Connectivity-service.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseConnectivityService(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseConnectivityService)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Connectivity-service %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseConnectivityService(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseConnectivityService to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseConnectivityServiceList deletes an instance of Enterprises_Enterprise_Connectivity-service_List.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseConnectivityServiceList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseConnectivityServiceList(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseConnectivityServiceList returns an instance of Enterprises_Enterprise_Connectivity-service_List.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseConnectivityServiceList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseConnectivityServiceList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseConnectivityServiceList(args...)
}

// GnmiPostEnterprisesEnterpriseConnectivityServiceList adds an instance of Enterprises_Enterprise_Connectivity-service_List.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseConnectivityServiceList(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseConnectivityServiceList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Connectivity-service_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseConnectivityServiceList(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseConnectivityServiceList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseList deletes an instance of Enterprises_Enterprise_List.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseList(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseList returns an instance of Enterprises_Enterprise_List.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseList(args...)
}

// GnmiPostEnterprisesEnterpriseList adds an instance of Enterprises_Enterprise_List.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseList(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseList(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSite deletes an instance of Enterprises_Enterprise_Site.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSite(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSite(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSite returns an instance of Enterprises_Enterprise_Site.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSite(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSite, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSite(args...)
}

// GnmiPostEnterprisesEnterpriseSite adds an instance of Enterprises_Enterprise_Site.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSite(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSite)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSite(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSite to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteDevice deletes an instance of Enterprises_Enterprise_Site_Device.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteDevice(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteDevice(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteDevice returns an instance of Enterprises_Enterprise_Site_Device.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteDevice(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteDevice, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteDevice(args...)
}

// GnmiPostEnterprisesEnterpriseSiteDevice adds an instance of Enterprises_Enterprise_Site_Device.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteDevice(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteDevice)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Device %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteDevice(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteDevice to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteDeviceGroup deletes an instance of Enterprises_Enterprise_Site_Device-group.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteDeviceGroup(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteDeviceGroup(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteDeviceGroup returns an instance of Enterprises_Enterprise_Site_Device-group.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteDeviceGroup(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceGroup, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteDeviceGroup(args...)
}

// GnmiPostEnterprisesEnterpriseSiteDeviceGroup adds an instance of Enterprises_Enterprise_Site_Device-group.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteDeviceGroup(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteDeviceGroup)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Device-group %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteDeviceGroup(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteDeviceGroup to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteDeviceGroupDevice deletes an instance of Enterprises_Enterprise_Site_Device-group_Device.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteDeviceGroupDevice(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteDeviceGroupDevice(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteDeviceGroupDevice returns an instance of Enterprises_Enterprise_Site_Device-group_Device.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteDeviceGroupDevice(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceGroupDevice, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteDeviceGroupDevice(args...)
}

// GnmiPostEnterprisesEnterpriseSiteDeviceGroupDevice adds an instance of Enterprises_Enterprise_Site_Device-group_Device.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteDeviceGroupDevice(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteDeviceGroupDevice)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Device-group_Device %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteDeviceGroupDevice(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteDeviceGroupDevice to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteDeviceGroupDeviceList deletes an instance of Enterprises_Enterprise_Site_Device-group_Device_List.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteDeviceGroupDeviceList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteDeviceGroupDeviceList(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteDeviceGroupDeviceList returns an instance of Enterprises_Enterprise_Site_Device-group_Device_List.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteDeviceGroupDeviceList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceGroupDeviceList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteDeviceGroupDeviceList(args...)
}

// GnmiPostEnterprisesEnterpriseSiteDeviceGroupDeviceList adds an instance of Enterprises_Enterprise_Site_Device-group_Device_List.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteDeviceGroupDeviceList(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteDeviceGroupDeviceList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Device-group_Device_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteDeviceGroupDeviceList(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteDeviceGroupDeviceList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteDeviceGroupList deletes an instance of Enterprises_Enterprise_Site_Device-group_List.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteDeviceGroupList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteDeviceGroupList(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteDeviceGroupList returns an instance of Enterprises_Enterprise_Site_Device-group_List.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteDeviceGroupList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceGroupList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteDeviceGroupList(args...)
}

// GnmiPostEnterprisesEnterpriseSiteDeviceGroupList adds an instance of Enterprises_Enterprise_Site_Device-group_List.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteDeviceGroupList(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteDeviceGroupList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Device-group_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteDeviceGroupList(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteDeviceGroupList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteDeviceGroupMbr deletes an instance of Enterprises_Enterprise_Site_Device-group_Mbr.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteDeviceGroupMbr(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteDeviceGroupMbr(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteDeviceGroupMbr returns an instance of Enterprises_Enterprise_Site_Device-group_Mbr.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteDeviceGroupMbr(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceGroupMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteDeviceGroupMbr(args...)
}

// GnmiPostEnterprisesEnterpriseSiteDeviceGroupMbr adds an instance of Enterprises_Enterprise_Site_Device-group_Mbr.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteDeviceGroupMbr(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteDeviceGroupMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Device-group_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteDeviceGroupMbr(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteDeviceGroupMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteDeviceList deletes an instance of Enterprises_Enterprise_Site_Device_List.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteDeviceList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteDeviceList(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteDeviceList returns an instance of Enterprises_Enterprise_Site_Device_List.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteDeviceList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteDeviceList(args...)
}

// GnmiPostEnterprisesEnterpriseSiteDeviceList adds an instance of Enterprises_Enterprise_Site_Device_List.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteDeviceList(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteDeviceList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Device_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteDeviceList(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteDeviceList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteImsiDefinition deletes an instance of Enterprises_Enterprise_Site_Imsi-definition.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteImsiDefinition(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteImsiDefinition(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteImsiDefinition returns an instance of Enterprises_Enterprise_Site_Imsi-definition.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteImsiDefinition(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteImsiDefinition, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteImsiDefinition(args...)
}

// GnmiPostEnterprisesEnterpriseSiteImsiDefinition adds an instance of Enterprises_Enterprise_Site_Imsi-definition.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteImsiDefinition(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteImsiDefinition)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Imsi-definition %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteImsiDefinition(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteImsiDefinition to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteIpDomain deletes an instance of Enterprises_Enterprise_Site_Ip-domain.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteIpDomain(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteIpDomain(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteIpDomain returns an instance of Enterprises_Enterprise_Site_Ip-domain.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteIpDomain(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteIpDomain, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteIpDomain(args...)
}

// GnmiPostEnterprisesEnterpriseSiteIpDomain adds an instance of Enterprises_Enterprise_Site_Ip-domain.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteIpDomain(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteIpDomain)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Ip-domain %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteIpDomain(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteIpDomain to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteIpDomainList deletes an instance of Enterprises_Enterprise_Site_Ip-domain_List.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteIpDomainList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteIpDomainList(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteIpDomainList returns an instance of Enterprises_Enterprise_Site_Ip-domain_List.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteIpDomainList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteIpDomainList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteIpDomainList(args...)
}

// GnmiPostEnterprisesEnterpriseSiteIpDomainList adds an instance of Enterprises_Enterprise_Site_Ip-domain_List.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteIpDomainList(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteIpDomainList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Ip-domain_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteIpDomainList(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteIpDomainList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteList deletes an instance of Enterprises_Enterprise_Site_List.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteList(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteList returns an instance of Enterprises_Enterprise_Site_List.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteList(args...)
}

// GnmiPostEnterprisesEnterpriseSiteList adds an instance of Enterprises_Enterprise_Site_List.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteList(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteList(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteMonitoring deletes an instance of Enterprises_Enterprise_Site_Monitoring.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteMonitoring(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteMonitoring(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteMonitoring returns an instance of Enterprises_Enterprise_Site_Monitoring.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteMonitoring(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteMonitoring, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteMonitoring(args...)
}

// GnmiPostEnterprisesEnterpriseSiteMonitoring adds an instance of Enterprises_Enterprise_Site_Monitoring.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteMonitoring(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteMonitoring)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Monitoring %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteMonitoring(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteMonitoring to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteMonitoringEdgeDevice deletes an instance of Enterprises_Enterprise_Site_Monitoring_Edge-device.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteMonitoringEdgeDevice returns an instance of Enterprises_Enterprise_Site_Monitoring_Edge-device.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteMonitoringEdgeDevice, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteMonitoringEdgeDevice(args...)
}

// GnmiPostEnterprisesEnterpriseSiteMonitoringEdgeDevice adds an instance of Enterprises_Enterprise_Site_Monitoring_Edge-device.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteMonitoringEdgeDevice)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Monitoring_Edge-device %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteMonitoringEdgeDevice(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteMonitoringEdgeDevice to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteMonitoringEdgeDeviceList deletes an instance of Enterprises_Enterprise_Site_Monitoring_Edge-device_List.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteMonitoringEdgeDeviceList returns an instance of Enterprises_Enterprise_Site_Monitoring_Edge-device_List.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteMonitoringEdgeDeviceList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(args...)
}

// GnmiPostEnterprisesEnterpriseSiteMonitoringEdgeDeviceList adds an instance of Enterprises_Enterprise_Site_Monitoring_Edge-device_List.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteMonitoringEdgeDeviceList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Monitoring_Edge-device_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteMonitoringEdgeDeviceList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteSimCard deletes an instance of Enterprises_Enterprise_Site_Sim-card.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteSimCard(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteSimCard(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteSimCard returns an instance of Enterprises_Enterprise_Site_Sim-card.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteSimCard(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSimCard, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteSimCard(args...)
}

// GnmiPostEnterprisesEnterpriseSiteSimCard adds an instance of Enterprises_Enterprise_Site_Sim-card.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteSimCard(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSimCard)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Sim-card %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSimCard(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSimCard to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteSimCardList deletes an instance of Enterprises_Enterprise_Site_Sim-card_List.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteSimCardList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteSimCardList(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteSimCardList returns an instance of Enterprises_Enterprise_Site_Sim-card_List.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteSimCardList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSimCardList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteSimCardList(args...)
}

// GnmiPostEnterprisesEnterpriseSiteSimCardList adds an instance of Enterprises_Enterprise_Site_Sim-card_List.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteSimCardList(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSimCardList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Sim-card_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSimCardList(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSimCardList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteSlice deletes an instance of Enterprises_Enterprise_Site_Slice.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteSlice(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteSlice(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteSlice returns an instance of Enterprises_Enterprise_Site_Slice.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteSlice(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSlice, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteSlice(args...)
}

// GnmiPostEnterprisesEnterpriseSiteSlice adds an instance of Enterprises_Enterprise_Site_Slice.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteSlice(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSlice)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSlice(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSlice to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteSliceDeviceGroup deletes an instance of Enterprises_Enterprise_Site_Slice_Device-group.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteSliceDeviceGroup(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteSliceDeviceGroup(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteSliceDeviceGroup returns an instance of Enterprises_Enterprise_Site_Slice_Device-group.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteSliceDeviceGroup(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceDeviceGroup, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteSliceDeviceGroup(args...)
}

// GnmiPostEnterprisesEnterpriseSiteSliceDeviceGroup adds an instance of Enterprises_Enterprise_Site_Slice_Device-group.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteSliceDeviceGroup(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSliceDeviceGroup)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice_Device-group %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSliceDeviceGroup(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSliceDeviceGroup to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteSliceDeviceGroupList deletes an instance of Enterprises_Enterprise_Site_Slice_Device-group_List.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteSliceDeviceGroupList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteSliceDeviceGroupList(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteSliceDeviceGroupList returns an instance of Enterprises_Enterprise_Site_Slice_Device-group_List.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteSliceDeviceGroupList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceDeviceGroupList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteSliceDeviceGroupList(args...)
}

// GnmiPostEnterprisesEnterpriseSiteSliceDeviceGroupList adds an instance of Enterprises_Enterprise_Site_Slice_Device-group_List.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteSliceDeviceGroupList(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSliceDeviceGroupList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice_Device-group_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSliceDeviceGroupList(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSliceDeviceGroupList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteSliceFilter deletes an instance of Enterprises_Enterprise_Site_Slice_Filter.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteSliceFilter(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteSliceFilter(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteSliceFilter returns an instance of Enterprises_Enterprise_Site_Slice_Filter.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteSliceFilter(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceFilter, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteSliceFilter(args...)
}

// GnmiPostEnterprisesEnterpriseSiteSliceFilter adds an instance of Enterprises_Enterprise_Site_Slice_Filter.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteSliceFilter(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSliceFilter)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice_Filter %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSliceFilter(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSliceFilter to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteSliceFilterList deletes an instance of Enterprises_Enterprise_Site_Slice_Filter_List.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteSliceFilterList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteSliceFilterList(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteSliceFilterList returns an instance of Enterprises_Enterprise_Site_Slice_Filter_List.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteSliceFilterList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceFilterList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteSliceFilterList(args...)
}

// GnmiPostEnterprisesEnterpriseSiteSliceFilterList adds an instance of Enterprises_Enterprise_Site_Slice_Filter_List.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteSliceFilterList(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSliceFilterList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice_Filter_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSliceFilterList(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSliceFilterList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteSliceList deletes an instance of Enterprises_Enterprise_Site_Slice_List.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteSliceList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteSliceList(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteSliceList returns an instance of Enterprises_Enterprise_Site_Slice_List.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteSliceList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteSliceList(args...)
}

// GnmiPostEnterprisesEnterpriseSiteSliceList adds an instance of Enterprises_Enterprise_Site_Slice_List.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteSliceList(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSliceList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSliceList(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSliceList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteSliceMbr deletes an instance of Enterprises_Enterprise_Site_Slice_Mbr.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteSliceMbr(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteSliceMbr(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteSliceMbr returns an instance of Enterprises_Enterprise_Site_Slice_Mbr.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteSliceMbr(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteSliceMbr(args...)
}

// GnmiPostEnterprisesEnterpriseSiteSliceMbr adds an instance of Enterprises_Enterprise_Site_Slice_Mbr.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteSliceMbr(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSliceMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSliceMbr(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSliceMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRule deletes an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRule returns an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRule, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteSlicePriorityTrafficRule(args...)
}

// GnmiPostEnterprisesEnterpriseSiteSlicePriorityTrafficRule adds an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRule)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice_Priority-traffic-rule %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSlicePriorityTrafficRule(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRule to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr deletes an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_Gbr.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr returns an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_Gbr.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(args...)
}

// GnmiPostEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr adds an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_Gbr.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_Gbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList deletes an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_List.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList returns an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_List.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(args...)
}

// GnmiPostEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList adds an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_List.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr deletes an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_Mbr.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr returns an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_Mbr.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(args...)
}

// GnmiPostEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr adds an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_Mbr.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteSmallCell deletes an instance of Enterprises_Enterprise_Site_Small-cell.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteSmallCell(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteSmallCell(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteSmallCell returns an instance of Enterprises_Enterprise_Site_Small-cell.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteSmallCell(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSmallCell, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteSmallCell(args...)
}

// GnmiPostEnterprisesEnterpriseSiteSmallCell adds an instance of Enterprises_Enterprise_Site_Small-cell.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteSmallCell(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSmallCell)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Small-cell %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSmallCell(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSmallCell to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteSmallCellList deletes an instance of Enterprises_Enterprise_Site_Small-cell_List.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteSmallCellList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteSmallCellList(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteSmallCellList returns an instance of Enterprises_Enterprise_Site_Small-cell_List.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteSmallCellList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSmallCellList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteSmallCellList(args...)
}

// GnmiPostEnterprisesEnterpriseSiteSmallCellList adds an instance of Enterprises_Enterprise_Site_Small-cell_List.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteSmallCellList(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSmallCellList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Small-cell_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSmallCellList(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSmallCellList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteUpf deletes an instance of Enterprises_Enterprise_Site_Upf.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteUpf(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteUpf(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteUpf returns an instance of Enterprises_Enterprise_Site_Upf.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteUpf(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteUpf, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteUpf(args...)
}

// GnmiPostEnterprisesEnterpriseSiteUpf adds an instance of Enterprises_Enterprise_Site_Upf.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteUpf(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteUpf)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Upf %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteUpf(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteUpf to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseSiteUpfList deletes an instance of Enterprises_Enterprise_Site_Upf_List.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseSiteUpfList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseSiteUpfList(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseSiteUpfList returns an instance of Enterprises_Enterprise_Site_Upf_List.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseSiteUpfList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteUpfList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseSiteUpfList(args...)
}

// GnmiPostEnterprisesEnterpriseSiteUpfList adds an instance of Enterprises_Enterprise_Site_Upf_List.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseSiteUpfList(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteUpfList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Upf_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteUpfList(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteUpfList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseTemplate deletes an instance of Enterprises_Enterprise_Template.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseTemplate(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseTemplate(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseTemplate returns an instance of Enterprises_Enterprise_Template.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseTemplate(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseTemplate, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseTemplate(args...)
}

// GnmiPostEnterprisesEnterpriseTemplate adds an instance of Enterprises_Enterprise_Template.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseTemplate(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseTemplate)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Template %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseTemplate(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseTemplate to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseTemplateList deletes an instance of Enterprises_Enterprise_Template_List.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseTemplateList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseTemplateList(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseTemplateList returns an instance of Enterprises_Enterprise_Template_List.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseTemplateList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseTemplateList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseTemplateList(args...)
}

// GnmiPostEnterprisesEnterpriseTemplateList adds an instance of Enterprises_Enterprise_Template_List.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseTemplateList(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseTemplateList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Template_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseTemplateList(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseTemplateList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseTemplateMbr deletes an instance of Enterprises_Enterprise_Template_Mbr.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseTemplateMbr(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseTemplateMbr(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseTemplateMbr returns an instance of Enterprises_Enterprise_Template_Mbr.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseTemplateMbr(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseTemplateMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseTemplateMbr(args...)
}

// GnmiPostEnterprisesEnterpriseTemplateMbr adds an instance of Enterprises_Enterprise_Template_Mbr.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseTemplateMbr(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseTemplateMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Template_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseTemplateMbr(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseTemplateMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseTrafficClass deletes an instance of Enterprises_Enterprise_Traffic-class.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseTrafficClass(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseTrafficClass(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseTrafficClass returns an instance of Enterprises_Enterprise_Traffic-class.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseTrafficClass(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseTrafficClass, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseTrafficClass(args...)
}

// GnmiPostEnterprisesEnterpriseTrafficClass adds an instance of Enterprises_Enterprise_Traffic-class.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseTrafficClass(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseTrafficClass)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Traffic-class %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseTrafficClass(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseTrafficClass to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteEnterprisesEnterpriseTrafficClassList deletes an instance of Enterprises_Enterprise_Traffic-class_List.
func (i *ServerImpl) GnmiDeleteEnterprisesEnterpriseTrafficClassList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetEnterprisesEnterpriseTrafficClassList(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetEnterprisesEnterpriseTrafficClassList returns an instance of Enterprises_Enterprise_Traffic-class_List.
func (i *ServerImpl) GnmiGetEnterprisesEnterpriseTrafficClassList(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseTrafficClassList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToEnterprisesEnterpriseTrafficClassList(args...)
}

// GnmiPostEnterprisesEnterpriseTrafficClassList adds an instance of Enterprises_Enterprise_Traffic-class_List.
func (i *ServerImpl) GnmiPostEnterprisesEnterpriseTrafficClassList(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseTrafficClassList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Traffic-class_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseTrafficClassList(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseTrafficClassList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteTarget deletes an instance of target.
func (i *ServerImpl) GnmiDeleteTarget(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetTarget(ctx, openApiPath, targetId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetTarget returns an instance of target.
func (i *ServerImpl) GnmiGetTarget(ctx context.Context,
	openApiPath string, targetId externalRef1.Target, args ...string) (*externalRef1.Target, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(targetId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToTarget(args...)
}

// GnmiPostTarget adds an instance of target.
func (i *ServerImpl) GnmiPostTarget(ctx context.Context, body []byte,
	openApiPath string, targetId externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.Target)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.target %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTarget(jsonObj, false, false, targetId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.Target to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(targetId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

//Ignoring RequestBodyConnectivityServices

//Ignoring RequestBodyConnectivityServicesConnectivityService

//Ignoring RequestBodyEnterprises

//Ignoring RequestBodyEnterprisesEnterprise

//Ignoring RequestBodyEnterprisesEnterpriseApplication

//Ignoring RequestBodyEnterprisesEnterpriseApplicationEndpoint

//Ignoring RequestBodyEnterprisesEnterpriseApplicationEndpointMbr

//Ignoring RequestBodyEnterprisesEnterpriseConnectivityService

//Ignoring RequestBodyEnterprisesEnterpriseSite

//Ignoring RequestBodyEnterprisesEnterpriseSiteDevice

//Ignoring RequestBodyEnterprisesEnterpriseSiteDeviceGroup

//Ignoring RequestBodyEnterprisesEnterpriseSiteDeviceGroupDevice

//Ignoring RequestBodyEnterprisesEnterpriseSiteDeviceGroupMbr

//Ignoring RequestBodyEnterprisesEnterpriseSiteImsiDefinition

//Ignoring RequestBodyEnterprisesEnterpriseSiteIpDomain

//Ignoring RequestBodyEnterprisesEnterpriseSiteMonitoring

//Ignoring RequestBodyEnterprisesEnterpriseSiteMonitoringEdgeDevice

//Ignoring RequestBodyEnterprisesEnterpriseSiteSimCard

//Ignoring RequestBodyEnterprisesEnterpriseSiteSlice

//Ignoring RequestBodyEnterprisesEnterpriseSiteSliceDeviceGroup

//Ignoring RequestBodyEnterprisesEnterpriseSiteSliceFilter

//Ignoring RequestBodyEnterprisesEnterpriseSiteSliceMbr

//Ignoring RequestBodyEnterprisesEnterpriseSiteSlicePriorityTrafficRule

//Ignoring RequestBodyEnterprisesEnterpriseSiteSmallCell

//Ignoring RequestBodyEnterprisesEnterpriseSiteUpf

//Ignoring RequestBodyEnterprisesEnterpriseTemplate

//Ignoring RequestBodyEnterprisesEnterpriseTemplateMbr

//Ignoring RequestBodyEnterprisesEnterpriseTrafficClass

type Translator interface {
	toAdditionalPropertyTarget(args ...string) (*externalRef1.AdditionalPropertyTarget, error)
	toAdditionalPropertyUnchanged(args ...string) (*externalRef1.AdditionalPropertyUnchanged, error)
	toConnectivityServices(args ...string) (*externalRef1.ConnectivityServices, error)
	toConnectivityServicesConnectivityService(args ...string) (*externalRef1.ConnectivityServicesConnectivityService, error)
	toConnectivityServicesConnectivityServiceList(args ...string) (*externalRef1.ConnectivityServicesConnectivityServiceList, error)
	toEnterprises(args ...string) (*externalRef1.Enterprises, error)
	toEnterprisesEnterprise(args ...string) (*externalRef1.EnterprisesEnterprise, error)
	toEnterprisesEnterpriseApplication(args ...string) (*externalRef1.EnterprisesEnterpriseApplication, error)
	toEnterprisesEnterpriseApplicationEndpoint(args ...string) (*externalRef1.EnterprisesEnterpriseApplicationEndpoint, error)
	toEnterprisesEnterpriseApplicationEndpointList(args ...string) (*externalRef1.EnterprisesEnterpriseApplicationEndpointList, error)
	toEnterprisesEnterpriseApplicationEndpointMbr(args ...string) (*externalRef1.EnterprisesEnterpriseApplicationEndpointMbr, error)
	toEnterprisesEnterpriseApplicationList(args ...string) (*externalRef1.EnterprisesEnterpriseApplicationList, error)
	toEnterprisesEnterpriseConnectivityService(args ...string) (*externalRef1.EnterprisesEnterpriseConnectivityService, error)
	toEnterprisesEnterpriseConnectivityServiceList(args ...string) (*externalRef1.EnterprisesEnterpriseConnectivityServiceList, error)
	toEnterprisesEnterpriseList(args ...string) (*externalRef1.EnterprisesEnterpriseList, error)
	toEnterprisesEnterpriseSite(args ...string) (*externalRef1.EnterprisesEnterpriseSite, error)
	toEnterprisesEnterpriseSiteDevice(args ...string) (*externalRef1.EnterprisesEnterpriseSiteDevice, error)
	toEnterprisesEnterpriseSiteDeviceGroup(args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceGroup, error)
	toEnterprisesEnterpriseSiteDeviceGroupDevice(args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceGroupDevice, error)
	toEnterprisesEnterpriseSiteDeviceGroupDeviceList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceGroupDeviceList, error)
	toEnterprisesEnterpriseSiteDeviceGroupList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceGroupList, error)
	toEnterprisesEnterpriseSiteDeviceGroupMbr(args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceGroupMbr, error)
	toEnterprisesEnterpriseSiteDeviceList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceList, error)
	toEnterprisesEnterpriseSiteImsiDefinition(args ...string) (*externalRef1.EnterprisesEnterpriseSiteImsiDefinition, error)
	toEnterprisesEnterpriseSiteIpDomain(args ...string) (*externalRef1.EnterprisesEnterpriseSiteIpDomain, error)
	toEnterprisesEnterpriseSiteIpDomainList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteIpDomainList, error)
	toEnterprisesEnterpriseSiteList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteList, error)
	toEnterprisesEnterpriseSiteMonitoring(args ...string) (*externalRef1.EnterprisesEnterpriseSiteMonitoring, error)
	toEnterprisesEnterpriseSiteMonitoringEdgeDevice(args ...string) (*externalRef1.EnterprisesEnterpriseSiteMonitoringEdgeDevice, error)
	toEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteMonitoringEdgeDeviceList, error)
	toEnterprisesEnterpriseSiteSimCard(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSimCard, error)
	toEnterprisesEnterpriseSiteSimCardList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSimCardList, error)
	toEnterprisesEnterpriseSiteSlice(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSlice, error)
	toEnterprisesEnterpriseSiteSliceDeviceGroup(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceDeviceGroup, error)
	toEnterprisesEnterpriseSiteSliceDeviceGroupList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceDeviceGroupList, error)
	toEnterprisesEnterpriseSiteSliceFilter(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceFilter, error)
	toEnterprisesEnterpriseSiteSliceFilterList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceFilterList, error)
	toEnterprisesEnterpriseSiteSliceList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceList, error)
	toEnterprisesEnterpriseSiteSliceMbr(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceMbr, error)
	toEnterprisesEnterpriseSiteSlicePriorityTrafficRule(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRule, error)
	toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr, error)
	toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleList, error)
	toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr, error)
	toEnterprisesEnterpriseSiteSmallCell(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSmallCell, error)
	toEnterprisesEnterpriseSiteSmallCellList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSmallCellList, error)
	toEnterprisesEnterpriseSiteUpf(args ...string) (*externalRef1.EnterprisesEnterpriseSiteUpf, error)
	toEnterprisesEnterpriseSiteUpfList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteUpfList, error)
	toEnterprisesEnterpriseTemplate(args ...string) (*externalRef1.EnterprisesEnterpriseTemplate, error)
	toEnterprisesEnterpriseTemplateList(args ...string) (*externalRef1.EnterprisesEnterpriseTemplateList, error)
	toEnterprisesEnterpriseTemplateMbr(args ...string) (*externalRef1.EnterprisesEnterpriseTemplateMbr, error)
	toEnterprisesEnterpriseTrafficClass(args ...string) (*externalRef1.EnterprisesEnterpriseTrafficClass, error)
	toEnterprisesEnterpriseTrafficClassList(args ...string) (*externalRef1.EnterprisesEnterpriseTrafficClassList, error)
	toTarget(args ...string) (*externalRef1.Target, error)
}

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating param-types
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating request-bodies

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating additional-properties
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating additional-properties
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// server-interface template override

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

const authorization = "Authorization"

// Implement the Server Interface for access to gNMI
var log = logging.GetLogger("model_0_0_0")

// ServerImpl -
type ServerImpl struct {
	GnmiClient  southbound.GnmiClient
	GnmiTimeout time.Duration
}

// DeleteConnectivityServices impl of gNMI access at /aether/v2.0.x/{target}/connectivity-services
func (i *ServerImpl) DeleteConnectivityServices(ctx echo.Context, target externalRef1.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteConnectivityServices(gnmiCtx, "/aether/v2.0.x/{target}/connectivity-services", target)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteConnectivityServices")
	return ctx.JSON(http.StatusOK, response)
}

// GetConnectivityServices impl of gNMI access at /aether/v2.0.x/{target}/connectivity-services
func (i *ServerImpl) GetConnectivityServices(ctx echo.Context, target externalRef1.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetConnectivityServices(gnmiCtx, "/aether/v2.0.x/{target}/connectivity-services", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetConnectivityServices")
	return ctx.JSON(http.StatusOK, response)
}

// PostConnectivityServices impl of gNMI access at /aether/v2.0.x/{target}/connectivity-services
func (i *ServerImpl) PostConnectivityServices(ctx echo.Context, target externalRef1.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostConnectivityServices(gnmiCtx, body, "/aether/v2.0.x/{target}/connectivity-services", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostConnectivityServices")
	return ctx.JSON(http.StatusOK, response)
}

// GetConnectivityServicesConnectivityServiceList impl of gNMI access at /aether/v2.0.x/{target}/connectivity-services/connectivity-service
func (i *ServerImpl) GetConnectivityServicesConnectivityServiceList(ctx echo.Context, target externalRef1.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetConnectivityServicesConnectivityServiceList(gnmiCtx, "/aether/v2.0.x/{target}/connectivity-services/connectivity-service", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetConnectivityServicesConnectivityServiceList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteConnectivityServicesConnectivityService impl of gNMI access at /aether/v2.0.x/{target}/connectivity-services/connectivity-service/{connectivity-service-id}
func (i *ServerImpl) DeleteConnectivityServicesConnectivityService(ctx echo.Context, target externalRef1.Target, connectivityServiceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteConnectivityServicesConnectivityService(gnmiCtx, "/aether/v2.0.x/{target}/connectivity-services/connectivity-service/{connectivity-service-id}", target, connectivityServiceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteConnectivityServicesConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// GetConnectivityServicesConnectivityService impl of gNMI access at /aether/v2.0.x/{target}/connectivity-services/connectivity-service/{connectivity-service-id}
func (i *ServerImpl) GetConnectivityServicesConnectivityService(ctx echo.Context, target externalRef1.Target, connectivityServiceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetConnectivityServicesConnectivityService(gnmiCtx, "/aether/v2.0.x/{target}/connectivity-services/connectivity-service/{connectivity-service-id}", target, connectivityServiceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetConnectivityServicesConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// PostConnectivityServicesConnectivityService impl of gNMI access at /aether/v2.0.x/{target}/connectivity-services/connectivity-service/{connectivity-service-id}
func (i *ServerImpl) PostConnectivityServicesConnectivityService(ctx echo.Context, target externalRef1.Target, connectivityServiceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostConnectivityServicesConnectivityService(gnmiCtx, body, "/aether/v2.0.x/{target}/connectivity-services/connectivity-service/{connectivity-service-id}", target, connectivityServiceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostConnectivityServicesConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprises impl of gNMI access at /aether/v2.0.x/{target}/enterprises
func (i *ServerImpl) DeleteEnterprises(ctx echo.Context, target externalRef1.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprises(gnmiCtx, "/aether/v2.0.x/{target}/enterprises", target)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprises")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprises impl of gNMI access at /aether/v2.0.x/{target}/enterprises
func (i *ServerImpl) GetEnterprises(ctx echo.Context, target externalRef1.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprises(gnmiCtx, "/aether/v2.0.x/{target}/enterprises", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprises")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprises impl of gNMI access at /aether/v2.0.x/{target}/enterprises
func (i *ServerImpl) PostEnterprises(ctx echo.Context, target externalRef1.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprises(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprises")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise
func (i *ServerImpl) GetEnterprisesEnterpriseList(ctx echo.Context, target externalRef1.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterprise impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}
func (i *ServerImpl) DeleteEnterprisesEnterprise(ctx echo.Context, target externalRef1.Target, targetId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterprise(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}", target, targetId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterprise impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}
func (i *ServerImpl) GetEnterprisesEnterprise(ctx echo.Context, target externalRef1.Target, targetId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterprise(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}", target, targetId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterprise impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}
func (i *ServerImpl) PostEnterprisesEnterprise(ctx echo.Context, target externalRef1.Target, targetId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterprise(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}", target, targetId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseApplicationList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application
func (i *ServerImpl) GetEnterprisesEnterpriseApplicationList(ctx echo.Context, target externalRef1.Target, targetId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseApplicationList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application", target, targetId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseApplicationList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseApplication impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseApplication(ctx echo.Context, target externalRef1.Target, targetId string, applicationId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseApplication(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}", target, targetId, applicationId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseApplication")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseApplication impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}
func (i *ServerImpl) GetEnterprisesEnterpriseApplication(ctx echo.Context, target externalRef1.Target, targetId string, applicationId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseApplication(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}", target, targetId, applicationId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseApplication")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseApplication impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}
func (i *ServerImpl) PostEnterprisesEnterpriseApplication(ctx echo.Context, target externalRef1.Target, targetId string, applicationId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseApplication(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}", target, targetId, applicationId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseApplication")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseApplicationEndpointList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint
func (i *ServerImpl) GetEnterprisesEnterpriseApplicationEndpointList(ctx echo.Context, target externalRef1.Target, targetId string, applicationId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseApplicationEndpointList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint", target, targetId, applicationId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseApplicationEndpointList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseApplicationEndpoint impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseApplicationEndpoint(ctx echo.Context, target externalRef1.Target, targetId string, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseApplicationEndpoint(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}", target, targetId, applicationId, endpointId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseApplicationEndpoint")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseApplicationEndpoint impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}
func (i *ServerImpl) GetEnterprisesEnterpriseApplicationEndpoint(ctx echo.Context, target externalRef1.Target, targetId string, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseApplicationEndpoint(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}", target, targetId, applicationId, endpointId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseApplicationEndpoint")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseApplicationEndpoint impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}
func (i *ServerImpl) PostEnterprisesEnterpriseApplicationEndpoint(ctx echo.Context, target externalRef1.Target, targetId string, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseApplicationEndpoint(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}", target, targetId, applicationId, endpointId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseApplicationEndpoint")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseApplicationEndpointMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr
func (i *ServerImpl) DeleteEnterprisesEnterpriseApplicationEndpointMbr(ctx echo.Context, target externalRef1.Target, targetId string, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseApplicationEndpointMbr(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr", target, targetId, applicationId, endpointId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseApplicationEndpointMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseApplicationEndpointMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr
func (i *ServerImpl) GetEnterprisesEnterpriseApplicationEndpointMbr(ctx echo.Context, target externalRef1.Target, targetId string, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseApplicationEndpointMbr(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr", target, targetId, applicationId, endpointId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseApplicationEndpointMbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseApplicationEndpointMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr
func (i *ServerImpl) PostEnterprisesEnterpriseApplicationEndpointMbr(ctx echo.Context, target externalRef1.Target, targetId string, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseApplicationEndpointMbr(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr", target, targetId, applicationId, endpointId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseApplicationEndpointMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseConnectivityServiceList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/connectivity-service
func (i *ServerImpl) GetEnterprisesEnterpriseConnectivityServiceList(ctx echo.Context, target externalRef1.Target, targetId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseConnectivityServiceList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/connectivity-service", target, targetId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseConnectivityServiceList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseConnectivityService impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/connectivity-service/{connectivity-service}
func (i *ServerImpl) DeleteEnterprisesEnterpriseConnectivityService(ctx echo.Context, target externalRef1.Target, targetId string, connectivityService string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseConnectivityService(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/connectivity-service/{connectivity-service}", target, targetId, connectivityService)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseConnectivityService impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/connectivity-service/{connectivity-service}
func (i *ServerImpl) GetEnterprisesEnterpriseConnectivityService(ctx echo.Context, target externalRef1.Target, targetId string, connectivityService string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseConnectivityService(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/connectivity-service/{connectivity-service}", target, targetId, connectivityService)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseConnectivityService impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/connectivity-service/{connectivity-service}
func (i *ServerImpl) PostEnterprisesEnterpriseConnectivityService(ctx echo.Context, target externalRef1.Target, targetId string, connectivityService string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseConnectivityService(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/connectivity-service/{connectivity-service}", target, targetId, connectivityService)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site
func (i *ServerImpl) GetEnterprisesEnterpriseSiteList(ctx echo.Context, target externalRef1.Target, targetId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site", target, targetId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSite impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSite(ctx echo.Context, target externalRef1.Target, targetId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseSite(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}", target, targetId, siteId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSite")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSite impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSite(ctx echo.Context, target externalRef1.Target, targetId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSite(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}", target, targetId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSite")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSite impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSite(ctx echo.Context, target externalRef1.Target, targetId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseSite(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}", target, targetId, siteId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSite")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteDeviceList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device
func (i *ServerImpl) GetEnterprisesEnterpriseSiteDeviceList(ctx echo.Context, target externalRef1.Target, targetId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteDeviceList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device", target, targetId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteDeviceList")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteDeviceGroupList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group
func (i *ServerImpl) GetEnterprisesEnterpriseSiteDeviceGroupList(ctx echo.Context, target externalRef1.Target, targetId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteDeviceGroupList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group", target, targetId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteDeviceGroupList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteDeviceGroup impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteDeviceGroup(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseSiteDeviceGroup(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}", target, targetId, siteId, deviceGroupId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteDeviceGroup impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteDeviceGroup(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteDeviceGroup(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}", target, targetId, siteId, deviceGroupId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteDeviceGroup impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteDeviceGroup(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseSiteDeviceGroup(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}", target, targetId, siteId, deviceGroupId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteDeviceGroupDeviceList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device
func (i *ServerImpl) GetEnterprisesEnterpriseSiteDeviceGroupDeviceList(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteDeviceGroupDeviceList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device", target, targetId, siteId, deviceGroupId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteDeviceGroupDeviceList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteDeviceGroupDevice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteDeviceGroupDevice(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, deviceGroupId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseSiteDeviceGroupDevice(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}", target, targetId, siteId, deviceGroupId, deviceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteDeviceGroupDevice")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteDeviceGroupDevice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteDeviceGroupDevice(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, deviceGroupId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteDeviceGroupDevice(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}", target, targetId, siteId, deviceGroupId, deviceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteDeviceGroupDevice")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteDeviceGroupDevice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteDeviceGroupDevice(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, deviceGroupId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseSiteDeviceGroupDevice(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}", target, targetId, siteId, deviceGroupId, deviceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteDeviceGroupDevice")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteDeviceGroupMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteDeviceGroupMbr(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseSiteDeviceGroupMbr(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr", target, targetId, siteId, deviceGroupId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteDeviceGroupMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteDeviceGroupMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr
func (i *ServerImpl) GetEnterprisesEnterpriseSiteDeviceGroupMbr(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteDeviceGroupMbr(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr", target, targetId, siteId, deviceGroupId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteDeviceGroupMbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteDeviceGroupMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr
func (i *ServerImpl) PostEnterprisesEnterpriseSiteDeviceGroupMbr(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseSiteDeviceGroupMbr(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr", target, targetId, siteId, deviceGroupId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteDeviceGroupMbr")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteDevice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device/{device-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteDevice(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseSiteDevice(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device/{device-id}", target, targetId, siteId, deviceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteDevice")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteDevice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device/{device-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteDevice(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteDevice(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device/{device-id}", target, targetId, siteId, deviceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteDevice")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteDevice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device/{device-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteDevice(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseSiteDevice(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device/{device-id}", target, targetId, siteId, deviceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteDevice")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteImsiDefinition impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/imsi-definition
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteImsiDefinition(ctx echo.Context, target externalRef1.Target, targetId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseSiteImsiDefinition(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/imsi-definition", target, targetId, siteId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteImsiDefinition")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteImsiDefinition impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/imsi-definition
func (i *ServerImpl) GetEnterprisesEnterpriseSiteImsiDefinition(ctx echo.Context, target externalRef1.Target, targetId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteImsiDefinition(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/imsi-definition", target, targetId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteImsiDefinition")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteImsiDefinition impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/imsi-definition
func (i *ServerImpl) PostEnterprisesEnterpriseSiteImsiDefinition(ctx echo.Context, target externalRef1.Target, targetId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseSiteImsiDefinition(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/imsi-definition", target, targetId, siteId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteImsiDefinition")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteIpDomainList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain
func (i *ServerImpl) GetEnterprisesEnterpriseSiteIpDomainList(ctx echo.Context, target externalRef1.Target, targetId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteIpDomainList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain", target, targetId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteIpDomainList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteIpDomain impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteIpDomain(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, ipDomainId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseSiteIpDomain(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}", target, targetId, siteId, ipDomainId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteIpDomain impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteIpDomain(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, ipDomainId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteIpDomain(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}", target, targetId, siteId, ipDomainId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteIpDomain impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteIpDomain(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, ipDomainId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseSiteIpDomain(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}", target, targetId, siteId, ipDomainId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteMonitoring impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteMonitoring(ctx echo.Context, target externalRef1.Target, targetId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseSiteMonitoring(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring", target, targetId, siteId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteMonitoring")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteMonitoring impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring
func (i *ServerImpl) GetEnterprisesEnterpriseSiteMonitoring(ctx echo.Context, target externalRef1.Target, targetId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteMonitoring(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring", target, targetId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteMonitoring")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteMonitoring impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring
func (i *ServerImpl) PostEnterprisesEnterpriseSiteMonitoring(ctx echo.Context, target externalRef1.Target, targetId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseSiteMonitoring(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring", target, targetId, siteId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteMonitoring")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteMonitoringEdgeDeviceList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device
func (i *ServerImpl) GetEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(ctx echo.Context, target externalRef1.Target, targetId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device", target, targetId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteMonitoringEdgeDeviceList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteMonitoringEdgeDevice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, edgeDeviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseSiteMonitoringEdgeDevice(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}", target, targetId, siteId, edgeDeviceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteMonitoringEdgeDevice")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteMonitoringEdgeDevice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, edgeDeviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteMonitoringEdgeDevice(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}", target, targetId, siteId, edgeDeviceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteMonitoringEdgeDevice")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteMonitoringEdgeDevice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, edgeDeviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseSiteMonitoringEdgeDevice(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}", target, targetId, siteId, edgeDeviceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteMonitoringEdgeDevice")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSimCardList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSimCardList(ctx echo.Context, target externalRef1.Target, targetId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteSimCardList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card", target, targetId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSimCardList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteSimCard impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card/{sim-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteSimCard(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, simId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseSiteSimCard(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card/{sim-id}", target, targetId, siteId, simId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteSimCard")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSimCard impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card/{sim-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSimCard(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, simId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteSimCard(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card/{sim-id}", target, targetId, siteId, simId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSimCard")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteSimCard impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card/{sim-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteSimCard(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, simId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseSiteSimCard(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card/{sim-id}", target, targetId, siteId, simId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteSimCard")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSliceList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSliceList(ctx echo.Context, target externalRef1.Target, targetId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteSliceList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice", target, targetId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSliceList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteSlice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteSlice(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseSiteSlice(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}", target, targetId, siteId, sliceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteSlice")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSlice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSlice(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteSlice(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}", target, targetId, siteId, sliceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSlice")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteSlice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteSlice(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseSiteSlice(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}", target, targetId, siteId, sliceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteSlice")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSliceDeviceGroupList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSliceDeviceGroupList(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteSliceDeviceGroupList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group", target, targetId, siteId, sliceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSliceDeviceGroupList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteSliceDeviceGroup impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteSliceDeviceGroup(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, sliceId string, deviceGroup string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseSiteSliceDeviceGroup(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}", target, targetId, siteId, sliceId, deviceGroup)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteSliceDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSliceDeviceGroup impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSliceDeviceGroup(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, sliceId string, deviceGroup string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteSliceDeviceGroup(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}", target, targetId, siteId, sliceId, deviceGroup)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSliceDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteSliceDeviceGroup impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteSliceDeviceGroup(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, sliceId string, deviceGroup string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseSiteSliceDeviceGroup(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}", target, targetId, siteId, sliceId, deviceGroup)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteSliceDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSliceFilterList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSliceFilterList(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteSliceFilterList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter", target, targetId, siteId, sliceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSliceFilterList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteSliceFilter impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteSliceFilter(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, sliceId string, application string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseSiteSliceFilter(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}", target, targetId, siteId, sliceId, application)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteSliceFilter")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSliceFilter impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSliceFilter(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, sliceId string, application string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteSliceFilter(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}", target, targetId, siteId, sliceId, application)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSliceFilter")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteSliceFilter impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteSliceFilter(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, sliceId string, application string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseSiteSliceFilter(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}", target, targetId, siteId, sliceId, application)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteSliceFilter")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteSliceMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteSliceMbr(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseSiteSliceMbr(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr", target, targetId, siteId, sliceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteSliceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSliceMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSliceMbr(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteSliceMbr(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr", target, targetId, siteId, sliceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSliceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteSliceMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr
func (i *ServerImpl) PostEnterprisesEnterpriseSiteSliceMbr(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseSiteSliceMbr(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr", target, targetId, siteId, sliceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteSliceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule", target, targetId, siteId, sliceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRule impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, sliceId string, priorityTrafficRuleId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRule(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}", target, targetId, siteId, sliceId, priorityTrafficRuleId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRule")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSlicePriorityTrafficRule impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, sliceId string, priorityTrafficRuleId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRule(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}", target, targetId, siteId, sliceId, priorityTrafficRuleId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSlicePriorityTrafficRule")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteSlicePriorityTrafficRule impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, sliceId string, priorityTrafficRuleId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseSiteSlicePriorityTrafficRule(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}", target, targetId, siteId, sliceId, priorityTrafficRuleId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteSlicePriorityTrafficRule")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSmallCellList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSmallCellList(ctx echo.Context, target externalRef1.Target, targetId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteSmallCellList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell", target, targetId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSmallCellList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteSmallCell impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteSmallCell(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, smallCellId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseSiteSmallCell(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}", target, targetId, siteId, smallCellId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteSmallCell")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSmallCell impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSmallCell(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, smallCellId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteSmallCell(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}", target, targetId, siteId, smallCellId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSmallCell")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteSmallCell impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteSmallCell(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, smallCellId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseSiteSmallCell(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}", target, targetId, siteId, smallCellId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteSmallCell")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteUpfList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/upf
func (i *ServerImpl) GetEnterprisesEnterpriseSiteUpfList(ctx echo.Context, target externalRef1.Target, targetId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteUpfList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/upf", target, targetId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteUpfList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteUpf impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/upf/{upf-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteUpf(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, upfId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseSiteUpf(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/upf/{upf-id}", target, targetId, siteId, upfId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteUpf")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteUpf impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/upf/{upf-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteUpf(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, upfId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseSiteUpf(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/upf/{upf-id}", target, targetId, siteId, upfId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteUpf")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteUpf impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/upf/{upf-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteUpf(ctx echo.Context, target externalRef1.Target, targetId string, siteId string, upfId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseSiteUpf(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/upf/{upf-id}", target, targetId, siteId, upfId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteUpf")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseTemplateList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template
func (i *ServerImpl) GetEnterprisesEnterpriseTemplateList(ctx echo.Context, target externalRef1.Target, targetId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseTemplateList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template", target, targetId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseTemplateList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseTemplate impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseTemplate(ctx echo.Context, target externalRef1.Target, targetId string, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseTemplate(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}", target, targetId, templateId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseTemplate impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}
func (i *ServerImpl) GetEnterprisesEnterpriseTemplate(ctx echo.Context, target externalRef1.Target, targetId string, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseTemplate(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}", target, targetId, templateId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseTemplate impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}
func (i *ServerImpl) PostEnterprisesEnterpriseTemplate(ctx echo.Context, target externalRef1.Target, targetId string, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseTemplate(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}", target, targetId, templateId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseTemplateMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}/mbr
func (i *ServerImpl) DeleteEnterprisesEnterpriseTemplateMbr(ctx echo.Context, target externalRef1.Target, targetId string, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseTemplateMbr(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}/mbr", target, targetId, templateId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseTemplateMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseTemplateMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}/mbr
func (i *ServerImpl) GetEnterprisesEnterpriseTemplateMbr(ctx echo.Context, target externalRef1.Target, targetId string, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseTemplateMbr(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}/mbr", target, targetId, templateId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseTemplateMbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseTemplateMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}/mbr
func (i *ServerImpl) PostEnterprisesEnterpriseTemplateMbr(ctx echo.Context, target externalRef1.Target, targetId string, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseTemplateMbr(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}/mbr", target, targetId, templateId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseTemplateMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseTrafficClassList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/traffic-class
func (i *ServerImpl) GetEnterprisesEnterpriseTrafficClassList(ctx echo.Context, target externalRef1.Target, targetId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseTrafficClassList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/traffic-class", target, targetId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseTrafficClassList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseTrafficClass impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/traffic-class/{traffic-class-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseTrafficClass(ctx echo.Context, target externalRef1.Target, targetId string, trafficClassId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteEnterprisesEnterpriseTrafficClass(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/traffic-class/{traffic-class-id}", target, targetId, trafficClassId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseTrafficClass impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/traffic-class/{traffic-class-id}
func (i *ServerImpl) GetEnterprisesEnterpriseTrafficClass(ctx echo.Context, target externalRef1.Target, targetId string, trafficClassId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetEnterprisesEnterpriseTrafficClass(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/traffic-class/{traffic-class-id}", target, targetId, trafficClassId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseTrafficClass impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/traffic-class/{traffic-class-id}
func (i *ServerImpl) PostEnterprisesEnterpriseTrafficClass(ctx echo.Context, target externalRef1.Target, targetId string, trafficClassId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostEnterprisesEnterpriseTrafficClass(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/traffic-class/{traffic-class-id}", target, targetId, trafficClassId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// register template override
