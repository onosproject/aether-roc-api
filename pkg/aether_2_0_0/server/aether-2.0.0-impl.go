// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"reflect"

	"github.com/labstack/echo/v4"
	externalRef0 "github.com/onosproject/aether-models/models/aether-2.0.x/v2/api"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/southbound"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	"github.com/onosproject/onos-lib-go/pkg/logging"
	"github.com/openconfig/gnmi/proto/gnmi"
)

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

//Ignoring AdditionalPropertyTarget

//Ignoring AdditionalPropertyUnchanged

// gnmiDeleteConnectivityServices deletes an instance of Connectivity-services.
func (i *ServerImpl) gnmiDeleteConnectivityServices(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetConnectivityServices(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetConnectivityServices returns an instance of Connectivity-services.
func (i *ServerImpl) gnmiGetConnectivityServices(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.ConnectivityServices, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toConnectivityServices(args...)
}

// gnmiPostConnectivityServices adds an instance of Connectivity-services.
func (i *ServerImpl) gnmiPostConnectivityServices(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.ConnectivityServices)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Connectivity-services %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiConnectivityServices(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.ConnectivityServices to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteConnectivityServicesConnectivityService deletes an instance of Connectivity-services_Connectivity-service.
func (i *ServerImpl) gnmiDeleteConnectivityServicesConnectivityService(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetConnectivityServicesConnectivityService(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetConnectivityServicesConnectivityService returns an instance of Connectivity-services_Connectivity-service.
func (i *ServerImpl) gnmiGetConnectivityServicesConnectivityService(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.ConnectivityServicesConnectivityService, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toConnectivityServicesConnectivityService(args...)
}

// gnmiPostConnectivityServicesConnectivityService adds an instance of Connectivity-services_Connectivity-service.
func (i *ServerImpl) gnmiPostConnectivityServicesConnectivityService(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.ConnectivityServicesConnectivityService)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Connectivity-services_Connectivity-service %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiConnectivityServicesConnectivityService(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.ConnectivityServicesConnectivityService to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteConnectivityServicesConnectivityServiceList deletes an instance of Connectivity-services_Connectivity-service_List.
func (i *ServerImpl) gnmiDeleteConnectivityServicesConnectivityServiceList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetConnectivityServicesConnectivityServiceList(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetConnectivityServicesConnectivityServiceList returns an instance of Connectivity-services_Connectivity-service_List.
func (i *ServerImpl) gnmiGetConnectivityServicesConnectivityServiceList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.ConnectivityServicesConnectivityServiceList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toConnectivityServicesConnectivityServiceList(args...)
}

// gnmiPostConnectivityServicesConnectivityServiceList adds an instance of Connectivity-services_Connectivity-service_List.
func (i *ServerImpl) gnmiPostConnectivityServicesConnectivityServiceList(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.ConnectivityServicesConnectivityServiceList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Connectivity-services_Connectivity-service_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiConnectivityServicesConnectivityServiceList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.ConnectivityServicesConnectivityServiceList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprises deletes an instance of Enterprises.
func (i *ServerImpl) gnmiDeleteEnterprises(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprises(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprises returns an instance of Enterprises.
func (i *ServerImpl) gnmiGetEnterprises(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.Enterprises, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprises(args...)
}

// gnmiPostEnterprises adds an instance of Enterprises.
func (i *ServerImpl) gnmiPostEnterprises(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.Enterprises)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprises(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.Enterprises to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterprise deletes an instance of Enterprises_Enterprise.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterprise(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterprise(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterprise returns an instance of Enterprises_Enterprise.
func (i *ServerImpl) gnmiGetEnterprisesEnterprise(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterprise, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterprise(args...)
}

// gnmiPostEnterprisesEnterprise adds an instance of Enterprises_Enterprise.
func (i *ServerImpl) gnmiPostEnterprisesEnterprise(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterprise)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterprise(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterprise to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseApplication deletes an instance of Enterprises_Enterprise_Application.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseApplication(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseApplication(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseApplication returns an instance of Enterprises_Enterprise_Application.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseApplication(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseApplication, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseApplication(args...)
}

// gnmiPostEnterprisesEnterpriseApplication adds an instance of Enterprises_Enterprise_Application.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseApplication(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseApplication)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Application %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseApplication(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseApplication to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseApplicationEndpoint deletes an instance of Enterprises_Enterprise_Application_Endpoint.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseApplicationEndpoint(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseApplicationEndpoint(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseApplicationEndpoint returns an instance of Enterprises_Enterprise_Application_Endpoint.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseApplicationEndpoint(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseApplicationEndpoint, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseApplicationEndpoint(args...)
}

// gnmiPostEnterprisesEnterpriseApplicationEndpoint adds an instance of Enterprises_Enterprise_Application_Endpoint.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseApplicationEndpoint(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseApplicationEndpoint)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Application_Endpoint %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseApplicationEndpoint(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseApplicationEndpoint to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseApplicationEndpointList deletes an instance of Enterprises_Enterprise_Application_Endpoint_List.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseApplicationEndpointList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseApplicationEndpointList(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseApplicationEndpointList returns an instance of Enterprises_Enterprise_Application_Endpoint_List.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseApplicationEndpointList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseApplicationEndpointList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseApplicationEndpointList(args...)
}

// gnmiPostEnterprisesEnterpriseApplicationEndpointList adds an instance of Enterprises_Enterprise_Application_Endpoint_List.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseApplicationEndpointList(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseApplicationEndpointList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Application_Endpoint_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseApplicationEndpointList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseApplicationEndpointList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseApplicationEndpointMbr deletes an instance of Enterprises_Enterprise_Application_Endpoint_Mbr.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseApplicationEndpointMbr(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseApplicationEndpointMbr(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseApplicationEndpointMbr returns an instance of Enterprises_Enterprise_Application_Endpoint_Mbr.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseApplicationEndpointMbr(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseApplicationEndpointMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseApplicationEndpointMbr(args...)
}

// gnmiPostEnterprisesEnterpriseApplicationEndpointMbr adds an instance of Enterprises_Enterprise_Application_Endpoint_Mbr.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseApplicationEndpointMbr(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseApplicationEndpointMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Application_Endpoint_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseApplicationEndpointMbr(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseApplicationEndpointMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseApplicationList deletes an instance of Enterprises_Enterprise_Application_List.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseApplicationList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseApplicationList(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseApplicationList returns an instance of Enterprises_Enterprise_Application_List.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseApplicationList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseApplicationList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseApplicationList(args...)
}

// gnmiPostEnterprisesEnterpriseApplicationList adds an instance of Enterprises_Enterprise_Application_List.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseApplicationList(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseApplicationList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Application_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseApplicationList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseApplicationList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseConnectivityService deletes an instance of Enterprises_Enterprise_Connectivity-service.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseConnectivityService(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseConnectivityService(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseConnectivityService returns an instance of Enterprises_Enterprise_Connectivity-service.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseConnectivityService(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseConnectivityService, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseConnectivityService(args...)
}

// gnmiPostEnterprisesEnterpriseConnectivityService adds an instance of Enterprises_Enterprise_Connectivity-service.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseConnectivityService(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseConnectivityService)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Connectivity-service %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseConnectivityService(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseConnectivityService to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseConnectivityServiceList deletes an instance of Enterprises_Enterprise_Connectivity-service_List.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseConnectivityServiceList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseConnectivityServiceList(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseConnectivityServiceList returns an instance of Enterprises_Enterprise_Connectivity-service_List.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseConnectivityServiceList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseConnectivityServiceList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseConnectivityServiceList(args...)
}

// gnmiPostEnterprisesEnterpriseConnectivityServiceList adds an instance of Enterprises_Enterprise_Connectivity-service_List.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseConnectivityServiceList(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseConnectivityServiceList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Connectivity-service_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseConnectivityServiceList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseConnectivityServiceList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseList deletes an instance of Enterprises_Enterprise_List.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseList(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseList returns an instance of Enterprises_Enterprise_List.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseList(args...)
}

// gnmiPostEnterprisesEnterpriseList adds an instance of Enterprises_Enterprise_List.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseList(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSite deletes an instance of Enterprises_Enterprise_Site.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSite(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSite(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSite returns an instance of Enterprises_Enterprise_Site.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSite(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSite, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSite(args...)
}

// gnmiPostEnterprisesEnterpriseSite adds an instance of Enterprises_Enterprise_Site.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSite(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSite)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSite(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSite to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteDevice deletes an instance of Enterprises_Enterprise_Site_Device.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteDevice(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteDevice(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteDevice returns an instance of Enterprises_Enterprise_Site_Device.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteDevice(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteDevice, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteDevice(args...)
}

// gnmiPostEnterprisesEnterpriseSiteDevice adds an instance of Enterprises_Enterprise_Site_Device.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteDevice(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteDevice)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Device %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteDevice(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteDevice to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteDeviceGroup deletes an instance of Enterprises_Enterprise_Site_Device-group.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteDeviceGroup(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteDeviceGroup(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteDeviceGroup returns an instance of Enterprises_Enterprise_Site_Device-group.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteDeviceGroup(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceGroup, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteDeviceGroup(args...)
}

// gnmiPostEnterprisesEnterpriseSiteDeviceGroup adds an instance of Enterprises_Enterprise_Site_Device-group.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteDeviceGroup(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteDeviceGroup)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Device-group %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteDeviceGroup(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteDeviceGroup to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteDeviceGroupDevice deletes an instance of Enterprises_Enterprise_Site_Device-group_Device.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteDeviceGroupDevice(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteDeviceGroupDevice(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteDeviceGroupDevice returns an instance of Enterprises_Enterprise_Site_Device-group_Device.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteDeviceGroupDevice(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceGroupDevice, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteDeviceGroupDevice(args...)
}

// gnmiPostEnterprisesEnterpriseSiteDeviceGroupDevice adds an instance of Enterprises_Enterprise_Site_Device-group_Device.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteDeviceGroupDevice(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteDeviceGroupDevice)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Device-group_Device %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteDeviceGroupDevice(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteDeviceGroupDevice to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteDeviceGroupDeviceList deletes an instance of Enterprises_Enterprise_Site_Device-group_Device_List.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteDeviceGroupDeviceList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteDeviceGroupDeviceList(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteDeviceGroupDeviceList returns an instance of Enterprises_Enterprise_Site_Device-group_Device_List.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteDeviceGroupDeviceList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceGroupDeviceList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteDeviceGroupDeviceList(args...)
}

// gnmiPostEnterprisesEnterpriseSiteDeviceGroupDeviceList adds an instance of Enterprises_Enterprise_Site_Device-group_Device_List.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteDeviceGroupDeviceList(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteDeviceGroupDeviceList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Device-group_Device_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteDeviceGroupDeviceList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteDeviceGroupDeviceList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteDeviceGroupList deletes an instance of Enterprises_Enterprise_Site_Device-group_List.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteDeviceGroupList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteDeviceGroupList(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteDeviceGroupList returns an instance of Enterprises_Enterprise_Site_Device-group_List.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteDeviceGroupList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceGroupList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteDeviceGroupList(args...)
}

// gnmiPostEnterprisesEnterpriseSiteDeviceGroupList adds an instance of Enterprises_Enterprise_Site_Device-group_List.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteDeviceGroupList(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteDeviceGroupList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Device-group_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteDeviceGroupList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteDeviceGroupList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteDeviceGroupMbr deletes an instance of Enterprises_Enterprise_Site_Device-group_Mbr.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteDeviceGroupMbr(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteDeviceGroupMbr(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteDeviceGroupMbr returns an instance of Enterprises_Enterprise_Site_Device-group_Mbr.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteDeviceGroupMbr(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceGroupMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteDeviceGroupMbr(args...)
}

// gnmiPostEnterprisesEnterpriseSiteDeviceGroupMbr adds an instance of Enterprises_Enterprise_Site_Device-group_Mbr.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteDeviceGroupMbr(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteDeviceGroupMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Device-group_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteDeviceGroupMbr(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteDeviceGroupMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteDeviceList deletes an instance of Enterprises_Enterprise_Site_Device_List.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteDeviceList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteDeviceList(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteDeviceList returns an instance of Enterprises_Enterprise_Site_Device_List.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteDeviceList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteDeviceList(args...)
}

// gnmiPostEnterprisesEnterpriseSiteDeviceList adds an instance of Enterprises_Enterprise_Site_Device_List.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteDeviceList(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteDeviceList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Device_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteDeviceList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteDeviceList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteImsiDefinition deletes an instance of Enterprises_Enterprise_Site_Imsi-definition.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteImsiDefinition(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteImsiDefinition(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteImsiDefinition returns an instance of Enterprises_Enterprise_Site_Imsi-definition.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteImsiDefinition(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteImsiDefinition, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteImsiDefinition(args...)
}

// gnmiPostEnterprisesEnterpriseSiteImsiDefinition adds an instance of Enterprises_Enterprise_Site_Imsi-definition.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteImsiDefinition(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteImsiDefinition)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Imsi-definition %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteImsiDefinition(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteImsiDefinition to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteIpDomain deletes an instance of Enterprises_Enterprise_Site_Ip-domain.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteIpDomain(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteIpDomain(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteIpDomain returns an instance of Enterprises_Enterprise_Site_Ip-domain.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteIpDomain(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteIpDomain, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteIpDomain(args...)
}

// gnmiPostEnterprisesEnterpriseSiteIpDomain adds an instance of Enterprises_Enterprise_Site_Ip-domain.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteIpDomain(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteIpDomain)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Ip-domain %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteIpDomain(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteIpDomain to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteIpDomainList deletes an instance of Enterprises_Enterprise_Site_Ip-domain_List.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteIpDomainList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteIpDomainList(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteIpDomainList returns an instance of Enterprises_Enterprise_Site_Ip-domain_List.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteIpDomainList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteIpDomainList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteIpDomainList(args...)
}

// gnmiPostEnterprisesEnterpriseSiteIpDomainList adds an instance of Enterprises_Enterprise_Site_Ip-domain_List.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteIpDomainList(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteIpDomainList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Ip-domain_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteIpDomainList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteIpDomainList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteList deletes an instance of Enterprises_Enterprise_Site_List.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteList(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteList returns an instance of Enterprises_Enterprise_Site_List.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteList(args...)
}

// gnmiPostEnterprisesEnterpriseSiteList adds an instance of Enterprises_Enterprise_Site_List.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteList(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteMonitoring deletes an instance of Enterprises_Enterprise_Site_Monitoring.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteMonitoring(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteMonitoring(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteMonitoring returns an instance of Enterprises_Enterprise_Site_Monitoring.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteMonitoring(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteMonitoring, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteMonitoring(args...)
}

// gnmiPostEnterprisesEnterpriseSiteMonitoring adds an instance of Enterprises_Enterprise_Site_Monitoring.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteMonitoring(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteMonitoring)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Monitoring %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteMonitoring(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteMonitoring to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteMonitoringEdgeDevice deletes an instance of Enterprises_Enterprise_Site_Monitoring_Edge-device.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteMonitoringEdgeDevice returns an instance of Enterprises_Enterprise_Site_Monitoring_Edge-device.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteMonitoringEdgeDevice, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteMonitoringEdgeDevice(args...)
}

// gnmiPostEnterprisesEnterpriseSiteMonitoringEdgeDevice adds an instance of Enterprises_Enterprise_Site_Monitoring_Edge-device.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteMonitoringEdgeDevice)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Monitoring_Edge-device %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteMonitoringEdgeDevice(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteMonitoringEdgeDevice to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteMonitoringEdgeDeviceList deletes an instance of Enterprises_Enterprise_Site_Monitoring_Edge-device_List.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteMonitoringEdgeDeviceList returns an instance of Enterprises_Enterprise_Site_Monitoring_Edge-device_List.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteMonitoringEdgeDeviceList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(args...)
}

// gnmiPostEnterprisesEnterpriseSiteMonitoringEdgeDeviceList adds an instance of Enterprises_Enterprise_Site_Monitoring_Edge-device_List.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteMonitoringEdgeDeviceList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Monitoring_Edge-device_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteMonitoringEdgeDeviceList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteSimCard deletes an instance of Enterprises_Enterprise_Site_Sim-card.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteSimCard(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteSimCard(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteSimCard returns an instance of Enterprises_Enterprise_Site_Sim-card.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteSimCard(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSimCard, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteSimCard(args...)
}

// gnmiPostEnterprisesEnterpriseSiteSimCard adds an instance of Enterprises_Enterprise_Site_Sim-card.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteSimCard(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSimCard)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Sim-card %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSimCard(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSimCard to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteSimCardList deletes an instance of Enterprises_Enterprise_Site_Sim-card_List.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteSimCardList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteSimCardList(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteSimCardList returns an instance of Enterprises_Enterprise_Site_Sim-card_List.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteSimCardList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSimCardList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteSimCardList(args...)
}

// gnmiPostEnterprisesEnterpriseSiteSimCardList adds an instance of Enterprises_Enterprise_Site_Sim-card_List.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteSimCardList(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSimCardList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Sim-card_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSimCardList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSimCardList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteSlice deletes an instance of Enterprises_Enterprise_Site_Slice.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteSlice(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteSlice(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteSlice returns an instance of Enterprises_Enterprise_Site_Slice.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteSlice(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSlice, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteSlice(args...)
}

// gnmiPostEnterprisesEnterpriseSiteSlice adds an instance of Enterprises_Enterprise_Site_Slice.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteSlice(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSlice)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSlice(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSlice to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteSliceDeviceGroup deletes an instance of Enterprises_Enterprise_Site_Slice_Device-group.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteSliceDeviceGroup(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteSliceDeviceGroup(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteSliceDeviceGroup returns an instance of Enterprises_Enterprise_Site_Slice_Device-group.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteSliceDeviceGroup(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceDeviceGroup, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteSliceDeviceGroup(args...)
}

// gnmiPostEnterprisesEnterpriseSiteSliceDeviceGroup adds an instance of Enterprises_Enterprise_Site_Slice_Device-group.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteSliceDeviceGroup(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSliceDeviceGroup)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice_Device-group %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSliceDeviceGroup(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSliceDeviceGroup to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteSliceDeviceGroupList deletes an instance of Enterprises_Enterprise_Site_Slice_Device-group_List.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteSliceDeviceGroupList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteSliceDeviceGroupList(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteSliceDeviceGroupList returns an instance of Enterprises_Enterprise_Site_Slice_Device-group_List.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteSliceDeviceGroupList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceDeviceGroupList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteSliceDeviceGroupList(args...)
}

// gnmiPostEnterprisesEnterpriseSiteSliceDeviceGroupList adds an instance of Enterprises_Enterprise_Site_Slice_Device-group_List.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteSliceDeviceGroupList(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSliceDeviceGroupList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice_Device-group_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSliceDeviceGroupList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSliceDeviceGroupList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteSliceFilter deletes an instance of Enterprises_Enterprise_Site_Slice_Filter.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteSliceFilter(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteSliceFilter(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteSliceFilter returns an instance of Enterprises_Enterprise_Site_Slice_Filter.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteSliceFilter(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceFilter, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteSliceFilter(args...)
}

// gnmiPostEnterprisesEnterpriseSiteSliceFilter adds an instance of Enterprises_Enterprise_Site_Slice_Filter.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteSliceFilter(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSliceFilter)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice_Filter %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSliceFilter(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSliceFilter to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteSliceFilterList deletes an instance of Enterprises_Enterprise_Site_Slice_Filter_List.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteSliceFilterList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteSliceFilterList(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteSliceFilterList returns an instance of Enterprises_Enterprise_Site_Slice_Filter_List.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteSliceFilterList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceFilterList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteSliceFilterList(args...)
}

// gnmiPostEnterprisesEnterpriseSiteSliceFilterList adds an instance of Enterprises_Enterprise_Site_Slice_Filter_List.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteSliceFilterList(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSliceFilterList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice_Filter_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSliceFilterList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSliceFilterList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteSliceList deletes an instance of Enterprises_Enterprise_Site_Slice_List.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteSliceList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteSliceList(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteSliceList returns an instance of Enterprises_Enterprise_Site_Slice_List.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteSliceList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteSliceList(args...)
}

// gnmiPostEnterprisesEnterpriseSiteSliceList adds an instance of Enterprises_Enterprise_Site_Slice_List.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteSliceList(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSliceList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSliceList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSliceList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteSliceMbr deletes an instance of Enterprises_Enterprise_Site_Slice_Mbr.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteSliceMbr(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteSliceMbr(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteSliceMbr returns an instance of Enterprises_Enterprise_Site_Slice_Mbr.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteSliceMbr(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteSliceMbr(args...)
}

// gnmiPostEnterprisesEnterpriseSiteSliceMbr adds an instance of Enterprises_Enterprise_Site_Slice_Mbr.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteSliceMbr(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSliceMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSliceMbr(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSliceMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRule deletes an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRule returns an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRule, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteSlicePriorityTrafficRule(args...)
}

// gnmiPostEnterprisesEnterpriseSiteSlicePriorityTrafficRule adds an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRule)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice_Priority-traffic-rule %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSlicePriorityTrafficRule(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRule to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr deletes an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_Gbr.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr returns an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_Gbr.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(args...)
}

// gnmiPostEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr adds an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_Gbr.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_Gbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList deletes an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_List.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList returns an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_List.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(args...)
}

// gnmiPostEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList adds an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_List.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr deletes an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_Mbr.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr returns an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_Mbr.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(args...)
}

// gnmiPostEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr adds an instance of Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_Mbr.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Slice_Priority-traffic-rule_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteSmallCell deletes an instance of Enterprises_Enterprise_Site_Small-cell.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteSmallCell(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteSmallCell(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteSmallCell returns an instance of Enterprises_Enterprise_Site_Small-cell.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteSmallCell(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSmallCell, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteSmallCell(args...)
}

// gnmiPostEnterprisesEnterpriseSiteSmallCell adds an instance of Enterprises_Enterprise_Site_Small-cell.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteSmallCell(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSmallCell)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Small-cell %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSmallCell(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSmallCell to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteSmallCellList deletes an instance of Enterprises_Enterprise_Site_Small-cell_List.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteSmallCellList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteSmallCellList(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteSmallCellList returns an instance of Enterprises_Enterprise_Site_Small-cell_List.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteSmallCellList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteSmallCellList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteSmallCellList(args...)
}

// gnmiPostEnterprisesEnterpriseSiteSmallCellList adds an instance of Enterprises_Enterprise_Site_Small-cell_List.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteSmallCellList(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteSmallCellList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Small-cell_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteSmallCellList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteSmallCellList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteUpf deletes an instance of Enterprises_Enterprise_Site_Upf.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteUpf(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteUpf(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteUpf returns an instance of Enterprises_Enterprise_Site_Upf.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteUpf(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteUpf, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteUpf(args...)
}

// gnmiPostEnterprisesEnterpriseSiteUpf adds an instance of Enterprises_Enterprise_Site_Upf.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteUpf(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteUpf)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Upf %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteUpf(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteUpf to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseSiteUpfList deletes an instance of Enterprises_Enterprise_Site_Upf_List.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseSiteUpfList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseSiteUpfList(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseSiteUpfList returns an instance of Enterprises_Enterprise_Site_Upf_List.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseSiteUpfList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseSiteUpfList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseSiteUpfList(args...)
}

// gnmiPostEnterprisesEnterpriseSiteUpfList adds an instance of Enterprises_Enterprise_Site_Upf_List.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseSiteUpfList(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseSiteUpfList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Site_Upf_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseSiteUpfList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseSiteUpfList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseTemplate deletes an instance of Enterprises_Enterprise_Template.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseTemplate(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseTemplate(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseTemplate returns an instance of Enterprises_Enterprise_Template.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseTemplate(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseTemplate, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseTemplate(args...)
}

// gnmiPostEnterprisesEnterpriseTemplate adds an instance of Enterprises_Enterprise_Template.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseTemplate(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseTemplate)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Template %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseTemplate(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseTemplate to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseTemplateList deletes an instance of Enterprises_Enterprise_Template_List.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseTemplateList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseTemplateList(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseTemplateList returns an instance of Enterprises_Enterprise_Template_List.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseTemplateList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseTemplateList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseTemplateList(args...)
}

// gnmiPostEnterprisesEnterpriseTemplateList adds an instance of Enterprises_Enterprise_Template_List.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseTemplateList(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseTemplateList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Template_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseTemplateList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseTemplateList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseTemplateMbr deletes an instance of Enterprises_Enterprise_Template_Mbr.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseTemplateMbr(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseTemplateMbr(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseTemplateMbr returns an instance of Enterprises_Enterprise_Template_Mbr.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseTemplateMbr(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseTemplateMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseTemplateMbr(args...)
}

// gnmiPostEnterprisesEnterpriseTemplateMbr adds an instance of Enterprises_Enterprise_Template_Mbr.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseTemplateMbr(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseTemplateMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Template_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseTemplateMbr(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseTemplateMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseTrafficClass deletes an instance of Enterprises_Enterprise_Traffic-class.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseTrafficClass(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseTrafficClass(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseTrafficClass returns an instance of Enterprises_Enterprise_Traffic-class.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseTrafficClass(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseTrafficClass, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseTrafficClass(args...)
}

// gnmiPostEnterprisesEnterpriseTrafficClass adds an instance of Enterprises_Enterprise_Traffic-class.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseTrafficClass(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseTrafficClass)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Traffic-class %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseTrafficClass(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseTrafficClass to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprisesEnterpriseTrafficClassList deletes an instance of Enterprises_Enterprise_Traffic-class_List.
func (i *ServerImpl) gnmiDeleteEnterprisesEnterpriseTrafficClassList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetEnterprisesEnterpriseTrafficClassList(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprisesEnterpriseTrafficClassList returns an instance of Enterprises_Enterprise_Traffic-class_List.
func (i *ServerImpl) gnmiGetEnterprisesEnterpriseTrafficClassList(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.EnterprisesEnterpriseTrafficClassList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprisesEnterpriseTrafficClassList(args...)
}

// gnmiPostEnterprisesEnterpriseTrafficClassList adds an instance of Enterprises_Enterprise_Traffic-class_List.
func (i *ServerImpl) gnmiPostEnterprisesEnterpriseTrafficClassList(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef1.EnterprisesEnterpriseTrafficClassList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Enterprises_Enterprise_Traffic-class_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprisesEnterpriseTrafficClassList(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.EnterprisesEnterpriseTrafficClassList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteTarget deletes an instance of target.
func (i *ServerImpl) gnmiDeleteTarget(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetTarget(ctx, openApiPath, target, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetTarget returns an instance of target.
func (i *ServerImpl) gnmiGetTarget(ctx context.Context,
	openApiPath string, target externalRef1.Target, args ...string) (*externalRef1.Target, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toTarget(args...)
}

// gnmiPostTarget adds an instance of target.
func (i *ServerImpl) gnmiPostTarget(ctx context.Context, body []byte,
	openApiPath string, target externalRef1.Target, args ...string) (*string, error) {

	return nil, fmt.Errorf("Not implemented")

}

//Ignoring RequestBodyConnectivityServices

//Ignoring RequestBodyConnectivityServicesConnectivityService

//Ignoring RequestBodyEnterprises

//Ignoring RequestBodyEnterprisesEnterprise

//Ignoring RequestBodyEnterprisesEnterpriseApplication

//Ignoring RequestBodyEnterprisesEnterpriseApplicationEndpoint

//Ignoring RequestBodyEnterprisesEnterpriseApplicationEndpointMbr

//Ignoring RequestBodyEnterprisesEnterpriseConnectivityService

//Ignoring RequestBodyEnterprisesEnterpriseSite

//Ignoring RequestBodyEnterprisesEnterpriseSiteDevice

//Ignoring RequestBodyEnterprisesEnterpriseSiteDeviceGroup

//Ignoring RequestBodyEnterprisesEnterpriseSiteDeviceGroupDevice

//Ignoring RequestBodyEnterprisesEnterpriseSiteDeviceGroupMbr

//Ignoring RequestBodyEnterprisesEnterpriseSiteImsiDefinition

//Ignoring RequestBodyEnterprisesEnterpriseSiteIpDomain

//Ignoring RequestBodyEnterprisesEnterpriseSiteMonitoring

//Ignoring RequestBodyEnterprisesEnterpriseSiteMonitoringEdgeDevice

//Ignoring RequestBodyEnterprisesEnterpriseSiteSimCard

//Ignoring RequestBodyEnterprisesEnterpriseSiteSlice

//Ignoring RequestBodyEnterprisesEnterpriseSiteSliceDeviceGroup

//Ignoring RequestBodyEnterprisesEnterpriseSiteSliceFilter

//Ignoring RequestBodyEnterprisesEnterpriseSiteSliceMbr

//Ignoring RequestBodyEnterprisesEnterpriseSiteSlicePriorityTrafficRule

//Ignoring RequestBodyEnterprisesEnterpriseSiteSmallCell

//Ignoring RequestBodyEnterprisesEnterpriseSiteUpf

//Ignoring RequestBodyEnterprisesEnterpriseTemplate

//Ignoring RequestBodyEnterprisesEnterpriseTemplateMbr

//Ignoring RequestBodyEnterprisesEnterpriseTrafficClass

type Translator interface {
	toAdditionalPropertyTarget(args ...string) (*externalRef1.AdditionalPropertyTarget, error)
	toAdditionalPropertyUnchanged(args ...string) (*externalRef1.AdditionalPropertyUnchanged, error)
	toConnectivityServices(args ...string) (*externalRef1.ConnectivityServices, error)
	toConnectivityServicesConnectivityService(args ...string) (*externalRef1.ConnectivityServicesConnectivityService, error)
	toConnectivityServicesConnectivityServiceList(args ...string) (*externalRef1.ConnectivityServicesConnectivityServiceList, error)
	toEnterprises(args ...string) (*externalRef1.Enterprises, error)
	toEnterprisesEnterprise(args ...string) (*externalRef1.EnterprisesEnterprise, error)
	toEnterprisesEnterpriseApplication(args ...string) (*externalRef1.EnterprisesEnterpriseApplication, error)
	toEnterprisesEnterpriseApplicationEndpoint(args ...string) (*externalRef1.EnterprisesEnterpriseApplicationEndpoint, error)
	toEnterprisesEnterpriseApplicationEndpointList(args ...string) (*externalRef1.EnterprisesEnterpriseApplicationEndpointList, error)
	toEnterprisesEnterpriseApplicationEndpointMbr(args ...string) (*externalRef1.EnterprisesEnterpriseApplicationEndpointMbr, error)
	toEnterprisesEnterpriseApplicationList(args ...string) (*externalRef1.EnterprisesEnterpriseApplicationList, error)
	toEnterprisesEnterpriseConnectivityService(args ...string) (*externalRef1.EnterprisesEnterpriseConnectivityService, error)
	toEnterprisesEnterpriseConnectivityServiceList(args ...string) (*externalRef1.EnterprisesEnterpriseConnectivityServiceList, error)
	toEnterprisesEnterpriseList(args ...string) (*externalRef1.EnterprisesEnterpriseList, error)
	toEnterprisesEnterpriseSite(args ...string) (*externalRef1.EnterprisesEnterpriseSite, error)
	toEnterprisesEnterpriseSiteDevice(args ...string) (*externalRef1.EnterprisesEnterpriseSiteDevice, error)
	toEnterprisesEnterpriseSiteDeviceGroup(args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceGroup, error)
	toEnterprisesEnterpriseSiteDeviceGroupDevice(args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceGroupDevice, error)
	toEnterprisesEnterpriseSiteDeviceGroupDeviceList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceGroupDeviceList, error)
	toEnterprisesEnterpriseSiteDeviceGroupList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceGroupList, error)
	toEnterprisesEnterpriseSiteDeviceGroupMbr(args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceGroupMbr, error)
	toEnterprisesEnterpriseSiteDeviceList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteDeviceList, error)
	toEnterprisesEnterpriseSiteImsiDefinition(args ...string) (*externalRef1.EnterprisesEnterpriseSiteImsiDefinition, error)
	toEnterprisesEnterpriseSiteIpDomain(args ...string) (*externalRef1.EnterprisesEnterpriseSiteIpDomain, error)
	toEnterprisesEnterpriseSiteIpDomainList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteIpDomainList, error)
	toEnterprisesEnterpriseSiteList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteList, error)
	toEnterprisesEnterpriseSiteMonitoring(args ...string) (*externalRef1.EnterprisesEnterpriseSiteMonitoring, error)
	toEnterprisesEnterpriseSiteMonitoringEdgeDevice(args ...string) (*externalRef1.EnterprisesEnterpriseSiteMonitoringEdgeDevice, error)
	toEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteMonitoringEdgeDeviceList, error)
	toEnterprisesEnterpriseSiteSimCard(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSimCard, error)
	toEnterprisesEnterpriseSiteSimCardList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSimCardList, error)
	toEnterprisesEnterpriseSiteSlice(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSlice, error)
	toEnterprisesEnterpriseSiteSliceDeviceGroup(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceDeviceGroup, error)
	toEnterprisesEnterpriseSiteSliceDeviceGroupList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceDeviceGroupList, error)
	toEnterprisesEnterpriseSiteSliceFilter(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceFilter, error)
	toEnterprisesEnterpriseSiteSliceFilterList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceFilterList, error)
	toEnterprisesEnterpriseSiteSliceList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceList, error)
	toEnterprisesEnterpriseSiteSliceMbr(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSliceMbr, error)
	toEnterprisesEnterpriseSiteSlicePriorityTrafficRule(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRule, error)
	toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr, error)
	toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleList, error)
	toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr, error)
	toEnterprisesEnterpriseSiteSmallCell(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSmallCell, error)
	toEnterprisesEnterpriseSiteSmallCellList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteSmallCellList, error)
	toEnterprisesEnterpriseSiteUpf(args ...string) (*externalRef1.EnterprisesEnterpriseSiteUpf, error)
	toEnterprisesEnterpriseSiteUpfList(args ...string) (*externalRef1.EnterprisesEnterpriseSiteUpfList, error)
	toEnterprisesEnterpriseTemplate(args ...string) (*externalRef1.EnterprisesEnterpriseTemplate, error)
	toEnterprisesEnterpriseTemplateList(args ...string) (*externalRef1.EnterprisesEnterpriseTemplateList, error)
	toEnterprisesEnterpriseTemplateMbr(args ...string) (*externalRef1.EnterprisesEnterpriseTemplateMbr, error)
	toEnterprisesEnterpriseTrafficClass(args ...string) (*externalRef1.EnterprisesEnterpriseTrafficClass, error)
	toEnterprisesEnterpriseTrafficClassList(args ...string) (*externalRef1.EnterprisesEnterpriseTrafficClassList, error)
	toTarget(args ...string) (*externalRef1.Target, error)
}

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating param-types
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating request-bodies

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating additional-properties
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating additional-properties
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// server-interface template override

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

const authorization = "Authorization"

// Implement the Server Interface for access to gNMI
var log = logging.GetLogger("model_0_0_0")

// ServerImpl -
type ServerImpl struct {
	GnmiClient  southbound.GnmiClient
	GnmiTimeout time.Duration
}

// DeleteConnectivityServices impl of gNMI access at /aether/v2.0.x/{target}/connectivity-services
func (i *ServerImpl) DeleteConnectivityServices(ctx echo.Context, target externalRef1.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteConnectivityServices(gnmiCtx, "/aether/v2.0.x/{target}/connectivity-services", target)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteConnectivityServices")
	return ctx.JSON(http.StatusOK, response)
}

// GetConnectivityServices impl of gNMI access at /aether/v2.0.x/{target}/connectivity-services
func (i *ServerImpl) GetConnectivityServices(ctx echo.Context, target externalRef1.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetConnectivityServices(gnmiCtx, "/aether/v2.0.x/{target}/connectivity-services", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetConnectivityServices")
	return ctx.JSON(http.StatusOK, response)
}

// PostConnectivityServices impl of gNMI access at /aether/v2.0.x/{target}/connectivity-services
func (i *ServerImpl) PostConnectivityServices(ctx echo.Context, target externalRef1.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostConnectivityServices(gnmiCtx, body, "/aether/v2.0.x/{target}/connectivity-services", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostConnectivityServices")
	return ctx.JSON(http.StatusOK, response)
}

// GetConnectivityServicesConnectivityServiceList impl of gNMI access at /aether/v2.0.x/{target}/connectivity-services/connectivity-service
func (i *ServerImpl) GetConnectivityServicesConnectivityServiceList(ctx echo.Context, target externalRef1.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetConnectivityServicesConnectivityServiceList(gnmiCtx, "/aether/v2.0.x/{target}/connectivity-services/connectivity-service", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetConnectivityServicesConnectivityServiceList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteConnectivityServicesConnectivityService impl of gNMI access at /aether/v2.0.x/{target}/connectivity-services/connectivity-service/{connectivity-service-id}
func (i *ServerImpl) DeleteConnectivityServicesConnectivityService(ctx echo.Context, target externalRef1.Target, connectivityServiceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteConnectivityServicesConnectivityService(gnmiCtx, "/aether/v2.0.x/{target}/connectivity-services/connectivity-service/{connectivity-service-id}", target, connectivityServiceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteConnectivityServicesConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// GetConnectivityServicesConnectivityService impl of gNMI access at /aether/v2.0.x/{target}/connectivity-services/connectivity-service/{connectivity-service-id}
func (i *ServerImpl) GetConnectivityServicesConnectivityService(ctx echo.Context, target externalRef1.Target, connectivityServiceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetConnectivityServicesConnectivityService(gnmiCtx, "/aether/v2.0.x/{target}/connectivity-services/connectivity-service/{connectivity-service-id}", target, connectivityServiceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetConnectivityServicesConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// PostConnectivityServicesConnectivityService impl of gNMI access at /aether/v2.0.x/{target}/connectivity-services/connectivity-service/{connectivity-service-id}
func (i *ServerImpl) PostConnectivityServicesConnectivityService(ctx echo.Context, target externalRef1.Target, connectivityServiceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostConnectivityServicesConnectivityService(gnmiCtx, body, "/aether/v2.0.x/{target}/connectivity-services/connectivity-service/{connectivity-service-id}", target, connectivityServiceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostConnectivityServicesConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprises impl of gNMI access at /aether/v2.0.x/{target}/enterprises
func (i *ServerImpl) DeleteEnterprises(ctx echo.Context, target externalRef1.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprises(gnmiCtx, "/aether/v2.0.x/{target}/enterprises", target)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprises")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprises impl of gNMI access at /aether/v2.0.x/{target}/enterprises
func (i *ServerImpl) GetEnterprises(ctx echo.Context, target externalRef1.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprises(gnmiCtx, "/aether/v2.0.x/{target}/enterprises", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprises")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprises impl of gNMI access at /aether/v2.0.x/{target}/enterprises
func (i *ServerImpl) PostEnterprises(ctx echo.Context, target externalRef1.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprises(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprises")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise
func (i *ServerImpl) GetEnterprisesEnterpriseList(ctx echo.Context, target externalRef1.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterprise impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}
func (i *ServerImpl) DeleteEnterprisesEnterprise(ctx echo.Context, target externalRef1.Target, enterpriseId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterprise(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}", target, enterpriseId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterprise impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}
func (i *ServerImpl) GetEnterprisesEnterprise(ctx echo.Context, target externalRef1.Target, enterpriseId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterprise(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}", target, enterpriseId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterprise impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}
func (i *ServerImpl) PostEnterprisesEnterprise(ctx echo.Context, target externalRef1.Target, enterpriseId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterprise(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}", target, enterpriseId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseApplicationList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application
func (i *ServerImpl) GetEnterprisesEnterpriseApplicationList(ctx echo.Context, target externalRef1.Target, enterpriseId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseApplicationList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application", target, enterpriseId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseApplicationList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseApplication impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseApplication(ctx echo.Context, target externalRef1.Target, enterpriseId string, applicationId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseApplication(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}", target, enterpriseId, applicationId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseApplication")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseApplication impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}
func (i *ServerImpl) GetEnterprisesEnterpriseApplication(ctx echo.Context, target externalRef1.Target, enterpriseId string, applicationId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseApplication(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}", target, enterpriseId, applicationId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseApplication")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseApplication impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}
func (i *ServerImpl) PostEnterprisesEnterpriseApplication(ctx echo.Context, target externalRef1.Target, enterpriseId string, applicationId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseApplication(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}", target, enterpriseId, applicationId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseApplication")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseApplicationEndpointList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint
func (i *ServerImpl) GetEnterprisesEnterpriseApplicationEndpointList(ctx echo.Context, target externalRef1.Target, enterpriseId string, applicationId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseApplicationEndpointList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint", target, enterpriseId, applicationId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseApplicationEndpointList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseApplicationEndpoint impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseApplicationEndpoint(ctx echo.Context, target externalRef1.Target, enterpriseId string, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseApplicationEndpoint(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}", target, enterpriseId, applicationId, endpointId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseApplicationEndpoint")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseApplicationEndpoint impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}
func (i *ServerImpl) GetEnterprisesEnterpriseApplicationEndpoint(ctx echo.Context, target externalRef1.Target, enterpriseId string, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseApplicationEndpoint(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}", target, enterpriseId, applicationId, endpointId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseApplicationEndpoint")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseApplicationEndpoint impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}
func (i *ServerImpl) PostEnterprisesEnterpriseApplicationEndpoint(ctx echo.Context, target externalRef1.Target, enterpriseId string, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseApplicationEndpoint(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}", target, enterpriseId, applicationId, endpointId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseApplicationEndpoint")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseApplicationEndpointMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr
func (i *ServerImpl) DeleteEnterprisesEnterpriseApplicationEndpointMbr(ctx echo.Context, target externalRef1.Target, enterpriseId string, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseApplicationEndpointMbr(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr", target, enterpriseId, applicationId, endpointId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseApplicationEndpointMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseApplicationEndpointMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr
func (i *ServerImpl) GetEnterprisesEnterpriseApplicationEndpointMbr(ctx echo.Context, target externalRef1.Target, enterpriseId string, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseApplicationEndpointMbr(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr", target, enterpriseId, applicationId, endpointId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseApplicationEndpointMbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseApplicationEndpointMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr
func (i *ServerImpl) PostEnterprisesEnterpriseApplicationEndpointMbr(ctx echo.Context, target externalRef1.Target, enterpriseId string, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseApplicationEndpointMbr(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr", target, enterpriseId, applicationId, endpointId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseApplicationEndpointMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseConnectivityServiceList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/connectivity-service
func (i *ServerImpl) GetEnterprisesEnterpriseConnectivityServiceList(ctx echo.Context, target externalRef1.Target, enterpriseId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseConnectivityServiceList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/connectivity-service", target, enterpriseId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseConnectivityServiceList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseConnectivityService impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/connectivity-service/{connectivity-service}
func (i *ServerImpl) DeleteEnterprisesEnterpriseConnectivityService(ctx echo.Context, target externalRef1.Target, enterpriseId string, connectivityService string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseConnectivityService(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/connectivity-service/{connectivity-service}", target, enterpriseId, connectivityService)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseConnectivityService impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/connectivity-service/{connectivity-service}
func (i *ServerImpl) GetEnterprisesEnterpriseConnectivityService(ctx echo.Context, target externalRef1.Target, enterpriseId string, connectivityService string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseConnectivityService(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/connectivity-service/{connectivity-service}", target, enterpriseId, connectivityService)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseConnectivityService impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/connectivity-service/{connectivity-service}
func (i *ServerImpl) PostEnterprisesEnterpriseConnectivityService(ctx echo.Context, target externalRef1.Target, enterpriseId string, connectivityService string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseConnectivityService(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/connectivity-service/{connectivity-service}", target, enterpriseId, connectivityService)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site
func (i *ServerImpl) GetEnterprisesEnterpriseSiteList(ctx echo.Context, target externalRef1.Target, enterpriseId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site", target, enterpriseId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSite impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSite(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseSite(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}", target, enterpriseId, siteId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSite")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSite impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSite(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSite(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}", target, enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSite")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSite impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSite(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseSite(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}", target, enterpriseId, siteId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSite")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteDeviceList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device
func (i *ServerImpl) GetEnterprisesEnterpriseSiteDeviceList(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteDeviceList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device", target, enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteDeviceList")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteDeviceGroupList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group
func (i *ServerImpl) GetEnterprisesEnterpriseSiteDeviceGroupList(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteDeviceGroupList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group", target, enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteDeviceGroupList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteDeviceGroup impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteDeviceGroup(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseSiteDeviceGroup(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}", target, enterpriseId, siteId, deviceGroupId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteDeviceGroup impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteDeviceGroup(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteDeviceGroup(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}", target, enterpriseId, siteId, deviceGroupId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteDeviceGroup impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteDeviceGroup(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseSiteDeviceGroup(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}", target, enterpriseId, siteId, deviceGroupId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteDeviceGroupDeviceList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device
func (i *ServerImpl) GetEnterprisesEnterpriseSiteDeviceGroupDeviceList(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteDeviceGroupDeviceList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device", target, enterpriseId, siteId, deviceGroupId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteDeviceGroupDeviceList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteDeviceGroupDevice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteDeviceGroupDevice(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, deviceGroupId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseSiteDeviceGroupDevice(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}", target, enterpriseId, siteId, deviceGroupId, deviceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteDeviceGroupDevice")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteDeviceGroupDevice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteDeviceGroupDevice(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, deviceGroupId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteDeviceGroupDevice(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}", target, enterpriseId, siteId, deviceGroupId, deviceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteDeviceGroupDevice")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteDeviceGroupDevice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteDeviceGroupDevice(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, deviceGroupId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseSiteDeviceGroupDevice(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}", target, enterpriseId, siteId, deviceGroupId, deviceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteDeviceGroupDevice")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteDeviceGroupMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteDeviceGroupMbr(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseSiteDeviceGroupMbr(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr", target, enterpriseId, siteId, deviceGroupId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteDeviceGroupMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteDeviceGroupMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr
func (i *ServerImpl) GetEnterprisesEnterpriseSiteDeviceGroupMbr(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteDeviceGroupMbr(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr", target, enterpriseId, siteId, deviceGroupId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteDeviceGroupMbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteDeviceGroupMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr
func (i *ServerImpl) PostEnterprisesEnterpriseSiteDeviceGroupMbr(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseSiteDeviceGroupMbr(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr", target, enterpriseId, siteId, deviceGroupId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteDeviceGroupMbr")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteDevice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device/{device-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteDevice(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseSiteDevice(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device/{device-id}", target, enterpriseId, siteId, deviceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteDevice")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteDevice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device/{device-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteDevice(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteDevice(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device/{device-id}", target, enterpriseId, siteId, deviceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteDevice")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteDevice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device/{device-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteDevice(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseSiteDevice(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device/{device-id}", target, enterpriseId, siteId, deviceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteDevice")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteImsiDefinition impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/imsi-definition
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteImsiDefinition(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseSiteImsiDefinition(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/imsi-definition", target, enterpriseId, siteId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteImsiDefinition")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteImsiDefinition impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/imsi-definition
func (i *ServerImpl) GetEnterprisesEnterpriseSiteImsiDefinition(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteImsiDefinition(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/imsi-definition", target, enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteImsiDefinition")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteImsiDefinition impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/imsi-definition
func (i *ServerImpl) PostEnterprisesEnterpriseSiteImsiDefinition(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseSiteImsiDefinition(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/imsi-definition", target, enterpriseId, siteId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteImsiDefinition")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteIpDomainList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain
func (i *ServerImpl) GetEnterprisesEnterpriseSiteIpDomainList(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteIpDomainList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain", target, enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteIpDomainList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteIpDomain impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteIpDomain(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, ipDomainId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseSiteIpDomain(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}", target, enterpriseId, siteId, ipDomainId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteIpDomain impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteIpDomain(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, ipDomainId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteIpDomain(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}", target, enterpriseId, siteId, ipDomainId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteIpDomain impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteIpDomain(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, ipDomainId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseSiteIpDomain(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}", target, enterpriseId, siteId, ipDomainId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteMonitoring impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteMonitoring(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseSiteMonitoring(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring", target, enterpriseId, siteId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteMonitoring")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteMonitoring impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring
func (i *ServerImpl) GetEnterprisesEnterpriseSiteMonitoring(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteMonitoring(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring", target, enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteMonitoring")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteMonitoring impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring
func (i *ServerImpl) PostEnterprisesEnterpriseSiteMonitoring(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseSiteMonitoring(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring", target, enterpriseId, siteId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteMonitoring")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteMonitoringEdgeDeviceList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device
func (i *ServerImpl) GetEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device", target, enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteMonitoringEdgeDeviceList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteMonitoringEdgeDevice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, edgeDeviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseSiteMonitoringEdgeDevice(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}", target, enterpriseId, siteId, edgeDeviceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteMonitoringEdgeDevice")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteMonitoringEdgeDevice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, edgeDeviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteMonitoringEdgeDevice(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}", target, enterpriseId, siteId, edgeDeviceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteMonitoringEdgeDevice")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteMonitoringEdgeDevice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, edgeDeviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseSiteMonitoringEdgeDevice(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}", target, enterpriseId, siteId, edgeDeviceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteMonitoringEdgeDevice")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSimCardList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSimCardList(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteSimCardList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card", target, enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSimCardList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteSimCard impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card/{sim-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteSimCard(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, simId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseSiteSimCard(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card/{sim-id}", target, enterpriseId, siteId, simId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteSimCard")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSimCard impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card/{sim-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSimCard(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, simId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteSimCard(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card/{sim-id}", target, enterpriseId, siteId, simId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSimCard")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteSimCard impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card/{sim-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteSimCard(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, simId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseSiteSimCard(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card/{sim-id}", target, enterpriseId, siteId, simId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteSimCard")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSliceList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSliceList(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteSliceList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice", target, enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSliceList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteSlice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteSlice(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseSiteSlice(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}", target, enterpriseId, siteId, sliceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteSlice")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSlice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSlice(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteSlice(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}", target, enterpriseId, siteId, sliceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSlice")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteSlice impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteSlice(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseSiteSlice(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}", target, enterpriseId, siteId, sliceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteSlice")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSliceDeviceGroupList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSliceDeviceGroupList(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteSliceDeviceGroupList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group", target, enterpriseId, siteId, sliceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSliceDeviceGroupList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteSliceDeviceGroup impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteSliceDeviceGroup(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, sliceId string, deviceGroup string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseSiteSliceDeviceGroup(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}", target, enterpriseId, siteId, sliceId, deviceGroup)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteSliceDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSliceDeviceGroup impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSliceDeviceGroup(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, sliceId string, deviceGroup string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteSliceDeviceGroup(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}", target, enterpriseId, siteId, sliceId, deviceGroup)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSliceDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteSliceDeviceGroup impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteSliceDeviceGroup(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, sliceId string, deviceGroup string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseSiteSliceDeviceGroup(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}", target, enterpriseId, siteId, sliceId, deviceGroup)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteSliceDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSliceFilterList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSliceFilterList(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteSliceFilterList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter", target, enterpriseId, siteId, sliceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSliceFilterList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteSliceFilter impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteSliceFilter(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, sliceId string, application string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseSiteSliceFilter(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}", target, enterpriseId, siteId, sliceId, application)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteSliceFilter")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSliceFilter impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSliceFilter(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, sliceId string, application string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteSliceFilter(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}", target, enterpriseId, siteId, sliceId, application)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSliceFilter")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteSliceFilter impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteSliceFilter(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, sliceId string, application string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseSiteSliceFilter(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}", target, enterpriseId, siteId, sliceId, application)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteSliceFilter")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteSliceMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteSliceMbr(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseSiteSliceMbr(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr", target, enterpriseId, siteId, sliceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteSliceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSliceMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSliceMbr(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteSliceMbr(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr", target, enterpriseId, siteId, sliceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSliceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteSliceMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr
func (i *ServerImpl) PostEnterprisesEnterpriseSiteSliceMbr(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseSiteSliceMbr(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr", target, enterpriseId, siteId, sliceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteSliceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule", target, enterpriseId, siteId, sliceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRule impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, sliceId string, priorityTrafficRuleId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRule(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}", target, enterpriseId, siteId, sliceId, priorityTrafficRuleId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRule")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSlicePriorityTrafficRule impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, sliceId string, priorityTrafficRuleId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteSlicePriorityTrafficRule(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}", target, enterpriseId, siteId, sliceId, priorityTrafficRuleId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSlicePriorityTrafficRule")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteSlicePriorityTrafficRule impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, sliceId string, priorityTrafficRuleId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseSiteSlicePriorityTrafficRule(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}", target, enterpriseId, siteId, sliceId, priorityTrafficRuleId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteSlicePriorityTrafficRule")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSmallCellList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSmallCellList(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteSmallCellList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell", target, enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSmallCellList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteSmallCell impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteSmallCell(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, smallCellId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseSiteSmallCell(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}", target, enterpriseId, siteId, smallCellId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteSmallCell")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteSmallCell impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteSmallCell(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, smallCellId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteSmallCell(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}", target, enterpriseId, siteId, smallCellId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteSmallCell")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteSmallCell impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteSmallCell(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, smallCellId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseSiteSmallCell(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}", target, enterpriseId, siteId, smallCellId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteSmallCell")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteUpfList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/upf
func (i *ServerImpl) GetEnterprisesEnterpriseSiteUpfList(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteUpfList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/upf", target, enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteUpfList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseSiteUpf impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/upf/{upf-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseSiteUpf(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, upfId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseSiteUpf(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/upf/{upf-id}", target, enterpriseId, siteId, upfId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseSiteUpf")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseSiteUpf impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/upf/{upf-id}
func (i *ServerImpl) GetEnterprisesEnterpriseSiteUpf(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, upfId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseSiteUpf(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/upf/{upf-id}", target, enterpriseId, siteId, upfId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseSiteUpf")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseSiteUpf impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/upf/{upf-id}
func (i *ServerImpl) PostEnterprisesEnterpriseSiteUpf(ctx echo.Context, target externalRef1.Target, enterpriseId string, siteId string, upfId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseSiteUpf(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/upf/{upf-id}", target, enterpriseId, siteId, upfId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseSiteUpf")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseTemplateList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template
func (i *ServerImpl) GetEnterprisesEnterpriseTemplateList(ctx echo.Context, target externalRef1.Target, enterpriseId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseTemplateList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template", target, enterpriseId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseTemplateList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseTemplate impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseTemplate(ctx echo.Context, target externalRef1.Target, enterpriseId string, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseTemplate(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}", target, enterpriseId, templateId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseTemplate impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}
func (i *ServerImpl) GetEnterprisesEnterpriseTemplate(ctx echo.Context, target externalRef1.Target, enterpriseId string, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseTemplate(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}", target, enterpriseId, templateId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseTemplate impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}
func (i *ServerImpl) PostEnterprisesEnterpriseTemplate(ctx echo.Context, target externalRef1.Target, enterpriseId string, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseTemplate(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}", target, enterpriseId, templateId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseTemplateMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}/mbr
func (i *ServerImpl) DeleteEnterprisesEnterpriseTemplateMbr(ctx echo.Context, target externalRef1.Target, enterpriseId string, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseTemplateMbr(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}/mbr", target, enterpriseId, templateId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseTemplateMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseTemplateMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}/mbr
func (i *ServerImpl) GetEnterprisesEnterpriseTemplateMbr(ctx echo.Context, target externalRef1.Target, enterpriseId string, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseTemplateMbr(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}/mbr", target, enterpriseId, templateId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseTemplateMbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseTemplateMbr impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}/mbr
func (i *ServerImpl) PostEnterprisesEnterpriseTemplateMbr(ctx echo.Context, target externalRef1.Target, enterpriseId string, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseTemplateMbr(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}/mbr", target, enterpriseId, templateId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseTemplateMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseTrafficClassList impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/traffic-class
func (i *ServerImpl) GetEnterprisesEnterpriseTrafficClassList(ctx echo.Context, target externalRef1.Target, enterpriseId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseTrafficClassList(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/traffic-class", target, enterpriseId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseTrafficClassList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprisesEnterpriseTrafficClass impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/traffic-class/{traffic-class-id}
func (i *ServerImpl) DeleteEnterprisesEnterpriseTrafficClass(ctx echo.Context, target externalRef1.Target, enterpriseId string, trafficClassId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteEnterprisesEnterpriseTrafficClass(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/traffic-class/{traffic-class-id}", target, enterpriseId, trafficClassId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteEnterprisesEnterpriseTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprisesEnterpriseTrafficClass impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/traffic-class/{traffic-class-id}
func (i *ServerImpl) GetEnterprisesEnterpriseTrafficClass(ctx echo.Context, target externalRef1.Target, enterpriseId string, trafficClassId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprisesEnterpriseTrafficClass(gnmiCtx, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/traffic-class/{traffic-class-id}", target, enterpriseId, trafficClassId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetEnterprisesEnterpriseTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprisesEnterpriseTrafficClass impl of gNMI access at /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/traffic-class/{traffic-class-id}
func (i *ServerImpl) PostEnterprisesEnterpriseTrafficClass(ctx echo.Context, target externalRef1.Target, enterpriseId string, trafficClassId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprisesEnterpriseTrafficClass(gnmiCtx, body, "/aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/traffic-class/{traffic-class-id}", target, enterpriseId, trafficClassId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostEnterprisesEnterpriseTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// register template override
