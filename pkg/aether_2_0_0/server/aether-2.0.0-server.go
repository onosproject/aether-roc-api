// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"github.com/labstack/echo/v4"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/middleware/openapi3mw"
)

// SPDX-FileCopyrightText: 2022-present Intel Corporation
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// DELETE /connectivity-services
	// (DELETE /aether/v2.0.x/{target}/connectivity-services)
	DeleteConnectivityServices(ctx echo.Context, target externalRef0.Target) error
	// GET /connectivity-services Container
	// (GET /aether/v2.0.x/{target}/connectivity-services)
	GetConnectivityServices(ctx echo.Context, target externalRef0.Target) error
	// POST /connectivity-services
	// (POST /aether/v2.0.x/{target}/connectivity-services)
	PostConnectivityServices(ctx echo.Context, target externalRef0.Target) error
	// GET /connectivity-services/connectivity-service List
	// (GET /aether/v2.0.x/{target}/connectivity-services/connectivity-service)
	GetConnectivityServicesConnectivityServiceList(ctx echo.Context, target externalRef0.Target) error
	// DELETE /connectivity-services/connectivity-service
	// (DELETE /aether/v2.0.x/{target}/connectivity-services/connectivity-service/{connectivity-service-id})
	DeleteConnectivityServicesConnectivityService(ctx echo.Context, target externalRef0.Target, connectivityServiceId string) error
	// GET /connectivity-services/connectivity-service Container
	// (GET /aether/v2.0.x/{target}/connectivity-services/connectivity-service/{connectivity-service-id})
	GetConnectivityServicesConnectivityService(ctx echo.Context, target externalRef0.Target, connectivityServiceId string) error
	// POST /connectivity-services/connectivity-service
	// (POST /aether/v2.0.x/{target}/connectivity-services/connectivity-service/{connectivity-service-id})
	PostConnectivityServicesConnectivityService(ctx echo.Context, target externalRef0.Target, connectivityServiceId string) error
	// DELETE /enterprises
	// (DELETE /aether/v2.0.x/{target}/enterprises)
	DeleteEnterprises(ctx echo.Context, target externalRef0.Target) error
	// GET /enterprises Container
	// (GET /aether/v2.0.x/{target}/enterprises)
	GetEnterprises(ctx echo.Context, target externalRef0.Target) error
	// POST /enterprises
	// (POST /aether/v2.0.x/{target}/enterprises)
	PostEnterprises(ctx echo.Context, target externalRef0.Target) error
	// GET /enterprises/enterprise List
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise)
	GetEnterprisesEnterpriseList(ctx echo.Context, target externalRef0.Target) error
	// DELETE /enterprises/enterprise
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id})
	DeleteEnterprisesEnterprise(ctx echo.Context, target externalRef0.Target, enterpriseId string) error
	// GET /enterprises/enterprise Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id})
	GetEnterprisesEnterprise(ctx echo.Context, target externalRef0.Target, enterpriseId string) error
	// POST /enterprises/enterprise
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id})
	PostEnterprisesEnterprise(ctx echo.Context, target externalRef0.Target, enterpriseId string) error
	// GET /enterprises/enterprise/{enterprise-id}/application List
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application)
	GetEnterprisesEnterpriseApplicationList(ctx echo.Context, target externalRef0.Target, enterpriseId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/application
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id})
	DeleteEnterprisesEnterpriseApplication(ctx echo.Context, target externalRef0.Target, enterpriseId string, applicationId string) error
	// GET /enterprises/enterprise/{enterprise-id}/application Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id})
	GetEnterprisesEnterpriseApplication(ctx echo.Context, target externalRef0.Target, enterpriseId string, applicationId string) error
	// POST /enterprises/enterprise/{enterprise-id}/application
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id})
	PostEnterprisesEnterpriseApplication(ctx echo.Context, target externalRef0.Target, enterpriseId string, applicationId string) error
	// GET /enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint List
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint)
	GetEnterprisesEnterpriseApplicationEndpointList(ctx echo.Context, target externalRef0.Target, enterpriseId string, applicationId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id})
	DeleteEnterprisesEnterpriseApplicationEndpoint(ctx echo.Context, target externalRef0.Target, enterpriseId string, applicationId string, endpointId string) error
	// GET /enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id})
	GetEnterprisesEnterpriseApplicationEndpoint(ctx echo.Context, target externalRef0.Target, enterpriseId string, applicationId string, endpointId string) error
	// POST /enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id})
	PostEnterprisesEnterpriseApplicationEndpoint(ctx echo.Context, target externalRef0.Target, enterpriseId string, applicationId string, endpointId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr)
	DeleteEnterprisesEnterpriseApplicationEndpointMbr(ctx echo.Context, target externalRef0.Target, enterpriseId string, applicationId string, endpointId string) error
	// GET /enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr)
	GetEnterprisesEnterpriseApplicationEndpointMbr(ctx echo.Context, target externalRef0.Target, enterpriseId string, applicationId string, endpointId string) error
	// POST /enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr)
	PostEnterprisesEnterpriseApplicationEndpointMbr(ctx echo.Context, target externalRef0.Target, enterpriseId string, applicationId string, endpointId string) error
	// GET /enterprises/enterprise/{enterprise-id}/connectivity-service List
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/connectivity-service)
	GetEnterprisesEnterpriseConnectivityServiceList(ctx echo.Context, target externalRef0.Target, enterpriseId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/connectivity-service
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/connectivity-service/{connectivity-service})
	DeleteEnterprisesEnterpriseConnectivityService(ctx echo.Context, target externalRef0.Target, enterpriseId string, connectivityService string) error
	// GET /enterprises/enterprise/{enterprise-id}/connectivity-service Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/connectivity-service/{connectivity-service})
	GetEnterprisesEnterpriseConnectivityService(ctx echo.Context, target externalRef0.Target, enterpriseId string, connectivityService string) error
	// POST /enterprises/enterprise/{enterprise-id}/connectivity-service
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/connectivity-service/{connectivity-service})
	PostEnterprisesEnterpriseConnectivityService(ctx echo.Context, target externalRef0.Target, enterpriseId string, connectivityService string) error
	// GET /enterprises/enterprise/{enterprise-id}/site List
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site)
	GetEnterprisesEnterpriseSiteList(ctx echo.Context, target externalRef0.Target, enterpriseId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/site
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id})
	DeleteEnterprisesEnterpriseSite(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id})
	GetEnterprisesEnterpriseSite(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string) error
	// POST /enterprises/enterprise/{enterprise-id}/site
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id})
	PostEnterprisesEnterpriseSite(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/device List
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device)
	GetEnterprisesEnterpriseSiteDeviceList(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group List
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group)
	GetEnterprisesEnterpriseSiteDeviceGroupList(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id})
	DeleteEnterprisesEnterpriseSiteDeviceGroup(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, deviceGroupId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id})
	GetEnterprisesEnterpriseSiteDeviceGroup(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, deviceGroupId string) error
	// POST /enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id})
	PostEnterprisesEnterpriseSiteDeviceGroup(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, deviceGroupId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device List
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device)
	GetEnterprisesEnterpriseSiteDeviceGroupDeviceList(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, deviceGroupId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id})
	DeleteEnterprisesEnterpriseSiteDeviceGroupDevice(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, deviceGroupId string, deviceId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id})
	GetEnterprisesEnterpriseSiteDeviceGroupDevice(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, deviceGroupId string, deviceId string) error
	// POST /enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id})
	PostEnterprisesEnterpriseSiteDeviceGroupDevice(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, deviceGroupId string, deviceId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr)
	DeleteEnterprisesEnterpriseSiteDeviceGroupMbr(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, deviceGroupId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr)
	GetEnterprisesEnterpriseSiteDeviceGroupMbr(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, deviceGroupId string) error
	// POST /enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr)
	PostEnterprisesEnterpriseSiteDeviceGroupMbr(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, deviceGroupId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/site/{site-id}/device
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device/{device-id})
	DeleteEnterprisesEnterpriseSiteDevice(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, deviceId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/device Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device/{device-id})
	GetEnterprisesEnterpriseSiteDevice(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, deviceId string) error
	// POST /enterprises/enterprise/{enterprise-id}/site/{site-id}/device
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/device/{device-id})
	PostEnterprisesEnterpriseSiteDevice(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, deviceId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/site/{site-id}/imsi-definition
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/imsi-definition)
	DeleteEnterprisesEnterpriseSiteImsiDefinition(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/imsi-definition Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/imsi-definition)
	GetEnterprisesEnterpriseSiteImsiDefinition(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string) error
	// POST /enterprises/enterprise/{enterprise-id}/site/{site-id}/imsi-definition
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/imsi-definition)
	PostEnterprisesEnterpriseSiteImsiDefinition(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain List
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain)
	GetEnterprisesEnterpriseSiteIpDomainList(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id})
	DeleteEnterprisesEnterpriseSiteIpDomain(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, ipDomainId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id})
	GetEnterprisesEnterpriseSiteIpDomain(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, ipDomainId string) error
	// POST /enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id})
	PostEnterprisesEnterpriseSiteIpDomain(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, ipDomainId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring)
	DeleteEnterprisesEnterpriseSiteMonitoring(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring)
	GetEnterprisesEnterpriseSiteMonitoring(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string) error
	// POST /enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring)
	PostEnterprisesEnterpriseSiteMonitoring(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device List
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device)
	GetEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id})
	DeleteEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, edgeDeviceId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id})
	GetEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, edgeDeviceId string) error
	// POST /enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id})
	PostEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, edgeDeviceId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card List
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card)
	GetEnterprisesEnterpriseSiteSimCardList(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card/{sim-id})
	DeleteEnterprisesEnterpriseSiteSimCard(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, simId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card/{sim-id})
	GetEnterprisesEnterpriseSiteSimCard(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, simId string) error
	// POST /enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/sim-card/{sim-id})
	PostEnterprisesEnterpriseSiteSimCard(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, simId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/slice List
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice)
	GetEnterprisesEnterpriseSiteSliceList(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/site/{site-id}/slice
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id})
	DeleteEnterprisesEnterpriseSiteSlice(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, sliceId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/slice Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id})
	GetEnterprisesEnterpriseSiteSlice(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, sliceId string) error
	// POST /enterprises/enterprise/{enterprise-id}/site/{site-id}/slice
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id})
	PostEnterprisesEnterpriseSiteSlice(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, sliceId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group List
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group)
	GetEnterprisesEnterpriseSiteSliceDeviceGroupList(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, sliceId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group})
	DeleteEnterprisesEnterpriseSiteSliceDeviceGroup(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, sliceId string, deviceGroup string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group})
	GetEnterprisesEnterpriseSiteSliceDeviceGroup(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, sliceId string, deviceGroup string) error
	// POST /enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group})
	PostEnterprisesEnterpriseSiteSliceDeviceGroup(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, sliceId string, deviceGroup string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter List
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter)
	GetEnterprisesEnterpriseSiteSliceFilterList(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, sliceId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application})
	DeleteEnterprisesEnterpriseSiteSliceFilter(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, sliceId string, application string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application})
	GetEnterprisesEnterpriseSiteSliceFilter(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, sliceId string, application string) error
	// POST /enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application})
	PostEnterprisesEnterpriseSiteSliceFilter(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, sliceId string, application string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr)
	DeleteEnterprisesEnterpriseSiteSliceMbr(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, sliceId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr)
	GetEnterprisesEnterpriseSiteSliceMbr(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, sliceId string) error
	// POST /enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr)
	PostEnterprisesEnterpriseSiteSliceMbr(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, sliceId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule List
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule)
	GetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, sliceId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id})
	DeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, sliceId string, priorityTrafficRuleId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id})
	GetEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, sliceId string, priorityTrafficRuleId string) error
	// POST /enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id})
	PostEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, sliceId string, priorityTrafficRuleId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell List
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell)
	GetEnterprisesEnterpriseSiteSmallCellList(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id})
	DeleteEnterprisesEnterpriseSiteSmallCell(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, smallCellId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id})
	GetEnterprisesEnterpriseSiteSmallCell(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, smallCellId string) error
	// POST /enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id})
	PostEnterprisesEnterpriseSiteSmallCell(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, smallCellId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/upf List
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/upf)
	GetEnterprisesEnterpriseSiteUpfList(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/site/{site-id}/upf
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/upf/{upf-id})
	DeleteEnterprisesEnterpriseSiteUpf(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, upfId string) error
	// GET /enterprises/enterprise/{enterprise-id}/site/{site-id}/upf Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/upf/{upf-id})
	GetEnterprisesEnterpriseSiteUpf(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, upfId string) error
	// POST /enterprises/enterprise/{enterprise-id}/site/{site-id}/upf
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/site/{site-id}/upf/{upf-id})
	PostEnterprisesEnterpriseSiteUpf(ctx echo.Context, target externalRef0.Target, enterpriseId string, siteId string, upfId string) error
	// GET /enterprises/enterprise/{enterprise-id}/template List
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template)
	GetEnterprisesEnterpriseTemplateList(ctx echo.Context, target externalRef0.Target, enterpriseId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/template
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id})
	DeleteEnterprisesEnterpriseTemplate(ctx echo.Context, target externalRef0.Target, enterpriseId string, templateId string) error
	// GET /enterprises/enterprise/{enterprise-id}/template Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id})
	GetEnterprisesEnterpriseTemplate(ctx echo.Context, target externalRef0.Target, enterpriseId string, templateId string) error
	// POST /enterprises/enterprise/{enterprise-id}/template
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id})
	PostEnterprisesEnterpriseTemplate(ctx echo.Context, target externalRef0.Target, enterpriseId string, templateId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/template/{template-id}/mbr
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}/mbr)
	DeleteEnterprisesEnterpriseTemplateMbr(ctx echo.Context, target externalRef0.Target, enterpriseId string, templateId string) error
	// GET /enterprises/enterprise/{enterprise-id}/template/{template-id}/mbr Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}/mbr)
	GetEnterprisesEnterpriseTemplateMbr(ctx echo.Context, target externalRef0.Target, enterpriseId string, templateId string) error
	// POST /enterprises/enterprise/{enterprise-id}/template/{template-id}/mbr
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/template/{template-id}/mbr)
	PostEnterprisesEnterpriseTemplateMbr(ctx echo.Context, target externalRef0.Target, enterpriseId string, templateId string) error
	// GET /enterprises/enterprise/{enterprise-id}/traffic-class List
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/traffic-class)
	GetEnterprisesEnterpriseTrafficClassList(ctx echo.Context, target externalRef0.Target, enterpriseId string) error
	// DELETE /enterprises/enterprise/{enterprise-id}/traffic-class
	// (DELETE /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/traffic-class/{traffic-class-id})
	DeleteEnterprisesEnterpriseTrafficClass(ctx echo.Context, target externalRef0.Target, enterpriseId string, trafficClassId string) error
	// GET /enterprises/enterprise/{enterprise-id}/traffic-class Container
	// (GET /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/traffic-class/{traffic-class-id})
	GetEnterprisesEnterpriseTrafficClass(ctx echo.Context, target externalRef0.Target, enterpriseId string, trafficClassId string) error
	// POST /enterprises/enterprise/{enterprise-id}/traffic-class
	// (POST /aether/v2.0.x/{target}/enterprises/enterprise/{enterprise-id}/traffic-class/{traffic-class-id})
	PostEnterprisesEnterpriseTrafficClass(ctx echo.Context, target externalRef0.Target, enterpriseId string, trafficClassId string) error
}

// SPDX-FileCopyrightText: 2022-present Intel Corporation
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// serverInterfaceWrapper converts echo contexts to parameters.
type serverInterfaceWrapper struct {
	handler ServerInterface
}

// DeleteConnectivityServices converts echo context to params.
func (w *serverInterfaceWrapper) DeleteConnectivityServices(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteConnectivityServices(ctx, target)
}

// GetConnectivityServices converts echo context to params.
func (w *serverInterfaceWrapper) GetConnectivityServices(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetConnectivityServices(ctx, target)
}

// PostConnectivityServices converts echo context to params.
func (w *serverInterfaceWrapper) PostConnectivityServices(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostConnectivityServices(ctx, target)
}

// GetConnectivityServicesConnectivityServiceList converts echo context to params.
func (w *serverInterfaceWrapper) GetConnectivityServicesConnectivityServiceList(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetConnectivityServicesConnectivityServiceList(ctx, target)
}

// DeleteConnectivityServicesConnectivityService converts echo context to params.
func (w *serverInterfaceWrapper) DeleteConnectivityServicesConnectivityService(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "connectivity-service-id" -------------
	var connectivityServiceId string
	connectivityServiceId = ctx.Param("connectivity-service-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteConnectivityServicesConnectivityService(ctx, target, connectivityServiceId)
}

// GetConnectivityServicesConnectivityService converts echo context to params.
func (w *serverInterfaceWrapper) GetConnectivityServicesConnectivityService(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "connectivity-service-id" -------------
	var connectivityServiceId string
	connectivityServiceId = ctx.Param("connectivity-service-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetConnectivityServicesConnectivityService(ctx, target, connectivityServiceId)
}

// PostConnectivityServicesConnectivityService converts echo context to params.
func (w *serverInterfaceWrapper) PostConnectivityServicesConnectivityService(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "connectivity-service-id" -------------
	var connectivityServiceId string
	connectivityServiceId = ctx.Param("connectivity-service-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostConnectivityServicesConnectivityService(ctx, target, connectivityServiceId)
}

// DeleteEnterprises converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprises(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprises(ctx, target)
}

// GetEnterprises converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprises(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprises(ctx, target)
}

// PostEnterprises converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprises(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprises(ctx, target)
}

// GetEnterprisesEnterpriseList converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseList(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseList(ctx, target)
}

// DeleteEnterprisesEnterprise converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterprise(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterprise(ctx, target, enterpriseId)
}

// GetEnterprisesEnterprise converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterprise(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterprise(ctx, target, enterpriseId)
}

// PostEnterprisesEnterprise converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterprise(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterprise(ctx, target, enterpriseId)
}

// GetEnterprisesEnterpriseApplicationList converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseApplicationList(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseApplicationList(ctx, target, enterpriseId)
}

// DeleteEnterprisesEnterpriseApplication converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseApplication(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "application-id" -------------
	var applicationId string
	applicationId = ctx.Param("application-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseApplication(ctx, target, enterpriseId, applicationId)
}

// GetEnterprisesEnterpriseApplication converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseApplication(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "application-id" -------------
	var applicationId string
	applicationId = ctx.Param("application-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseApplication(ctx, target, enterpriseId, applicationId)
}

// PostEnterprisesEnterpriseApplication converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseApplication(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "application-id" -------------
	var applicationId string
	applicationId = ctx.Param("application-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseApplication(ctx, target, enterpriseId, applicationId)
}

// GetEnterprisesEnterpriseApplicationEndpointList converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseApplicationEndpointList(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "application-id" -------------
	var applicationId string
	applicationId = ctx.Param("application-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseApplicationEndpointList(ctx, target, enterpriseId, applicationId)
}

// DeleteEnterprisesEnterpriseApplicationEndpoint converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseApplicationEndpoint(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "application-id" -------------
	var applicationId string
	applicationId = ctx.Param("application-id")
	// ------------- Path parameter "endpoint-id" -------------
	var endpointId string
	endpointId = ctx.Param("endpoint-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseApplicationEndpoint(ctx, target, enterpriseId, applicationId, endpointId)
}

// GetEnterprisesEnterpriseApplicationEndpoint converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseApplicationEndpoint(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "application-id" -------------
	var applicationId string
	applicationId = ctx.Param("application-id")
	// ------------- Path parameter "endpoint-id" -------------
	var endpointId string
	endpointId = ctx.Param("endpoint-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseApplicationEndpoint(ctx, target, enterpriseId, applicationId, endpointId)
}

// PostEnterprisesEnterpriseApplicationEndpoint converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseApplicationEndpoint(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "application-id" -------------
	var applicationId string
	applicationId = ctx.Param("application-id")
	// ------------- Path parameter "endpoint-id" -------------
	var endpointId string
	endpointId = ctx.Param("endpoint-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseApplicationEndpoint(ctx, target, enterpriseId, applicationId, endpointId)
}

// DeleteEnterprisesEnterpriseApplicationEndpointMbr converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseApplicationEndpointMbr(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "application-id" -------------
	var applicationId string
	applicationId = ctx.Param("application-id")
	// ------------- Path parameter "endpoint-id" -------------
	var endpointId string
	endpointId = ctx.Param("endpoint-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseApplicationEndpointMbr(ctx, target, enterpriseId, applicationId, endpointId)
}

// GetEnterprisesEnterpriseApplicationEndpointMbr converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseApplicationEndpointMbr(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "application-id" -------------
	var applicationId string
	applicationId = ctx.Param("application-id")
	// ------------- Path parameter "endpoint-id" -------------
	var endpointId string
	endpointId = ctx.Param("endpoint-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseApplicationEndpointMbr(ctx, target, enterpriseId, applicationId, endpointId)
}

// PostEnterprisesEnterpriseApplicationEndpointMbr converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseApplicationEndpointMbr(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "application-id" -------------
	var applicationId string
	applicationId = ctx.Param("application-id")
	// ------------- Path parameter "endpoint-id" -------------
	var endpointId string
	endpointId = ctx.Param("endpoint-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseApplicationEndpointMbr(ctx, target, enterpriseId, applicationId, endpointId)
}

// GetEnterprisesEnterpriseConnectivityServiceList converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseConnectivityServiceList(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseConnectivityServiceList(ctx, target, enterpriseId)
}

// DeleteEnterprisesEnterpriseConnectivityService converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseConnectivityService(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "connectivity-service" -------------
	var connectivityService string
	connectivityService = ctx.Param("connectivity-service")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseConnectivityService(ctx, target, enterpriseId, connectivityService)
}

// GetEnterprisesEnterpriseConnectivityService converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseConnectivityService(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "connectivity-service" -------------
	var connectivityService string
	connectivityService = ctx.Param("connectivity-service")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseConnectivityService(ctx, target, enterpriseId, connectivityService)
}

// PostEnterprisesEnterpriseConnectivityService converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseConnectivityService(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "connectivity-service" -------------
	var connectivityService string
	connectivityService = ctx.Param("connectivity-service")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseConnectivityService(ctx, target, enterpriseId, connectivityService)
}

// GetEnterprisesEnterpriseSiteList converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteList(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteList(ctx, target, enterpriseId)
}

// DeleteEnterprisesEnterpriseSite converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseSite(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseSite(ctx, target, enterpriseId, siteId)
}

// GetEnterprisesEnterpriseSite converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSite(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSite(ctx, target, enterpriseId, siteId)
}

// PostEnterprisesEnterpriseSite converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseSite(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseSite(ctx, target, enterpriseId, siteId)
}

// GetEnterprisesEnterpriseSiteDeviceList converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteDeviceList(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteDeviceList(ctx, target, enterpriseId, siteId)
}

// GetEnterprisesEnterpriseSiteDeviceGroupList converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteDeviceGroupList(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteDeviceGroupList(ctx, target, enterpriseId, siteId)
}

// DeleteEnterprisesEnterpriseSiteDeviceGroup converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseSiteDeviceGroup(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "device-group-id" -------------
	var deviceGroupId string
	deviceGroupId = ctx.Param("device-group-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseSiteDeviceGroup(ctx, target, enterpriseId, siteId, deviceGroupId)
}

// GetEnterprisesEnterpriseSiteDeviceGroup converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteDeviceGroup(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "device-group-id" -------------
	var deviceGroupId string
	deviceGroupId = ctx.Param("device-group-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteDeviceGroup(ctx, target, enterpriseId, siteId, deviceGroupId)
}

// PostEnterprisesEnterpriseSiteDeviceGroup converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseSiteDeviceGroup(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "device-group-id" -------------
	var deviceGroupId string
	deviceGroupId = ctx.Param("device-group-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseSiteDeviceGroup(ctx, target, enterpriseId, siteId, deviceGroupId)
}

// GetEnterprisesEnterpriseSiteDeviceGroupDeviceList converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteDeviceGroupDeviceList(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "device-group-id" -------------
	var deviceGroupId string
	deviceGroupId = ctx.Param("device-group-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteDeviceGroupDeviceList(ctx, target, enterpriseId, siteId, deviceGroupId)
}

// DeleteEnterprisesEnterpriseSiteDeviceGroupDevice converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseSiteDeviceGroupDevice(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "device-group-id" -------------
	var deviceGroupId string
	deviceGroupId = ctx.Param("device-group-id")
	// ------------- Path parameter "device-id" -------------
	var deviceId string
	deviceId = ctx.Param("device-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseSiteDeviceGroupDevice(ctx, target, enterpriseId, siteId, deviceGroupId, deviceId)
}

// GetEnterprisesEnterpriseSiteDeviceGroupDevice converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteDeviceGroupDevice(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "device-group-id" -------------
	var deviceGroupId string
	deviceGroupId = ctx.Param("device-group-id")
	// ------------- Path parameter "device-id" -------------
	var deviceId string
	deviceId = ctx.Param("device-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteDeviceGroupDevice(ctx, target, enterpriseId, siteId, deviceGroupId, deviceId)
}

// PostEnterprisesEnterpriseSiteDeviceGroupDevice converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseSiteDeviceGroupDevice(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "device-group-id" -------------
	var deviceGroupId string
	deviceGroupId = ctx.Param("device-group-id")
	// ------------- Path parameter "device-id" -------------
	var deviceId string
	deviceId = ctx.Param("device-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseSiteDeviceGroupDevice(ctx, target, enterpriseId, siteId, deviceGroupId, deviceId)
}

// DeleteEnterprisesEnterpriseSiteDeviceGroupMbr converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseSiteDeviceGroupMbr(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "device-group-id" -------------
	var deviceGroupId string
	deviceGroupId = ctx.Param("device-group-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseSiteDeviceGroupMbr(ctx, target, enterpriseId, siteId, deviceGroupId)
}

// GetEnterprisesEnterpriseSiteDeviceGroupMbr converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteDeviceGroupMbr(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "device-group-id" -------------
	var deviceGroupId string
	deviceGroupId = ctx.Param("device-group-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteDeviceGroupMbr(ctx, target, enterpriseId, siteId, deviceGroupId)
}

// PostEnterprisesEnterpriseSiteDeviceGroupMbr converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseSiteDeviceGroupMbr(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "device-group-id" -------------
	var deviceGroupId string
	deviceGroupId = ctx.Param("device-group-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseSiteDeviceGroupMbr(ctx, target, enterpriseId, siteId, deviceGroupId)
}

// DeleteEnterprisesEnterpriseSiteDevice converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseSiteDevice(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "device-id" -------------
	var deviceId string
	deviceId = ctx.Param("device-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseSiteDevice(ctx, target, enterpriseId, siteId, deviceId)
}

// GetEnterprisesEnterpriseSiteDevice converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteDevice(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "device-id" -------------
	var deviceId string
	deviceId = ctx.Param("device-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteDevice(ctx, target, enterpriseId, siteId, deviceId)
}

// PostEnterprisesEnterpriseSiteDevice converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseSiteDevice(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "device-id" -------------
	var deviceId string
	deviceId = ctx.Param("device-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseSiteDevice(ctx, target, enterpriseId, siteId, deviceId)
}

// DeleteEnterprisesEnterpriseSiteImsiDefinition converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseSiteImsiDefinition(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseSiteImsiDefinition(ctx, target, enterpriseId, siteId)
}

// GetEnterprisesEnterpriseSiteImsiDefinition converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteImsiDefinition(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteImsiDefinition(ctx, target, enterpriseId, siteId)
}

// PostEnterprisesEnterpriseSiteImsiDefinition converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseSiteImsiDefinition(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseSiteImsiDefinition(ctx, target, enterpriseId, siteId)
}

// GetEnterprisesEnterpriseSiteIpDomainList converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteIpDomainList(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteIpDomainList(ctx, target, enterpriseId, siteId)
}

// DeleteEnterprisesEnterpriseSiteIpDomain converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseSiteIpDomain(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "ip-domain-id" -------------
	var ipDomainId string
	ipDomainId = ctx.Param("ip-domain-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseSiteIpDomain(ctx, target, enterpriseId, siteId, ipDomainId)
}

// GetEnterprisesEnterpriseSiteIpDomain converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteIpDomain(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "ip-domain-id" -------------
	var ipDomainId string
	ipDomainId = ctx.Param("ip-domain-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteIpDomain(ctx, target, enterpriseId, siteId, ipDomainId)
}

// PostEnterprisesEnterpriseSiteIpDomain converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseSiteIpDomain(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "ip-domain-id" -------------
	var ipDomainId string
	ipDomainId = ctx.Param("ip-domain-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseSiteIpDomain(ctx, target, enterpriseId, siteId, ipDomainId)
}

// DeleteEnterprisesEnterpriseSiteMonitoring converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseSiteMonitoring(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseSiteMonitoring(ctx, target, enterpriseId, siteId)
}

// GetEnterprisesEnterpriseSiteMonitoring converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteMonitoring(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteMonitoring(ctx, target, enterpriseId, siteId)
}

// PostEnterprisesEnterpriseSiteMonitoring converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseSiteMonitoring(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseSiteMonitoring(ctx, target, enterpriseId, siteId)
}

// GetEnterprisesEnterpriseSiteMonitoringEdgeDeviceList converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(ctx, target, enterpriseId, siteId)
}

// DeleteEnterprisesEnterpriseSiteMonitoringEdgeDevice converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "edge-device-id" -------------
	var edgeDeviceId string
	edgeDeviceId = ctx.Param("edge-device-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx, target, enterpriseId, siteId, edgeDeviceId)
}

// GetEnterprisesEnterpriseSiteMonitoringEdgeDevice converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "edge-device-id" -------------
	var edgeDeviceId string
	edgeDeviceId = ctx.Param("edge-device-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx, target, enterpriseId, siteId, edgeDeviceId)
}

// PostEnterprisesEnterpriseSiteMonitoringEdgeDevice converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "edge-device-id" -------------
	var edgeDeviceId string
	edgeDeviceId = ctx.Param("edge-device-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseSiteMonitoringEdgeDevice(ctx, target, enterpriseId, siteId, edgeDeviceId)
}

// GetEnterprisesEnterpriseSiteSimCardList converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteSimCardList(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteSimCardList(ctx, target, enterpriseId, siteId)
}

// DeleteEnterprisesEnterpriseSiteSimCard converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseSiteSimCard(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "sim-id" -------------
	var simId string
	simId = ctx.Param("sim-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseSiteSimCard(ctx, target, enterpriseId, siteId, simId)
}

// GetEnterprisesEnterpriseSiteSimCard converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteSimCard(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "sim-id" -------------
	var simId string
	simId = ctx.Param("sim-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteSimCard(ctx, target, enterpriseId, siteId, simId)
}

// PostEnterprisesEnterpriseSiteSimCard converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseSiteSimCard(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "sim-id" -------------
	var simId string
	simId = ctx.Param("sim-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseSiteSimCard(ctx, target, enterpriseId, siteId, simId)
}

// GetEnterprisesEnterpriseSiteSliceList converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteSliceList(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteSliceList(ctx, target, enterpriseId, siteId)
}

// DeleteEnterprisesEnterpriseSiteSlice converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseSiteSlice(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "slice-id" -------------
	var sliceId string
	sliceId = ctx.Param("slice-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseSiteSlice(ctx, target, enterpriseId, siteId, sliceId)
}

// GetEnterprisesEnterpriseSiteSlice converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteSlice(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "slice-id" -------------
	var sliceId string
	sliceId = ctx.Param("slice-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteSlice(ctx, target, enterpriseId, siteId, sliceId)
}

// PostEnterprisesEnterpriseSiteSlice converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseSiteSlice(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "slice-id" -------------
	var sliceId string
	sliceId = ctx.Param("slice-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseSiteSlice(ctx, target, enterpriseId, siteId, sliceId)
}

// GetEnterprisesEnterpriseSiteSliceDeviceGroupList converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteSliceDeviceGroupList(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "slice-id" -------------
	var sliceId string
	sliceId = ctx.Param("slice-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteSliceDeviceGroupList(ctx, target, enterpriseId, siteId, sliceId)
}

// DeleteEnterprisesEnterpriseSiteSliceDeviceGroup converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseSiteSliceDeviceGroup(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "slice-id" -------------
	var sliceId string
	sliceId = ctx.Param("slice-id")
	// ------------- Path parameter "device-group" -------------
	var deviceGroup string
	deviceGroup = ctx.Param("device-group")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseSiteSliceDeviceGroup(ctx, target, enterpriseId, siteId, sliceId, deviceGroup)
}

// GetEnterprisesEnterpriseSiteSliceDeviceGroup converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteSliceDeviceGroup(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "slice-id" -------------
	var sliceId string
	sliceId = ctx.Param("slice-id")
	// ------------- Path parameter "device-group" -------------
	var deviceGroup string
	deviceGroup = ctx.Param("device-group")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteSliceDeviceGroup(ctx, target, enterpriseId, siteId, sliceId, deviceGroup)
}

// PostEnterprisesEnterpriseSiteSliceDeviceGroup converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseSiteSliceDeviceGroup(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "slice-id" -------------
	var sliceId string
	sliceId = ctx.Param("slice-id")
	// ------------- Path parameter "device-group" -------------
	var deviceGroup string
	deviceGroup = ctx.Param("device-group")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseSiteSliceDeviceGroup(ctx, target, enterpriseId, siteId, sliceId, deviceGroup)
}

// GetEnterprisesEnterpriseSiteSliceFilterList converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteSliceFilterList(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "slice-id" -------------
	var sliceId string
	sliceId = ctx.Param("slice-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteSliceFilterList(ctx, target, enterpriseId, siteId, sliceId)
}

// DeleteEnterprisesEnterpriseSiteSliceFilter converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseSiteSliceFilter(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "slice-id" -------------
	var sliceId string
	sliceId = ctx.Param("slice-id")
	// ------------- Path parameter "application" -------------
	var application string
	application = ctx.Param("application")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseSiteSliceFilter(ctx, target, enterpriseId, siteId, sliceId, application)
}

// GetEnterprisesEnterpriseSiteSliceFilter converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteSliceFilter(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "slice-id" -------------
	var sliceId string
	sliceId = ctx.Param("slice-id")
	// ------------- Path parameter "application" -------------
	var application string
	application = ctx.Param("application")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteSliceFilter(ctx, target, enterpriseId, siteId, sliceId, application)
}

// PostEnterprisesEnterpriseSiteSliceFilter converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseSiteSliceFilter(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "slice-id" -------------
	var sliceId string
	sliceId = ctx.Param("slice-id")
	// ------------- Path parameter "application" -------------
	var application string
	application = ctx.Param("application")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseSiteSliceFilter(ctx, target, enterpriseId, siteId, sliceId, application)
}

// DeleteEnterprisesEnterpriseSiteSliceMbr converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseSiteSliceMbr(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "slice-id" -------------
	var sliceId string
	sliceId = ctx.Param("slice-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseSiteSliceMbr(ctx, target, enterpriseId, siteId, sliceId)
}

// GetEnterprisesEnterpriseSiteSliceMbr converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteSliceMbr(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "slice-id" -------------
	var sliceId string
	sliceId = ctx.Param("slice-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteSliceMbr(ctx, target, enterpriseId, siteId, sliceId)
}

// PostEnterprisesEnterpriseSiteSliceMbr converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseSiteSliceMbr(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "slice-id" -------------
	var sliceId string
	sliceId = ctx.Param("slice-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseSiteSliceMbr(ctx, target, enterpriseId, siteId, sliceId)
}

// GetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "slice-id" -------------
	var sliceId string
	sliceId = ctx.Param("slice-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(ctx, target, enterpriseId, siteId, sliceId)
}

// DeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRule converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "slice-id" -------------
	var sliceId string
	sliceId = ctx.Param("slice-id")
	// ------------- Path parameter "priority-traffic-rule-id" -------------
	var priorityTrafficRuleId string
	priorityTrafficRuleId = ctx.Param("priority-traffic-rule-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx, target, enterpriseId, siteId, sliceId, priorityTrafficRuleId)
}

// GetEnterprisesEnterpriseSiteSlicePriorityTrafficRule converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "slice-id" -------------
	var sliceId string
	sliceId = ctx.Param("slice-id")
	// ------------- Path parameter "priority-traffic-rule-id" -------------
	var priorityTrafficRuleId string
	priorityTrafficRuleId = ctx.Param("priority-traffic-rule-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx, target, enterpriseId, siteId, sliceId, priorityTrafficRuleId)
}

// PostEnterprisesEnterpriseSiteSlicePriorityTrafficRule converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "slice-id" -------------
	var sliceId string
	sliceId = ctx.Param("slice-id")
	// ------------- Path parameter "priority-traffic-rule-id" -------------
	var priorityTrafficRuleId string
	priorityTrafficRuleId = ctx.Param("priority-traffic-rule-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ctx, target, enterpriseId, siteId, sliceId, priorityTrafficRuleId)
}

// GetEnterprisesEnterpriseSiteSmallCellList converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteSmallCellList(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteSmallCellList(ctx, target, enterpriseId, siteId)
}

// DeleteEnterprisesEnterpriseSiteSmallCell converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseSiteSmallCell(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "small-cell-id" -------------
	var smallCellId string
	smallCellId = ctx.Param("small-cell-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseSiteSmallCell(ctx, target, enterpriseId, siteId, smallCellId)
}

// GetEnterprisesEnterpriseSiteSmallCell converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteSmallCell(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "small-cell-id" -------------
	var smallCellId string
	smallCellId = ctx.Param("small-cell-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteSmallCell(ctx, target, enterpriseId, siteId, smallCellId)
}

// PostEnterprisesEnterpriseSiteSmallCell converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseSiteSmallCell(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "small-cell-id" -------------
	var smallCellId string
	smallCellId = ctx.Param("small-cell-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseSiteSmallCell(ctx, target, enterpriseId, siteId, smallCellId)
}

// GetEnterprisesEnterpriseSiteUpfList converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteUpfList(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteUpfList(ctx, target, enterpriseId, siteId)
}

// DeleteEnterprisesEnterpriseSiteUpf converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseSiteUpf(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "upf-id" -------------
	var upfId string
	upfId = ctx.Param("upf-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseSiteUpf(ctx, target, enterpriseId, siteId, upfId)
}

// GetEnterprisesEnterpriseSiteUpf converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseSiteUpf(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "upf-id" -------------
	var upfId string
	upfId = ctx.Param("upf-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseSiteUpf(ctx, target, enterpriseId, siteId, upfId)
}

// PostEnterprisesEnterpriseSiteUpf converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseSiteUpf(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "site-id" -------------
	var siteId string
	siteId = ctx.Param("site-id")
	// ------------- Path parameter "upf-id" -------------
	var upfId string
	upfId = ctx.Param("upf-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseSiteUpf(ctx, target, enterpriseId, siteId, upfId)
}

// GetEnterprisesEnterpriseTemplateList converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseTemplateList(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseTemplateList(ctx, target, enterpriseId)
}

// DeleteEnterprisesEnterpriseTemplate converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseTemplate(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "template-id" -------------
	var templateId string
	templateId = ctx.Param("template-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseTemplate(ctx, target, enterpriseId, templateId)
}

// GetEnterprisesEnterpriseTemplate converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseTemplate(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "template-id" -------------
	var templateId string
	templateId = ctx.Param("template-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseTemplate(ctx, target, enterpriseId, templateId)
}

// PostEnterprisesEnterpriseTemplate converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseTemplate(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "template-id" -------------
	var templateId string
	templateId = ctx.Param("template-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseTemplate(ctx, target, enterpriseId, templateId)
}

// DeleteEnterprisesEnterpriseTemplateMbr converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseTemplateMbr(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "template-id" -------------
	var templateId string
	templateId = ctx.Param("template-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseTemplateMbr(ctx, target, enterpriseId, templateId)
}

// GetEnterprisesEnterpriseTemplateMbr converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseTemplateMbr(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "template-id" -------------
	var templateId string
	templateId = ctx.Param("template-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseTemplateMbr(ctx, target, enterpriseId, templateId)
}

// PostEnterprisesEnterpriseTemplateMbr converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseTemplateMbr(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "template-id" -------------
	var templateId string
	templateId = ctx.Param("template-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseTemplateMbr(ctx, target, enterpriseId, templateId)
}

// GetEnterprisesEnterpriseTrafficClassList converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseTrafficClassList(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseTrafficClassList(ctx, target, enterpriseId)
}

// DeleteEnterprisesEnterpriseTrafficClass converts echo context to params.
func (w *serverInterfaceWrapper) DeleteEnterprisesEnterpriseTrafficClass(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "traffic-class-id" -------------
	var trafficClassId string
	trafficClassId = ctx.Param("traffic-class-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.DeleteEnterprisesEnterpriseTrafficClass(ctx, target, enterpriseId, trafficClassId)
}

// GetEnterprisesEnterpriseTrafficClass converts echo context to params.
func (w *serverInterfaceWrapper) GetEnterprisesEnterpriseTrafficClass(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "traffic-class-id" -------------
	var trafficClassId string
	trafficClassId = ctx.Param("traffic-class-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.GetEnterprisesEnterpriseTrafficClass(ctx, target, enterpriseId, trafficClassId)
}

// PostEnterprisesEnterpriseTrafficClass converts echo context to params.
func (w *serverInterfaceWrapper) PostEnterprisesEnterpriseTrafficClass(ctx echo.Context) error {
	// ------------- Path parameter "target" -------------
	var target externalRef0.Target
	target = externalRef0.Target(ctx.Param("target"))
	// ------------- Path parameter "enterprise-id" -------------
	var enterpriseId string
	enterpriseId = ctx.Param("enterprise-id")
	// ------------- Path parameter "traffic-class-id" -------------
	var trafficClassId string
	trafficClassId = ctx.Param("traffic-class-id")

	// Invoke the callback with all the unmarshalled arguments
	return w.handler.PostEnterprisesEnterpriseTrafficClass(ctx, target, enterpriseId, trafficClassId)
}

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, validateResponse bool) error {

	openApiDefinition, err := GetSwagger()
	if err != nil {
		return err
	}
	wrapper := serverInterfaceWrapper{
		handler: si,
	}

	router.DELETE("/aether/v2.0.x/:target/connectivity-services", wrapper.DeleteConnectivityServices, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/connectivity-services", wrapper.GetConnectivityServices, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/connectivity-services", wrapper.PostConnectivityServices, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/connectivity-services/connectivity-service", wrapper.GetConnectivityServicesConnectivityServiceList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/connectivity-services/connectivity-service/:connectivity-service-id", wrapper.DeleteConnectivityServicesConnectivityService, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/connectivity-services/connectivity-service/:connectivity-service-id", wrapper.GetConnectivityServicesConnectivityService, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/connectivity-services/connectivity-service/:connectivity-service-id", wrapper.PostConnectivityServicesConnectivityService, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises", wrapper.DeleteEnterprises, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises", wrapper.GetEnterprises, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises", wrapper.PostEnterprises, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise", wrapper.GetEnterprisesEnterpriseList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id", wrapper.DeleteEnterprisesEnterprise, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id", wrapper.GetEnterprisesEnterprise, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id", wrapper.PostEnterprisesEnterprise, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/application", wrapper.GetEnterprisesEnterpriseApplicationList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/application/:application-id", wrapper.DeleteEnterprisesEnterpriseApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/application/:application-id", wrapper.GetEnterprisesEnterpriseApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/application/:application-id", wrapper.PostEnterprisesEnterpriseApplication, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/application/:application-id/endpoint", wrapper.GetEnterprisesEnterpriseApplicationEndpointList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/application/:application-id/endpoint/:endpoint-id", wrapper.DeleteEnterprisesEnterpriseApplicationEndpoint, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/application/:application-id/endpoint/:endpoint-id", wrapper.GetEnterprisesEnterpriseApplicationEndpoint, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/application/:application-id/endpoint/:endpoint-id", wrapper.PostEnterprisesEnterpriseApplicationEndpoint, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/application/:application-id/endpoint/:endpoint-id/mbr", wrapper.DeleteEnterprisesEnterpriseApplicationEndpointMbr, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/application/:application-id/endpoint/:endpoint-id/mbr", wrapper.GetEnterprisesEnterpriseApplicationEndpointMbr, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/application/:application-id/endpoint/:endpoint-id/mbr", wrapper.PostEnterprisesEnterpriseApplicationEndpointMbr, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/connectivity-service", wrapper.GetEnterprisesEnterpriseConnectivityServiceList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/connectivity-service/:connectivity-service", wrapper.DeleteEnterprisesEnterpriseConnectivityService, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/connectivity-service/:connectivity-service", wrapper.GetEnterprisesEnterpriseConnectivityService, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/connectivity-service/:connectivity-service", wrapper.PostEnterprisesEnterpriseConnectivityService, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site", wrapper.GetEnterprisesEnterpriseSiteList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id", wrapper.DeleteEnterprisesEnterpriseSite, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id", wrapper.GetEnterprisesEnterpriseSite, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id", wrapper.PostEnterprisesEnterpriseSite, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/device", wrapper.GetEnterprisesEnterpriseSiteDeviceList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/device-group", wrapper.GetEnterprisesEnterpriseSiteDeviceGroupList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/device-group/:device-group-id", wrapper.DeleteEnterprisesEnterpriseSiteDeviceGroup, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/device-group/:device-group-id", wrapper.GetEnterprisesEnterpriseSiteDeviceGroup, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/device-group/:device-group-id", wrapper.PostEnterprisesEnterpriseSiteDeviceGroup, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/device-group/:device-group-id/device", wrapper.GetEnterprisesEnterpriseSiteDeviceGroupDeviceList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/device-group/:device-group-id/device/:device-id", wrapper.DeleteEnterprisesEnterpriseSiteDeviceGroupDevice, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/device-group/:device-group-id/device/:device-id", wrapper.GetEnterprisesEnterpriseSiteDeviceGroupDevice, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/device-group/:device-group-id/device/:device-id", wrapper.PostEnterprisesEnterpriseSiteDeviceGroupDevice, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/device-group/:device-group-id/mbr", wrapper.DeleteEnterprisesEnterpriseSiteDeviceGroupMbr, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/device-group/:device-group-id/mbr", wrapper.GetEnterprisesEnterpriseSiteDeviceGroupMbr, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/device-group/:device-group-id/mbr", wrapper.PostEnterprisesEnterpriseSiteDeviceGroupMbr, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/device/:device-id", wrapper.DeleteEnterprisesEnterpriseSiteDevice, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/device/:device-id", wrapper.GetEnterprisesEnterpriseSiteDevice, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/device/:device-id", wrapper.PostEnterprisesEnterpriseSiteDevice, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/imsi-definition", wrapper.DeleteEnterprisesEnterpriseSiteImsiDefinition, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/imsi-definition", wrapper.GetEnterprisesEnterpriseSiteImsiDefinition, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/imsi-definition", wrapper.PostEnterprisesEnterpriseSiteImsiDefinition, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/ip-domain", wrapper.GetEnterprisesEnterpriseSiteIpDomainList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/ip-domain/:ip-domain-id", wrapper.DeleteEnterprisesEnterpriseSiteIpDomain, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/ip-domain/:ip-domain-id", wrapper.GetEnterprisesEnterpriseSiteIpDomain, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/ip-domain/:ip-domain-id", wrapper.PostEnterprisesEnterpriseSiteIpDomain, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/monitoring", wrapper.DeleteEnterprisesEnterpriseSiteMonitoring, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/monitoring", wrapper.GetEnterprisesEnterpriseSiteMonitoring, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/monitoring", wrapper.PostEnterprisesEnterpriseSiteMonitoring, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/monitoring/edge-device", wrapper.GetEnterprisesEnterpriseSiteMonitoringEdgeDeviceList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/monitoring/edge-device/:edge-device-id", wrapper.DeleteEnterprisesEnterpriseSiteMonitoringEdgeDevice, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/monitoring/edge-device/:edge-device-id", wrapper.GetEnterprisesEnterpriseSiteMonitoringEdgeDevice, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/monitoring/edge-device/:edge-device-id", wrapper.PostEnterprisesEnterpriseSiteMonitoringEdgeDevice, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/sim-card", wrapper.GetEnterprisesEnterpriseSiteSimCardList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/sim-card/:sim-id", wrapper.DeleteEnterprisesEnterpriseSiteSimCard, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/sim-card/:sim-id", wrapper.GetEnterprisesEnterpriseSiteSimCard, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/sim-card/:sim-id", wrapper.PostEnterprisesEnterpriseSiteSimCard, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/slice", wrapper.GetEnterprisesEnterpriseSiteSliceList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/slice/:slice-id", wrapper.DeleteEnterprisesEnterpriseSiteSlice, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/slice/:slice-id", wrapper.GetEnterprisesEnterpriseSiteSlice, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/slice/:slice-id", wrapper.PostEnterprisesEnterpriseSiteSlice, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/slice/:slice-id/device-group", wrapper.GetEnterprisesEnterpriseSiteSliceDeviceGroupList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/slice/:slice-id/device-group/:device-group", wrapper.DeleteEnterprisesEnterpriseSiteSliceDeviceGroup, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/slice/:slice-id/device-group/:device-group", wrapper.GetEnterprisesEnterpriseSiteSliceDeviceGroup, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/slice/:slice-id/device-group/:device-group", wrapper.PostEnterprisesEnterpriseSiteSliceDeviceGroup, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/slice/:slice-id/filter", wrapper.GetEnterprisesEnterpriseSiteSliceFilterList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/slice/:slice-id/filter/:application", wrapper.DeleteEnterprisesEnterpriseSiteSliceFilter, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/slice/:slice-id/filter/:application", wrapper.GetEnterprisesEnterpriseSiteSliceFilter, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/slice/:slice-id/filter/:application", wrapper.PostEnterprisesEnterpriseSiteSliceFilter, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/slice/:slice-id/mbr", wrapper.DeleteEnterprisesEnterpriseSiteSliceMbr, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/slice/:slice-id/mbr", wrapper.GetEnterprisesEnterpriseSiteSliceMbr, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/slice/:slice-id/mbr", wrapper.PostEnterprisesEnterpriseSiteSliceMbr, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/slice/:slice-id/priority-traffic-rule", wrapper.GetEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/slice/:slice-id/priority-traffic-rule/:priority-traffic-rule-id", wrapper.DeleteEnterprisesEnterpriseSiteSlicePriorityTrafficRule, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/slice/:slice-id/priority-traffic-rule/:priority-traffic-rule-id", wrapper.GetEnterprisesEnterpriseSiteSlicePriorityTrafficRule, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/slice/:slice-id/priority-traffic-rule/:priority-traffic-rule-id", wrapper.PostEnterprisesEnterpriseSiteSlicePriorityTrafficRule, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/small-cell", wrapper.GetEnterprisesEnterpriseSiteSmallCellList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/small-cell/:small-cell-id", wrapper.DeleteEnterprisesEnterpriseSiteSmallCell, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/small-cell/:small-cell-id", wrapper.GetEnterprisesEnterpriseSiteSmallCell, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/small-cell/:small-cell-id", wrapper.PostEnterprisesEnterpriseSiteSmallCell, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/upf", wrapper.GetEnterprisesEnterpriseSiteUpfList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/upf/:upf-id", wrapper.DeleteEnterprisesEnterpriseSiteUpf, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/upf/:upf-id", wrapper.GetEnterprisesEnterpriseSiteUpf, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/site/:site-id/upf/:upf-id", wrapper.PostEnterprisesEnterpriseSiteUpf, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/template", wrapper.GetEnterprisesEnterpriseTemplateList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/template/:template-id", wrapper.DeleteEnterprisesEnterpriseTemplate, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/template/:template-id", wrapper.GetEnterprisesEnterpriseTemplate, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/template/:template-id", wrapper.PostEnterprisesEnterpriseTemplate, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/template/:template-id/mbr", wrapper.DeleteEnterprisesEnterpriseTemplateMbr, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/template/:template-id/mbr", wrapper.GetEnterprisesEnterpriseTemplateMbr, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/template/:template-id/mbr", wrapper.PostEnterprisesEnterpriseTemplateMbr, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/traffic-class", wrapper.GetEnterprisesEnterpriseTrafficClassList, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.DELETE("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/traffic-class/:traffic-class-id", wrapper.DeleteEnterprisesEnterpriseTrafficClass, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.GET("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/traffic-class/:traffic-class-id", wrapper.GetEnterprisesEnterpriseTrafficClass, openapi3mw.ValidateOpenapi3(openApiDefinition))
	router.POST("/aether/v2.0.x/:target/enterprises/enterprise/:enterprise-id/traffic-class/:traffic-class-id", wrapper.PostEnterprisesEnterpriseTrafficClass, openapi3mw.ValidateOpenapi3(openApiDefinition))

	return nil
}
