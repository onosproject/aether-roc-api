// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"fmt"

	"github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	externalRef0 "github.com/onosproject/config-models/modelplugin/aether-2.0.0/aether_2_0_0"
)

// ModelPluginDevice - a wrapper for the model plugin
type ModelPluginDevice struct {
	device externalRef0.Device
}

// toAccessProfile converts gNMI to OAPI.
func (d *ModelPluginDevice) toAccessProfile(params ...string) (*types.AccessProfile, error) {
	resource := new(types.AccessProfile)

	//Property: { Access-profile {[]AccessProfileAccessProfile  0xc0004a5300 map[] [] false <nil> [] false} false false}
	// Handle []Object
	accessProfiles := make([]types.AccessProfileAccessProfile, 0)
	reflectAccessProfileAccessProfile, err := utils.FindModelPluginObject(d.device, "AccessProfileAccessProfile", params...)
	if err != nil {
		return nil, err
	}
	if reflectAccessProfileAccessProfile != nil {
		for _, key := range reflectAccessProfileAccessProfile.MapKeys() {
			v := reflectAccessProfileAccessProfile.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			accessProfile, err := d.toAccessProfileAccessProfile(childParams...)
			if err != nil {
				return nil, err
			}
			accessProfiles = append(accessProfiles, *accessProfile)
		}
	}
	resource.AccessProfile = &accessProfiles

	return resource, nil
}

// toAccessProfileAccessProfile converts gNMI to OAPI.
func (d *ModelPluginDevice) toAccessProfileAccessProfile(params ...string) (*types.AccessProfileAccessProfile, error) {
	resource := new(types.AccessProfileAccessProfile)

	//Property: { description {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "AccessProfileAccessProfileDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	//Property: { display-name {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "AccessProfileAccessProfileDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	//Property: { filter {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectFilter, err := utils.FindModelPluginObject(d.device, "AccessProfileAccessProfileFilter", params...)
	if err != nil {
		return nil, err
	}
	if reflectFilter != nil {
		attrFilter := reflectFilter.Interface().(string)
		resource.Filter = &attrFilter
	}

	//Property: { id {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "AccessProfileAccessProfileId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = &attrId
	}

	//Property: { type {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectType, err := utils.FindModelPluginObject(d.device, "AccessProfileAccessProfileType", params...)
	if err != nil {
		return nil, err
	}
	if reflectType != nil {
		attrType := reflectType.Interface().(string)
		resource.Type = &attrType
	}

	return resource, nil
}

// toAdditionalPropertyTarget converts gNMI to OAPI.
func (d *ModelPluginDevice) toAdditionalPropertyTarget(params ...string) (*types.AdditionalPropertyTarget, error) {
	resource := new(types.AdditionalPropertyTarget)

	//Property: { target {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectTarget, err := utils.FindModelPluginObject(d.device, "AdditionalPropertyTargetTarget", params...)
	if err != nil {
		return nil, err
	}
	if reflectTarget != nil {
		attrTarget := reflectTarget.Interface().(string)
		resource.Target = &attrTarget
	}

	return resource, nil
}

// toApnProfile converts gNMI to OAPI.
func (d *ModelPluginDevice) toApnProfile(params ...string) (*types.ApnProfile, error) {
	resource := new(types.ApnProfile)

	//Property: { Apn-profile {[]ApnProfileApnProfile  0xc0004a5680 map[] [] false <nil> [] false} false false}
	// Handle []Object
	apnProfiles := make([]types.ApnProfileApnProfile, 0)
	reflectApnProfileApnProfile, err := utils.FindModelPluginObject(d.device, "ApnProfileApnProfile", params...)
	if err != nil {
		return nil, err
	}
	if reflectApnProfileApnProfile != nil {
		for _, key := range reflectApnProfileApnProfile.MapKeys() {
			v := reflectApnProfileApnProfile.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			apnProfile, err := d.toApnProfileApnProfile(childParams...)
			if err != nil {
				return nil, err
			}
			apnProfiles = append(apnProfiles, *apnProfile)
		}
	}
	resource.ApnProfile = &apnProfiles

	return resource, nil
}

// toApnProfileApnProfile converts gNMI to OAPI.
func (d *ModelPluginDevice) toApnProfileApnProfile(params ...string) (*types.ApnProfileApnProfile, error) {
	resource := new(types.ApnProfileApnProfile)

	//Property: { apn-name {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectApnName, err := utils.FindModelPluginObject(d.device, "ApnProfileApnProfileApnName", params...)
	if err != nil {
		return nil, err
	}
	if reflectApnName != nil {
		attrApnName := reflectApnName.Interface().(string)
		resource.ApnName = &attrApnName
	}

	//Property: { description {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "ApnProfileApnProfileDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	//Property: { display-name {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "ApnProfileApnProfileDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	//Property: { dns-primary {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectDnsPrimary, err := utils.FindModelPluginObject(d.device, "ApnProfileApnProfileDnsPrimary", params...)
	if err != nil {
		return nil, err
	}
	if reflectDnsPrimary != nil {
		attrDnsPrimary := reflectDnsPrimary.Interface().(string)
		resource.DnsPrimary = &attrDnsPrimary
	}

	//Property: { dns-secondary {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectDnsSecondary, err := utils.FindModelPluginObject(d.device, "ApnProfileApnProfileDnsSecondary", params...)
	if err != nil {
		return nil, err
	}
	if reflectDnsSecondary != nil {
		attrDnsSecondary := reflectDnsSecondary.Interface().(string)
		resource.DnsSecondary = &attrDnsSecondary
	}

	//Property: { gx-enabled {bool  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectGxEnabled, err := utils.FindModelPluginObject(d.device, "ApnProfileApnProfileGxEnabled", params...)
	if err != nil {
		return nil, err
	}
	if reflectGxEnabled != nil {
		boolGxEnabled := reflectGxEnabled.Interface().(bool)
		resource.GxEnabled = &boolGxEnabled
	}

	//Property: { id {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "ApnProfileApnProfileId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = &attrId
	}

	//Property: { mtu {int32  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectMtu, err := utils.FindModelPluginObject(d.device, "ApnProfileApnProfileMtu", params...)
	if err != nil {
		return nil, err
	}
	if reflectMtu != nil {
		//OpenAPI does not have unsigned numbers
		int32Mtu, ok := reflectMtu.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Mtu, ok := reflectMtu.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectMtu.Interface())
			}
			int32Mtu = int32(uint32Mtu)
		}
		resource.Mtu = &int32Mtu
	}

	return resource, nil
}

// toConnectivityService converts gNMI to OAPI.
func (d *ModelPluginDevice) toConnectivityService(params ...string) (*types.ConnectivityService, error) {
	resource := new(types.ConnectivityService)

	//Property: { Connectivity-service {[]ConnectivityServiceConnectivityService  0xc0004a5a00 map[] [] false <nil> [] false} false false}
	// Handle []Object
	connectivityServices := make([]types.ConnectivityServiceConnectivityService, 0)
	reflectConnectivityServiceConnectivityService, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	if reflectConnectivityServiceConnectivityService != nil {
		for _, key := range reflectConnectivityServiceConnectivityService.MapKeys() {
			v := reflectConnectivityServiceConnectivityService.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			connectivityService, err := d.toConnectivityServiceConnectivityService(childParams...)
			if err != nil {
				return nil, err
			}
			connectivityServices = append(connectivityServices, *connectivityService)
		}
	}
	resource.ConnectivityService = &connectivityServices

	return resource, nil
}

// toConnectivityServiceConnectivityService converts gNMI to OAPI.
func (d *ModelPluginDevice) toConnectivityServiceConnectivityService(params ...string) (*types.ConnectivityServiceConnectivityService, error) {
	resource := new(types.ConnectivityServiceConnectivityService)

	//Property: { description {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityServiceDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	//Property: { display-name {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityServiceDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	//Property: { hss-endpoint {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectHssEndpoint, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityServiceHssEndpoint", params...)
	if err != nil {
		return nil, err
	}
	if reflectHssEndpoint != nil {
		attrHssEndpoint := reflectHssEndpoint.Interface().(string)
		resource.HssEndpoint = &attrHssEndpoint
	}

	//Property: { id {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityServiceId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = &attrId
	}

	//Property: { spgwc-endpoint {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectSpgwcEndpoint, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityServiceSpgwcEndpoint", params...)
	if err != nil {
		return nil, err
	}
	if reflectSpgwcEndpoint != nil {
		attrSpgwcEndpoint := reflectSpgwcEndpoint.Interface().(string)
		resource.SpgwcEndpoint = &attrSpgwcEndpoint
	}

	return resource, nil
}

// toEnterprise converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprise(params ...string) (*types.Enterprise, error) {
	resource := new(types.Enterprise)

	//Property: { Enterprise {[]EnterpriseEnterprise  0xc0004a5d00 map[] [] false <nil> [] false} false false}
	// Handle []Object
	enterprises := make([]types.EnterpriseEnterprise, 0)
	reflectEnterpriseEnterprise, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterprise", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterpriseEnterprise != nil {
		for _, key := range reflectEnterpriseEnterprise.MapKeys() {
			v := reflectEnterpriseEnterprise.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			enterprise, err := d.toEnterpriseEnterprise(childParams...)
			if err != nil {
				return nil, err
			}
			enterprises = append(enterprises, *enterprise)
		}
	}
	resource.Enterprise = &enterprises

	return resource, nil
}

// toEnterpriseEnterprise converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterpriseEnterprise(params ...string) (*types.EnterpriseEnterprise, error) {
	resource := new(types.EnterpriseEnterprise)

	//Property: { Connectivity-service {[]EnterpriseEnterpriseConnectivityService  0xc0004a5e80 map[] [] false <nil> [] false} false false}
	// Handle []Object
	connectivityServices := make([]types.EnterpriseEnterpriseConnectivityService, 0)
	reflectEnterpriseEnterpriseConnectivityService, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterpriseConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterpriseEnterpriseConnectivityService != nil {
		for _, key := range reflectEnterpriseEnterpriseConnectivityService.MapKeys() {
			v := reflectEnterpriseEnterpriseConnectivityService.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			connectivityService, err := d.toEnterpriseEnterpriseConnectivityService(childParams...)
			if err != nil {
				return nil, err
			}
			connectivityServices = append(connectivityServices, *connectivityService)
		}
	}
	resource.ConnectivityService = &connectivityServices

	//Property: { description {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterpriseDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	//Property: { display-name {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterpriseDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	//Property: { id {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterpriseId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = &attrId
	}

	return resource, nil
}

// toEnterpriseEnterpriseConnectivityService converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterpriseEnterpriseConnectivityService(params ...string) (*types.EnterpriseEnterpriseConnectivityService, error) {
	resource := new(types.EnterpriseEnterpriseConnectivityService)

	//Property: { connectivity-service {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectConnectivityService, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterpriseConnectivityServiceConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	if reflectConnectivityService != nil {
		attrConnectivityService := reflectConnectivityService.Interface().(string)
		resource.ConnectivityService = &attrConnectivityService
	}

	//Property: { enabled {bool  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectEnabled, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterpriseConnectivityServiceEnabled", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnabled != nil {
		boolEnabled := reflectEnabled.Interface().(bool)
		resource.Enabled = &boolEnabled
	}

	return resource, nil
}

// toQosProfile converts gNMI to OAPI.
func (d *ModelPluginDevice) toQosProfile(params ...string) (*types.QosProfile, error) {
	resource := new(types.QosProfile)

	//Property: { Qos-profile {[]QosProfileQosProfile  0xc000424180 map[] [] false <nil> [] false} false false}
	// Handle []Object
	qosProfiles := make([]types.QosProfileQosProfile, 0)
	reflectQosProfileQosProfile, err := utils.FindModelPluginObject(d.device, "QosProfileQosProfile", params...)
	if err != nil {
		return nil, err
	}
	if reflectQosProfileQosProfile != nil {
		for _, key := range reflectQosProfileQosProfile.MapKeys() {
			v := reflectQosProfileQosProfile.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			qosProfile, err := d.toQosProfileQosProfile(childParams...)
			if err != nil {
				return nil, err
			}
			qosProfiles = append(qosProfiles, *qosProfile)
		}
	}
	resource.QosProfile = &qosProfiles

	return resource, nil
}

// toQosProfileQosProfile converts gNMI to OAPI.
func (d *ModelPluginDevice) toQosProfileQosProfile(params ...string) (*types.QosProfileQosProfile, error) {
	resource := new(types.QosProfileQosProfile)

	//Property: { apn-ambr {QosProfileQosProfileApnAmbr  <nil> map[] [] false <nil> [] false} false false}
	//Handle object
	attrApnAmbr, err := d.toQosProfileQosProfileApnAmbr(params...)
	if err != nil {
		return nil, err
	}
	resource.ApnAmbr = attrApnAmbr

	//Property: { arp {QosProfileQosProfileArp  <nil> map[] [] false <nil> [] false} false false}
	//Handle object
	attrArp, err := d.toQosProfileQosProfileArp(params...)
	if err != nil {
		return nil, err
	}
	resource.Arp = attrArp

	//Property: { description {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "QosProfileQosProfileDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	//Property: { display-name {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "QosProfileQosProfileDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	//Property: { id {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "QosProfileQosProfileId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = &attrId
	}

	//Property: { qci {int32  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectQci, err := utils.FindModelPluginObject(d.device, "QosProfileQosProfileQci", params...)
	if err != nil {
		return nil, err
	}
	if reflectQci != nil {
		//OpenAPI does not have unsigned numbers
		int32Qci, ok := reflectQci.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Qci, ok := reflectQci.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectQci.Interface())
			}
			int32Qci = int32(uint32Qci)
		}
		resource.Qci = &int32Qci
	}

	return resource, nil
}

// toQosProfileQosProfileApnAmbr converts gNMI to OAPI.
func (d *ModelPluginDevice) toQosProfileQosProfileApnAmbr(params ...string) (*types.QosProfileQosProfileApnAmbr, error) {
	resource := new(types.QosProfileQosProfileApnAmbr)

	//Property: { downlink {int32  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(d.device, "QosProfileQosProfileApnAmbrDownlink", params...)
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers
		int32Downlink, ok := reflectDownlink.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Downlink, ok := reflectDownlink.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectDownlink.Interface())
			}
			int32Downlink = int32(uint32Downlink)
		}
		resource.Downlink = &int32Downlink
	}

	//Property: { uplink {int32  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(d.device, "QosProfileQosProfileApnAmbrUplink", params...)
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers
		int32Uplink, ok := reflectUplink.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Uplink, ok := reflectUplink.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectUplink.Interface())
			}
			int32Uplink = int32(uint32Uplink)
		}
		resource.Uplink = &int32Uplink
	}

	return resource, nil
}

// toQosProfileQosProfileArp converts gNMI to OAPI.
func (d *ModelPluginDevice) toQosProfileQosProfileArp(params ...string) (*types.QosProfileQosProfileArp, error) {
	resource := new(types.QosProfileQosProfileArp)

	//Property: { preemption-capability {bool  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectPreemptionCapability, err := utils.FindModelPluginObject(d.device, "QosProfileQosProfileArpPreemptionCapability", params...)
	if err != nil {
		return nil, err
	}
	if reflectPreemptionCapability != nil {
		boolPreemptionCapability := reflectPreemptionCapability.Interface().(bool)
		resource.PreemptionCapability = &boolPreemptionCapability
	}

	//Property: { preemption-vulnerability {bool  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectPreemptionVulnerability, err := utils.FindModelPluginObject(d.device, "QosProfileQosProfileArpPreemptionVulnerability", params...)
	if err != nil {
		return nil, err
	}
	if reflectPreemptionVulnerability != nil {
		boolPreemptionVulnerability := reflectPreemptionVulnerability.Interface().(bool)
		resource.PreemptionVulnerability = &boolPreemptionVulnerability
	}

	//Property: { priority {int32  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectPriority, err := utils.FindModelPluginObject(d.device, "QosProfileQosProfileArpPriority", params...)
	if err != nil {
		return nil, err
	}
	if reflectPriority != nil {
		//OpenAPI does not have unsigned numbers
		int32Priority, ok := reflectPriority.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Priority, ok := reflectPriority.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectPriority.Interface())
			}
			int32Priority = int32(uint32Priority)
		}
		resource.Priority = &int32Priority
	}

	return resource, nil
}

// toSecurityProfile converts gNMI to OAPI.
func (d *ModelPluginDevice) toSecurityProfile(params ...string) (*types.SecurityProfile, error) {
	resource := new(types.SecurityProfile)

	//Property: { Security-profile {[]SecurityProfileSecurityProfile  0xc000424980 map[] [] false <nil> [] false} false false}
	// Handle []Object
	securityProfiles := make([]types.SecurityProfileSecurityProfile, 0)
	reflectSecurityProfileSecurityProfile, err := utils.FindModelPluginObject(d.device, "SecurityProfileSecurityProfile", params...)
	if err != nil {
		return nil, err
	}
	if reflectSecurityProfileSecurityProfile != nil {
		for _, key := range reflectSecurityProfileSecurityProfile.MapKeys() {
			v := reflectSecurityProfileSecurityProfile.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			securityProfile, err := d.toSecurityProfileSecurityProfile(childParams...)
			if err != nil {
				return nil, err
			}
			securityProfiles = append(securityProfiles, *securityProfile)
		}
	}
	resource.SecurityProfile = &securityProfiles

	return resource, nil
}

// toSecurityProfileSecurityProfile converts gNMI to OAPI.
func (d *ModelPluginDevice) toSecurityProfileSecurityProfile(params ...string) (*types.SecurityProfileSecurityProfile, error) {
	resource := new(types.SecurityProfileSecurityProfile)

	//Property: { description {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "SecurityProfileSecurityProfileDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	//Property: { display-name {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "SecurityProfileSecurityProfileDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	//Property: { id {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "SecurityProfileSecurityProfileId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = &attrId
	}

	//Property: { key {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectKey, err := utils.FindModelPluginObject(d.device, "SecurityProfileSecurityProfileKey", params...)
	if err != nil {
		return nil, err
	}
	if reflectKey != nil {
		attrKey := reflectKey.Interface().(string)
		resource.Key = &attrKey
	}

	//Property: { opc {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectOpc, err := utils.FindModelPluginObject(d.device, "SecurityProfileSecurityProfileOpc", params...)
	if err != nil {
		return nil, err
	}
	if reflectOpc != nil {
		attrOpc := reflectOpc.Interface().(string)
		resource.Opc = &attrOpc
	}

	//Property: { sqn {int32  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectSqn, err := utils.FindModelPluginObject(d.device, "SecurityProfileSecurityProfileSqn", params...)
	if err != nil {
		return nil, err
	}
	if reflectSqn != nil {
		//OpenAPI does not have unsigned numbers
		int32Sqn, ok := reflectSqn.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Sqn, ok := reflectSqn.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectSqn.Interface())
			}
			int32Sqn = int32(uint32Sqn)
		}
		resource.Sqn = &int32Sqn
	}

	return resource, nil
}

// toSubscriber converts gNMI to OAPI.
func (d *ModelPluginDevice) toSubscriber(params ...string) (*types.Subscriber, error) {
	resource := new(types.Subscriber)

	//Property: { Ue {[]SubscriberUe  0xc000424f00 map[] [] false <nil> [] false} false false}
	// Handle []Object
	ues := make([]types.SubscriberUe, 0)
	reflectSubscriberUe, err := utils.FindModelPluginObject(d.device, "SubscriberUe", params...)
	if err != nil {
		return nil, err
	}
	if reflectSubscriberUe != nil {
		for _, key := range reflectSubscriberUe.MapKeys() {
			v := reflectSubscriberUe.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			ue, err := d.toSubscriberUe(childParams...)
			if err != nil {
				return nil, err
			}
			ues = append(ues, *ue)
		}
	}
	resource.Ue = &ues

	return resource, nil
}

// toSubscriberUe converts gNMI to OAPI.
func (d *ModelPluginDevice) toSubscriberUe(params ...string) (*types.SubscriberUe, error) {
	resource := new(types.SubscriberUe)

	//Property: { display-name {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "SubscriberUeDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	//Property: { enabled {bool  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectEnabled, err := utils.FindModelPluginObject(d.device, "SubscriberUeEnabled", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnabled != nil {
		boolEnabled := reflectEnabled.Interface().(bool)
		resource.Enabled = &boolEnabled
	}

	//Property: { enterprise {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectEnterprise, err := utils.FindModelPluginObject(d.device, "SubscriberUeEnterprise", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprise != nil {
		attrEnterprise := reflectEnterprise.Interface().(string)
		resource.Enterprise = &attrEnterprise
	}

	//Property: { id {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "SubscriberUeId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = &attrId
	}

	//Property: {For choice imsi:range imsi-range-from {int64  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectImsiRangeFrom, err := utils.FindModelPluginObject(d.device, "SubscriberUeImsiRangeFrom", params...)
	if err != nil {
		return nil, err
	}
	if reflectImsiRangeFrom != nil {

		int64ImsiRangeFrom, ok := reflectImsiRangeFrom.Interface().(int64)
		if !ok { // Might be a uint64
			uint64ImsiRangeFrom, ok := reflectImsiRangeFrom.Interface().(uint64)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int64 or uint64", reflectImsiRangeFrom.Interface())
			}
			int64ImsiRangeFrom = int64(uint64ImsiRangeFrom)
		}
		resource.ImsiRangeFrom = &int64ImsiRangeFrom
	}

	//Property: {For choice imsi:range imsi-range-to {int64  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectImsiRangeTo, err := utils.FindModelPluginObject(d.device, "SubscriberUeImsiRangeTo", params...)
	if err != nil {
		return nil, err
	}
	if reflectImsiRangeTo != nil {

		int64ImsiRangeTo, ok := reflectImsiRangeTo.Interface().(int64)
		if !ok { // Might be a uint64
			uint64ImsiRangeTo, ok := reflectImsiRangeTo.Interface().(uint64)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int64 or uint64", reflectImsiRangeTo.Interface())
			}
			int64ImsiRangeTo = int64(uint64ImsiRangeTo)
		}
		resource.ImsiRangeTo = &int64ImsiRangeTo
	}

	//Property: {For choice imsi:wildcard imsi-wildcard {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectImsiWildcard, err := utils.FindModelPluginObject(d.device, "SubscriberUeImsiWildcard", params...)
	if err != nil {
		return nil, err
	}
	if reflectImsiWildcard != nil {
		attrImsiWildcard := reflectImsiWildcard.Interface().(string)
		resource.ImsiWildcard = &attrImsiWildcard
	}

	//Property: { priority {int32  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectPriority, err := utils.FindModelPluginObject(d.device, "SubscriberUePriority", params...)
	if err != nil {
		return nil, err
	}
	if reflectPriority != nil {
		//OpenAPI does not have unsigned numbers
		int32Priority, ok := reflectPriority.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Priority, ok := reflectPriority.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectPriority.Interface())
			}
			int32Priority = int32(uint32Priority)
		}
		resource.Priority = &int32Priority
	}

	//Property: { profiles {SubscriberUeProfiles  <nil> map[] [] false <nil> [] false} false false}
	//Handle object
	attrProfiles, err := d.toSubscriberUeProfiles(params...)
	if err != nil {
		return nil, err
	}
	resource.Profiles = attrProfiles

	//Property: { requested-apn {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectRequestedApn, err := utils.FindModelPluginObject(d.device, "SubscriberUeRequestedApn", params...)
	if err != nil {
		return nil, err
	}
	if reflectRequestedApn != nil {
		attrRequestedApn := reflectRequestedApn.Interface().(string)
		resource.RequestedApn = &attrRequestedApn
	}

	//Property: { serving-plmn {SubscriberUeServingPlmn  <nil> map[] [] false <nil> [] false} false false}
	//Handle object
	attrServingPlmn, err := d.toSubscriberUeServingPlmn(params...)
	if err != nil {
		return nil, err
	}
	resource.ServingPlmn = attrServingPlmn

	return resource, nil
}

// toSubscriberUeProfiles converts gNMI to OAPI.
func (d *ModelPluginDevice) toSubscriberUeProfiles(params ...string) (*types.SubscriberUeProfiles, error) {
	resource := new(types.SubscriberUeProfiles)

	//Property: { Access-profile {[]SubscriberUeProfilesAccessProfile  0xc000425800 map[] [] false <nil> [] false} false false}
	// Handle []Object
	accessProfiles := make([]types.SubscriberUeProfilesAccessProfile, 0)
	reflectSubscriberUeProfilesAccessProfile, err := utils.FindModelPluginObject(d.device, "SubscriberUeProfilesAccessProfile", params...)
	if err != nil {
		return nil, err
	}
	if reflectSubscriberUeProfilesAccessProfile != nil {
		for _, key := range reflectSubscriberUeProfilesAccessProfile.MapKeys() {
			v := reflectSubscriberUeProfilesAccessProfile.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			accessProfile, err := d.toSubscriberUeProfilesAccessProfile(childParams...)
			if err != nil {
				return nil, err
			}
			accessProfiles = append(accessProfiles, *accessProfile)
		}
	}
	resource.AccessProfile = &accessProfiles

	//Property: { apn-profile {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectApnProfile, err := utils.FindModelPluginObject(d.device, "SubscriberUeProfilesApnProfile", params...)
	if err != nil {
		return nil, err
	}
	if reflectApnProfile != nil {
		attrApnProfile := reflectApnProfile.Interface().(string)
		resource.ApnProfile = &attrApnProfile
	}

	//Property: { qos-profile {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectQosProfile, err := utils.FindModelPluginObject(d.device, "SubscriberUeProfilesQosProfile", params...)
	if err != nil {
		return nil, err
	}
	if reflectQosProfile != nil {
		attrQosProfile := reflectQosProfile.Interface().(string)
		resource.QosProfile = &attrQosProfile
	}

	//Property: { security-profile {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectSecurityProfile, err := utils.FindModelPluginObject(d.device, "SubscriberUeProfilesSecurityProfile", params...)
	if err != nil {
		return nil, err
	}
	if reflectSecurityProfile != nil {
		attrSecurityProfile := reflectSecurityProfile.Interface().(string)
		resource.SecurityProfile = &attrSecurityProfile
	}

	//Property: { up-profile {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectUpProfile, err := utils.FindModelPluginObject(d.device, "SubscriberUeProfilesUpProfile", params...)
	if err != nil {
		return nil, err
	}
	if reflectUpProfile != nil {
		attrUpProfile := reflectUpProfile.Interface().(string)
		resource.UpProfile = &attrUpProfile
	}

	return resource, nil
}

// toSubscriberUeProfilesAccessProfile converts gNMI to OAPI.
func (d *ModelPluginDevice) toSubscriberUeProfilesAccessProfile(params ...string) (*types.SubscriberUeProfilesAccessProfile, error) {
	resource := new(types.SubscriberUeProfilesAccessProfile)

	//Property: { access-profile {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectAccessProfile, err := utils.FindModelPluginObject(d.device, "SubscriberUeProfilesAccessProfileAccessProfile", params...)
	if err != nil {
		return nil, err
	}
	if reflectAccessProfile != nil {
		attrAccessProfile := reflectAccessProfile.Interface().(string)
		resource.AccessProfile = &attrAccessProfile
	}

	//Property: { allowed {bool  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectAllowed, err := utils.FindModelPluginObject(d.device, "SubscriberUeProfilesAccessProfileAllowed", params...)
	if err != nil {
		return nil, err
	}
	if reflectAllowed != nil {
		boolAllowed := reflectAllowed.Interface().(bool)
		resource.Allowed = &boolAllowed
	}

	return resource, nil
}

// toSubscriberUeServingPlmn converts gNMI to OAPI.
func (d *ModelPluginDevice) toSubscriberUeServingPlmn(params ...string) (*types.SubscriberUeServingPlmn, error) {
	resource := new(types.SubscriberUeServingPlmn)

	//Property: { mcc {int32  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectMcc, err := utils.FindModelPluginObject(d.device, "SubscriberUeServingPlmnMcc", params...)
	if err != nil {
		return nil, err
	}
	if reflectMcc != nil {
		//OpenAPI does not have unsigned numbers
		int32Mcc, ok := reflectMcc.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Mcc, ok := reflectMcc.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectMcc.Interface())
			}
			int32Mcc = int32(uint32Mcc)
		}
		resource.Mcc = &int32Mcc
	}

	//Property: { mnc {int32  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectMnc, err := utils.FindModelPluginObject(d.device, "SubscriberUeServingPlmnMnc", params...)
	if err != nil {
		return nil, err
	}
	if reflectMnc != nil {
		//OpenAPI does not have unsigned numbers
		int32Mnc, ok := reflectMnc.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Mnc, ok := reflectMnc.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectMnc.Interface())
			}
			int32Mnc = int32(uint32Mnc)
		}
		resource.Mnc = &int32Mnc
	}

	//Property: { tac {int32  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectTac, err := utils.FindModelPluginObject(d.device, "SubscriberUeServingPlmnTac", params...)
	if err != nil {
		return nil, err
	}
	if reflectTac != nil {
		//OpenAPI does not have unsigned numbers
		int32Tac, ok := reflectTac.Interface().(int32)
		if !ok { // Might be a uint32
			uint32Tac, ok := reflectTac.Interface().(uint32)
			if !ok {
				return nil, fmt.Errorf("error converting %v to int32 or uint32", reflectTac.Interface())
			}
			int32Tac = int32(uint32Tac)
		}
		resource.Tac = &int32Tac
	}

	return resource, nil
}

// toUpProfile converts gNMI to OAPI.
func (d *ModelPluginDevice) toUpProfile(params ...string) (*types.UpProfile, error) {
	resource := new(types.UpProfile)

	//Property: { Up-profile {[]UpProfileUpProfile  0xc000425c80 map[] [] false <nil> [] false} false false}
	// Handle []Object
	upProfiles := make([]types.UpProfileUpProfile, 0)
	reflectUpProfileUpProfile, err := utils.FindModelPluginObject(d.device, "UpProfileUpProfile", params...)
	if err != nil {
		return nil, err
	}
	if reflectUpProfileUpProfile != nil {
		for _, key := range reflectUpProfileUpProfile.MapKeys() {
			v := reflectUpProfileUpProfile.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			upProfile, err := d.toUpProfileUpProfile(childParams...)
			if err != nil {
				return nil, err
			}
			upProfiles = append(upProfiles, *upProfile)
		}
	}
	resource.UpProfile = &upProfiles

	return resource, nil
}

// toUpProfileUpProfile converts gNMI to OAPI.
func (d *ModelPluginDevice) toUpProfileUpProfile(params ...string) (*types.UpProfileUpProfile, error) {
	resource := new(types.UpProfileUpProfile)

	//Property: { access-control {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectAccessControl, err := utils.FindModelPluginObject(d.device, "UpProfileUpProfileAccessControl", params...)
	if err != nil {
		return nil, err
	}
	if reflectAccessControl != nil {
		attrAccessControl := reflectAccessControl.Interface().(string)
		resource.AccessControl = &attrAccessControl
	}

	//Property: { description {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "UpProfileUpProfileDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	//Property: { display-name {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "UpProfileUpProfileDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	//Property: { id {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "UpProfileUpProfileId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = &attrId
	}

	//Property: { user-plane {string  <nil> map[] [] false <nil> [] false} false false}
	//encoding gNMI attribute to OAPI
	reflectUserPlane, err := utils.FindModelPluginObject(d.device, "UpProfileUpProfileUserPlane", params...)
	if err != nil {
		return nil, err
	}
	if reflectUserPlane != nil {
		attrUserPlane := reflectUserPlane.Interface().(string)
		resource.UserPlane = &attrUserPlane
	}

	return resource, nil
}

// toTarget converts gNMI to OAPI.
func (d *ModelPluginDevice) toTarget(params ...string) (*types.Target, error) {
	resource := new(types.Target)

	return resource, nil
}

//Ignoring RequestBodyAccessProfile

//Ignoring RequestBodyAccessProfileAccessProfile

//Ignoring RequestBodyApnProfile

//Ignoring RequestBodyApnProfileApnProfile

//Ignoring RequestBodyConnectivityService

//Ignoring RequestBodyConnectivityServiceConnectivityService

//Ignoring RequestBodyEnterprise

//Ignoring RequestBodyEnterpriseEnterprise

//Ignoring RequestBodyEnterpriseEnterpriseConnectivityService

//Ignoring RequestBodyQosProfile

//Ignoring RequestBodyQosProfileQosProfile

//Ignoring RequestBodyQosProfileQosProfileApnAmbr

//Ignoring RequestBodyQosProfileQosProfileArp

//Ignoring RequestBodySecurityProfile

//Ignoring RequestBodySecurityProfileSecurityProfile

//Ignoring RequestBodySubscriber

//Ignoring RequestBodySubscriberUe

//Ignoring RequestBodySubscriberUeProfiles

//Ignoring RequestBodySubscriberUeProfilesAccessProfile

//Ignoring RequestBodySubscriberUeServingPlmn

//Ignoring RequestBodyUpProfile

//Ignoring RequestBodyUpProfileUpProfile

// Not generating param-types
// Not generating request-bodies

// Not generating additional-properties
// Not generating additional-properties
