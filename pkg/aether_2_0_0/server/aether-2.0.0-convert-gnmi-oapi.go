// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"fmt"
	"reflect"

	externalRef0 "github.com/onosproject/aether-models/models/aether-2.0.x/v2/api"
	"github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/utils"
)

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating constants
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating constants
// SPDX-FileCopyrightText: 2022-present Intel Corporation
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// ModelPluginDevice - a wrapper for the model plugin
type ModelPluginDevice struct {
	device externalRef0.Device
}

// ToAdditionalPropertyTarget converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToAdditionalPropertyTarget(params ...string) (*types.AdditionalPropertyTarget, error) {
	resource := new(types.AdditionalPropertyTarget)

	reflectAdditionalPropertyTarget, err := utils.FindModelPluginObject(d.device, "AdditionalPropertyTarget", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToAdditionalPropertyTarget(reflectAdditionalPropertyTarget, params...)
	return resource, err

}

// ToAdditionalPropertyTarget converts gNMI to OAPI relative to a node in the tree.
func ToAdditionalPropertyTarget(ygotObjValue *reflect.Value, params ...string) (*types.AdditionalPropertyTarget, error) {
	resource := new(types.AdditionalPropertyTarget)

	// Property: target string
	//encoding gNMI attribute to OAPI
	reflectTarget, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Target")
	if err != nil {
		return nil, err
	}
	if reflectTarget != nil {
		attrTarget := fmt.Sprintf("%s", reflectTarget.Interface())
		resource.Target = &attrTarget
	}

	return resource, nil
}

// ToAdditionalPropertyUnchanged converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToAdditionalPropertyUnchanged(params ...string) (*types.AdditionalPropertyUnchanged, error) {
	resource := new(types.AdditionalPropertyUnchanged)

	reflectAdditionalPropertyUnchanged, err := utils.FindModelPluginObject(d.device, "AdditionalPropertyUnchanged", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToAdditionalPropertyUnchanged(reflectAdditionalPropertyUnchanged, params...)
	return resource, err

}

// ToAdditionalPropertyUnchanged converts gNMI to OAPI relative to a node in the tree.
func ToAdditionalPropertyUnchanged(ygotObjValue *reflect.Value, params ...string) (*types.AdditionalPropertyUnchanged, error) {
	resource := new(types.AdditionalPropertyUnchanged)

	// Property: unchanged string
	//encoding gNMI attribute to OAPI
	reflectUnchanged, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Unchanged")
	if err != nil {
		return nil, err
	}
	if reflectUnchanged != nil {
		attrUnchanged := fmt.Sprintf("%s", reflectUnchanged.Interface())
		resource.Unchanged = &attrUnchanged
	}

	return resource, nil
}

// ToConnectivityServices converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToConnectivityServices(params ...string) (*types.ConnectivityServices, error) {
	resource := new(types.ConnectivityServices)

	reflectConnectivityServices, err := utils.FindModelPluginObject(d.device, "ConnectivityServices", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToConnectivityServices(reflectConnectivityServices, params...)
	return resource, err

}

// ToConnectivityServices converts gNMI to OAPI relative to a node in the tree.
func ToConnectivityServices(ygotObjValue *reflect.Value, params ...string) (*types.ConnectivityServices, error) {
	resource := new(types.ConnectivityServices)

	// Property: connectivity-service ConnectivityServicesConnectivityServiceList
	// Handle object
	reflectConnectivityService, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ConnectivityService")
	if err != nil {
		return nil, err
	}
	if reflectConnectivityService != nil {
		attrConnectivityService, err := ToConnectivityServicesConnectivityServiceList(reflectConnectivityService, params...)
		if err != nil {
			return nil, err
		}
		resource.ConnectivityService = attrConnectivityService
	}

	return resource, nil
}

// ToConnectivityServicesConnectivityService converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToConnectivityServicesConnectivityService(params ...string) (*types.ConnectivityServicesConnectivityService, error) {
	resource := new(types.ConnectivityServicesConnectivityService)

	reflectConnectivityServicesConnectivityService, err := utils.FindModelPluginObject(d.device, "ConnectivityServicesConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToConnectivityServicesConnectivityService(reflectConnectivityServicesConnectivityService, params...)
	return resource, err

}

// ToConnectivityServicesConnectivityService converts gNMI to OAPI relative to a node in the tree.
func ToConnectivityServicesConnectivityService(ygotObjValue *reflect.Value, params ...string) (*types.ConnectivityServicesConnectivityService, error) {
	resource := new(types.ConnectivityServicesConnectivityService)

	// Property: acc-prometheus-url string
	//encoding gNMI attribute to OAPI
	reflectAccPrometheusUrl, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "AccPrometheusUrl")
	if err != nil {
		return nil, err
	}
	if reflectAccPrometheusUrl != nil {
		attrAccPrometheusUrl := fmt.Sprintf("%s", reflectAccPrometheusUrl.Interface())
		resource.AccPrometheusUrl = &attrAccPrometheusUrl
	}

	// Property: connectivity-service-id string
	//encoding gNMI attribute to OAPI
	reflectConnectivityServiceId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ConnectivityServiceId")
	if err != nil {
		return nil, err
	}
	if reflectConnectivityServiceId != nil {
		attrConnectivityServiceId := fmt.Sprintf("%s", reflectConnectivityServiceId.Interface())
		resource.ConnectivityServiceId = attrConnectivityServiceId
	}

	// Property: core-5g-endpoint string
	//encoding gNMI attribute to OAPI
	reflectCore5gEndpoint, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Core5gEndpoint")
	if err != nil {
		return nil, err
	}
	if reflectCore5gEndpoint != nil {
		attrCore5gEndpoint := fmt.Sprintf("%s", reflectCore5gEndpoint.Interface())
		resource.Core5gEndpoint = &attrCore5gEndpoint
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := fmt.Sprintf("%s", reflectDescription.Interface())
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := fmt.Sprintf("%s", reflectDisplayName.Interface())
		resource.DisplayName = &attrDisplayName
	}

	return resource, nil
}

// ToConnectivityServicesConnectivityServiceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToConnectivityServicesConnectivityServiceList(params ...string) (*types.ConnectivityServicesConnectivityServiceList, error) {
	resource := new(types.ConnectivityServicesConnectivityServiceList)

	// Array list - Go type ConnectivityServicesConnectivityService
	mpObject, err := utils.FindModelPluginObject(d.device, "ConnectivityServicesConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToConnectivityServicesConnectivityService(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToConnectivityServicesConnectivityServiceList converts gNMI to OAPI relative to a node in the tree.
func ToConnectivityServicesConnectivityServiceList(ygotObjValue *reflect.Value, params ...string) (*types.ConnectivityServicesConnectivityServiceList, error) {
	resource := new(types.ConnectivityServicesConnectivityServiceList)

	// Array list - Go type:                                                         ConnectivityServicesConnectivityService Last 4: 'List'
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToConnectivityServicesConnectivityService(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToEnterprises converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprises(params ...string) (*types.Enterprises, error) {
	resource := new(types.Enterprises)

	reflectEnterprises, err := utils.FindModelPluginObject(d.device, "Enterprises", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprises(reflectEnterprises, params...)
	return resource, err

}

// ToEnterprises converts gNMI to OAPI relative to a node in the tree.
func ToEnterprises(ygotObjValue *reflect.Value, params ...string) (*types.Enterprises, error) {
	resource := new(types.Enterprises)

	// Property: enterprise EnterprisesEnterpriseList
	// Handle object
	reflectEnterprise, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enterprise")
	if err != nil {
		return nil, err
	}
	if reflectEnterprise != nil {
		attrEnterprise, err := ToEnterprisesEnterpriseList(reflectEnterprise, params...)
		if err != nil {
			return nil, err
		}
		resource.Enterprise = attrEnterprise
	}

	return resource, nil
}

// ToEnterprisesEnterprise converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterprise(params ...string) (*types.EnterprisesEnterprise, error) {
	resource := new(types.EnterprisesEnterprise)

	reflectEnterprisesEnterprise, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterprise", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterprise(reflectEnterprisesEnterprise, params...)
	return resource, err

}

// ToEnterprisesEnterprise converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterprise(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterprise, error) {
	resource := new(types.EnterprisesEnterprise)

	// Property: application EnterprisesEnterpriseApplicationList
	// Handle object
	reflectApplication, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Application")
	if err != nil {
		return nil, err
	}
	if reflectApplication != nil {
		attrApplication, err := ToEnterprisesEnterpriseApplicationList(reflectApplication, params...)
		if err != nil {
			return nil, err
		}
		resource.Application = attrApplication
	}

	// Property: connectivity-service EnterprisesEnterpriseConnectivityServiceList
	// Handle object
	reflectConnectivityService, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ConnectivityService")
	if err != nil {
		return nil, err
	}
	if reflectConnectivityService != nil {
		attrConnectivityService, err := ToEnterprisesEnterpriseConnectivityServiceList(reflectConnectivityService, params...)
		if err != nil {
			return nil, err
		}
		resource.ConnectivityService = attrConnectivityService
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := fmt.Sprintf("%s", reflectDescription.Interface())
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := fmt.Sprintf("%s", reflectDisplayName.Interface())
		resource.DisplayName = &attrDisplayName
	}

	// Property: enterprise-id string
	//encoding gNMI attribute to OAPI
	reflectEnterpriseId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EnterpriseId")
	if err != nil {
		return nil, err
	}
	if reflectEnterpriseId != nil {
		attrEnterpriseId := fmt.Sprintf("%s", reflectEnterpriseId.Interface())
		resource.EnterpriseId = attrEnterpriseId
	}

	// Property: site EnterprisesEnterpriseSiteList
	// Handle object
	reflectSite, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Site")
	if err != nil {
		return nil, err
	}
	if reflectSite != nil {
		attrSite, err := ToEnterprisesEnterpriseSiteList(reflectSite, params...)
		if err != nil {
			return nil, err
		}
		resource.Site = attrSite
	}

	// Property: template EnterprisesEnterpriseTemplateList
	// Handle object
	reflectTemplate, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Template")
	if err != nil {
		return nil, err
	}
	if reflectTemplate != nil {
		attrTemplate, err := ToEnterprisesEnterpriseTemplateList(reflectTemplate, params...)
		if err != nil {
			return nil, err
		}
		resource.Template = attrTemplate
	}

	// Property: traffic-class EnterprisesEnterpriseTrafficClassList
	// Handle object
	reflectTrafficClass, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "TrafficClass")
	if err != nil {
		return nil, err
	}
	if reflectTrafficClass != nil {
		attrTrafficClass, err := ToEnterprisesEnterpriseTrafficClassList(reflectTrafficClass, params...)
		if err != nil {
			return nil, err
		}
		resource.TrafficClass = attrTrafficClass
	}

	return resource, nil
}

// ToEnterprisesEnterpriseApplication converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseApplication(params ...string) (*types.EnterprisesEnterpriseApplication, error) {
	resource := new(types.EnterprisesEnterpriseApplication)

	reflectEnterprisesEnterpriseApplication, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplication", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseApplication(reflectEnterprisesEnterpriseApplication, params...)
	return resource, err

}

// ToEnterprisesEnterpriseApplication converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseApplication(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseApplication, error) {
	resource := new(types.EnterprisesEnterpriseApplication)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Address")
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := fmt.Sprintf("%s", reflectAddress.Interface())
		resource.Address = attrAddress
	}

	// Property: application-id string
	//encoding gNMI attribute to OAPI
	reflectApplicationId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ApplicationId")
	if err != nil {
		return nil, err
	}
	if reflectApplicationId != nil {
		attrApplicationId := fmt.Sprintf("%s", reflectApplicationId.Interface())
		resource.ApplicationId = attrApplicationId
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := fmt.Sprintf("%s", reflectDescription.Interface())
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := fmt.Sprintf("%s", reflectDisplayName.Interface())
		resource.DisplayName = &attrDisplayName
	}

	// Property: endpoint EnterprisesEnterpriseApplicationEndpointList
	// Handle object
	reflectEndpoint, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Endpoint")
	if err != nil {
		return nil, err
	}
	if reflectEndpoint != nil {
		attrEndpoint, err := ToEnterprisesEnterpriseApplicationEndpointList(reflectEndpoint, params...)
		if err != nil {
			return nil, err
		}
		resource.Endpoint = attrEndpoint
	}

	return resource, nil
}

// ToEnterprisesEnterpriseApplicationEndpoint converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseApplicationEndpoint(params ...string) (*types.EnterprisesEnterpriseApplicationEndpoint, error) {
	resource := new(types.EnterprisesEnterpriseApplicationEndpoint)

	reflectEnterprisesEnterpriseApplicationEndpoint, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplicationEndpoint", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseApplicationEndpoint(reflectEnterprisesEnterpriseApplicationEndpoint, params...)
	return resource, err

}

// ToEnterprisesEnterpriseApplicationEndpoint converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseApplicationEndpoint(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseApplicationEndpoint, error) {
	resource := new(types.EnterprisesEnterpriseApplicationEndpoint)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := fmt.Sprintf("%s", reflectDescription.Interface())
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := fmt.Sprintf("%s", reflectDisplayName.Interface())
		resource.DisplayName = &attrDisplayName
	}

	// Property: endpoint-id string
	//encoding gNMI attribute to OAPI
	reflectEndpointId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EndpointId")
	if err != nil {
		return nil, err
	}
	if reflectEndpointId != nil {
		attrEndpointId := fmt.Sprintf("%s", reflectEndpointId.Interface())
		resource.EndpointId = attrEndpointId
	}

	// Property: mbr EnterprisesEnterpriseApplicationEndpointMbr
	// Handle object
	reflectMbr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mbr")
	if err != nil {
		return nil, err
	}
	if reflectMbr != nil {
		attrMbr, err := ToEnterprisesEnterpriseApplicationEndpointMbr(reflectMbr, params...)
		if err != nil {
			return nil, err
		}
		resource.Mbr = attrMbr
	}

	// Property: port-end int
	//encoding gNMI attribute to OAPI
	reflectPortEnd, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "PortEnd")
	if err != nil {
		return nil, err
	}
	if reflectPortEnd != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.PortEnd, err = utils.ToIntPtr(reflectPortEnd); err != nil {
			return nil, err
		}
	}

	// Property: port-start int
	//encoding gNMI attribute to OAPI
	reflectPortStart, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "PortStart")
	if err != nil {
		return nil, err
	}
	if reflectPortStart != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.PortStart, err = utils.ToIntPtr(reflectPortStart); err != nil {
			return nil, err
		}
	}

	// Property: protocol string
	//encoding gNMI attribute to OAPI
	reflectProtocol, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Protocol")
	if err != nil {
		return nil, err
	}
	if reflectProtocol != nil {
		attrProtocol := fmt.Sprintf("%s", reflectProtocol.Interface())
		resource.Protocol = &attrProtocol
	}

	// Property: traffic-class string
	//encoding gNMI attribute to OAPI
	reflectTrafficClass, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "TrafficClass")
	if err != nil {
		return nil, err
	}
	if reflectTrafficClass != nil {
		attrTrafficClass := fmt.Sprintf("%s", reflectTrafficClass.Interface())
		resource.TrafficClass = &attrTrafficClass
	}

	return resource, nil
}

// ToEnterprisesEnterpriseApplicationEndpointList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseApplicationEndpointList(params ...string) (*types.EnterprisesEnterpriseApplicationEndpointList, error) {
	resource := new(types.EnterprisesEnterpriseApplicationEndpointList)

	// Array list - Go type EnterprisesEnterpriseApplicationEndpoint
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplicationEndpoint", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseApplicationEndpoint(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToEnterprisesEnterpriseApplicationEndpointList converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseApplicationEndpointList(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseApplicationEndpointList, error) {
	resource := new(types.EnterprisesEnterpriseApplicationEndpointList)

	// Array list - Go type:                                                        EnterprisesEnterpriseApplicationEndpoint Last 4: 'List'
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseApplicationEndpoint(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToEnterprisesEnterpriseApplicationEndpointMbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseApplicationEndpointMbr(params ...string) (*types.EnterprisesEnterpriseApplicationEndpointMbr, error) {
	resource := new(types.EnterprisesEnterpriseApplicationEndpointMbr)

	reflectEnterprisesEnterpriseApplicationEndpointMbr, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplicationEndpointMbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseApplicationEndpointMbr(reflectEnterprisesEnterpriseApplicationEndpointMbr, params...)
	return resource, err

}

// ToEnterprisesEnterpriseApplicationEndpointMbr converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseApplicationEndpointMbr(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseApplicationEndpointMbr, error) {
	resource := new(types.EnterprisesEnterpriseApplicationEndpointMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToEnterprisesEnterpriseApplicationList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseApplicationList(params ...string) (*types.EnterprisesEnterpriseApplicationList, error) {
	resource := new(types.EnterprisesEnterpriseApplicationList)

	// Array list - Go type EnterprisesEnterpriseApplication
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplication", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseApplication(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToEnterprisesEnterpriseApplicationList converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseApplicationList(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseApplicationList, error) {
	resource := new(types.EnterprisesEnterpriseApplicationList)

	// Array list - Go type:                                                                EnterprisesEnterpriseApplication Last 4: 'List'
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseApplication(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToEnterprisesEnterpriseConnectivityService converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseConnectivityService(params ...string) (*types.EnterprisesEnterpriseConnectivityService, error) {
	resource := new(types.EnterprisesEnterpriseConnectivityService)

	reflectEnterprisesEnterpriseConnectivityService, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseConnectivityService(reflectEnterprisesEnterpriseConnectivityService, params...)
	return resource, err

}

// ToEnterprisesEnterpriseConnectivityService converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseConnectivityService(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseConnectivityService, error) {
	resource := new(types.EnterprisesEnterpriseConnectivityService)

	// Property: connectivity-service string
	//encoding gNMI attribute to OAPI
	reflectConnectivityService, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ConnectivityService")
	if err != nil {
		return nil, err
	}
	if reflectConnectivityService != nil {
		attrConnectivityService := fmt.Sprintf("%s", reflectConnectivityService.Interface())
		resource.ConnectivityService = attrConnectivityService
	}

	// Property: enabled bool
	//encoding gNMI attribute to OAPI
	reflectEnabled, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enabled")
	if err != nil {
		return nil, err
	}
	if reflectEnabled != nil {
		boolEnabled := reflectEnabled.Interface().(bool)
		resource.Enabled = &boolEnabled
	}

	return resource, nil
}

// ToEnterprisesEnterpriseConnectivityServiceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseConnectivityServiceList(params ...string) (*types.EnterprisesEnterpriseConnectivityServiceList, error) {
	resource := new(types.EnterprisesEnterpriseConnectivityServiceList)

	// Array list - Go type EnterprisesEnterpriseConnectivityService
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseConnectivityService(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToEnterprisesEnterpriseConnectivityServiceList converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseConnectivityServiceList(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseConnectivityServiceList, error) {
	resource := new(types.EnterprisesEnterpriseConnectivityServiceList)

	// Array list - Go type:                                                        EnterprisesEnterpriseConnectivityService Last 4: 'List'
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseConnectivityService(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToEnterprisesEnterpriseList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseList(params ...string) (*types.EnterprisesEnterpriseList, error) {
	resource := new(types.EnterprisesEnterpriseList)

	// Array list - Go type EnterprisesEnterprise
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterprise", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterprise(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToEnterprisesEnterpriseList converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseList(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseList, error) {
	resource := new(types.EnterprisesEnterpriseList)

	// Array list - Go type:                                                                           EnterprisesEnterprise Last 4: 'List'
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterprise(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSite converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSite(params ...string) (*types.EnterprisesEnterpriseSite, error) {
	resource := new(types.EnterprisesEnterpriseSite)

	reflectEnterprisesEnterpriseSite, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSite", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseSite(reflectEnterprisesEnterpriseSite, params...)
	return resource, err

}

// ToEnterprisesEnterpriseSite converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSite(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSite, error) {
	resource := new(types.EnterprisesEnterpriseSite)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := fmt.Sprintf("%s", reflectDescription.Interface())
		resource.Description = &attrDescription
	}

	// Property: device EnterprisesEnterpriseSiteDeviceList
	// Handle object
	reflectDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Device")
	if err != nil {
		return nil, err
	}
	if reflectDevice != nil {
		attrDevice, err := ToEnterprisesEnterpriseSiteDeviceList(reflectDevice, params...)
		if err != nil {
			return nil, err
		}
		resource.Device = attrDevice
	}

	// Property: device-group EnterprisesEnterpriseSiteDeviceGroupList
	// Handle object
	reflectDeviceGroup, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DeviceGroup")
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroup != nil {
		attrDeviceGroup, err := ToEnterprisesEnterpriseSiteDeviceGroupList(reflectDeviceGroup, params...)
		if err != nil {
			return nil, err
		}
		resource.DeviceGroup = attrDeviceGroup
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := fmt.Sprintf("%s", reflectDisplayName.Interface())
		resource.DisplayName = &attrDisplayName
	}

	// Property: imsi-definition EnterprisesEnterpriseSiteImsiDefinition
	// Handle object
	reflectImsiDefinition, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ImsiDefinition")
	if err != nil {
		return nil, err
	}
	if reflectImsiDefinition != nil {
		attrImsiDefinition, err := ToEnterprisesEnterpriseSiteImsiDefinition(reflectImsiDefinition, params...)
		if err != nil {
			return nil, err
		}
		resource.ImsiDefinition = attrImsiDefinition
	}

	// Property: ip-domain EnterprisesEnterpriseSiteIpDomainList
	// Handle object
	reflectIpDomain, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "IpDomain")
	if err != nil {
		return nil, err
	}
	if reflectIpDomain != nil {
		attrIpDomain, err := ToEnterprisesEnterpriseSiteIpDomainList(reflectIpDomain, params...)
		if err != nil {
			return nil, err
		}
		resource.IpDomain = attrIpDomain
	}

	// Property: monitoring EnterprisesEnterpriseSiteMonitoring
	// Handle object
	reflectMonitoring, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Monitoring")
	if err != nil {
		return nil, err
	}
	if reflectMonitoring != nil {
		attrMonitoring, err := ToEnterprisesEnterpriseSiteMonitoring(reflectMonitoring, params...)
		if err != nil {
			return nil, err
		}
		resource.Monitoring = attrMonitoring
	}

	// Property: sim-card EnterprisesEnterpriseSiteSimCardList
	// Handle object
	reflectSimCard, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SimCard")
	if err != nil {
		return nil, err
	}
	if reflectSimCard != nil {
		attrSimCard, err := ToEnterprisesEnterpriseSiteSimCardList(reflectSimCard, params...)
		if err != nil {
			return nil, err
		}
		resource.SimCard = attrSimCard
	}

	// Property: site-id string
	//encoding gNMI attribute to OAPI
	reflectSiteId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SiteId")
	if err != nil {
		return nil, err
	}
	if reflectSiteId != nil {
		attrSiteId := fmt.Sprintf("%s", reflectSiteId.Interface())
		resource.SiteId = attrSiteId
	}

	// Property: slice EnterprisesEnterpriseSiteSliceList
	// Handle object
	reflectSlice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Slice")
	if err != nil {
		return nil, err
	}
	if reflectSlice != nil {
		attrSlice, err := ToEnterprisesEnterpriseSiteSliceList(reflectSlice, params...)
		if err != nil {
			return nil, err
		}
		resource.Slice = attrSlice
	}

	// Property: small-cell EnterprisesEnterpriseSiteSmallCellList
	// Handle object
	reflectSmallCell, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SmallCell")
	if err != nil {
		return nil, err
	}
	if reflectSmallCell != nil {
		attrSmallCell, err := ToEnterprisesEnterpriseSiteSmallCellList(reflectSmallCell, params...)
		if err != nil {
			return nil, err
		}
		resource.SmallCell = attrSmallCell
	}

	// Property: upf EnterprisesEnterpriseSiteUpfList
	// Handle object
	reflectUpf, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Upf")
	if err != nil {
		return nil, err
	}
	if reflectUpf != nil {
		attrUpf, err := ToEnterprisesEnterpriseSiteUpfList(reflectUpf, params...)
		if err != nil {
			return nil, err
		}
		resource.Upf = attrUpf
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteDevice(params ...string) (*types.EnterprisesEnterpriseSiteDevice, error) {
	resource := new(types.EnterprisesEnterpriseSiteDevice)

	reflectEnterprisesEnterpriseSiteDevice, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseSiteDevice(reflectEnterprisesEnterpriseSiteDevice, params...)
	return resource, err

}

// ToEnterprisesEnterpriseSiteDevice converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteDevice(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteDevice, error) {
	resource := new(types.EnterprisesEnterpriseSiteDevice)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := fmt.Sprintf("%s", reflectDescription.Interface())
		resource.Description = &attrDescription
	}

	// Property: device-id string
	//encoding gNMI attribute to OAPI
	reflectDeviceId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DeviceId")
	if err != nil {
		return nil, err
	}
	if reflectDeviceId != nil {
		attrDeviceId := fmt.Sprintf("%s", reflectDeviceId.Interface())
		resource.DeviceId = attrDeviceId
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := fmt.Sprintf("%s", reflectDisplayName.Interface())
		resource.DisplayName = &attrDisplayName
	}

	// Property: imei string
	//encoding gNMI attribute to OAPI
	reflectImei, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Imei")
	if err != nil {
		return nil, err
	}
	if reflectImei != nil {
		attrImei := fmt.Sprintf("%s", reflectImei.Interface())
		resource.Imei = &attrImei
	}

	// Property: sim-card string
	//encoding gNMI attribute to OAPI
	reflectSimCard, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SimCard")
	if err != nil {
		return nil, err
	}
	if reflectSimCard != nil {
		attrSimCard := fmt.Sprintf("%s", reflectSimCard.Interface())
		resource.SimCard = &attrSimCard
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteDeviceGroup converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteDeviceGroup(params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroup, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroup)

	reflectEnterprisesEnterpriseSiteDeviceGroup, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseSiteDeviceGroup(reflectEnterprisesEnterpriseSiteDeviceGroup, params...)
	return resource, err

}

// ToEnterprisesEnterpriseSiteDeviceGroup converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteDeviceGroup(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroup, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroup)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := fmt.Sprintf("%s", reflectDescription.Interface())
		resource.Description = &attrDescription
	}

	// Property: device EnterprisesEnterpriseSiteDeviceGroupDeviceList
	// Handle object
	reflectDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Device")
	if err != nil {
		return nil, err
	}
	if reflectDevice != nil {
		attrDevice, err := ToEnterprisesEnterpriseSiteDeviceGroupDeviceList(reflectDevice, params...)
		if err != nil {
			return nil, err
		}
		resource.Device = attrDevice
	}

	// Property: device-group-id string
	//encoding gNMI attribute to OAPI
	reflectDeviceGroupId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DeviceGroupId")
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroupId != nil {
		attrDeviceGroupId := fmt.Sprintf("%s", reflectDeviceGroupId.Interface())
		resource.DeviceGroupId = attrDeviceGroupId
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := fmt.Sprintf("%s", reflectDisplayName.Interface())
		resource.DisplayName = &attrDisplayName
	}

	// Property: ip-domain string
	//encoding gNMI attribute to OAPI
	reflectIpDomain, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "IpDomain")
	if err != nil {
		return nil, err
	}
	if reflectIpDomain != nil {
		attrIpDomain := fmt.Sprintf("%s", reflectIpDomain.Interface())
		resource.IpDomain = &attrIpDomain
	}

	// Property: mbr EnterprisesEnterpriseSiteDeviceGroupMbr
	// Handle object
	reflectMbr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mbr")
	if err != nil {
		return nil, err
	}
	if reflectMbr != nil {
		attrMbr, err := ToEnterprisesEnterpriseSiteDeviceGroupMbr(reflectMbr, params...)
		if err != nil {
			return nil, err
		}
		resource.Mbr = attrMbr
	}

	// Property: traffic-class string
	//encoding gNMI attribute to OAPI
	reflectTrafficClass, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "TrafficClass")
	if err != nil {
		return nil, err
	}
	if reflectTrafficClass != nil {
		attrTrafficClass := fmt.Sprintf("%s", reflectTrafficClass.Interface())
		resource.TrafficClass = attrTrafficClass
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteDeviceGroupDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteDeviceGroupDevice(params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroupDevice, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroupDevice)

	reflectEnterprisesEnterpriseSiteDeviceGroupDevice, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroupDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseSiteDeviceGroupDevice(reflectEnterprisesEnterpriseSiteDeviceGroupDevice, params...)
	return resource, err

}

// ToEnterprisesEnterpriseSiteDeviceGroupDevice converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteDeviceGroupDevice(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroupDevice, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroupDevice)

	// Property: device-id string
	//encoding gNMI attribute to OAPI
	reflectDeviceId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DeviceId")
	if err != nil {
		return nil, err
	}
	if reflectDeviceId != nil {
		attrDeviceId := fmt.Sprintf("%s", reflectDeviceId.Interface())
		resource.DeviceId = attrDeviceId
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enable")
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = &boolEnable
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteDeviceGroupDeviceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteDeviceGroupDeviceList(params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroupDeviceList, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroupDeviceList)

	// Array list - Go type EnterprisesEnterpriseSiteDeviceGroupDevice
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroupDevice", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteDeviceGroupDevice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToEnterprisesEnterpriseSiteDeviceGroupDeviceList converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteDeviceGroupDeviceList(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroupDeviceList, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroupDeviceList)

	// Array list - Go type:                                                      EnterprisesEnterpriseSiteDeviceGroupDevice Last 4: 'List'
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteDeviceGroupDevice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteDeviceGroupList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteDeviceGroupList(params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroupList, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroupList)

	// Array list - Go type EnterprisesEnterpriseSiteDeviceGroup
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteDeviceGroup(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToEnterprisesEnterpriseSiteDeviceGroupList converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteDeviceGroupList(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroupList, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroupList)

	// Array list - Go type:                                                            EnterprisesEnterpriseSiteDeviceGroup Last 4: 'List'
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteDeviceGroup(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteDeviceGroupMbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteDeviceGroupMbr(params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroupMbr, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroupMbr)

	reflectEnterprisesEnterpriseSiteDeviceGroupMbr, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroupMbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseSiteDeviceGroupMbr(reflectEnterprisesEnterpriseSiteDeviceGroupMbr, params...)
	return resource, err

}

// ToEnterprisesEnterpriseSiteDeviceGroupMbr converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteDeviceGroupMbr(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroupMbr, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroupMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteDeviceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteDeviceList(params ...string) (*types.EnterprisesEnterpriseSiteDeviceList, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceList)

	// Array list - Go type EnterprisesEnterpriseSiteDevice
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDevice", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteDevice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToEnterprisesEnterpriseSiteDeviceList converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteDeviceList(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteDeviceList, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceList)

	// Array list - Go type:                                                                 EnterprisesEnterpriseSiteDevice Last 4: 'List'
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteDevice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteImsiDefinition converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteImsiDefinition(params ...string) (*types.EnterprisesEnterpriseSiteImsiDefinition, error) {
	resource := new(types.EnterprisesEnterpriseSiteImsiDefinition)

	reflectEnterprisesEnterpriseSiteImsiDefinition, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteImsiDefinition", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseSiteImsiDefinition(reflectEnterprisesEnterpriseSiteImsiDefinition, params...)
	return resource, err

}

// ToEnterprisesEnterpriseSiteImsiDefinition converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteImsiDefinition(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteImsiDefinition, error) {
	resource := new(types.EnterprisesEnterpriseSiteImsiDefinition)

	// Property: enterprise int32
	//encoding gNMI attribute to OAPI
	reflectEnterprise, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enterprise")
	if err != nil {
		return nil, err
	}
	if reflectEnterprise != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Enterprise, err = utils.ToInt32(reflectEnterprise); err != nil {
			return nil, err
		}
	}

	// Property: format string
	//encoding gNMI attribute to OAPI
	reflectFormat, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Format")
	if err != nil {
		return nil, err
	}
	if reflectFormat != nil {
		attrFormat := fmt.Sprintf("%s", reflectFormat.Interface())
		resource.Format = attrFormat
	}

	// Property: mcc string
	//encoding gNMI attribute to OAPI
	reflectMcc, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mcc")
	if err != nil {
		return nil, err
	}
	if reflectMcc != nil {
		attrMcc := fmt.Sprintf("%s", reflectMcc.Interface())
		resource.Mcc = attrMcc
	}

	// Property: mnc string
	//encoding gNMI attribute to OAPI
	reflectMnc, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mnc")
	if err != nil {
		return nil, err
	}
	if reflectMnc != nil {
		attrMnc := fmt.Sprintf("%s", reflectMnc.Interface())
		resource.Mnc = attrMnc
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteIpDomain converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteIpDomain(params ...string) (*types.EnterprisesEnterpriseSiteIpDomain, error) {
	resource := new(types.EnterprisesEnterpriseSiteIpDomain)

	reflectEnterprisesEnterpriseSiteIpDomain, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteIpDomain", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseSiteIpDomain(reflectEnterprisesEnterpriseSiteIpDomain, params...)
	return resource, err

}

// ToEnterprisesEnterpriseSiteIpDomain converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteIpDomain(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteIpDomain, error) {
	resource := new(types.EnterprisesEnterpriseSiteIpDomain)

	// Property: admin-status string
	//encoding gNMI attribute to OAPI
	reflectAdminStatus, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "AdminStatus")
	if err != nil {
		return nil, err
	}
	if reflectAdminStatus != nil {
		attrAdminStatus := fmt.Sprintf("%s", reflectAdminStatus.Interface())
		resource.AdminStatus = &attrAdminStatus
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := fmt.Sprintf("%s", reflectDescription.Interface())
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := fmt.Sprintf("%s", reflectDisplayName.Interface())
		resource.DisplayName = &attrDisplayName
	}

	// Property: dnn string
	//encoding gNMI attribute to OAPI
	reflectDnn, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Dnn")
	if err != nil {
		return nil, err
	}
	if reflectDnn != nil {
		attrDnn := fmt.Sprintf("%s", reflectDnn.Interface())
		resource.Dnn = attrDnn
	}

	// Property: dns-primary string
	//encoding gNMI attribute to OAPI
	reflectDnsPrimary, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DnsPrimary")
	if err != nil {
		return nil, err
	}
	if reflectDnsPrimary != nil {
		attrDnsPrimary := fmt.Sprintf("%s", reflectDnsPrimary.Interface())
		resource.DnsPrimary = &attrDnsPrimary
	}

	// Property: dns-secondary string
	//encoding gNMI attribute to OAPI
	reflectDnsSecondary, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DnsSecondary")
	if err != nil {
		return nil, err
	}
	if reflectDnsSecondary != nil {
		attrDnsSecondary := fmt.Sprintf("%s", reflectDnsSecondary.Interface())
		resource.DnsSecondary = &attrDnsSecondary
	}

	// Property: ip-domain-id string
	//encoding gNMI attribute to OAPI
	reflectIpDomainId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "IpDomainId")
	if err != nil {
		return nil, err
	}
	if reflectIpDomainId != nil {
		attrIpDomainId := fmt.Sprintf("%s", reflectIpDomainId.Interface())
		resource.IpDomainId = attrIpDomainId
	}

	// Property: mtu int
	//encoding gNMI attribute to OAPI
	reflectMtu, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mtu")
	if err != nil {
		return nil, err
	}
	if reflectMtu != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Mtu, err = utils.ToIntPtr(reflectMtu); err != nil {
			return nil, err
		}
	}

	// Property: subnet string
	//encoding gNMI attribute to OAPI
	reflectSubnet, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Subnet")
	if err != nil {
		return nil, err
	}
	if reflectSubnet != nil {
		attrSubnet := fmt.Sprintf("%s", reflectSubnet.Interface())
		resource.Subnet = attrSubnet
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteIpDomainList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteIpDomainList(params ...string) (*types.EnterprisesEnterpriseSiteIpDomainList, error) {
	resource := new(types.EnterprisesEnterpriseSiteIpDomainList)

	// Array list - Go type EnterprisesEnterpriseSiteIpDomain
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteIpDomain", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteIpDomain(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToEnterprisesEnterpriseSiteIpDomainList converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteIpDomainList(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteIpDomainList, error) {
	resource := new(types.EnterprisesEnterpriseSiteIpDomainList)

	// Array list - Go type:                                                               EnterprisesEnterpriseSiteIpDomain Last 4: 'List'
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteIpDomain(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteList(params ...string) (*types.EnterprisesEnterpriseSiteList, error) {
	resource := new(types.EnterprisesEnterpriseSiteList)

	// Array list - Go type EnterprisesEnterpriseSite
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSite", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSite(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToEnterprisesEnterpriseSiteList converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteList(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteList, error) {
	resource := new(types.EnterprisesEnterpriseSiteList)

	// Array list - Go type:                                                                       EnterprisesEnterpriseSite Last 4: 'List'
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSite(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteMonitoring converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteMonitoring(params ...string) (*types.EnterprisesEnterpriseSiteMonitoring, error) {
	resource := new(types.EnterprisesEnterpriseSiteMonitoring)

	reflectEnterprisesEnterpriseSiteMonitoring, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteMonitoring", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseSiteMonitoring(reflectEnterprisesEnterpriseSiteMonitoring, params...)
	return resource, err

}

// ToEnterprisesEnterpriseSiteMonitoring converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteMonitoring(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteMonitoring, error) {
	resource := new(types.EnterprisesEnterpriseSiteMonitoring)

	// Property: edge-cluster-prometheus-url string
	//encoding gNMI attribute to OAPI
	reflectEdgeClusterPrometheusUrl, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EdgeClusterPrometheusUrl")
	if err != nil {
		return nil, err
	}
	if reflectEdgeClusterPrometheusUrl != nil {
		attrEdgeClusterPrometheusUrl := fmt.Sprintf("%s", reflectEdgeClusterPrometheusUrl.Interface())
		resource.EdgeClusterPrometheusUrl = &attrEdgeClusterPrometheusUrl
	}

	// Property: edge-device EnterprisesEnterpriseSiteMonitoringEdgeDeviceList
	// Handle object
	reflectEdgeDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EdgeDevice")
	if err != nil {
		return nil, err
	}
	if reflectEdgeDevice != nil {
		attrEdgeDevice, err := ToEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(reflectEdgeDevice, params...)
		if err != nil {
			return nil, err
		}
		resource.EdgeDevice = attrEdgeDevice
	}

	// Property: edge-monitoring-prometheus-url string
	//encoding gNMI attribute to OAPI
	reflectEdgeMonitoringPrometheusUrl, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EdgeMonitoringPrometheusUrl")
	if err != nil {
		return nil, err
	}
	if reflectEdgeMonitoringPrometheusUrl != nil {
		attrEdgeMonitoringPrometheusUrl := fmt.Sprintf("%s", reflectEdgeMonitoringPrometheusUrl.Interface())
		resource.EdgeMonitoringPrometheusUrl = &attrEdgeMonitoringPrometheusUrl
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteMonitoringEdgeDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteMonitoringEdgeDevice(params ...string) (*types.EnterprisesEnterpriseSiteMonitoringEdgeDevice, error) {
	resource := new(types.EnterprisesEnterpriseSiteMonitoringEdgeDevice)

	reflectEnterprisesEnterpriseSiteMonitoringEdgeDevice, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteMonitoringEdgeDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseSiteMonitoringEdgeDevice(reflectEnterprisesEnterpriseSiteMonitoringEdgeDevice, params...)
	return resource, err

}

// ToEnterprisesEnterpriseSiteMonitoringEdgeDevice converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteMonitoringEdgeDevice(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteMonitoringEdgeDevice, error) {
	resource := new(types.EnterprisesEnterpriseSiteMonitoringEdgeDevice)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := fmt.Sprintf("%s", reflectDescription.Interface())
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := fmt.Sprintf("%s", reflectDisplayName.Interface())
		resource.DisplayName = &attrDisplayName
	}

	// Property: edge-device-id string
	//encoding gNMI attribute to OAPI
	reflectEdgeDeviceId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EdgeDeviceId")
	if err != nil {
		return nil, err
	}
	if reflectEdgeDeviceId != nil {
		attrEdgeDeviceId := fmt.Sprintf("%s", reflectEdgeDeviceId.Interface())
		resource.EdgeDeviceId = attrEdgeDeviceId
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteMonitoringEdgeDeviceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(params ...string) (*types.EnterprisesEnterpriseSiteMonitoringEdgeDeviceList, error) {
	resource := new(types.EnterprisesEnterpriseSiteMonitoringEdgeDeviceList)

	// Array list - Go type EnterprisesEnterpriseSiteMonitoringEdgeDevice
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteMonitoringEdgeDevice", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteMonitoringEdgeDevice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToEnterprisesEnterpriseSiteMonitoringEdgeDeviceList converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteMonitoringEdgeDeviceList, error) {
	resource := new(types.EnterprisesEnterpriseSiteMonitoringEdgeDeviceList)

	// Array list - Go type:                                                   EnterprisesEnterpriseSiteMonitoringEdgeDevice Last 4: 'List'
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteMonitoringEdgeDevice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteSimCard converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteSimCard(params ...string) (*types.EnterprisesEnterpriseSiteSimCard, error) {
	resource := new(types.EnterprisesEnterpriseSiteSimCard)

	reflectEnterprisesEnterpriseSiteSimCard, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSimCard", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseSiteSimCard(reflectEnterprisesEnterpriseSiteSimCard, params...)
	return resource, err

}

// ToEnterprisesEnterpriseSiteSimCard converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteSimCard(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteSimCard, error) {
	resource := new(types.EnterprisesEnterpriseSiteSimCard)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := fmt.Sprintf("%s", reflectDescription.Interface())
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := fmt.Sprintf("%s", reflectDisplayName.Interface())
		resource.DisplayName = &attrDisplayName
	}

	// Property: iccid string
	//encoding gNMI attribute to OAPI
	reflectIccid, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Iccid")
	if err != nil {
		return nil, err
	}
	if reflectIccid != nil {
		attrIccid := fmt.Sprintf("%s", reflectIccid.Interface())
		resource.Iccid = &attrIccid
	}

	// Property: imsi int64
	//encoding gNMI attribute to OAPI
	reflectImsi, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Imsi")
	if err != nil {
		return nil, err
	}
	if reflectImsi != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Imsi, err = utils.ToInt64Ptr(reflectImsi); err != nil {
			return nil, err
		}
	}

	// Property: sim-id string
	//encoding gNMI attribute to OAPI
	reflectSimId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SimId")
	if err != nil {
		return nil, err
	}
	if reflectSimId != nil {
		attrSimId := fmt.Sprintf("%s", reflectSimId.Interface())
		resource.SimId = attrSimId
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteSimCardList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteSimCardList(params ...string) (*types.EnterprisesEnterpriseSiteSimCardList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSimCardList)

	// Array list - Go type EnterprisesEnterpriseSiteSimCard
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSimCard", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteSimCard(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToEnterprisesEnterpriseSiteSimCardList converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteSimCardList(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteSimCardList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSimCardList)

	// Array list - Go type:                                                                EnterprisesEnterpriseSiteSimCard Last 4: 'List'
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteSimCard(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteSlice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteSlice(params ...string) (*types.EnterprisesEnterpriseSiteSlice, error) {
	resource := new(types.EnterprisesEnterpriseSiteSlice)

	reflectEnterprisesEnterpriseSiteSlice, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSlice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseSiteSlice(reflectEnterprisesEnterpriseSiteSlice, params...)
	return resource, err

}

// ToEnterprisesEnterpriseSiteSlice converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteSlice(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteSlice, error) {
	resource := new(types.EnterprisesEnterpriseSiteSlice)

	// Property: default-behavior string
	//encoding gNMI attribute to OAPI
	reflectDefaultBehavior, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DefaultBehavior")
	if err != nil {
		return nil, err
	}
	if reflectDefaultBehavior != nil {
		attrDefaultBehavior := fmt.Sprintf("%s", reflectDefaultBehavior.Interface())
		resource.DefaultBehavior = attrDefaultBehavior
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := fmt.Sprintf("%s", reflectDescription.Interface())
		resource.Description = &attrDescription
	}

	// Property: device-group EnterprisesEnterpriseSiteSliceDeviceGroupList
	// Handle object
	reflectDeviceGroup, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DeviceGroup")
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroup != nil {
		attrDeviceGroup, err := ToEnterprisesEnterpriseSiteSliceDeviceGroupList(reflectDeviceGroup, params...)
		if err != nil {
			return nil, err
		}
		resource.DeviceGroup = attrDeviceGroup
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := fmt.Sprintf("%s", reflectDisplayName.Interface())
		resource.DisplayName = &attrDisplayName
	}

	// Property: filter EnterprisesEnterpriseSiteSliceFilterList
	// Handle object
	reflectFilter, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Filter")
	if err != nil {
		return nil, err
	}
	if reflectFilter != nil {
		attrFilter, err := ToEnterprisesEnterpriseSiteSliceFilterList(reflectFilter, params...)
		if err != nil {
			return nil, err
		}
		resource.Filter = attrFilter
	}

	// Property: mbr EnterprisesEnterpriseSiteSliceMbr
	// Handle object
	reflectMbr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mbr")
	if err != nil {
		return nil, err
	}
	if reflectMbr != nil {
		attrMbr, err := ToEnterprisesEnterpriseSiteSliceMbr(reflectMbr, params...)
		if err != nil {
			return nil, err
		}
		resource.Mbr = attrMbr
	}

	// Property: priority-traffic-rule EnterprisesEnterpriseSiteSlicePriorityTrafficRuleList
	// Handle object
	reflectPriorityTrafficRule, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "PriorityTrafficRule")
	if err != nil {
		return nil, err
	}
	if reflectPriorityTrafficRule != nil {
		attrPriorityTrafficRule, err := ToEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(reflectPriorityTrafficRule, params...)
		if err != nil {
			return nil, err
		}
		resource.PriorityTrafficRule = attrPriorityTrafficRule
	}

	// Property: sd int32
	//encoding gNMI attribute to OAPI
	reflectSd, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Sd")
	if err != nil {
		return nil, err
	}
	if reflectSd != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sd, err = utils.ToInt32(reflectSd); err != nil {
			return nil, err
		}
	}

	// Property: slice-id string
	//encoding gNMI attribute to OAPI
	reflectSliceId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SliceId")
	if err != nil {
		return nil, err
	}
	if reflectSliceId != nil {
		attrSliceId := fmt.Sprintf("%s", reflectSliceId.Interface())
		resource.SliceId = attrSliceId
	}

	// Property: sst int
	//encoding gNMI attribute to OAPI
	reflectSst, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Sst")
	if err != nil {
		return nil, err
	}
	if reflectSst != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sst, err = utils.ToInt(reflectSst); err != nil {
			return nil, err
		}
	}

	// Property: upf string
	//encoding gNMI attribute to OAPI
	reflectUpf, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Upf")
	if err != nil {
		return nil, err
	}
	if reflectUpf != nil {
		attrUpf := fmt.Sprintf("%s", reflectUpf.Interface())
		resource.Upf = &attrUpf
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteSliceDeviceGroup converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteSliceDeviceGroup(params ...string) (*types.EnterprisesEnterpriseSiteSliceDeviceGroup, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceDeviceGroup)

	reflectEnterprisesEnterpriseSiteSliceDeviceGroup, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSliceDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseSiteSliceDeviceGroup(reflectEnterprisesEnterpriseSiteSliceDeviceGroup, params...)
	return resource, err

}

// ToEnterprisesEnterpriseSiteSliceDeviceGroup converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteSliceDeviceGroup(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteSliceDeviceGroup, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceDeviceGroup)

	// Property: device-group string
	//encoding gNMI attribute to OAPI
	reflectDeviceGroup, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DeviceGroup")
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroup != nil {
		attrDeviceGroup := fmt.Sprintf("%s", reflectDeviceGroup.Interface())
		resource.DeviceGroup = attrDeviceGroup
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enable")
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = &boolEnable
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteSliceDeviceGroupList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteSliceDeviceGroupList(params ...string) (*types.EnterprisesEnterpriseSiteSliceDeviceGroupList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceDeviceGroupList)

	// Array list - Go type EnterprisesEnterpriseSiteSliceDeviceGroup
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSliceDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteSliceDeviceGroup(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToEnterprisesEnterpriseSiteSliceDeviceGroupList converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteSliceDeviceGroupList(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteSliceDeviceGroupList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceDeviceGroupList)

	// Array list - Go type:                                                       EnterprisesEnterpriseSiteSliceDeviceGroup Last 4: 'List'
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteSliceDeviceGroup(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteSliceFilter converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteSliceFilter(params ...string) (*types.EnterprisesEnterpriseSiteSliceFilter, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceFilter)

	reflectEnterprisesEnterpriseSiteSliceFilter, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSliceFilter", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseSiteSliceFilter(reflectEnterprisesEnterpriseSiteSliceFilter, params...)
	return resource, err

}

// ToEnterprisesEnterpriseSiteSliceFilter converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteSliceFilter(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteSliceFilter, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceFilter)

	// Property: allow bool
	//encoding gNMI attribute to OAPI
	reflectAllow, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Allow")
	if err != nil {
		return nil, err
	}
	if reflectAllow != nil {
		boolAllow := reflectAllow.Interface().(bool)
		resource.Allow = &boolAllow
	}

	// Property: application string
	//encoding gNMI attribute to OAPI
	reflectApplication, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Application")
	if err != nil {
		return nil, err
	}
	if reflectApplication != nil {
		attrApplication := fmt.Sprintf("%s", reflectApplication.Interface())
		resource.Application = attrApplication
	}

	// Property: priority int
	//encoding gNMI attribute to OAPI
	reflectPriority, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Priority")
	if err != nil {
		return nil, err
	}
	if reflectPriority != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Priority, err = utils.ToIntPtr(reflectPriority); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteSliceFilterList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteSliceFilterList(params ...string) (*types.EnterprisesEnterpriseSiteSliceFilterList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceFilterList)

	// Array list - Go type EnterprisesEnterpriseSiteSliceFilter
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSliceFilter", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteSliceFilter(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToEnterprisesEnterpriseSiteSliceFilterList converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteSliceFilterList(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteSliceFilterList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceFilterList)

	// Array list - Go type:                                                            EnterprisesEnterpriseSiteSliceFilter Last 4: 'List'
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteSliceFilter(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteSliceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteSliceList(params ...string) (*types.EnterprisesEnterpriseSiteSliceList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceList)

	// Array list - Go type EnterprisesEnterpriseSiteSlice
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSlice", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteSlice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToEnterprisesEnterpriseSiteSliceList converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteSliceList(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteSliceList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceList)

	// Array list - Go type:                                                                  EnterprisesEnterpriseSiteSlice Last 4: 'List'
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteSlice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteSliceMbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteSliceMbr(params ...string) (*types.EnterprisesEnterpriseSiteSliceMbr, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceMbr)

	reflectEnterprisesEnterpriseSiteSliceMbr, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSliceMbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseSiteSliceMbr(reflectEnterprisesEnterpriseSiteSliceMbr, params...)
	return resource, err

}

// ToEnterprisesEnterpriseSiteSliceMbr converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteSliceMbr(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteSliceMbr, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: downlink-burst-size int32
	//encoding gNMI attribute to OAPI
	reflectDownlinkBurstSize, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DownlinkBurstSize")
	if err != nil {
		return nil, err
	}
	if reflectDownlinkBurstSize != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.DownlinkBurstSize, err = utils.ToInt32Ptr(reflectDownlinkBurstSize); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	// Property: uplink-burst-size int32
	//encoding gNMI attribute to OAPI
	reflectUplinkBurstSize, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "UplinkBurstSize")
	if err != nil {
		return nil, err
	}
	if reflectUplinkBurstSize != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.UplinkBurstSize, err = utils.ToInt32Ptr(reflectUplinkBurstSize); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteSlicePriorityTrafficRule converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteSlicePriorityTrafficRule(params ...string) (*types.EnterprisesEnterpriseSiteSlicePriorityTrafficRule, error) {
	resource := new(types.EnterprisesEnterpriseSiteSlicePriorityTrafficRule)

	reflectEnterprisesEnterpriseSiteSlicePriorityTrafficRule, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSlicePriorityTrafficRule", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseSiteSlicePriorityTrafficRule(reflectEnterprisesEnterpriseSiteSlicePriorityTrafficRule, params...)
	return resource, err

}

// ToEnterprisesEnterpriseSiteSlicePriorityTrafficRule converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteSlicePriorityTrafficRule, error) {
	resource := new(types.EnterprisesEnterpriseSiteSlicePriorityTrafficRule)

	// Property: application string
	//encoding gNMI attribute to OAPI
	reflectApplication, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Application")
	if err != nil {
		return nil, err
	}
	if reflectApplication != nil {
		attrApplication := fmt.Sprintf("%s", reflectApplication.Interface())
		resource.Application = attrApplication
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := fmt.Sprintf("%s", reflectDescription.Interface())
		resource.Description = &attrDescription
	}

	// Property: device string
	//encoding gNMI attribute to OAPI
	reflectDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Device")
	if err != nil {
		return nil, err
	}
	if reflectDevice != nil {
		attrDevice := fmt.Sprintf("%s", reflectDevice.Interface())
		resource.Device = attrDevice
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := fmt.Sprintf("%s", reflectDisplayName.Interface())
		resource.DisplayName = &attrDisplayName
	}

	// Property: endpoint string
	//encoding gNMI attribute to OAPI
	reflectEndpoint, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Endpoint")
	if err != nil {
		return nil, err
	}
	if reflectEndpoint != nil {
		attrEndpoint := fmt.Sprintf("%s", reflectEndpoint.Interface())
		resource.Endpoint = attrEndpoint
	}

	// Property: gbr EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr
	// Handle object
	reflectGbr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Gbr")
	if err != nil {
		return nil, err
	}
	if reflectGbr != nil {
		attrGbr, err := ToEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(reflectGbr, params...)
		if err != nil {
			return nil, err
		}
		resource.Gbr = attrGbr
	}

	// Property: mbr EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr
	// Handle object
	reflectMbr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mbr")
	if err != nil {
		return nil, err
	}
	if reflectMbr != nil {
		attrMbr, err := ToEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(reflectMbr, params...)
		if err != nil {
			return nil, err
		}
		resource.Mbr = attrMbr
	}

	// Property: priority-traffic-rule-id string
	//encoding gNMI attribute to OAPI
	reflectPriorityTrafficRuleId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "PriorityTrafficRuleId")
	if err != nil {
		return nil, err
	}
	if reflectPriorityTrafficRuleId != nil {
		attrPriorityTrafficRuleId := fmt.Sprintf("%s", reflectPriorityTrafficRuleId.Interface())
		resource.PriorityTrafficRuleId = attrPriorityTrafficRuleId
	}

	// Property: traffic-class string
	//encoding gNMI attribute to OAPI
	reflectTrafficClass, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "TrafficClass")
	if err != nil {
		return nil, err
	}
	if reflectTrafficClass != nil {
		attrTrafficClass := fmt.Sprintf("%s", reflectTrafficClass.Interface())
		resource.TrafficClass = &attrTrafficClass
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(params ...string) (*types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr, error) {
	resource := new(types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr)

	reflectEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(reflectEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr, params...)
	return resource, err

}

// ToEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr, error) {
	resource := new(types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(params ...string) (*types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleList)

	// Array list - Go type EnterprisesEnterpriseSiteSlicePriorityTrafficRule
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSlicePriorityTrafficRule", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteSlicePriorityTrafficRule(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleList)

	// Array list - Go type:                                               EnterprisesEnterpriseSiteSlicePriorityTrafficRule Last 4: 'List'
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteSlicePriorityTrafficRule(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(params ...string) (*types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr, error) {
	resource := new(types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr)

	reflectEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(reflectEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr, params...)
	return resource, err

}

// ToEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr, error) {
	resource := new(types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteSmallCell converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteSmallCell(params ...string) (*types.EnterprisesEnterpriseSiteSmallCell, error) {
	resource := new(types.EnterprisesEnterpriseSiteSmallCell)

	reflectEnterprisesEnterpriseSiteSmallCell, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSmallCell", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseSiteSmallCell(reflectEnterprisesEnterpriseSiteSmallCell, params...)
	return resource, err

}

// ToEnterprisesEnterpriseSiteSmallCell converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteSmallCell(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteSmallCell, error) {
	resource := new(types.EnterprisesEnterpriseSiteSmallCell)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Address")
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := fmt.Sprintf("%s", reflectAddress.Interface())
		resource.Address = &attrAddress
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := fmt.Sprintf("%s", reflectDescription.Interface())
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := fmt.Sprintf("%s", reflectDisplayName.Interface())
		resource.DisplayName = &attrDisplayName
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enable")
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = &boolEnable
	}

	// Property: small-cell-id string
	//encoding gNMI attribute to OAPI
	reflectSmallCellId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SmallCellId")
	if err != nil {
		return nil, err
	}
	if reflectSmallCellId != nil {
		attrSmallCellId := fmt.Sprintf("%s", reflectSmallCellId.Interface())
		resource.SmallCellId = attrSmallCellId
	}

	// Property: tac string
	//encoding gNMI attribute to OAPI
	reflectTac, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Tac")
	if err != nil {
		return nil, err
	}
	if reflectTac != nil {
		attrTac := fmt.Sprintf("%s", reflectTac.Interface())
		resource.Tac = attrTac
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteSmallCellList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteSmallCellList(params ...string) (*types.EnterprisesEnterpriseSiteSmallCellList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSmallCellList)

	// Array list - Go type EnterprisesEnterpriseSiteSmallCell
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSmallCell", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteSmallCell(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToEnterprisesEnterpriseSiteSmallCellList converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteSmallCellList(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteSmallCellList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSmallCellList)

	// Array list - Go type:                                                              EnterprisesEnterpriseSiteSmallCell Last 4: 'List'
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteSmallCell(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteUpf converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteUpf(params ...string) (*types.EnterprisesEnterpriseSiteUpf, error) {
	resource := new(types.EnterprisesEnterpriseSiteUpf)

	reflectEnterprisesEnterpriseSiteUpf, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteUpf", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseSiteUpf(reflectEnterprisesEnterpriseSiteUpf, params...)
	return resource, err

}

// ToEnterprisesEnterpriseSiteUpf converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteUpf(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteUpf, error) {
	resource := new(types.EnterprisesEnterpriseSiteUpf)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Address")
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := fmt.Sprintf("%s", reflectAddress.Interface())
		resource.Address = attrAddress
	}

	// Property: config-endpoint string
	//encoding gNMI attribute to OAPI
	reflectConfigEndpoint, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ConfigEndpoint")
	if err != nil {
		return nil, err
	}
	if reflectConfigEndpoint != nil {
		attrConfigEndpoint := fmt.Sprintf("%s", reflectConfigEndpoint.Interface())
		resource.ConfigEndpoint = &attrConfigEndpoint
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := fmt.Sprintf("%s", reflectDescription.Interface())
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := fmt.Sprintf("%s", reflectDisplayName.Interface())
		resource.DisplayName = &attrDisplayName
	}

	// Property: port int
	//encoding gNMI attribute to OAPI
	reflectPort, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Port")
	if err != nil {
		return nil, err
	}
	if reflectPort != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Port, err = utils.ToInt(reflectPort); err != nil {
			return nil, err
		}
	}

	// Property: upf-id string
	//encoding gNMI attribute to OAPI
	reflectUpfId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "UpfId")
	if err != nil {
		return nil, err
	}
	if reflectUpfId != nil {
		attrUpfId := fmt.Sprintf("%s", reflectUpfId.Interface())
		resource.UpfId = attrUpfId
	}

	return resource, nil
}

// ToEnterprisesEnterpriseSiteUpfList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseSiteUpfList(params ...string) (*types.EnterprisesEnterpriseSiteUpfList, error) {
	resource := new(types.EnterprisesEnterpriseSiteUpfList)

	// Array list - Go type EnterprisesEnterpriseSiteUpf
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteUpf", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteUpf(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToEnterprisesEnterpriseSiteUpfList converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseSiteUpfList(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseSiteUpfList, error) {
	resource := new(types.EnterprisesEnterpriseSiteUpfList)

	// Array list - Go type:                                                                    EnterprisesEnterpriseSiteUpf Last 4: 'List'
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseSiteUpf(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToEnterprisesEnterpriseTemplate converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseTemplate(params ...string) (*types.EnterprisesEnterpriseTemplate, error) {
	resource := new(types.EnterprisesEnterpriseTemplate)

	reflectEnterprisesEnterpriseTemplate, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTemplate", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseTemplate(reflectEnterprisesEnterpriseTemplate, params...)
	return resource, err

}

// ToEnterprisesEnterpriseTemplate converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseTemplate(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseTemplate, error) {
	resource := new(types.EnterprisesEnterpriseTemplate)

	// Property: default-behavior string
	//encoding gNMI attribute to OAPI
	reflectDefaultBehavior, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DefaultBehavior")
	if err != nil {
		return nil, err
	}
	if reflectDefaultBehavior != nil {
		attrDefaultBehavior := fmt.Sprintf("%s", reflectDefaultBehavior.Interface())
		resource.DefaultBehavior = attrDefaultBehavior
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := fmt.Sprintf("%s", reflectDescription.Interface())
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := fmt.Sprintf("%s", reflectDisplayName.Interface())
		resource.DisplayName = &attrDisplayName
	}

	// Property: mbr EnterprisesEnterpriseTemplateMbr
	// Handle object
	reflectMbr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mbr")
	if err != nil {
		return nil, err
	}
	if reflectMbr != nil {
		attrMbr, err := ToEnterprisesEnterpriseTemplateMbr(reflectMbr, params...)
		if err != nil {
			return nil, err
		}
		resource.Mbr = attrMbr
	}

	// Property: sd int32
	//encoding gNMI attribute to OAPI
	reflectSd, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Sd")
	if err != nil {
		return nil, err
	}
	if reflectSd != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sd, err = utils.ToInt32Ptr(reflectSd); err != nil {
			return nil, err
		}
	}

	// Property: sst int
	//encoding gNMI attribute to OAPI
	reflectSst, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Sst")
	if err != nil {
		return nil, err
	}
	if reflectSst != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sst, err = utils.ToIntPtr(reflectSst); err != nil {
			return nil, err
		}
	}

	// Property: template-id string
	//encoding gNMI attribute to OAPI
	reflectTemplateId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "TemplateId")
	if err != nil {
		return nil, err
	}
	if reflectTemplateId != nil {
		attrTemplateId := fmt.Sprintf("%s", reflectTemplateId.Interface())
		resource.TemplateId = attrTemplateId
	}

	return resource, nil
}

// ToEnterprisesEnterpriseTemplateList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseTemplateList(params ...string) (*types.EnterprisesEnterpriseTemplateList, error) {
	resource := new(types.EnterprisesEnterpriseTemplateList)

	// Array list - Go type EnterprisesEnterpriseTemplate
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTemplate", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseTemplate(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToEnterprisesEnterpriseTemplateList converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseTemplateList(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseTemplateList, error) {
	resource := new(types.EnterprisesEnterpriseTemplateList)

	// Array list - Go type:                                                                   EnterprisesEnterpriseTemplate Last 4: 'List'
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseTemplate(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToEnterprisesEnterpriseTemplateMbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseTemplateMbr(params ...string) (*types.EnterprisesEnterpriseTemplateMbr, error) {
	resource := new(types.EnterprisesEnterpriseTemplateMbr)

	reflectEnterprisesEnterpriseTemplateMbr, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTemplateMbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseTemplateMbr(reflectEnterprisesEnterpriseTemplateMbr, params...)
	return resource, err

}

// ToEnterprisesEnterpriseTemplateMbr converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseTemplateMbr(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseTemplateMbr, error) {
	resource := new(types.EnterprisesEnterpriseTemplateMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: downlink-burst-size int32
	//encoding gNMI attribute to OAPI
	reflectDownlinkBurstSize, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DownlinkBurstSize")
	if err != nil {
		return nil, err
	}
	if reflectDownlinkBurstSize != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.DownlinkBurstSize, err = utils.ToInt32Ptr(reflectDownlinkBurstSize); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	// Property: uplink-burst-size int32
	//encoding gNMI attribute to OAPI
	reflectUplinkBurstSize, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "UplinkBurstSize")
	if err != nil {
		return nil, err
	}
	if reflectUplinkBurstSize != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.UplinkBurstSize, err = utils.ToInt32Ptr(reflectUplinkBurstSize); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToEnterprisesEnterpriseTrafficClass converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseTrafficClass(params ...string) (*types.EnterprisesEnterpriseTrafficClass, error) {
	resource := new(types.EnterprisesEnterpriseTrafficClass)

	reflectEnterprisesEnterpriseTrafficClass, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTrafficClass", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterprisesEnterpriseTrafficClass(reflectEnterprisesEnterpriseTrafficClass, params...)
	return resource, err

}

// ToEnterprisesEnterpriseTrafficClass converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseTrafficClass(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseTrafficClass, error) {
	resource := new(types.EnterprisesEnterpriseTrafficClass)

	// Property: arp int
	//encoding gNMI attribute to OAPI
	reflectArp, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Arp")
	if err != nil {
		return nil, err
	}
	if reflectArp != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Arp, err = utils.ToIntPtr(reflectArp); err != nil {
			return nil, err
		}
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := fmt.Sprintf("%s", reflectDescription.Interface())
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := fmt.Sprintf("%s", reflectDisplayName.Interface())
		resource.DisplayName = &attrDisplayName
	}

	// Property: pdb int
	//encoding gNMI attribute to OAPI
	reflectPdb, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Pdb")
	if err != nil {
		return nil, err
	}
	if reflectPdb != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Pdb, err = utils.ToIntPtr(reflectPdb); err != nil {
			return nil, err
		}
	}

	// Property: pelr int
	//encoding gNMI attribute to OAPI
	reflectPelr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Pelr")
	if err != nil {
		return nil, err
	}
	if reflectPelr != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Pelr, err = utils.ToIntPtr(reflectPelr); err != nil {
			return nil, err
		}
	}

	// Property: qci int
	//encoding gNMI attribute to OAPI
	reflectQci, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Qci")
	if err != nil {
		return nil, err
	}
	if reflectQci != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Qci, err = utils.ToIntPtr(reflectQci); err != nil {
			return nil, err
		}
	}

	// Property: traffic-class-id string
	//encoding gNMI attribute to OAPI
	reflectTrafficClassId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "TrafficClassId")
	if err != nil {
		return nil, err
	}
	if reflectTrafficClassId != nil {
		attrTrafficClassId := fmt.Sprintf("%s", reflectTrafficClassId.Interface())
		resource.TrafficClassId = attrTrafficClassId
	}

	return resource, nil
}

// ToEnterprisesEnterpriseTrafficClassList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterprisesEnterpriseTrafficClassList(params ...string) (*types.EnterprisesEnterpriseTrafficClassList, error) {
	resource := new(types.EnterprisesEnterpriseTrafficClassList)

	// Array list - Go type EnterprisesEnterpriseTrafficClass
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTrafficClass", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseTrafficClass(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToEnterprisesEnterpriseTrafficClassList converts gNMI to OAPI relative to a node in the tree.
func ToEnterprisesEnterpriseTrafficClassList(ygotObjValue *reflect.Value, params ...string) (*types.EnterprisesEnterpriseTrafficClassList, error) {
	resource := new(types.EnterprisesEnterpriseTrafficClassList)

	// Array list - Go type:                                                               EnterprisesEnterpriseTrafficClass Last 4: 'List'
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToEnterprisesEnterpriseTrafficClass(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToTarget converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTarget(params ...string) (*types.Target, error) {
	resource := new(types.Target)

	reflectTarget, err := utils.FindModelPluginObject(d.device, "Target", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToTarget(reflectTarget, params...)
	return resource, err

}

// ToTarget converts gNMI to OAPI relative to a node in the tree.
func ToTarget(ygotObjValue *reflect.Value, params ...string) (*types.Target, error) {
	resource := new(types.Target)

	return resource, nil
}

//Ignoring RequestBodyConnectivityServices
//Ignoring RequestBodyConnectivityServicesConnectivityService
//Ignoring RequestBodyEnterprises
//Ignoring RequestBodyEnterprisesEnterprise
//Ignoring RequestBodyEnterprisesEnterpriseApplication
//Ignoring RequestBodyEnterprisesEnterpriseApplicationEndpoint
//Ignoring RequestBodyEnterprisesEnterpriseApplicationEndpointMbr
//Ignoring RequestBodyEnterprisesEnterpriseConnectivityService
//Ignoring RequestBodyEnterprisesEnterpriseSite
//Ignoring RequestBodyEnterprisesEnterpriseSiteDevice
//Ignoring RequestBodyEnterprisesEnterpriseSiteDeviceGroup
//Ignoring RequestBodyEnterprisesEnterpriseSiteDeviceGroupDevice
//Ignoring RequestBodyEnterprisesEnterpriseSiteDeviceGroupMbr
//Ignoring RequestBodyEnterprisesEnterpriseSiteImsiDefinition
//Ignoring RequestBodyEnterprisesEnterpriseSiteIpDomain
//Ignoring RequestBodyEnterprisesEnterpriseSiteMonitoring
//Ignoring RequestBodyEnterprisesEnterpriseSiteMonitoringEdgeDevice
//Ignoring RequestBodyEnterprisesEnterpriseSiteSimCard
//Ignoring RequestBodyEnterprisesEnterpriseSiteSlice
//Ignoring RequestBodyEnterprisesEnterpriseSiteSliceDeviceGroup
//Ignoring RequestBodyEnterprisesEnterpriseSiteSliceFilter
//Ignoring RequestBodyEnterprisesEnterpriseSiteSliceMbr
//Ignoring RequestBodyEnterprisesEnterpriseSiteSlicePriorityTrafficRule
//Ignoring RequestBodyEnterprisesEnterpriseSiteSmallCell
//Ignoring RequestBodyEnterprisesEnterpriseSiteUpf
//Ignoring RequestBodyEnterprisesEnterpriseTemplate
//Ignoring RequestBodyEnterprisesEnterpriseTemplateMbr
//Ignoring RequestBodyEnterprisesEnterpriseTrafficClass
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating param-types
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating request-bodies

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating additional-properties
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating additional-properties
