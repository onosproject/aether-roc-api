// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"fmt"

	"github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	externalRef0 "github.com/onosproject/config-models/modelplugin/aether-2.0.0/aether_2_0_0"
)

// ModelPluginDevice - a wrapper for the model plugin
type ModelPluginDevice struct {
	device externalRef0.Device
}

// toAdditionalPropertyTarget converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toAdditionalPropertyTarget(params ...string) (*types.AdditionalPropertyTarget, error) {
	resource := new(types.AdditionalPropertyTarget)

	reflectAdditionalPropertyTarget, err := utils.FindModelPluginObject(d.device, "AdditionalPropertyTarget", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toAdditionalPropertyTarget(reflectAdditionalPropertyTarget.Interface(), params...)
	return resource, err

}

// toAdditionalPropertyTarget converts gNMI to OAPI relative to a node in the tree.
func toAdditionalPropertyTarget(ygotObj interface{}, params ...string) (*types.AdditionalPropertyTarget, error) {
	resource := new(types.AdditionalPropertyTarget)

	// Property: target string
	//encoding gNMI attribute to OAPI
	reflectTarget, err := utils.FindModelPluginObject(ygotObj, "Target")
	if err != nil {
		return nil, err
	}
	if reflectTarget != nil {
		attrTarget := reflectTarget.Interface().(string)
		resource.Target = &attrTarget
	}

	return resource, nil
}

// toAdditionalPropertyUnchanged converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toAdditionalPropertyUnchanged(params ...string) (*types.AdditionalPropertyUnchanged, error) {
	resource := new(types.AdditionalPropertyUnchanged)

	reflectAdditionalPropertyUnchanged, err := utils.FindModelPluginObject(d.device, "AdditionalPropertyUnchanged", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toAdditionalPropertyUnchanged(reflectAdditionalPropertyUnchanged.Interface(), params...)
	return resource, err

}

// toAdditionalPropertyUnchanged converts gNMI to OAPI relative to a node in the tree.
func toAdditionalPropertyUnchanged(ygotObj interface{}, params ...string) (*types.AdditionalPropertyUnchanged, error) {
	resource := new(types.AdditionalPropertyUnchanged)

	// Property: unchanged string
	//encoding gNMI attribute to OAPI
	reflectUnchanged, err := utils.FindModelPluginObject(ygotObj, "Unchanged")
	if err != nil {
		return nil, err
	}
	if reflectUnchanged != nil {
		attrUnchanged := reflectUnchanged.Interface().(string)
		resource.Unchanged = &attrUnchanged
	}

	return resource, nil
}

// toConnectivityServices converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toConnectivityServices(params ...string) (*types.ConnectivityServices, error) {
	resource := new(types.ConnectivityServices)

	reflectConnectivityServices, err := utils.FindModelPluginObject(d.device, "ConnectivityServices", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toConnectivityServices(reflectConnectivityServices.Interface(), params...)
	return resource, err

}

// toConnectivityServices converts gNMI to OAPI relative to a node in the tree.
func toConnectivityServices(ygotObj interface{}, params ...string) (*types.ConnectivityServices, error) {
	resource := new(types.ConnectivityServices)

	// Property: connectivity-service []ConnectivityServicesConnectivityService
	// Handle []Object
	connectivityServices := make([]types.ConnectivityServicesConnectivityService, 0)
	reflectConnectivityServicesConnectivityService, err := utils.FindModelPluginObject(ygotObj, "ConnectivityService")
	if err != nil {
		return nil, err
	}
	if reflectConnectivityServicesConnectivityService != nil {
		for _, key := range reflectConnectivityServicesConnectivityService.MapKeys() {
			v := reflectConnectivityServicesConnectivityService.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			connectivityService, err := toConnectivityServicesConnectivityService(v, childParams...)
			if err != nil {
				return nil, err
			}
			connectivityServices = append(connectivityServices, *connectivityService)
		}
	}
	resource.ConnectivityService = &connectivityServices

	return resource, nil
}

// toConnectivityServicesConnectivityService converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toConnectivityServicesConnectivityService(params ...string) (*types.ConnectivityServicesConnectivityService, error) {
	resource := new(types.ConnectivityServicesConnectivityService)

	reflectConnectivityServicesConnectivityService, err := utils.FindModelPluginObject(d.device, "ConnectivityServicesConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toConnectivityServicesConnectivityService(reflectConnectivityServicesConnectivityService.Interface(), params...)
	return resource, err

}

// toConnectivityServicesConnectivityService converts gNMI to OAPI relative to a node in the tree.
func toConnectivityServicesConnectivityService(ygotObj interface{}, params ...string) (*types.ConnectivityServicesConnectivityService, error) {
	resource := new(types.ConnectivityServicesConnectivityService)

	// Property: acc-prometheus-url string
	//encoding gNMI attribute to OAPI
	reflectAccPrometheusUrl, err := utils.FindModelPluginObject(ygotObj, "AccPrometheusUrl")
	if err != nil {
		return nil, err
	}
	if reflectAccPrometheusUrl != nil {
		attrAccPrometheusUrl := reflectAccPrometheusUrl.Interface().(string)
		resource.AccPrometheusUrl = &attrAccPrometheusUrl
	}

	// Property: connectivity-service-id string
	//encoding gNMI attribute to OAPI
	reflectConnectivityServiceId, err := utils.FindModelPluginObject(ygotObj, "ConnectivityServiceId")
	if err != nil {
		return nil, err
	}
	if reflectConnectivityServiceId != nil {
		attrConnectivityServiceId := reflectConnectivityServiceId.Interface().(string)
		resource.ConnectivityServiceId = attrConnectivityServiceId
	}

	// Property: core-5g-endpoint string
	//encoding gNMI attribute to OAPI
	reflectCore5gEndpoint, err := utils.FindModelPluginObject(ygotObj, "Core5gEndpoint")
	if err != nil {
		return nil, err
	}
	if reflectCore5gEndpoint != nil {
		attrCore5gEndpoint := reflectCore5gEndpoint.Interface().(string)
		resource.Core5gEndpoint = &attrCore5gEndpoint
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObj, "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObj, "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	return resource, nil
}

// toEnterprises converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprises(params ...string) (*types.Enterprises, error) {
	resource := new(types.Enterprises)

	reflectEnterprises, err := utils.FindModelPluginObject(d.device, "Enterprises", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprises(reflectEnterprises.Interface(), params...)
	return resource, err

}

// toEnterprises converts gNMI to OAPI relative to a node in the tree.
func toEnterprises(ygotObj interface{}, params ...string) (*types.Enterprises, error) {
	resource := new(types.Enterprises)

	// Property: enterprise []EnterprisesEnterprise
	// Handle []Object
	enterprises := make([]types.EnterprisesEnterprise, 0)
	reflectEnterprisesEnterprise, err := utils.FindModelPluginObject(ygotObj, "Enterprise")
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterprise != nil {
		for _, key := range reflectEnterprisesEnterprise.MapKeys() {
			v := reflectEnterprisesEnterprise.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			enterprise, err := toEnterprisesEnterprise(v, childParams...)
			if err != nil {
				return nil, err
			}
			enterprises = append(enterprises, *enterprise)
		}
	}
	resource.Enterprise = &enterprises

	return resource, nil
}

// toEnterprisesEnterprise converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterprise(params ...string) (*types.EnterprisesEnterprise, error) {
	resource := new(types.EnterprisesEnterprise)

	reflectEnterprisesEnterprise, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterprise", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterprise(reflectEnterprisesEnterprise.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterprise converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterprise(ygotObj interface{}, params ...string) (*types.EnterprisesEnterprise, error) {
	resource := new(types.EnterprisesEnterprise)

	// Property: application []EnterprisesEnterpriseApplication
	// Handle []Object
	applications := make([]types.EnterprisesEnterpriseApplication, 0)
	reflectEnterprisesEnterpriseApplication, err := utils.FindModelPluginObject(ygotObj, "Application")
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseApplication != nil {
		for _, key := range reflectEnterprisesEnterpriseApplication.MapKeys() {
			v := reflectEnterprisesEnterpriseApplication.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			application, err := toEnterprisesEnterpriseApplication(v, childParams...)
			if err != nil {
				return nil, err
			}
			applications = append(applications, *application)
		}
	}
	resource.Application = &applications

	// Property: connectivity-service []EnterprisesEnterpriseConnectivityService
	// Handle []Object
	connectivityServices := make([]types.EnterprisesEnterpriseConnectivityService, 0)
	reflectEnterprisesEnterpriseConnectivityService, err := utils.FindModelPluginObject(ygotObj, "ConnectivityService")
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseConnectivityService != nil {
		for _, key := range reflectEnterprisesEnterpriseConnectivityService.MapKeys() {
			v := reflectEnterprisesEnterpriseConnectivityService.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			connectivityService, err := toEnterprisesEnterpriseConnectivityService(v, childParams...)
			if err != nil {
				return nil, err
			}
			connectivityServices = append(connectivityServices, *connectivityService)
		}
	}
	resource.ConnectivityService = &connectivityServices

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObj, "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObj, "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: enterprise-id string
	//encoding gNMI attribute to OAPI
	reflectEnterpriseId, err := utils.FindModelPluginObject(ygotObj, "EnterpriseId")
	if err != nil {
		return nil, err
	}
	if reflectEnterpriseId != nil {
		attrEnterpriseId := reflectEnterpriseId.Interface().(string)
		resource.EnterpriseId = attrEnterpriseId
	}

	// Property: site []EnterprisesEnterpriseSite
	// Handle []Object
	sites := make([]types.EnterprisesEnterpriseSite, 0)
	reflectEnterprisesEnterpriseSite, err := utils.FindModelPluginObject(ygotObj, "Site")
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSite != nil {
		for _, key := range reflectEnterprisesEnterpriseSite.MapKeys() {
			v := reflectEnterprisesEnterpriseSite.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			site, err := toEnterprisesEnterpriseSite(v, childParams...)
			if err != nil {
				return nil, err
			}
			sites = append(sites, *site)
		}
	}
	resource.Site = &sites

	// Property: template []EnterprisesEnterpriseTemplate
	// Handle []Object
	templates := make([]types.EnterprisesEnterpriseTemplate, 0)
	reflectEnterprisesEnterpriseTemplate, err := utils.FindModelPluginObject(ygotObj, "Template")
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseTemplate != nil {
		for _, key := range reflectEnterprisesEnterpriseTemplate.MapKeys() {
			v := reflectEnterprisesEnterpriseTemplate.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			template, err := toEnterprisesEnterpriseTemplate(v, childParams...)
			if err != nil {
				return nil, err
			}
			templates = append(templates, *template)
		}
	}
	resource.Template = &templates

	// Property: traffic-class []EnterprisesEnterpriseTrafficClass
	// Handle []Object
	trafficClasss := make([]types.EnterprisesEnterpriseTrafficClass, 0)
	reflectEnterprisesEnterpriseTrafficClass, err := utils.FindModelPluginObject(ygotObj, "TrafficClass")
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseTrafficClass != nil {
		for _, key := range reflectEnterprisesEnterpriseTrafficClass.MapKeys() {
			v := reflectEnterprisesEnterpriseTrafficClass.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			trafficClass, err := toEnterprisesEnterpriseTrafficClass(v, childParams...)
			if err != nil {
				return nil, err
			}
			trafficClasss = append(trafficClasss, *trafficClass)
		}
	}
	resource.TrafficClass = &trafficClasss

	return resource, nil
}

// toEnterprisesEnterpriseApplication converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseApplication(params ...string) (*types.EnterprisesEnterpriseApplication, error) {
	resource := new(types.EnterprisesEnterpriseApplication)

	reflectEnterprisesEnterpriseApplication, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplication", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseApplication(reflectEnterprisesEnterpriseApplication.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseApplication converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseApplication(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseApplication, error) {
	resource := new(types.EnterprisesEnterpriseApplication)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(ygotObj, "Address")
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := reflectAddress.Interface().(string)
		resource.Address = attrAddress
	}

	// Property: application-id string
	//encoding gNMI attribute to OAPI
	reflectApplicationId, err := utils.FindModelPluginObject(ygotObj, "ApplicationId")
	if err != nil {
		return nil, err
	}
	if reflectApplicationId != nil {
		attrApplicationId := reflectApplicationId.Interface().(string)
		resource.ApplicationId = attrApplicationId
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObj, "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObj, "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: endpoint []EnterprisesEnterpriseApplicationEndpoint
	// Handle []Object
	endpoints := make([]types.EnterprisesEnterpriseApplicationEndpoint, 0)
	reflectEnterprisesEnterpriseApplicationEndpoint, err := utils.FindModelPluginObject(ygotObj, "Endpoint")
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseApplicationEndpoint != nil {
		for _, key := range reflectEnterprisesEnterpriseApplicationEndpoint.MapKeys() {
			v := reflectEnterprisesEnterpriseApplicationEndpoint.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			endpoint, err := toEnterprisesEnterpriseApplicationEndpoint(v, childParams...)
			if err != nil {
				return nil, err
			}
			endpoints = append(endpoints, *endpoint)
		}
	}
	resource.Endpoint = &endpoints

	return resource, nil
}

// toEnterprisesEnterpriseApplicationEndpoint converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseApplicationEndpoint(params ...string) (*types.EnterprisesEnterpriseApplicationEndpoint, error) {
	resource := new(types.EnterprisesEnterpriseApplicationEndpoint)

	reflectEnterprisesEnterpriseApplicationEndpoint, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplicationEndpoint", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseApplicationEndpoint(reflectEnterprisesEnterpriseApplicationEndpoint.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseApplicationEndpoint converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseApplicationEndpoint(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseApplicationEndpoint, error) {
	resource := new(types.EnterprisesEnterpriseApplicationEndpoint)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObj, "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObj, "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: endpoint-id string
	//encoding gNMI attribute to OAPI
	reflectEndpointId, err := utils.FindModelPluginObject(ygotObj, "EndpointId")
	if err != nil {
		return nil, err
	}
	if reflectEndpointId != nil {
		attrEndpointId := reflectEndpointId.Interface().(string)
		resource.EndpointId = attrEndpointId
	}

	// Property: mbr EnterprisesEnterpriseApplicationEndpointMbr
	//Handle object
	reflectMbr, err := utils.FindModelPluginObject(ygotObj, "Mbr")
	if err != nil {
		return nil, err
	}
	if reflectMbr != nil {
		attrMbr, err := toEnterprisesEnterpriseApplicationEndpointMbr(reflectMbr.Interface(), params...)
		if err != nil {
			return nil, err
		}
		resource.Mbr = attrMbr
	}

	// Property: port-end int
	//encoding gNMI attribute to OAPI
	reflectPortEnd, err := utils.FindModelPluginObject(ygotObj, "PortEnd")
	if err != nil {
		return nil, err
	}
	if reflectPortEnd != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.PortEnd, err = utils.ToIntPtr(reflectPortEnd); err != nil {
			return nil, err
		}
	}

	// Property: port-start int
	//encoding gNMI attribute to OAPI
	reflectPortStart, err := utils.FindModelPluginObject(ygotObj, "PortStart")
	if err != nil {
		return nil, err
	}
	if reflectPortStart != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.PortStart, err = utils.ToIntPtr(reflectPortStart); err != nil {
			return nil, err
		}
	}

	// Property: protocol string
	//encoding gNMI attribute to OAPI
	reflectProtocol, err := utils.FindModelPluginObject(ygotObj, "Protocol")
	if err != nil {
		return nil, err
	}
	if reflectProtocol != nil {
		attrProtocol := reflectProtocol.Interface().(string)
		resource.Protocol = &attrProtocol
	}

	// Property: traffic-class string
	//encoding gNMI attribute to OAPI
	reflectTrafficClass, err := utils.FindModelPluginObject(ygotObj, "TrafficClass")
	if err != nil {
		return nil, err
	}
	if reflectTrafficClass != nil {
		attrTrafficClass := reflectTrafficClass.Interface().(string)
		resource.TrafficClass = &attrTrafficClass
	}

	return resource, nil
}

// toEnterprisesEnterpriseApplicationEndpointList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseApplicationEndpointList(params ...string) (*types.EnterprisesEnterpriseApplicationEndpointList, error) {
	resource := new(types.EnterprisesEnterpriseApplicationEndpointList)

	// Array list - Go type EnterprisesEnterpriseApplicationEndpoint
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplicationEndpoint", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		fmt.Printf("Handling %s\n", i.Key())

		r, err := toEnterprisesEnterpriseApplicationEndpoint(i.Value().Interface(), params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toEnterprisesEnterpriseApplicationEndpointList converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseApplicationEndpointList(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseApplicationEndpointList, error) {
	resource := new(types.EnterprisesEnterpriseApplicationEndpointList)

	// Not used

	return resource, nil
}

// toEnterprisesEnterpriseApplicationEndpointMbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseApplicationEndpointMbr(params ...string) (*types.EnterprisesEnterpriseApplicationEndpointMbr, error) {
	resource := new(types.EnterprisesEnterpriseApplicationEndpointMbr)

	reflectEnterprisesEnterpriseApplicationEndpointMbr, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplicationEndpointMbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseApplicationEndpointMbr(reflectEnterprisesEnterpriseApplicationEndpointMbr.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseApplicationEndpointMbr converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseApplicationEndpointMbr(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseApplicationEndpointMbr, error) {
	resource := new(types.EnterprisesEnterpriseApplicationEndpointMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObj, "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObj, "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toEnterprisesEnterpriseApplicationList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseApplicationList(params ...string) (*types.EnterprisesEnterpriseApplicationList, error) {
	resource := new(types.EnterprisesEnterpriseApplicationList)

	// Array list - Go type EnterprisesEnterpriseApplication
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplication", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		fmt.Printf("Handling %s\n", i.Key())

		r, err := toEnterprisesEnterpriseApplication(i.Value().Interface(), params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toEnterprisesEnterpriseApplicationList converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseApplicationList(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseApplicationList, error) {
	resource := new(types.EnterprisesEnterpriseApplicationList)

	// Not used

	return resource, nil
}

// toEnterprisesEnterpriseConnectivityService converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseConnectivityService(params ...string) (*types.EnterprisesEnterpriseConnectivityService, error) {
	resource := new(types.EnterprisesEnterpriseConnectivityService)

	reflectEnterprisesEnterpriseConnectivityService, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseConnectivityService(reflectEnterprisesEnterpriseConnectivityService.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseConnectivityService converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseConnectivityService(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseConnectivityService, error) {
	resource := new(types.EnterprisesEnterpriseConnectivityService)

	// Property: connectivity-service string
	//encoding gNMI attribute to OAPI
	reflectConnectivityService, err := utils.FindModelPluginObject(ygotObj, "ConnectivityService")
	if err != nil {
		return nil, err
	}
	if reflectConnectivityService != nil {
		attrConnectivityService := reflectConnectivityService.Interface().(string)
		resource.ConnectivityService = attrConnectivityService
	}

	// Property: enabled bool
	//encoding gNMI attribute to OAPI
	reflectEnabled, err := utils.FindModelPluginObject(ygotObj, "Enabled")
	if err != nil {
		return nil, err
	}
	if reflectEnabled != nil {
		boolEnabled := reflectEnabled.Interface().(bool)
		resource.Enabled = &boolEnabled
	}

	return resource, nil
}

// toEnterprisesEnterpriseConnectivityServiceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseConnectivityServiceList(params ...string) (*types.EnterprisesEnterpriseConnectivityServiceList, error) {
	resource := new(types.EnterprisesEnterpriseConnectivityServiceList)

	// Array list - Go type EnterprisesEnterpriseConnectivityService
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		fmt.Printf("Handling %s\n", i.Key())

		r, err := toEnterprisesEnterpriseConnectivityService(i.Value().Interface(), params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toEnterprisesEnterpriseConnectivityServiceList converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseConnectivityServiceList(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseConnectivityServiceList, error) {
	resource := new(types.EnterprisesEnterpriseConnectivityServiceList)

	// Not used

	return resource, nil
}

// toEnterprisesEnterpriseList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseList(params ...string) (*types.EnterprisesEnterpriseList, error) {
	resource := new(types.EnterprisesEnterpriseList)

	// Array list - Go type EnterprisesEnterprise
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterprise", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		fmt.Printf("Handling %s\n", i.Key())

		r, err := toEnterprisesEnterprise(i.Value().Interface(), params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toEnterprisesEnterpriseList converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseList(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseList, error) {
	resource := new(types.EnterprisesEnterpriseList)

	// Not used

	return resource, nil
}

// toEnterprisesEnterpriseSite converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSite(params ...string) (*types.EnterprisesEnterpriseSite, error) {
	resource := new(types.EnterprisesEnterpriseSite)

	reflectEnterprisesEnterpriseSite, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSite", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseSite(reflectEnterprisesEnterpriseSite.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseSite converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSite(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSite, error) {
	resource := new(types.EnterprisesEnterpriseSite)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObj, "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device []EnterprisesEnterpriseSiteDevice
	// Handle []Object
	devices := make([]types.EnterprisesEnterpriseSiteDevice, 0)
	reflectEnterprisesEnterpriseSiteDevice, err := utils.FindModelPluginObject(ygotObj, "Device")
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteDevice != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteDevice.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteDevice.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			device, err := toEnterprisesEnterpriseSiteDevice(v, childParams...)
			if err != nil {
				return nil, err
			}
			devices = append(devices, *device)
		}
	}
	resource.Device = &devices

	// Property: device-group []EnterprisesEnterpriseSiteDeviceGroup
	// Handle []Object
	deviceGroups := make([]types.EnterprisesEnterpriseSiteDeviceGroup, 0)
	reflectEnterprisesEnterpriseSiteDeviceGroup, err := utils.FindModelPluginObject(ygotObj, "DeviceGroup")
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteDeviceGroup != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteDeviceGroup.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteDeviceGroup.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			deviceGroup, err := toEnterprisesEnterpriseSiteDeviceGroup(v, childParams...)
			if err != nil {
				return nil, err
			}
			deviceGroups = append(deviceGroups, *deviceGroup)
		}
	}
	resource.DeviceGroup = &deviceGroups

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObj, "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: imsi-definition EnterprisesEnterpriseSiteImsiDefinition
	//Handle object
	reflectImsiDefinition, err := utils.FindModelPluginObject(ygotObj, "ImsiDefinition")
	if err != nil {
		return nil, err
	}
	if reflectImsiDefinition != nil {
		attrImsiDefinition, err := toEnterprisesEnterpriseSiteImsiDefinition(reflectImsiDefinition.Interface(), params...)
		if err != nil {
			return nil, err
		}
		resource.ImsiDefinition = attrImsiDefinition
	}

	// Property: ip-domain []EnterprisesEnterpriseSiteIpDomain
	// Handle []Object
	ipDomains := make([]types.EnterprisesEnterpriseSiteIpDomain, 0)
	reflectEnterprisesEnterpriseSiteIpDomain, err := utils.FindModelPluginObject(ygotObj, "IpDomain")
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteIpDomain != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteIpDomain.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteIpDomain.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			ipDomain, err := toEnterprisesEnterpriseSiteIpDomain(v, childParams...)
			if err != nil {
				return nil, err
			}
			ipDomains = append(ipDomains, *ipDomain)
		}
	}
	resource.IpDomain = &ipDomains

	// Property: monitoring EnterprisesEnterpriseSiteMonitoring
	//Handle object
	reflectMonitoring, err := utils.FindModelPluginObject(ygotObj, "Monitoring")
	if err != nil {
		return nil, err
	}
	if reflectMonitoring != nil {
		attrMonitoring, err := toEnterprisesEnterpriseSiteMonitoring(reflectMonitoring.Interface(), params...)
		if err != nil {
			return nil, err
		}
		resource.Monitoring = attrMonitoring
	}

	// Property: sim-card []EnterprisesEnterpriseSiteSimCard
	// Handle []Object
	simCards := make([]types.EnterprisesEnterpriseSiteSimCard, 0)
	reflectEnterprisesEnterpriseSiteSimCard, err := utils.FindModelPluginObject(ygotObj, "SimCard")
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteSimCard != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteSimCard.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteSimCard.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			simCard, err := toEnterprisesEnterpriseSiteSimCard(v, childParams...)
			if err != nil {
				return nil, err
			}
			simCards = append(simCards, *simCard)
		}
	}
	resource.SimCard = &simCards

	// Property: site-id string
	//encoding gNMI attribute to OAPI
	reflectSiteId, err := utils.FindModelPluginObject(ygotObj, "SiteId")
	if err != nil {
		return nil, err
	}
	if reflectSiteId != nil {
		attrSiteId := reflectSiteId.Interface().(string)
		resource.SiteId = attrSiteId
	}

	// Property: slice []EnterprisesEnterpriseSiteSlice
	// Handle []Object
	slices := make([]types.EnterprisesEnterpriseSiteSlice, 0)
	reflectEnterprisesEnterpriseSiteSlice, err := utils.FindModelPluginObject(ygotObj, "Slice")
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteSlice != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteSlice.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteSlice.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			slice, err := toEnterprisesEnterpriseSiteSlice(v, childParams...)
			if err != nil {
				return nil, err
			}
			slices = append(slices, *slice)
		}
	}
	resource.Slice = &slices

	// Property: small-cell []EnterprisesEnterpriseSiteSmallCell
	// Handle []Object
	smallCells := make([]types.EnterprisesEnterpriseSiteSmallCell, 0)
	reflectEnterprisesEnterpriseSiteSmallCell, err := utils.FindModelPluginObject(ygotObj, "SmallCell")
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteSmallCell != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteSmallCell.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteSmallCell.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			smallCell, err := toEnterprisesEnterpriseSiteSmallCell(v, childParams...)
			if err != nil {
				return nil, err
			}
			smallCells = append(smallCells, *smallCell)
		}
	}
	resource.SmallCell = &smallCells

	// Property: upf []EnterprisesEnterpriseSiteUpf
	// Handle []Object
	upfs := make([]types.EnterprisesEnterpriseSiteUpf, 0)
	reflectEnterprisesEnterpriseSiteUpf, err := utils.FindModelPluginObject(ygotObj, "Upf")
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteUpf != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteUpf.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteUpf.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			upf, err := toEnterprisesEnterpriseSiteUpf(v, childParams...)
			if err != nil {
				return nil, err
			}
			upfs = append(upfs, *upf)
		}
	}
	resource.Upf = &upfs

	return resource, nil
}

// toEnterprisesEnterpriseSiteDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteDevice(params ...string) (*types.EnterprisesEnterpriseSiteDevice, error) {
	resource := new(types.EnterprisesEnterpriseSiteDevice)

	reflectEnterprisesEnterpriseSiteDevice, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseSiteDevice(reflectEnterprisesEnterpriseSiteDevice.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseSiteDevice converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteDevice(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteDevice, error) {
	resource := new(types.EnterprisesEnterpriseSiteDevice)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObj, "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device-id string
	//encoding gNMI attribute to OAPI
	reflectDeviceId, err := utils.FindModelPluginObject(ygotObj, "DeviceId")
	if err != nil {
		return nil, err
	}
	if reflectDeviceId != nil {
		attrDeviceId := reflectDeviceId.Interface().(string)
		resource.DeviceId = attrDeviceId
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObj, "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: imei string
	//encoding gNMI attribute to OAPI
	reflectImei, err := utils.FindModelPluginObject(ygotObj, "Imei")
	if err != nil {
		return nil, err
	}
	if reflectImei != nil {
		attrImei := reflectImei.Interface().(string)
		resource.Imei = &attrImei
	}

	// Property: sim-card string
	//encoding gNMI attribute to OAPI
	reflectSimCard, err := utils.FindModelPluginObject(ygotObj, "SimCard")
	if err != nil {
		return nil, err
	}
	if reflectSimCard != nil {
		attrSimCard := reflectSimCard.Interface().(string)
		resource.SimCard = &attrSimCard
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteDeviceGroup converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteDeviceGroup(params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroup, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroup)

	reflectEnterprisesEnterpriseSiteDeviceGroup, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseSiteDeviceGroup(reflectEnterprisesEnterpriseSiteDeviceGroup.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseSiteDeviceGroup converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteDeviceGroup(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroup, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroup)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObj, "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device []EnterprisesEnterpriseSiteDeviceGroupDevice
	// Handle []Object
	devices := make([]types.EnterprisesEnterpriseSiteDeviceGroupDevice, 0)
	reflectEnterprisesEnterpriseSiteDeviceGroupDevice, err := utils.FindModelPluginObject(ygotObj, "Device")
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteDeviceGroupDevice != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteDeviceGroupDevice.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteDeviceGroupDevice.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			device, err := toEnterprisesEnterpriseSiteDeviceGroupDevice(v, childParams...)
			if err != nil {
				return nil, err
			}
			devices = append(devices, *device)
		}
	}
	resource.Device = &devices

	// Property: device-group-id string
	//encoding gNMI attribute to OAPI
	reflectDeviceGroupId, err := utils.FindModelPluginObject(ygotObj, "DeviceGroupId")
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroupId != nil {
		attrDeviceGroupId := reflectDeviceGroupId.Interface().(string)
		resource.DeviceGroupId = attrDeviceGroupId
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObj, "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: ip-domain string
	//encoding gNMI attribute to OAPI
	reflectIpDomain, err := utils.FindModelPluginObject(ygotObj, "IpDomain")
	if err != nil {
		return nil, err
	}
	if reflectIpDomain != nil {
		attrIpDomain := reflectIpDomain.Interface().(string)
		resource.IpDomain = &attrIpDomain
	}

	// Property: mbr EnterprisesEnterpriseSiteDeviceGroupMbr
	//Handle object
	reflectMbr, err := utils.FindModelPluginObject(ygotObj, "Mbr")
	if err != nil {
		return nil, err
	}
	if reflectMbr != nil {
		attrMbr, err := toEnterprisesEnterpriseSiteDeviceGroupMbr(reflectMbr.Interface(), params...)
		if err != nil {
			return nil, err
		}
		resource.Mbr = attrMbr
	}

	// Property: traffic-class string
	//encoding gNMI attribute to OAPI
	reflectTrafficClass, err := utils.FindModelPluginObject(ygotObj, "TrafficClass")
	if err != nil {
		return nil, err
	}
	if reflectTrafficClass != nil {
		attrTrafficClass := reflectTrafficClass.Interface().(string)
		resource.TrafficClass = attrTrafficClass
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteDeviceGroupDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteDeviceGroupDevice(params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroupDevice, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroupDevice)

	reflectEnterprisesEnterpriseSiteDeviceGroupDevice, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroupDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseSiteDeviceGroupDevice(reflectEnterprisesEnterpriseSiteDeviceGroupDevice.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseSiteDeviceGroupDevice converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteDeviceGroupDevice(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroupDevice, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroupDevice)

	// Property: device-id string
	//encoding gNMI attribute to OAPI
	reflectDeviceId, err := utils.FindModelPluginObject(ygotObj, "DeviceId")
	if err != nil {
		return nil, err
	}
	if reflectDeviceId != nil {
		attrDeviceId := reflectDeviceId.Interface().(string)
		resource.DeviceId = attrDeviceId
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(ygotObj, "Enable")
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = &boolEnable
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteDeviceGroupDeviceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteDeviceGroupDeviceList(params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroupDeviceList, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroupDeviceList)

	// Array list - Go type EnterprisesEnterpriseSiteDeviceGroupDevice
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroupDevice", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		fmt.Printf("Handling %s\n", i.Key())

		r, err := toEnterprisesEnterpriseSiteDeviceGroupDevice(i.Value().Interface(), params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toEnterprisesEnterpriseSiteDeviceGroupDeviceList converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteDeviceGroupDeviceList(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroupDeviceList, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroupDeviceList)

	// Not used

	return resource, nil
}

// toEnterprisesEnterpriseSiteDeviceGroupList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteDeviceGroupList(params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroupList, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroupList)

	// Array list - Go type EnterprisesEnterpriseSiteDeviceGroup
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		fmt.Printf("Handling %s\n", i.Key())

		r, err := toEnterprisesEnterpriseSiteDeviceGroup(i.Value().Interface(), params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toEnterprisesEnterpriseSiteDeviceGroupList converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteDeviceGroupList(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroupList, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroupList)

	// Not used

	return resource, nil
}

// toEnterprisesEnterpriseSiteDeviceGroupMbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteDeviceGroupMbr(params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroupMbr, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroupMbr)

	reflectEnterprisesEnterpriseSiteDeviceGroupMbr, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroupMbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseSiteDeviceGroupMbr(reflectEnterprisesEnterpriseSiteDeviceGroupMbr.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseSiteDeviceGroupMbr converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteDeviceGroupMbr(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroupMbr, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroupMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObj, "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObj, "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteDeviceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteDeviceList(params ...string) (*types.EnterprisesEnterpriseSiteDeviceList, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceList)

	// Array list - Go type EnterprisesEnterpriseSiteDevice
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDevice", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		fmt.Printf("Handling %s\n", i.Key())

		r, err := toEnterprisesEnterpriseSiteDevice(i.Value().Interface(), params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toEnterprisesEnterpriseSiteDeviceList converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteDeviceList(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteDeviceList, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceList)

	// Not used

	return resource, nil
}

// toEnterprisesEnterpriseSiteImsiDefinition converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteImsiDefinition(params ...string) (*types.EnterprisesEnterpriseSiteImsiDefinition, error) {
	resource := new(types.EnterprisesEnterpriseSiteImsiDefinition)

	reflectEnterprisesEnterpriseSiteImsiDefinition, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteImsiDefinition", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseSiteImsiDefinition(reflectEnterprisesEnterpriseSiteImsiDefinition.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseSiteImsiDefinition converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteImsiDefinition(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteImsiDefinition, error) {
	resource := new(types.EnterprisesEnterpriseSiteImsiDefinition)

	// Property: enterprise int32
	//encoding gNMI attribute to OAPI
	reflectEnterprise, err := utils.FindModelPluginObject(ygotObj, "Enterprise")
	if err != nil {
		return nil, err
	}
	if reflectEnterprise != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Enterprise, err = utils.ToInt32(reflectEnterprise); err != nil {
			return nil, err
		}
	}

	// Property: format string
	//encoding gNMI attribute to OAPI
	reflectFormat, err := utils.FindModelPluginObject(ygotObj, "Format")
	if err != nil {
		return nil, err
	}
	if reflectFormat != nil {
		attrFormat := reflectFormat.Interface().(string)
		resource.Format = attrFormat
	}

	// Property: mcc string
	//encoding gNMI attribute to OAPI
	reflectMcc, err := utils.FindModelPluginObject(ygotObj, "Mcc")
	if err != nil {
		return nil, err
	}
	if reflectMcc != nil {
		attrMcc := reflectMcc.Interface().(string)
		resource.Mcc = attrMcc
	}

	// Property: mnc string
	//encoding gNMI attribute to OAPI
	reflectMnc, err := utils.FindModelPluginObject(ygotObj, "Mnc")
	if err != nil {
		return nil, err
	}
	if reflectMnc != nil {
		attrMnc := reflectMnc.Interface().(string)
		resource.Mnc = attrMnc
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteIpDomain converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteIpDomain(params ...string) (*types.EnterprisesEnterpriseSiteIpDomain, error) {
	resource := new(types.EnterprisesEnterpriseSiteIpDomain)

	reflectEnterprisesEnterpriseSiteIpDomain, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteIpDomain", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseSiteIpDomain(reflectEnterprisesEnterpriseSiteIpDomain.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseSiteIpDomain converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteIpDomain(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteIpDomain, error) {
	resource := new(types.EnterprisesEnterpriseSiteIpDomain)

	// Property: admin-status string
	//encoding gNMI attribute to OAPI
	reflectAdminStatus, err := utils.FindModelPluginObject(ygotObj, "AdminStatus")
	if err != nil {
		return nil, err
	}
	if reflectAdminStatus != nil {
		attrAdminStatus := reflectAdminStatus.Interface().(string)
		resource.AdminStatus = &attrAdminStatus
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObj, "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObj, "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: dnn string
	//encoding gNMI attribute to OAPI
	reflectDnn, err := utils.FindModelPluginObject(ygotObj, "Dnn")
	if err != nil {
		return nil, err
	}
	if reflectDnn != nil {
		attrDnn := reflectDnn.Interface().(string)
		resource.Dnn = attrDnn
	}

	// Property: dns-primary string
	//encoding gNMI attribute to OAPI
	reflectDnsPrimary, err := utils.FindModelPluginObject(ygotObj, "DnsPrimary")
	if err != nil {
		return nil, err
	}
	if reflectDnsPrimary != nil {
		attrDnsPrimary := reflectDnsPrimary.Interface().(string)
		resource.DnsPrimary = &attrDnsPrimary
	}

	// Property: dns-secondary string
	//encoding gNMI attribute to OAPI
	reflectDnsSecondary, err := utils.FindModelPluginObject(ygotObj, "DnsSecondary")
	if err != nil {
		return nil, err
	}
	if reflectDnsSecondary != nil {
		attrDnsSecondary := reflectDnsSecondary.Interface().(string)
		resource.DnsSecondary = &attrDnsSecondary
	}

	// Property: ip-domain-id string
	//encoding gNMI attribute to OAPI
	reflectIpDomainId, err := utils.FindModelPluginObject(ygotObj, "IpDomainId")
	if err != nil {
		return nil, err
	}
	if reflectIpDomainId != nil {
		attrIpDomainId := reflectIpDomainId.Interface().(string)
		resource.IpDomainId = attrIpDomainId
	}

	// Property: mtu int
	//encoding gNMI attribute to OAPI
	reflectMtu, err := utils.FindModelPluginObject(ygotObj, "Mtu")
	if err != nil {
		return nil, err
	}
	if reflectMtu != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Mtu, err = utils.ToIntPtr(reflectMtu); err != nil {
			return nil, err
		}
	}

	// Property: subnet string
	//encoding gNMI attribute to OAPI
	reflectSubnet, err := utils.FindModelPluginObject(ygotObj, "Subnet")
	if err != nil {
		return nil, err
	}
	if reflectSubnet != nil {
		attrSubnet := reflectSubnet.Interface().(string)
		resource.Subnet = attrSubnet
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteIpDomainList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteIpDomainList(params ...string) (*types.EnterprisesEnterpriseSiteIpDomainList, error) {
	resource := new(types.EnterprisesEnterpriseSiteIpDomainList)

	// Array list - Go type EnterprisesEnterpriseSiteIpDomain
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteIpDomain", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		fmt.Printf("Handling %s\n", i.Key())

		r, err := toEnterprisesEnterpriseSiteIpDomain(i.Value().Interface(), params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toEnterprisesEnterpriseSiteIpDomainList converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteIpDomainList(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteIpDomainList, error) {
	resource := new(types.EnterprisesEnterpriseSiteIpDomainList)

	// Not used

	return resource, nil
}

// toEnterprisesEnterpriseSiteList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteList(params ...string) (*types.EnterprisesEnterpriseSiteList, error) {
	resource := new(types.EnterprisesEnterpriseSiteList)

	// Array list - Go type EnterprisesEnterpriseSite
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSite", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		fmt.Printf("Handling %s\n", i.Key())

		r, err := toEnterprisesEnterpriseSite(i.Value().Interface(), params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toEnterprisesEnterpriseSiteList converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteList(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteList, error) {
	resource := new(types.EnterprisesEnterpriseSiteList)

	// Not used

	return resource, nil
}

// toEnterprisesEnterpriseSiteMonitoring converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteMonitoring(params ...string) (*types.EnterprisesEnterpriseSiteMonitoring, error) {
	resource := new(types.EnterprisesEnterpriseSiteMonitoring)

	reflectEnterprisesEnterpriseSiteMonitoring, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteMonitoring", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseSiteMonitoring(reflectEnterprisesEnterpriseSiteMonitoring.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseSiteMonitoring converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteMonitoring(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteMonitoring, error) {
	resource := new(types.EnterprisesEnterpriseSiteMonitoring)

	// Property: edge-cluster-prometheus-url string
	//encoding gNMI attribute to OAPI
	reflectEdgeClusterPrometheusUrl, err := utils.FindModelPluginObject(ygotObj, "EdgeClusterPrometheusUrl")
	if err != nil {
		return nil, err
	}
	if reflectEdgeClusterPrometheusUrl != nil {
		attrEdgeClusterPrometheusUrl := reflectEdgeClusterPrometheusUrl.Interface().(string)
		resource.EdgeClusterPrometheusUrl = &attrEdgeClusterPrometheusUrl
	}

	// Property: edge-device []EnterprisesEnterpriseSiteMonitoringEdgeDevice
	// Handle []Object
	edgeDevices := make([]types.EnterprisesEnterpriseSiteMonitoringEdgeDevice, 0)
	reflectEnterprisesEnterpriseSiteMonitoringEdgeDevice, err := utils.FindModelPluginObject(ygotObj, "EdgeDevice")
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteMonitoringEdgeDevice != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteMonitoringEdgeDevice.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteMonitoringEdgeDevice.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			edgeDevice, err := toEnterprisesEnterpriseSiteMonitoringEdgeDevice(v, childParams...)
			if err != nil {
				return nil, err
			}
			edgeDevices = append(edgeDevices, *edgeDevice)
		}
	}
	resource.EdgeDevice = &edgeDevices

	// Property: edge-monitoring-prometheus-url string
	//encoding gNMI attribute to OAPI
	reflectEdgeMonitoringPrometheusUrl, err := utils.FindModelPluginObject(ygotObj, "EdgeMonitoringPrometheusUrl")
	if err != nil {
		return nil, err
	}
	if reflectEdgeMonitoringPrometheusUrl != nil {
		attrEdgeMonitoringPrometheusUrl := reflectEdgeMonitoringPrometheusUrl.Interface().(string)
		resource.EdgeMonitoringPrometheusUrl = &attrEdgeMonitoringPrometheusUrl
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteMonitoringEdgeDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteMonitoringEdgeDevice(params ...string) (*types.EnterprisesEnterpriseSiteMonitoringEdgeDevice, error) {
	resource := new(types.EnterprisesEnterpriseSiteMonitoringEdgeDevice)

	reflectEnterprisesEnterpriseSiteMonitoringEdgeDevice, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteMonitoringEdgeDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseSiteMonitoringEdgeDevice(reflectEnterprisesEnterpriseSiteMonitoringEdgeDevice.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseSiteMonitoringEdgeDevice converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteMonitoringEdgeDevice(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteMonitoringEdgeDevice, error) {
	resource := new(types.EnterprisesEnterpriseSiteMonitoringEdgeDevice)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObj, "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObj, "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: edge-device-id string
	//encoding gNMI attribute to OAPI
	reflectEdgeDeviceId, err := utils.FindModelPluginObject(ygotObj, "EdgeDeviceId")
	if err != nil {
		return nil, err
	}
	if reflectEdgeDeviceId != nil {
		attrEdgeDeviceId := reflectEdgeDeviceId.Interface().(string)
		resource.EdgeDeviceId = attrEdgeDeviceId
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteMonitoringEdgeDeviceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(params ...string) (*types.EnterprisesEnterpriseSiteMonitoringEdgeDeviceList, error) {
	resource := new(types.EnterprisesEnterpriseSiteMonitoringEdgeDeviceList)

	// Array list - Go type EnterprisesEnterpriseSiteMonitoringEdgeDevice
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteMonitoringEdgeDevice", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		fmt.Printf("Handling %s\n", i.Key())

		r, err := toEnterprisesEnterpriseSiteMonitoringEdgeDevice(i.Value().Interface(), params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toEnterprisesEnterpriseSiteMonitoringEdgeDeviceList converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteMonitoringEdgeDeviceList(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteMonitoringEdgeDeviceList, error) {
	resource := new(types.EnterprisesEnterpriseSiteMonitoringEdgeDeviceList)

	// Not used

	return resource, nil
}

// toEnterprisesEnterpriseSiteSimCard converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteSimCard(params ...string) (*types.EnterprisesEnterpriseSiteSimCard, error) {
	resource := new(types.EnterprisesEnterpriseSiteSimCard)

	reflectEnterprisesEnterpriseSiteSimCard, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSimCard", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseSiteSimCard(reflectEnterprisesEnterpriseSiteSimCard.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseSiteSimCard converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteSimCard(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteSimCard, error) {
	resource := new(types.EnterprisesEnterpriseSiteSimCard)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObj, "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObj, "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: iccid string
	//encoding gNMI attribute to OAPI
	reflectIccid, err := utils.FindModelPluginObject(ygotObj, "Iccid")
	if err != nil {
		return nil, err
	}
	if reflectIccid != nil {
		attrIccid := reflectIccid.Interface().(string)
		resource.Iccid = &attrIccid
	}

	// Property: imsi int64
	//encoding gNMI attribute to OAPI
	reflectImsi, err := utils.FindModelPluginObject(ygotObj, "Imsi")
	if err != nil {
		return nil, err
	}
	if reflectImsi != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Imsi, err = utils.ToInt64Ptr(reflectImsi); err != nil {
			return nil, err
		}
	}

	// Property: sim-id string
	//encoding gNMI attribute to OAPI
	reflectSimId, err := utils.FindModelPluginObject(ygotObj, "SimId")
	if err != nil {
		return nil, err
	}
	if reflectSimId != nil {
		attrSimId := reflectSimId.Interface().(string)
		resource.SimId = attrSimId
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteSimCardList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteSimCardList(params ...string) (*types.EnterprisesEnterpriseSiteSimCardList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSimCardList)

	// Array list - Go type EnterprisesEnterpriseSiteSimCard
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSimCard", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		fmt.Printf("Handling %s\n", i.Key())

		r, err := toEnterprisesEnterpriseSiteSimCard(i.Value().Interface(), params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toEnterprisesEnterpriseSiteSimCardList converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteSimCardList(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteSimCardList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSimCardList)

	// Not used

	return resource, nil
}

// toEnterprisesEnterpriseSiteSlice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteSlice(params ...string) (*types.EnterprisesEnterpriseSiteSlice, error) {
	resource := new(types.EnterprisesEnterpriseSiteSlice)

	reflectEnterprisesEnterpriseSiteSlice, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSlice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseSiteSlice(reflectEnterprisesEnterpriseSiteSlice.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseSiteSlice converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteSlice(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteSlice, error) {
	resource := new(types.EnterprisesEnterpriseSiteSlice)

	// Property: default-behavior string
	//encoding gNMI attribute to OAPI
	reflectDefaultBehavior, err := utils.FindModelPluginObject(ygotObj, "DefaultBehavior")
	if err != nil {
		return nil, err
	}
	if reflectDefaultBehavior != nil {
		attrDefaultBehavior := reflectDefaultBehavior.Interface().(string)
		resource.DefaultBehavior = attrDefaultBehavior
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObj, "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device-group []EnterprisesEnterpriseSiteSliceDeviceGroup
	// Handle []Object
	deviceGroups := make([]types.EnterprisesEnterpriseSiteSliceDeviceGroup, 0)
	reflectEnterprisesEnterpriseSiteSliceDeviceGroup, err := utils.FindModelPluginObject(ygotObj, "DeviceGroup")
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteSliceDeviceGroup != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteSliceDeviceGroup.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteSliceDeviceGroup.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			deviceGroup, err := toEnterprisesEnterpriseSiteSliceDeviceGroup(v, childParams...)
			if err != nil {
				return nil, err
			}
			deviceGroups = append(deviceGroups, *deviceGroup)
		}
	}
	resource.DeviceGroup = &deviceGroups

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObj, "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: filter []EnterprisesEnterpriseSiteSliceFilter
	// Handle []Object
	filters := make([]types.EnterprisesEnterpriseSiteSliceFilter, 0)
	reflectEnterprisesEnterpriseSiteSliceFilter, err := utils.FindModelPluginObject(ygotObj, "Filter")
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteSliceFilter != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteSliceFilter.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteSliceFilter.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			filter, err := toEnterprisesEnterpriseSiteSliceFilter(v, childParams...)
			if err != nil {
				return nil, err
			}
			filters = append(filters, *filter)
		}
	}
	resource.Filter = &filters

	// Property: mbr EnterprisesEnterpriseSiteSliceMbr
	//Handle object
	reflectMbr, err := utils.FindModelPluginObject(ygotObj, "Mbr")
	if err != nil {
		return nil, err
	}
	if reflectMbr != nil {
		attrMbr, err := toEnterprisesEnterpriseSiteSliceMbr(reflectMbr.Interface(), params...)
		if err != nil {
			return nil, err
		}
		resource.Mbr = attrMbr
	}

	// Property: priority-traffic-rule []EnterprisesEnterpriseSiteSlicePriorityTrafficRule
	// Handle []Object
	priorityTrafficRules := make([]types.EnterprisesEnterpriseSiteSlicePriorityTrafficRule, 0)
	reflectEnterprisesEnterpriseSiteSlicePriorityTrafficRule, err := utils.FindModelPluginObject(ygotObj, "PriorityTrafficRule")
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteSlicePriorityTrafficRule != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteSlicePriorityTrafficRule.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteSlicePriorityTrafficRule.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			priorityTrafficRule, err := toEnterprisesEnterpriseSiteSlicePriorityTrafficRule(v, childParams...)
			if err != nil {
				return nil, err
			}
			priorityTrafficRules = append(priorityTrafficRules, *priorityTrafficRule)
		}
	}
	resource.PriorityTrafficRule = &priorityTrafficRules

	// Property: sd int32
	//encoding gNMI attribute to OAPI
	reflectSd, err := utils.FindModelPluginObject(ygotObj, "Sd")
	if err != nil {
		return nil, err
	}
	if reflectSd != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sd, err = utils.ToInt32(reflectSd); err != nil {
			return nil, err
		}
	}

	// Property: slice-id string
	//encoding gNMI attribute to OAPI
	reflectSliceId, err := utils.FindModelPluginObject(ygotObj, "SliceId")
	if err != nil {
		return nil, err
	}
	if reflectSliceId != nil {
		attrSliceId := reflectSliceId.Interface().(string)
		resource.SliceId = attrSliceId
	}

	// Property: sst int
	//encoding gNMI attribute to OAPI
	reflectSst, err := utils.FindModelPluginObject(ygotObj, "Sst")
	if err != nil {
		return nil, err
	}
	if reflectSst != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sst, err = utils.ToInt(reflectSst); err != nil {
			return nil, err
		}
	}

	// Property: upf string
	//encoding gNMI attribute to OAPI
	reflectUpf, err := utils.FindModelPluginObject(ygotObj, "Upf")
	if err != nil {
		return nil, err
	}
	if reflectUpf != nil {
		attrUpf := reflectUpf.Interface().(string)
		resource.Upf = &attrUpf
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteSliceDeviceGroup converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteSliceDeviceGroup(params ...string) (*types.EnterprisesEnterpriseSiteSliceDeviceGroup, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceDeviceGroup)

	reflectEnterprisesEnterpriseSiteSliceDeviceGroup, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSliceDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseSiteSliceDeviceGroup(reflectEnterprisesEnterpriseSiteSliceDeviceGroup.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseSiteSliceDeviceGroup converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteSliceDeviceGroup(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteSliceDeviceGroup, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceDeviceGroup)

	// Property: device-group string
	//encoding gNMI attribute to OAPI
	reflectDeviceGroup, err := utils.FindModelPluginObject(ygotObj, "DeviceGroup")
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroup != nil {
		attrDeviceGroup := reflectDeviceGroup.Interface().(string)
		resource.DeviceGroup = attrDeviceGroup
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(ygotObj, "Enable")
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = &boolEnable
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteSliceDeviceGroupList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteSliceDeviceGroupList(params ...string) (*types.EnterprisesEnterpriseSiteSliceDeviceGroupList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceDeviceGroupList)

	// Array list - Go type EnterprisesEnterpriseSiteSliceDeviceGroup
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSliceDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		fmt.Printf("Handling %s\n", i.Key())

		r, err := toEnterprisesEnterpriseSiteSliceDeviceGroup(i.Value().Interface(), params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toEnterprisesEnterpriseSiteSliceDeviceGroupList converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteSliceDeviceGroupList(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteSliceDeviceGroupList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceDeviceGroupList)

	// Not used

	return resource, nil
}

// toEnterprisesEnterpriseSiteSliceFilter converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteSliceFilter(params ...string) (*types.EnterprisesEnterpriseSiteSliceFilter, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceFilter)

	reflectEnterprisesEnterpriseSiteSliceFilter, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSliceFilter", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseSiteSliceFilter(reflectEnterprisesEnterpriseSiteSliceFilter.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseSiteSliceFilter converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteSliceFilter(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteSliceFilter, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceFilter)

	// Property: allow bool
	//encoding gNMI attribute to OAPI
	reflectAllow, err := utils.FindModelPluginObject(ygotObj, "Allow")
	if err != nil {
		return nil, err
	}
	if reflectAllow != nil {
		boolAllow := reflectAllow.Interface().(bool)
		resource.Allow = &boolAllow
	}

	// Property: application string
	//encoding gNMI attribute to OAPI
	reflectApplication, err := utils.FindModelPluginObject(ygotObj, "Application")
	if err != nil {
		return nil, err
	}
	if reflectApplication != nil {
		attrApplication := reflectApplication.Interface().(string)
		resource.Application = attrApplication
	}

	// Property: priority int
	//encoding gNMI attribute to OAPI
	reflectPriority, err := utils.FindModelPluginObject(ygotObj, "Priority")
	if err != nil {
		return nil, err
	}
	if reflectPriority != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Priority, err = utils.ToIntPtr(reflectPriority); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteSliceFilterList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteSliceFilterList(params ...string) (*types.EnterprisesEnterpriseSiteSliceFilterList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceFilterList)

	// Array list - Go type EnterprisesEnterpriseSiteSliceFilter
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSliceFilter", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		fmt.Printf("Handling %s\n", i.Key())

		r, err := toEnterprisesEnterpriseSiteSliceFilter(i.Value().Interface(), params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toEnterprisesEnterpriseSiteSliceFilterList converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteSliceFilterList(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteSliceFilterList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceFilterList)

	// Not used

	return resource, nil
}

// toEnterprisesEnterpriseSiteSliceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteSliceList(params ...string) (*types.EnterprisesEnterpriseSiteSliceList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceList)

	// Array list - Go type EnterprisesEnterpriseSiteSlice
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSlice", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		fmt.Printf("Handling %s\n", i.Key())

		r, err := toEnterprisesEnterpriseSiteSlice(i.Value().Interface(), params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toEnterprisesEnterpriseSiteSliceList converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteSliceList(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteSliceList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceList)

	// Not used

	return resource, nil
}

// toEnterprisesEnterpriseSiteSliceMbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteSliceMbr(params ...string) (*types.EnterprisesEnterpriseSiteSliceMbr, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceMbr)

	reflectEnterprisesEnterpriseSiteSliceMbr, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSliceMbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseSiteSliceMbr(reflectEnterprisesEnterpriseSiteSliceMbr.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseSiteSliceMbr converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteSliceMbr(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteSliceMbr, error) {
	resource := new(types.EnterprisesEnterpriseSiteSliceMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObj, "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: downlink-burst-size int32
	//encoding gNMI attribute to OAPI
	reflectDownlinkBurstSize, err := utils.FindModelPluginObject(ygotObj, "DownlinkBurstSize")
	if err != nil {
		return nil, err
	}
	if reflectDownlinkBurstSize != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.DownlinkBurstSize, err = utils.ToInt32Ptr(reflectDownlinkBurstSize); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObj, "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	// Property: uplink-burst-size int32
	//encoding gNMI attribute to OAPI
	reflectUplinkBurstSize, err := utils.FindModelPluginObject(ygotObj, "UplinkBurstSize")
	if err != nil {
		return nil, err
	}
	if reflectUplinkBurstSize != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.UplinkBurstSize, err = utils.ToInt32Ptr(reflectUplinkBurstSize); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteSlicePriorityTrafficRule converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteSlicePriorityTrafficRule(params ...string) (*types.EnterprisesEnterpriseSiteSlicePriorityTrafficRule, error) {
	resource := new(types.EnterprisesEnterpriseSiteSlicePriorityTrafficRule)

	reflectEnterprisesEnterpriseSiteSlicePriorityTrafficRule, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSlicePriorityTrafficRule", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseSiteSlicePriorityTrafficRule(reflectEnterprisesEnterpriseSiteSlicePriorityTrafficRule.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseSiteSlicePriorityTrafficRule converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteSlicePriorityTrafficRule(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteSlicePriorityTrafficRule, error) {
	resource := new(types.EnterprisesEnterpriseSiteSlicePriorityTrafficRule)

	// Property: application string
	//encoding gNMI attribute to OAPI
	reflectApplication, err := utils.FindModelPluginObject(ygotObj, "Application")
	if err != nil {
		return nil, err
	}
	if reflectApplication != nil {
		attrApplication := reflectApplication.Interface().(string)
		resource.Application = attrApplication
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObj, "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device string
	//encoding gNMI attribute to OAPI
	reflectDevice, err := utils.FindModelPluginObject(ygotObj, "Device")
	if err != nil {
		return nil, err
	}
	if reflectDevice != nil {
		attrDevice := reflectDevice.Interface().(string)
		resource.Device = attrDevice
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObj, "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: endpoint string
	//encoding gNMI attribute to OAPI
	reflectEndpoint, err := utils.FindModelPluginObject(ygotObj, "Endpoint")
	if err != nil {
		return nil, err
	}
	if reflectEndpoint != nil {
		attrEndpoint := reflectEndpoint.Interface().(string)
		resource.Endpoint = attrEndpoint
	}

	// Property: gbr EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr
	//Handle object
	reflectGbr, err := utils.FindModelPluginObject(ygotObj, "Gbr")
	if err != nil {
		return nil, err
	}
	if reflectGbr != nil {
		attrGbr, err := toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(reflectGbr.Interface(), params...)
		if err != nil {
			return nil, err
		}
		resource.Gbr = attrGbr
	}

	// Property: mbr EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr
	//Handle object
	reflectMbr, err := utils.FindModelPluginObject(ygotObj, "Mbr")
	if err != nil {
		return nil, err
	}
	if reflectMbr != nil {
		attrMbr, err := toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(reflectMbr.Interface(), params...)
		if err != nil {
			return nil, err
		}
		resource.Mbr = attrMbr
	}

	// Property: priority-traffic-rule-id string
	//encoding gNMI attribute to OAPI
	reflectPriorityTrafficRuleId, err := utils.FindModelPluginObject(ygotObj, "PriorityTrafficRuleId")
	if err != nil {
		return nil, err
	}
	if reflectPriorityTrafficRuleId != nil {
		attrPriorityTrafficRuleId := reflectPriorityTrafficRuleId.Interface().(string)
		resource.PriorityTrafficRuleId = attrPriorityTrafficRuleId
	}

	// Property: traffic-class string
	//encoding gNMI attribute to OAPI
	reflectTrafficClass, err := utils.FindModelPluginObject(ygotObj, "TrafficClass")
	if err != nil {
		return nil, err
	}
	if reflectTrafficClass != nil {
		attrTrafficClass := reflectTrafficClass.Interface().(string)
		resource.TrafficClass = &attrTrafficClass
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(params ...string) (*types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr, error) {
	resource := new(types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr)

	reflectEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(reflectEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr, error) {
	resource := new(types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObj, "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObj, "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(params ...string) (*types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleList)

	// Array list - Go type EnterprisesEnterpriseSiteSlicePriorityTrafficRule
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSlicePriorityTrafficRule", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		fmt.Printf("Handling %s\n", i.Key())

		r, err := toEnterprisesEnterpriseSiteSlicePriorityTrafficRule(i.Value().Interface(), params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleList(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleList)

	// Not used

	return resource, nil
}

// toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(params ...string) (*types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr, error) {
	resource := new(types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr)

	reflectEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(reflectEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr, error) {
	resource := new(types.EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObj, "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObj, "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteSmallCell converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteSmallCell(params ...string) (*types.EnterprisesEnterpriseSiteSmallCell, error) {
	resource := new(types.EnterprisesEnterpriseSiteSmallCell)

	reflectEnterprisesEnterpriseSiteSmallCell, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSmallCell", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseSiteSmallCell(reflectEnterprisesEnterpriseSiteSmallCell.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseSiteSmallCell converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteSmallCell(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteSmallCell, error) {
	resource := new(types.EnterprisesEnterpriseSiteSmallCell)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(ygotObj, "Address")
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := reflectAddress.Interface().(string)
		resource.Address = &attrAddress
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObj, "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObj, "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(ygotObj, "Enable")
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = &boolEnable
	}

	// Property: small-cell-id string
	//encoding gNMI attribute to OAPI
	reflectSmallCellId, err := utils.FindModelPluginObject(ygotObj, "SmallCellId")
	if err != nil {
		return nil, err
	}
	if reflectSmallCellId != nil {
		attrSmallCellId := reflectSmallCellId.Interface().(string)
		resource.SmallCellId = attrSmallCellId
	}

	// Property: tac string
	//encoding gNMI attribute to OAPI
	reflectTac, err := utils.FindModelPluginObject(ygotObj, "Tac")
	if err != nil {
		return nil, err
	}
	if reflectTac != nil {
		attrTac := reflectTac.Interface().(string)
		resource.Tac = attrTac
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteSmallCellList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteSmallCellList(params ...string) (*types.EnterprisesEnterpriseSiteSmallCellList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSmallCellList)

	// Array list - Go type EnterprisesEnterpriseSiteSmallCell
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSmallCell", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		fmt.Printf("Handling %s\n", i.Key())

		r, err := toEnterprisesEnterpriseSiteSmallCell(i.Value().Interface(), params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toEnterprisesEnterpriseSiteSmallCellList converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteSmallCellList(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteSmallCellList, error) {
	resource := new(types.EnterprisesEnterpriseSiteSmallCellList)

	// Not used

	return resource, nil
}

// toEnterprisesEnterpriseSiteUpf converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteUpf(params ...string) (*types.EnterprisesEnterpriseSiteUpf, error) {
	resource := new(types.EnterprisesEnterpriseSiteUpf)

	reflectEnterprisesEnterpriseSiteUpf, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteUpf", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseSiteUpf(reflectEnterprisesEnterpriseSiteUpf.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseSiteUpf converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteUpf(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteUpf, error) {
	resource := new(types.EnterprisesEnterpriseSiteUpf)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(ygotObj, "Address")
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := reflectAddress.Interface().(string)
		resource.Address = attrAddress
	}

	// Property: config-endpoint string
	//encoding gNMI attribute to OAPI
	reflectConfigEndpoint, err := utils.FindModelPluginObject(ygotObj, "ConfigEndpoint")
	if err != nil {
		return nil, err
	}
	if reflectConfigEndpoint != nil {
		attrConfigEndpoint := reflectConfigEndpoint.Interface().(string)
		resource.ConfigEndpoint = &attrConfigEndpoint
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObj, "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObj, "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: port int
	//encoding gNMI attribute to OAPI
	reflectPort, err := utils.FindModelPluginObject(ygotObj, "Port")
	if err != nil {
		return nil, err
	}
	if reflectPort != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Port, err = utils.ToInt(reflectPort); err != nil {
			return nil, err
		}
	}

	// Property: upf-id string
	//encoding gNMI attribute to OAPI
	reflectUpfId, err := utils.FindModelPluginObject(ygotObj, "UpfId")
	if err != nil {
		return nil, err
	}
	if reflectUpfId != nil {
		attrUpfId := reflectUpfId.Interface().(string)
		resource.UpfId = attrUpfId
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteUpfList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteUpfList(params ...string) (*types.EnterprisesEnterpriseSiteUpfList, error) {
	resource := new(types.EnterprisesEnterpriseSiteUpfList)

	// Array list - Go type EnterprisesEnterpriseSiteUpf
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteUpf", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		fmt.Printf("Handling %s\n", i.Key())

		r, err := toEnterprisesEnterpriseSiteUpf(i.Value().Interface(), params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toEnterprisesEnterpriseSiteUpfList converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseSiteUpfList(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseSiteUpfList, error) {
	resource := new(types.EnterprisesEnterpriseSiteUpfList)

	// Not used

	return resource, nil
}

// toEnterprisesEnterpriseTemplate converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseTemplate(params ...string) (*types.EnterprisesEnterpriseTemplate, error) {
	resource := new(types.EnterprisesEnterpriseTemplate)

	reflectEnterprisesEnterpriseTemplate, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTemplate", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseTemplate(reflectEnterprisesEnterpriseTemplate.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseTemplate converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseTemplate(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseTemplate, error) {
	resource := new(types.EnterprisesEnterpriseTemplate)

	// Property: default-behavior string
	//encoding gNMI attribute to OAPI
	reflectDefaultBehavior, err := utils.FindModelPluginObject(ygotObj, "DefaultBehavior")
	if err != nil {
		return nil, err
	}
	if reflectDefaultBehavior != nil {
		attrDefaultBehavior := reflectDefaultBehavior.Interface().(string)
		resource.DefaultBehavior = attrDefaultBehavior
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObj, "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObj, "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: mbr EnterprisesEnterpriseTemplateMbr
	//Handle object
	reflectMbr, err := utils.FindModelPluginObject(ygotObj, "Mbr")
	if err != nil {
		return nil, err
	}
	if reflectMbr != nil {
		attrMbr, err := toEnterprisesEnterpriseTemplateMbr(reflectMbr.Interface(), params...)
		if err != nil {
			return nil, err
		}
		resource.Mbr = attrMbr
	}

	// Property: sd int32
	//encoding gNMI attribute to OAPI
	reflectSd, err := utils.FindModelPluginObject(ygotObj, "Sd")
	if err != nil {
		return nil, err
	}
	if reflectSd != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sd, err = utils.ToInt32Ptr(reflectSd); err != nil {
			return nil, err
		}
	}

	// Property: sst int
	//encoding gNMI attribute to OAPI
	reflectSst, err := utils.FindModelPluginObject(ygotObj, "Sst")
	if err != nil {
		return nil, err
	}
	if reflectSst != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sst, err = utils.ToIntPtr(reflectSst); err != nil {
			return nil, err
		}
	}

	// Property: template-id string
	//encoding gNMI attribute to OAPI
	reflectTemplateId, err := utils.FindModelPluginObject(ygotObj, "TemplateId")
	if err != nil {
		return nil, err
	}
	if reflectTemplateId != nil {
		attrTemplateId := reflectTemplateId.Interface().(string)
		resource.TemplateId = attrTemplateId
	}

	return resource, nil
}

// toEnterprisesEnterpriseTemplateList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseTemplateList(params ...string) (*types.EnterprisesEnterpriseTemplateList, error) {
	resource := new(types.EnterprisesEnterpriseTemplateList)

	// Array list - Go type EnterprisesEnterpriseTemplate
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTemplate", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		fmt.Printf("Handling %s\n", i.Key())

		r, err := toEnterprisesEnterpriseTemplate(i.Value().Interface(), params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toEnterprisesEnterpriseTemplateList converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseTemplateList(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseTemplateList, error) {
	resource := new(types.EnterprisesEnterpriseTemplateList)

	// Not used

	return resource, nil
}

// toEnterprisesEnterpriseTemplateMbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseTemplateMbr(params ...string) (*types.EnterprisesEnterpriseTemplateMbr, error) {
	resource := new(types.EnterprisesEnterpriseTemplateMbr)

	reflectEnterprisesEnterpriseTemplateMbr, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTemplateMbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseTemplateMbr(reflectEnterprisesEnterpriseTemplateMbr.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseTemplateMbr converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseTemplateMbr(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseTemplateMbr, error) {
	resource := new(types.EnterprisesEnterpriseTemplateMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObj, "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: downlink-burst-size int32
	//encoding gNMI attribute to OAPI
	reflectDownlinkBurstSize, err := utils.FindModelPluginObject(ygotObj, "DownlinkBurstSize")
	if err != nil {
		return nil, err
	}
	if reflectDownlinkBurstSize != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.DownlinkBurstSize, err = utils.ToInt32Ptr(reflectDownlinkBurstSize); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObj, "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	// Property: uplink-burst-size int32
	//encoding gNMI attribute to OAPI
	reflectUplinkBurstSize, err := utils.FindModelPluginObject(ygotObj, "UplinkBurstSize")
	if err != nil {
		return nil, err
	}
	if reflectUplinkBurstSize != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.UplinkBurstSize, err = utils.ToInt32Ptr(reflectUplinkBurstSize); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toEnterprisesEnterpriseTrafficClass converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseTrafficClass(params ...string) (*types.EnterprisesEnterpriseTrafficClass, error) {
	resource := new(types.EnterprisesEnterpriseTrafficClass)

	reflectEnterprisesEnterpriseTrafficClass, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTrafficClass", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterprisesEnterpriseTrafficClass(reflectEnterprisesEnterpriseTrafficClass.Interface(), params...)
	return resource, err

}

// toEnterprisesEnterpriseTrafficClass converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseTrafficClass(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseTrafficClass, error) {
	resource := new(types.EnterprisesEnterpriseTrafficClass)

	// Property: arp int
	//encoding gNMI attribute to OAPI
	reflectArp, err := utils.FindModelPluginObject(ygotObj, "Arp")
	if err != nil {
		return nil, err
	}
	if reflectArp != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Arp, err = utils.ToIntPtr(reflectArp); err != nil {
			return nil, err
		}
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObj, "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObj, "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: pdb int
	//encoding gNMI attribute to OAPI
	reflectPdb, err := utils.FindModelPluginObject(ygotObj, "Pdb")
	if err != nil {
		return nil, err
	}
	if reflectPdb != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Pdb, err = utils.ToIntPtr(reflectPdb); err != nil {
			return nil, err
		}
	}

	// Property: pelr int
	//encoding gNMI attribute to OAPI
	reflectPelr, err := utils.FindModelPluginObject(ygotObj, "Pelr")
	if err != nil {
		return nil, err
	}
	if reflectPelr != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Pelr, err = utils.ToIntPtr(reflectPelr); err != nil {
			return nil, err
		}
	}

	// Property: qci int
	//encoding gNMI attribute to OAPI
	reflectQci, err := utils.FindModelPluginObject(ygotObj, "Qci")
	if err != nil {
		return nil, err
	}
	if reflectQci != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Qci, err = utils.ToIntPtr(reflectQci); err != nil {
			return nil, err
		}
	}

	// Property: traffic-class-id string
	//encoding gNMI attribute to OAPI
	reflectTrafficClassId, err := utils.FindModelPluginObject(ygotObj, "TrafficClassId")
	if err != nil {
		return nil, err
	}
	if reflectTrafficClassId != nil {
		attrTrafficClassId := reflectTrafficClassId.Interface().(string)
		resource.TrafficClassId = attrTrafficClassId
	}

	return resource, nil
}

// toEnterprisesEnterpriseTrafficClassList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterprisesEnterpriseTrafficClassList(params ...string) (*types.EnterprisesEnterpriseTrafficClassList, error) {
	resource := new(types.EnterprisesEnterpriseTrafficClassList)

	// Array list - Go type EnterprisesEnterpriseTrafficClass
	mpObject, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTrafficClass", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		fmt.Printf("Handling %s\n", i.Key())

		r, err := toEnterprisesEnterpriseTrafficClass(i.Value().Interface(), params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toEnterprisesEnterpriseTrafficClassList converts gNMI to OAPI relative to a node in the tree.
func toEnterprisesEnterpriseTrafficClassList(ygotObj interface{}, params ...string) (*types.EnterprisesEnterpriseTrafficClassList, error) {
	resource := new(types.EnterprisesEnterpriseTrafficClassList)

	// Not used

	return resource, nil
}

// toTarget converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toTarget(params ...string) (*types.Target, error) {
	resource := new(types.Target)

	reflectTarget, err := utils.FindModelPluginObject(d.device, "Target", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toTarget(reflectTarget.Interface(), params...)
	return resource, err

}

// toTarget converts gNMI to OAPI relative to a node in the tree.
func toTarget(ygotObj interface{}, params ...string) (*types.Target, error) {
	resource := new(types.Target)

	return resource, nil
}

//Ignoring RequestBodyConnectivityServices

//Ignoring RequestBodyConnectivityServicesConnectivityService

//Ignoring RequestBodyEnterprises

//Ignoring RequestBodyEnterprisesEnterprise

//Ignoring RequestBodyEnterprisesEnterpriseApplication

//Ignoring RequestBodyEnterprisesEnterpriseApplicationEndpoint

//Ignoring RequestBodyEnterprisesEnterpriseApplicationEndpointMbr

//Ignoring RequestBodyEnterprisesEnterpriseConnectivityService

//Ignoring RequestBodyEnterprisesEnterpriseSite

//Ignoring RequestBodyEnterprisesEnterpriseSiteDevice

//Ignoring RequestBodyEnterprisesEnterpriseSiteDeviceGroup

//Ignoring RequestBodyEnterprisesEnterpriseSiteDeviceGroupDevice

//Ignoring RequestBodyEnterprisesEnterpriseSiteDeviceGroupMbr

//Ignoring RequestBodyEnterprisesEnterpriseSiteImsiDefinition

//Ignoring RequestBodyEnterprisesEnterpriseSiteIpDomain

//Ignoring RequestBodyEnterprisesEnterpriseSiteMonitoring

//Ignoring RequestBodyEnterprisesEnterpriseSiteMonitoringEdgeDevice

//Ignoring RequestBodyEnterprisesEnterpriseSiteSimCard

//Ignoring RequestBodyEnterprisesEnterpriseSiteSlice

//Ignoring RequestBodyEnterprisesEnterpriseSiteSliceDeviceGroup

//Ignoring RequestBodyEnterprisesEnterpriseSiteSliceFilter

//Ignoring RequestBodyEnterprisesEnterpriseSiteSliceMbr

//Ignoring RequestBodyEnterprisesEnterpriseSiteSlicePriorityTrafficRule

//Ignoring RequestBodyEnterprisesEnterpriseSiteSmallCell

//Ignoring RequestBodyEnterprisesEnterpriseSiteUpf

//Ignoring RequestBodyEnterprisesEnterpriseTemplate

//Ignoring RequestBodyEnterprisesEnterpriseTemplateMbr

//Ignoring RequestBodyEnterprisesEnterpriseTrafficClass

// Not generating param-types
// Not generating request-bodies

// Not generating additional-properties
// Not generating additional-properties
