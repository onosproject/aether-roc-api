// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"fmt"

	"github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	externalRef0 "github.com/onosproject/config-models/modelplugin/aether-2.0.0/aether_2_0_0"
)

// ModelPluginDevice - a wrapper for the model plugin
type ModelPluginDevice struct {
	device externalRef0.Device
}

// toAdditionalPropertyTarget converts gNMI to OAPI.
func (d *ModelPluginDevice) toAdditionalPropertyTarget(params ...string) (*types.AdditionalPropertyTarget, error) {
	resource := new(types.AdditionalPropertyTarget)

	// Property: target string
	//encoding gNMI attribute to OAPI
	reflectTarget, err := utils.FindModelPluginObject(d.device, "AdditionalPropertyTargetTarget", params...)
	if err != nil {
		return nil, err
	}
	if reflectTarget != nil {
		attrTarget := reflectTarget.Interface().(string)
		resource.Target = &attrTarget
	}

	return resource, nil
}

// toAdditionalPropertyUnchanged converts gNMI to OAPI.
func (d *ModelPluginDevice) toAdditionalPropertyUnchanged(params ...string) (*types.AdditionalPropertyUnchanged, error) {
	resource := new(types.AdditionalPropertyUnchanged)

	// Property: unchanged string
	//encoding gNMI attribute to OAPI
	reflectUnchanged, err := utils.FindModelPluginObject(d.device, "AdditionalPropertyUnchangedUnchanged", params...)
	if err != nil {
		return nil, err
	}
	if reflectUnchanged != nil {
		attrUnchanged := reflectUnchanged.Interface().(string)
		resource.Unchanged = &attrUnchanged
	}

	return resource, nil
}

// toConnectivityServices converts gNMI to OAPI.
func (d *ModelPluginDevice) toConnectivityServices(params ...string) (*types.ConnectivityServices, error) {
	resource := new(types.ConnectivityServices)

	// Property: connectivity-service []ConnectivityServicesConnectivityService
	// Handle []Object
	connectivityServices := make([]types.ConnectivityServicesConnectivityService, 0)
	reflectConnectivityServicesConnectivityService, err := utils.FindModelPluginObject(d.device, "ConnectivityServicesConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	if reflectConnectivityServicesConnectivityService != nil {
		for _, key := range reflectConnectivityServicesConnectivityService.MapKeys() {
			v := reflectConnectivityServicesConnectivityService.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			connectivityService, err := d.toConnectivityServicesConnectivityService(childParams...)
			if err != nil {
				return nil, err
			}
			connectivityServices = append(connectivityServices, *connectivityService)
		}
	}
	resource.ConnectivityService = &connectivityServices

	return resource, nil
}

// toConnectivityServicesConnectivityService converts gNMI to OAPI.
func (d *ModelPluginDevice) toConnectivityServicesConnectivityService(params ...string) (*types.ConnectivityServicesConnectivityService, error) {
	resource := new(types.ConnectivityServicesConnectivityService)

	// Property: acc-prometheus-url string
	//encoding gNMI attribute to OAPI
	reflectAccPrometheusUrl, err := utils.FindModelPluginObject(d.device, "ConnectivityServicesConnectivityServiceAccPrometheusUrl", params...)
	if err != nil {
		return nil, err
	}
	if reflectAccPrometheusUrl != nil {
		attrAccPrometheusUrl := reflectAccPrometheusUrl.Interface().(string)
		resource.AccPrometheusUrl = &attrAccPrometheusUrl
	}

	// Property: core-5g-endpoint string
	//encoding gNMI attribute to OAPI
	reflectCore5gEndpoint, err := utils.FindModelPluginObject(d.device, "ConnectivityServicesConnectivityServiceCore5gEndpoint", params...)
	if err != nil {
		return nil, err
	}
	if reflectCore5gEndpoint != nil {
		attrCore5gEndpoint := reflectCore5gEndpoint.Interface().(string)
		resource.Core5gEndpoint = &attrCore5gEndpoint
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "ConnectivityServicesConnectivityServiceDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "ConnectivityServicesConnectivityServiceDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "ConnectivityServicesConnectivityServiceId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = attrId
	}

	return resource, nil
}

// toEnterprises converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprises(params ...string) (*types.Enterprises, error) {
	resource := new(types.Enterprises)

	// Property: enterprise []EnterprisesEnterprise
	// Handle []Object
	enterprises := make([]types.EnterprisesEnterprise, 0)
	reflectEnterprisesEnterprise, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterprise", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterprise != nil {
		for _, key := range reflectEnterprisesEnterprise.MapKeys() {
			v := reflectEnterprisesEnterprise.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			enterprise, err := d.toEnterprisesEnterprise(childParams...)
			if err != nil {
				return nil, err
			}
			enterprises = append(enterprises, *enterprise)
		}
	}
	resource.Enterprise = &enterprises

	return resource, nil
}

// toEnterprisesEnterprise converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterprise(params ...string) (*types.EnterprisesEnterprise, error) {
	resource := new(types.EnterprisesEnterprise)

	// Property: application []EnterprisesEnterpriseApplication
	// Handle []Object
	applications := make([]types.EnterprisesEnterpriseApplication, 0)
	reflectEnterprisesEnterpriseApplication, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplication", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseApplication != nil {
		for _, key := range reflectEnterprisesEnterpriseApplication.MapKeys() {
			v := reflectEnterprisesEnterpriseApplication.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			application, err := d.toEnterprisesEnterpriseApplication(childParams...)
			if err != nil {
				return nil, err
			}
			applications = append(applications, *application)
		}
	}
	resource.Application = &applications

	// Property: connectivity-service []EnterprisesEnterpriseConnectivityService
	// Handle []Object
	connectivityServices := make([]types.EnterprisesEnterpriseConnectivityService, 0)
	reflectEnterprisesEnterpriseConnectivityService, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseConnectivityService != nil {
		for _, key := range reflectEnterprisesEnterpriseConnectivityService.MapKeys() {
			v := reflectEnterprisesEnterpriseConnectivityService.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			connectivityService, err := d.toEnterprisesEnterpriseConnectivityService(childParams...)
			if err != nil {
				return nil, err
			}
			connectivityServices = append(connectivityServices, *connectivityService)
		}
	}
	resource.ConnectivityService = &connectivityServices

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: ent-id string
	//encoding gNMI attribute to OAPI
	reflectEntId, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseEntId", params...)
	if err != nil {
		return nil, err
	}
	if reflectEntId != nil {
		attrEntId := reflectEntId.Interface().(string)
		resource.EntId = attrEntId
	}

	// Property: site []EnterprisesEnterpriseSite
	// Handle []Object
	sites := make([]types.EnterprisesEnterpriseSite, 0)
	reflectEnterprisesEnterpriseSite, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSite", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSite != nil {
		for _, key := range reflectEnterprisesEnterpriseSite.MapKeys() {
			v := reflectEnterprisesEnterpriseSite.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			site, err := d.toEnterprisesEnterpriseSite(childParams...)
			if err != nil {
				return nil, err
			}
			sites = append(sites, *site)
		}
	}
	resource.Site = &sites

	// Property: template []EnterprisesEnterpriseTemplate
	// Handle []Object
	templates := make([]types.EnterprisesEnterpriseTemplate, 0)
	reflectEnterprisesEnterpriseTemplate, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTemplate", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseTemplate != nil {
		for _, key := range reflectEnterprisesEnterpriseTemplate.MapKeys() {
			v := reflectEnterprisesEnterpriseTemplate.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			template, err := d.toEnterprisesEnterpriseTemplate(childParams...)
			if err != nil {
				return nil, err
			}
			templates = append(templates, *template)
		}
	}
	resource.Template = &templates

	// Property: traffic-class []EnterprisesEnterpriseTrafficClass
	// Handle []Object
	trafficClasss := make([]types.EnterprisesEnterpriseTrafficClass, 0)
	reflectEnterprisesEnterpriseTrafficClass, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTrafficClass", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseTrafficClass != nil {
		for _, key := range reflectEnterprisesEnterpriseTrafficClass.MapKeys() {
			v := reflectEnterprisesEnterpriseTrafficClass.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			trafficClass, err := d.toEnterprisesEnterpriseTrafficClass(childParams...)
			if err != nil {
				return nil, err
			}
			trafficClasss = append(trafficClasss, *trafficClass)
		}
	}
	resource.TrafficClass = &trafficClasss

	return resource, nil
}

// toEnterprisesEnterpriseApplication converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseApplication(params ...string) (*types.EnterprisesEnterpriseApplication, error) {
	resource := new(types.EnterprisesEnterpriseApplication)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplicationAddress", params...)
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := reflectAddress.Interface().(string)
		resource.Address = attrAddress
	}

	// Property: app-id string
	//encoding gNMI attribute to OAPI
	reflectAppId, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplicationAppId", params...)
	if err != nil {
		return nil, err
	}
	if reflectAppId != nil {
		attrAppId := reflectAppId.Interface().(string)
		resource.AppId = attrAppId
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplicationDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplicationDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: endpoint []EnterprisesEnterpriseApplicationEndpoint
	// Handle []Object
	endpoints := make([]types.EnterprisesEnterpriseApplicationEndpoint, 0)
	reflectEnterprisesEnterpriseApplicationEndpoint, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplicationEndpoint", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseApplicationEndpoint != nil {
		for _, key := range reflectEnterprisesEnterpriseApplicationEndpoint.MapKeys() {
			v := reflectEnterprisesEnterpriseApplicationEndpoint.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			endpoint, err := d.toEnterprisesEnterpriseApplicationEndpoint(childParams...)
			if err != nil {
				return nil, err
			}
			endpoints = append(endpoints, *endpoint)
		}
	}
	resource.Endpoint = &endpoints

	return resource, nil
}

// toEnterprisesEnterpriseApplicationEndpoint converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseApplicationEndpoint(params ...string) (*types.EnterprisesEnterpriseApplicationEndpoint, error) {
	resource := new(types.EnterprisesEnterpriseApplicationEndpoint)

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplicationEndpointDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: endpoint-id string
	//encoding gNMI attribute to OAPI
	reflectEndpointId, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplicationEndpointEndpointId", params...)
	if err != nil {
		return nil, err
	}
	if reflectEndpointId != nil {
		attrEndpointId := reflectEndpointId.Interface().(string)
		resource.EndpointId = attrEndpointId
	}

	// Property: mbr EnterprisesEnterpriseApplicationEndpointMbr
	//Handle object
	attrMbr, err := d.toEnterprisesEnterpriseApplicationEndpointMbr(params...)
	if err != nil {
		return nil, err
	}
	resource.Mbr = attrMbr

	// Property: port-end int
	//encoding gNMI attribute to OAPI
	reflectPortEnd, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplicationEndpointPortEnd", params...)
	if err != nil {
		return nil, err
	}
	if reflectPortEnd != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.PortEnd, err = utils.ToIntPtr(reflectPortEnd); err != nil {
			return nil, err
		}
	}

	// Property: port-start int
	//encoding gNMI attribute to OAPI
	reflectPortStart, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplicationEndpointPortStart", params...)
	if err != nil {
		return nil, err
	}
	if reflectPortStart != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.PortStart, err = utils.ToIntPtr(reflectPortStart); err != nil {
			return nil, err
		}
	}

	// Property: protocol string
	//encoding gNMI attribute to OAPI
	reflectProtocol, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplicationEndpointProtocol", params...)
	if err != nil {
		return nil, err
	}
	if reflectProtocol != nil {
		attrProtocol := reflectProtocol.Interface().(string)
		resource.Protocol = &attrProtocol
	}

	// Property: traffic-class string
	//encoding gNMI attribute to OAPI
	reflectTrafficClass, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplicationEndpointTrafficClass", params...)
	if err != nil {
		return nil, err
	}
	if reflectTrafficClass != nil {
		attrTrafficClass := reflectTrafficClass.Interface().(string)
		resource.TrafficClass = &attrTrafficClass
	}

	return resource, nil
}

// toEnterprisesEnterpriseApplicationEndpointMbr converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseApplicationEndpointMbr(params ...string) (*types.EnterprisesEnterpriseApplicationEndpointMbr, error) {
	resource := new(types.EnterprisesEnterpriseApplicationEndpointMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplicationEndpointMbrDownlink", params...)
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseApplicationEndpointMbrUplink", params...)
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toEnterprisesEnterpriseConnectivityService converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseConnectivityService(params ...string) (*types.EnterprisesEnterpriseConnectivityService, error) {
	resource := new(types.EnterprisesEnterpriseConnectivityService)

	// Property: connectivity-service string
	//encoding gNMI attribute to OAPI
	reflectConnectivityService, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseConnectivityServiceConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	if reflectConnectivityService != nil {
		attrConnectivityService := reflectConnectivityService.Interface().(string)
		resource.ConnectivityService = attrConnectivityService
	}

	// Property: enabled bool
	//encoding gNMI attribute to OAPI
	reflectEnabled, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseConnectivityServiceEnabled", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnabled != nil {
		boolEnabled := reflectEnabled.Interface().(bool)
		resource.Enabled = &boolEnabled
	}

	return resource, nil
}

// toEnterprisesEnterpriseSite converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSite(params ...string) (*types.EnterprisesEnterpriseSite, error) {
	resource := new(types.EnterprisesEnterpriseSite)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device []EnterprisesEnterpriseSiteDevice
	// Handle []Object
	devices := make([]types.EnterprisesEnterpriseSiteDevice, 0)
	reflectEnterprisesEnterpriseSiteDevice, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDevice", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteDevice != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteDevice.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteDevice.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			device, err := d.toEnterprisesEnterpriseSiteDevice(childParams...)
			if err != nil {
				return nil, err
			}
			devices = append(devices, *device)
		}
	}
	resource.Device = &devices

	// Property: device-group []EnterprisesEnterpriseSiteDeviceGroup
	// Handle []Object
	deviceGroups := make([]types.EnterprisesEnterpriseSiteDeviceGroup, 0)
	reflectEnterprisesEnterpriseSiteDeviceGroup, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteDeviceGroup != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteDeviceGroup.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteDeviceGroup.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			deviceGroup, err := d.toEnterprisesEnterpriseSiteDeviceGroup(childParams...)
			if err != nil {
				return nil, err
			}
			deviceGroups = append(deviceGroups, *deviceGroup)
		}
	}
	resource.DeviceGroup = &deviceGroups

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: imsi-definition EnterprisesEnterpriseSiteImsiDefinition
	//Handle object
	attrImsiDefinition, err := d.toEnterprisesEnterpriseSiteImsiDefinition(params...)
	if err != nil {
		return nil, err
	}
	resource.ImsiDefinition = attrImsiDefinition

	// Property: ip-domain []EnterprisesEnterpriseSiteIpDomain
	// Handle []Object
	ipDomains := make([]types.EnterprisesEnterpriseSiteIpDomain, 0)
	reflectEnterprisesEnterpriseSiteIpDomain, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteIpDomain", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteIpDomain != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteIpDomain.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteIpDomain.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			ipDomain, err := d.toEnterprisesEnterpriseSiteIpDomain(childParams...)
			if err != nil {
				return nil, err
			}
			ipDomains = append(ipDomains, *ipDomain)
		}
	}
	resource.IpDomain = &ipDomains

	// Property: monitoring EnterprisesEnterpriseSiteMonitoring
	//Handle object
	attrMonitoring, err := d.toEnterprisesEnterpriseSiteMonitoring(params...)
	if err != nil {
		return nil, err
	}
	resource.Monitoring = attrMonitoring

	// Property: priority-traffic-rule []EnterprisesEnterpriseSitePriorityTrafficRule
	// Handle []Object
	priorityTrafficRules := make([]types.EnterprisesEnterpriseSitePriorityTrafficRule, 0)
	reflectEnterprisesEnterpriseSitePriorityTrafficRule, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSitePriorityTrafficRule", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSitePriorityTrafficRule != nil {
		for _, key := range reflectEnterprisesEnterpriseSitePriorityTrafficRule.MapKeys() {
			v := reflectEnterprisesEnterpriseSitePriorityTrafficRule.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			priorityTrafficRule, err := d.toEnterprisesEnterpriseSitePriorityTrafficRule(childParams...)
			if err != nil {
				return nil, err
			}
			priorityTrafficRules = append(priorityTrafficRules, *priorityTrafficRule)
		}
	}
	resource.PriorityTrafficRule = &priorityTrafficRules

	// Property: sim-card []EnterprisesEnterpriseSiteSimCard
	// Handle []Object
	simCards := make([]types.EnterprisesEnterpriseSiteSimCard, 0)
	reflectEnterprisesEnterpriseSiteSimCard, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSimCard", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteSimCard != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteSimCard.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteSimCard.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			simCard, err := d.toEnterprisesEnterpriseSiteSimCard(childParams...)
			if err != nil {
				return nil, err
			}
			simCards = append(simCards, *simCard)
		}
	}
	resource.SimCard = &simCards

	// Property: site-id string
	//encoding gNMI attribute to OAPI
	reflectSiteId, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSiteId", params...)
	if err != nil {
		return nil, err
	}
	if reflectSiteId != nil {
		attrSiteId := reflectSiteId.Interface().(string)
		resource.SiteId = attrSiteId
	}

	// Property: small-cell []EnterprisesEnterpriseSiteSmallCell
	// Handle []Object
	smallCells := make([]types.EnterprisesEnterpriseSiteSmallCell, 0)
	reflectEnterprisesEnterpriseSiteSmallCell, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSmallCell", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteSmallCell != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteSmallCell.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteSmallCell.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			smallCell, err := d.toEnterprisesEnterpriseSiteSmallCell(childParams...)
			if err != nil {
				return nil, err
			}
			smallCells = append(smallCells, *smallCell)
		}
	}
	resource.SmallCell = &smallCells

	// Property: upf []EnterprisesEnterpriseSiteUpf
	// Handle []Object
	upfs := make([]types.EnterprisesEnterpriseSiteUpf, 0)
	reflectEnterprisesEnterpriseSiteUpf, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteUpf", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteUpf != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteUpf.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteUpf.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			upf, err := d.toEnterprisesEnterpriseSiteUpf(childParams...)
			if err != nil {
				return nil, err
			}
			upfs = append(upfs, *upf)
		}
	}
	resource.Upf = &upfs

	// Property: vcs []EnterprisesEnterpriseSiteVcs
	// Handle []Object
	vcss := make([]types.EnterprisesEnterpriseSiteVcs, 0)
	reflectEnterprisesEnterpriseSiteVcs, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteVcs", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteVcs != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteVcs.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteVcs.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			vcs, err := d.toEnterprisesEnterpriseSiteVcs(childParams...)
			if err != nil {
				return nil, err
			}
			vcss = append(vcss, *vcs)
		}
	}
	resource.Vcs = &vcss

	return resource, nil
}

// toEnterprisesEnterpriseSiteDevice converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteDevice(params ...string) (*types.EnterprisesEnterpriseSiteDevice, error) {
	resource := new(types.EnterprisesEnterpriseSiteDevice)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: dev-id string
	//encoding gNMI attribute to OAPI
	reflectDevId, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceDevId", params...)
	if err != nil {
		return nil, err
	}
	if reflectDevId != nil {
		attrDevId := reflectDevId.Interface().(string)
		resource.DevId = attrDevId
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: imei int64
	//encoding gNMI attribute to OAPI
	reflectImei, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceImei", params...)
	if err != nil {
		return nil, err
	}
	if reflectImei != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Imei, err = utils.ToInt64Ptr(reflectImei); err != nil {
			return nil, err
		}
	}

	// Property: sim-card string
	//encoding gNMI attribute to OAPI
	reflectSimCard, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceSimCard", params...)
	if err != nil {
		return nil, err
	}
	if reflectSimCard != nil {
		attrSimCard := reflectSimCard.Interface().(string)
		resource.SimCard = &attrSimCard
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteDeviceGroup converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteDeviceGroup(params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroup, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroup)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroupDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device []EnterprisesEnterpriseSiteDeviceGroupDevice
	// Handle []Object
	devices := make([]types.EnterprisesEnterpriseSiteDeviceGroupDevice, 0)
	reflectEnterprisesEnterpriseSiteDeviceGroupDevice, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroupDevice", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteDeviceGroupDevice != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteDeviceGroupDevice.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteDeviceGroupDevice.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			device, err := d.toEnterprisesEnterpriseSiteDeviceGroupDevice(childParams...)
			if err != nil {
				return nil, err
			}
			devices = append(devices, *device)
		}
	}
	resource.Device = &devices

	// Property: dg-id string
	//encoding gNMI attribute to OAPI
	reflectDgId, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroupDgId", params...)
	if err != nil {
		return nil, err
	}
	if reflectDgId != nil {
		attrDgId := reflectDgId.Interface().(string)
		resource.DgId = attrDgId
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroupDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: ip-domain string
	//encoding gNMI attribute to OAPI
	reflectIpDomain, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroupIpDomain", params...)
	if err != nil {
		return nil, err
	}
	if reflectIpDomain != nil {
		attrIpDomain := reflectIpDomain.Interface().(string)
		resource.IpDomain = &attrIpDomain
	}

	// Property: mbr EnterprisesEnterpriseSiteDeviceGroupMbr
	//Handle object
	attrMbr, err := d.toEnterprisesEnterpriseSiteDeviceGroupMbr(params...)
	if err != nil {
		return nil, err
	}
	resource.Mbr = attrMbr

	return resource, nil
}

// toEnterprisesEnterpriseSiteDeviceGroupDevice converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteDeviceGroupDevice(params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroupDevice, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroupDevice)

	// Property: device-id string
	//encoding gNMI attribute to OAPI
	reflectDeviceId, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroupDeviceDeviceId", params...)
	if err != nil {
		return nil, err
	}
	if reflectDeviceId != nil {
		attrDeviceId := reflectDeviceId.Interface().(string)
		resource.DeviceId = attrDeviceId
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroupDeviceEnable", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = &boolEnable
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteDeviceGroupMbr converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteDeviceGroupMbr(params ...string) (*types.EnterprisesEnterpriseSiteDeviceGroupMbr, error) {
	resource := new(types.EnterprisesEnterpriseSiteDeviceGroupMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroupMbrDownlink", params...)
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: traffic-class string
	//encoding gNMI attribute to OAPI
	reflectTrafficClass, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroupMbrTrafficClass", params...)
	if err != nil {
		return nil, err
	}
	if reflectTrafficClass != nil {
		attrTrafficClass := reflectTrafficClass.Interface().(string)
		resource.TrafficClass = attrTrafficClass
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteDeviceGroupMbrUplink", params...)
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteImsiDefinition converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteImsiDefinition(params ...string) (*types.EnterprisesEnterpriseSiteImsiDefinition, error) {
	resource := new(types.EnterprisesEnterpriseSiteImsiDefinition)

	// Property: enterprise int32
	//encoding gNMI attribute to OAPI
	reflectEnterprise, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteImsiDefinitionEnterprise", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprise != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Enterprise, err = utils.ToInt32(reflectEnterprise); err != nil {
			return nil, err
		}
	}

	// Property: format string
	//encoding gNMI attribute to OAPI
	reflectFormat, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteImsiDefinitionFormat", params...)
	if err != nil {
		return nil, err
	}
	if reflectFormat != nil {
		attrFormat := reflectFormat.Interface().(string)
		resource.Format = attrFormat
	}

	// Property: mcc string
	//encoding gNMI attribute to OAPI
	reflectMcc, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteImsiDefinitionMcc", params...)
	if err != nil {
		return nil, err
	}
	if reflectMcc != nil {
		attrMcc := reflectMcc.Interface().(string)
		resource.Mcc = attrMcc
	}

	// Property: mnc string
	//encoding gNMI attribute to OAPI
	reflectMnc, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteImsiDefinitionMnc", params...)
	if err != nil {
		return nil, err
	}
	if reflectMnc != nil {
		attrMnc := reflectMnc.Interface().(string)
		resource.Mnc = attrMnc
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteIpDomain converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteIpDomain(params ...string) (*types.EnterprisesEnterpriseSiteIpDomain, error) {
	resource := new(types.EnterprisesEnterpriseSiteIpDomain)

	// Property: admin-status string
	//encoding gNMI attribute to OAPI
	reflectAdminStatus, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteIpDomainAdminStatus", params...)
	if err != nil {
		return nil, err
	}
	if reflectAdminStatus != nil {
		attrAdminStatus := reflectAdminStatus.Interface().(string)
		resource.AdminStatus = &attrAdminStatus
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteIpDomainDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteIpDomainDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: dnn string
	//encoding gNMI attribute to OAPI
	reflectDnn, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteIpDomainDnn", params...)
	if err != nil {
		return nil, err
	}
	if reflectDnn != nil {
		attrDnn := reflectDnn.Interface().(string)
		resource.Dnn = attrDnn
	}

	// Property: dns-primary string
	//encoding gNMI attribute to OAPI
	reflectDnsPrimary, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteIpDomainDnsPrimary", params...)
	if err != nil {
		return nil, err
	}
	if reflectDnsPrimary != nil {
		attrDnsPrimary := reflectDnsPrimary.Interface().(string)
		resource.DnsPrimary = &attrDnsPrimary
	}

	// Property: dns-secondary string
	//encoding gNMI attribute to OAPI
	reflectDnsSecondary, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteIpDomainDnsSecondary", params...)
	if err != nil {
		return nil, err
	}
	if reflectDnsSecondary != nil {
		attrDnsSecondary := reflectDnsSecondary.Interface().(string)
		resource.DnsSecondary = &attrDnsSecondary
	}

	// Property: ip-id string
	//encoding gNMI attribute to OAPI
	reflectIpId, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteIpDomainIpId", params...)
	if err != nil {
		return nil, err
	}
	if reflectIpId != nil {
		attrIpId := reflectIpId.Interface().(string)
		resource.IpId = attrIpId
	}

	// Property: mtu int
	//encoding gNMI attribute to OAPI
	reflectMtu, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteIpDomainMtu", params...)
	if err != nil {
		return nil, err
	}
	if reflectMtu != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Mtu, err = utils.ToIntPtr(reflectMtu); err != nil {
			return nil, err
		}
	}

	// Property: subnet string
	//encoding gNMI attribute to OAPI
	reflectSubnet, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteIpDomainSubnet", params...)
	if err != nil {
		return nil, err
	}
	if reflectSubnet != nil {
		attrSubnet := reflectSubnet.Interface().(string)
		resource.Subnet = attrSubnet
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteMonitoring converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteMonitoring(params ...string) (*types.EnterprisesEnterpriseSiteMonitoring, error) {
	resource := new(types.EnterprisesEnterpriseSiteMonitoring)

	// Property: edge-cluster-prometheus-url string
	//encoding gNMI attribute to OAPI
	reflectEdgeClusterPrometheusUrl, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteMonitoringEdgeClusterPrometheusUrl", params...)
	if err != nil {
		return nil, err
	}
	if reflectEdgeClusterPrometheusUrl != nil {
		attrEdgeClusterPrometheusUrl := reflectEdgeClusterPrometheusUrl.Interface().(string)
		resource.EdgeClusterPrometheusUrl = &attrEdgeClusterPrometheusUrl
	}

	// Property: edge-device []EnterprisesEnterpriseSiteMonitoringEdgeDevice
	// Handle []Object
	edgeDevices := make([]types.EnterprisesEnterpriseSiteMonitoringEdgeDevice, 0)
	reflectEnterprisesEnterpriseSiteMonitoringEdgeDevice, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteMonitoringEdgeDevice", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteMonitoringEdgeDevice != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteMonitoringEdgeDevice.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteMonitoringEdgeDevice.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			edgeDevice, err := d.toEnterprisesEnterpriseSiteMonitoringEdgeDevice(childParams...)
			if err != nil {
				return nil, err
			}
			edgeDevices = append(edgeDevices, *edgeDevice)
		}
	}
	resource.EdgeDevice = &edgeDevices

	// Property: edge-monitoring-prometheus-url string
	//encoding gNMI attribute to OAPI
	reflectEdgeMonitoringPrometheusUrl, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteMonitoringEdgeMonitoringPrometheusUrl", params...)
	if err != nil {
		return nil, err
	}
	if reflectEdgeMonitoringPrometheusUrl != nil {
		attrEdgeMonitoringPrometheusUrl := reflectEdgeMonitoringPrometheusUrl.Interface().(string)
		resource.EdgeMonitoringPrometheusUrl = &attrEdgeMonitoringPrometheusUrl
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteMonitoringEdgeDevice converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteMonitoringEdgeDevice(params ...string) (*types.EnterprisesEnterpriseSiteMonitoringEdgeDevice, error) {
	resource := new(types.EnterprisesEnterpriseSiteMonitoringEdgeDevice)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteMonitoringEdgeDeviceDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteMonitoringEdgeDeviceDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: edge-device-id string
	//encoding gNMI attribute to OAPI
	reflectEdgeDeviceId, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteMonitoringEdgeDeviceEdgeDeviceId", params...)
	if err != nil {
		return nil, err
	}
	if reflectEdgeDeviceId != nil {
		attrEdgeDeviceId := reflectEdgeDeviceId.Interface().(string)
		resource.EdgeDeviceId = attrEdgeDeviceId
	}

	return resource, nil
}

// toEnterprisesEnterpriseSitePriorityTrafficRule converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSitePriorityTrafficRule(params ...string) (*types.EnterprisesEnterpriseSitePriorityTrafficRule, error) {
	resource := new(types.EnterprisesEnterpriseSitePriorityTrafficRule)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSitePriorityTrafficRuleDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device string
	//encoding gNMI attribute to OAPI
	reflectDevice, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSitePriorityTrafficRuleDevice", params...)
	if err != nil {
		return nil, err
	}
	if reflectDevice != nil {
		attrDevice := reflectDevice.Interface().(string)
		resource.Device = attrDevice
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSitePriorityTrafficRuleDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: endpoint string
	//encoding gNMI attribute to OAPI
	reflectEndpoint, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSitePriorityTrafficRuleEndpoint", params...)
	if err != nil {
		return nil, err
	}
	if reflectEndpoint != nil {
		attrEndpoint := reflectEndpoint.Interface().(string)
		resource.Endpoint = attrEndpoint
	}

	// Property: gbr EnterprisesEnterpriseSitePriorityTrafficRuleGbr
	//Handle object
	attrGbr, err := d.toEnterprisesEnterpriseSitePriorityTrafficRuleGbr(params...)
	if err != nil {
		return nil, err
	}
	resource.Gbr = attrGbr

	// Property: mbr EnterprisesEnterpriseSitePriorityTrafficRuleMbr
	//Handle object
	attrMbr, err := d.toEnterprisesEnterpriseSitePriorityTrafficRuleMbr(params...)
	if err != nil {
		return nil, err
	}
	resource.Mbr = attrMbr

	// Property: ptr-id string
	//encoding gNMI attribute to OAPI
	reflectPtrId, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSitePriorityTrafficRulePtrId", params...)
	if err != nil {
		return nil, err
	}
	if reflectPtrId != nil {
		attrPtrId := reflectPtrId.Interface().(string)
		resource.PtrId = attrPtrId
	}

	// Property: traffic-class string
	//encoding gNMI attribute to OAPI
	reflectTrafficClass, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSitePriorityTrafficRuleTrafficClass", params...)
	if err != nil {
		return nil, err
	}
	if reflectTrafficClass != nil {
		attrTrafficClass := reflectTrafficClass.Interface().(string)
		resource.TrafficClass = &attrTrafficClass
	}

	return resource, nil
}

// toEnterprisesEnterpriseSitePriorityTrafficRuleGbr converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSitePriorityTrafficRuleGbr(params ...string) (*types.EnterprisesEnterpriseSitePriorityTrafficRuleGbr, error) {
	resource := new(types.EnterprisesEnterpriseSitePriorityTrafficRuleGbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSitePriorityTrafficRuleGbrDownlink", params...)
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSitePriorityTrafficRuleGbrUplink", params...)
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toEnterprisesEnterpriseSitePriorityTrafficRuleMbr converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSitePriorityTrafficRuleMbr(params ...string) (*types.EnterprisesEnterpriseSitePriorityTrafficRuleMbr, error) {
	resource := new(types.EnterprisesEnterpriseSitePriorityTrafficRuleMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSitePriorityTrafficRuleMbrDownlink", params...)
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSitePriorityTrafficRuleMbrUplink", params...)
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteSimCard converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteSimCard(params ...string) (*types.EnterprisesEnterpriseSiteSimCard, error) {
	resource := new(types.EnterprisesEnterpriseSiteSimCard)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSimCardDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSimCardDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: iccid int64
	//encoding gNMI attribute to OAPI
	reflectIccid, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSimCardIccid", params...)
	if err != nil {
		return nil, err
	}
	if reflectIccid != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Iccid, err = utils.ToInt64Ptr(reflectIccid); err != nil {
			return nil, err
		}
	}

	// Property: imsi int64
	//encoding gNMI attribute to OAPI
	reflectImsi, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSimCardImsi", params...)
	if err != nil {
		return nil, err
	}
	if reflectImsi != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Imsi, err = utils.ToInt64Ptr(reflectImsi); err != nil {
			return nil, err
		}
	}

	// Property: sim-id string
	//encoding gNMI attribute to OAPI
	reflectSimId, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSimCardSimId", params...)
	if err != nil {
		return nil, err
	}
	if reflectSimId != nil {
		attrSimId := reflectSimId.Interface().(string)
		resource.SimId = attrSimId
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteSmallCell converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteSmallCell(params ...string) (*types.EnterprisesEnterpriseSiteSmallCell, error) {
	resource := new(types.EnterprisesEnterpriseSiteSmallCell)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSmallCellAddress", params...)
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := reflectAddress.Interface().(string)
		resource.Address = &attrAddress
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSmallCellDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSmallCellEnable", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = &boolEnable
	}

	// Property: small-cell-id string
	//encoding gNMI attribute to OAPI
	reflectSmallCellId, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSmallCellSmallCellId", params...)
	if err != nil {
		return nil, err
	}
	if reflectSmallCellId != nil {
		attrSmallCellId := reflectSmallCellId.Interface().(string)
		resource.SmallCellId = attrSmallCellId
	}

	// Property: tac string
	//encoding gNMI attribute to OAPI
	reflectTac, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteSmallCellTac", params...)
	if err != nil {
		return nil, err
	}
	if reflectTac != nil {
		attrTac := reflectTac.Interface().(string)
		resource.Tac = attrTac
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteUpf converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteUpf(params ...string) (*types.EnterprisesEnterpriseSiteUpf, error) {
	resource := new(types.EnterprisesEnterpriseSiteUpf)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteUpfAddress", params...)
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := reflectAddress.Interface().(string)
		resource.Address = attrAddress
	}

	// Property: config-endpoint string
	//encoding gNMI attribute to OAPI
	reflectConfigEndpoint, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteUpfConfigEndpoint", params...)
	if err != nil {
		return nil, err
	}
	if reflectConfigEndpoint != nil {
		attrConfigEndpoint := reflectConfigEndpoint.Interface().(string)
		resource.ConfigEndpoint = &attrConfigEndpoint
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteUpfDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteUpfDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: port int
	//encoding gNMI attribute to OAPI
	reflectPort, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteUpfPort", params...)
	if err != nil {
		return nil, err
	}
	if reflectPort != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Port, err = utils.ToInt(reflectPort); err != nil {
			return nil, err
		}
	}

	// Property: upf-id string
	//encoding gNMI attribute to OAPI
	reflectUpfId, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteUpfUpfId", params...)
	if err != nil {
		return nil, err
	}
	if reflectUpfId != nil {
		attrUpfId := reflectUpfId.Interface().(string)
		resource.UpfId = attrUpfId
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteVcs converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteVcs(params ...string) (*types.EnterprisesEnterpriseSiteVcs, error) {
	resource := new(types.EnterprisesEnterpriseSiteVcs)

	// Property: default-behavior string
	//encoding gNMI attribute to OAPI
	reflectDefaultBehavior, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteVcsDefaultBehavior", params...)
	if err != nil {
		return nil, err
	}
	if reflectDefaultBehavior != nil {
		attrDefaultBehavior := reflectDefaultBehavior.Interface().(string)
		resource.DefaultBehavior = attrDefaultBehavior
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteVcsDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device-group []EnterprisesEnterpriseSiteVcsDeviceGroup
	// Handle []Object
	deviceGroups := make([]types.EnterprisesEnterpriseSiteVcsDeviceGroup, 0)
	reflectEnterprisesEnterpriseSiteVcsDeviceGroup, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteVcsDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteVcsDeviceGroup != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteVcsDeviceGroup.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteVcsDeviceGroup.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			deviceGroup, err := d.toEnterprisesEnterpriseSiteVcsDeviceGroup(childParams...)
			if err != nil {
				return nil, err
			}
			deviceGroups = append(deviceGroups, *deviceGroup)
		}
	}
	resource.DeviceGroup = &deviceGroups

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteVcsDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: filter []EnterprisesEnterpriseSiteVcsFilter
	// Handle []Object
	filters := make([]types.EnterprisesEnterpriseSiteVcsFilter, 0)
	reflectEnterprisesEnterpriseSiteVcsFilter, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteVcsFilter", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprisesEnterpriseSiteVcsFilter != nil {
		for _, key := range reflectEnterprisesEnterpriseSiteVcsFilter.MapKeys() {
			v := reflectEnterprisesEnterpriseSiteVcsFilter.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			filter, err := d.toEnterprisesEnterpriseSiteVcsFilter(childParams...)
			if err != nil {
				return nil, err
			}
			filters = append(filters, *filter)
		}
	}
	resource.Filter = &filters

	// Property: sd int32
	//encoding gNMI attribute to OAPI
	reflectSd, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteVcsSd", params...)
	if err != nil {
		return nil, err
	}
	if reflectSd != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sd, err = utils.ToInt32(reflectSd); err != nil {
			return nil, err
		}
	}

	// Property: slice EnterprisesEnterpriseSiteVcsSlice
	//Handle object
	attrSlice, err := d.toEnterprisesEnterpriseSiteVcsSlice(params...)
	if err != nil {
		return nil, err
	}
	resource.Slice = attrSlice

	// Property: sst int
	//encoding gNMI attribute to OAPI
	reflectSst, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteVcsSst", params...)
	if err != nil {
		return nil, err
	}
	if reflectSst != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sst, err = utils.ToInt(reflectSst); err != nil {
			return nil, err
		}
	}

	// Property: upf string
	//encoding gNMI attribute to OAPI
	reflectUpf, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteVcsUpf", params...)
	if err != nil {
		return nil, err
	}
	if reflectUpf != nil {
		attrUpf := reflectUpf.Interface().(string)
		resource.Upf = &attrUpf
	}

	// Property: vcs-id string
	//encoding gNMI attribute to OAPI
	reflectVcsId, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteVcsVcsId", params...)
	if err != nil {
		return nil, err
	}
	if reflectVcsId != nil {
		attrVcsId := reflectVcsId.Interface().(string)
		resource.VcsId = attrVcsId
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteVcsDeviceGroup converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteVcsDeviceGroup(params ...string) (*types.EnterprisesEnterpriseSiteVcsDeviceGroup, error) {
	resource := new(types.EnterprisesEnterpriseSiteVcsDeviceGroup)

	// Property: device-group string
	//encoding gNMI attribute to OAPI
	reflectDeviceGroup, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteVcsDeviceGroupDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroup != nil {
		attrDeviceGroup := reflectDeviceGroup.Interface().(string)
		resource.DeviceGroup = attrDeviceGroup
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteVcsDeviceGroupEnable", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = &boolEnable
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteVcsFilter converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteVcsFilter(params ...string) (*types.EnterprisesEnterpriseSiteVcsFilter, error) {
	resource := new(types.EnterprisesEnterpriseSiteVcsFilter)

	// Property: allow bool
	//encoding gNMI attribute to OAPI
	reflectAllow, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteVcsFilterAllow", params...)
	if err != nil {
		return nil, err
	}
	if reflectAllow != nil {
		boolAllow := reflectAllow.Interface().(bool)
		resource.Allow = &boolAllow
	}

	// Property: application string
	//encoding gNMI attribute to OAPI
	reflectApplication, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteVcsFilterApplication", params...)
	if err != nil {
		return nil, err
	}
	if reflectApplication != nil {
		attrApplication := reflectApplication.Interface().(string)
		resource.Application = attrApplication
	}

	// Property: priority int
	//encoding gNMI attribute to OAPI
	reflectPriority, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteVcsFilterPriority", params...)
	if err != nil {
		return nil, err
	}
	if reflectPriority != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Priority, err = utils.ToIntPtr(reflectPriority); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toEnterprisesEnterpriseSiteVcsSlice converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteVcsSlice(params ...string) (*types.EnterprisesEnterpriseSiteVcsSlice, error) {
	resource := new(types.EnterprisesEnterpriseSiteVcsSlice)

	// Property: mbr EnterprisesEnterpriseSiteVcsSliceMbr
	//Handle object
	attrMbr, err := d.toEnterprisesEnterpriseSiteVcsSliceMbr(params...)
	if err != nil {
		return nil, err
	}
	resource.Mbr = attrMbr

	return resource, nil
}

// toEnterprisesEnterpriseSiteVcsSliceMbr converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseSiteVcsSliceMbr(params ...string) (*types.EnterprisesEnterpriseSiteVcsSliceMbr, error) {
	resource := new(types.EnterprisesEnterpriseSiteVcsSliceMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteVcsSliceMbrDownlink", params...)
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: downlink-burst-size int32
	//encoding gNMI attribute to OAPI
	reflectDownlinkBurstSize, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteVcsSliceMbrDownlinkBurstSize", params...)
	if err != nil {
		return nil, err
	}
	if reflectDownlinkBurstSize != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.DownlinkBurstSize, err = utils.ToInt32Ptr(reflectDownlinkBurstSize); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteVcsSliceMbrUplink", params...)
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	// Property: uplink-burst-size int32
	//encoding gNMI attribute to OAPI
	reflectUplinkBurstSize, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseSiteVcsSliceMbrUplinkBurstSize", params...)
	if err != nil {
		return nil, err
	}
	if reflectUplinkBurstSize != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.UplinkBurstSize, err = utils.ToInt32Ptr(reflectUplinkBurstSize); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toEnterprisesEnterpriseTemplate converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseTemplate(params ...string) (*types.EnterprisesEnterpriseTemplate, error) {
	resource := new(types.EnterprisesEnterpriseTemplate)

	// Property: default-behavior string
	//encoding gNMI attribute to OAPI
	reflectDefaultBehavior, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTemplateDefaultBehavior", params...)
	if err != nil {
		return nil, err
	}
	if reflectDefaultBehavior != nil {
		attrDefaultBehavior := reflectDefaultBehavior.Interface().(string)
		resource.DefaultBehavior = attrDefaultBehavior
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTemplateDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTemplateDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: sd int32
	//encoding gNMI attribute to OAPI
	reflectSd, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTemplateSd", params...)
	if err != nil {
		return nil, err
	}
	if reflectSd != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sd, err = utils.ToInt32Ptr(reflectSd); err != nil {
			return nil, err
		}
	}

	// Property: slice EnterprisesEnterpriseTemplateSlice
	//Handle object
	attrSlice, err := d.toEnterprisesEnterpriseTemplateSlice(params...)
	if err != nil {
		return nil, err
	}
	resource.Slice = attrSlice

	// Property: sst int
	//encoding gNMI attribute to OAPI
	reflectSst, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTemplateSst", params...)
	if err != nil {
		return nil, err
	}
	if reflectSst != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sst, err = utils.ToIntPtr(reflectSst); err != nil {
			return nil, err
		}
	}

	// Property: tp-id string
	//encoding gNMI attribute to OAPI
	reflectTpId, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTemplateTpId", params...)
	if err != nil {
		return nil, err
	}
	if reflectTpId != nil {
		attrTpId := reflectTpId.Interface().(string)
		resource.TpId = attrTpId
	}

	return resource, nil
}

// toEnterprisesEnterpriseTemplateSlice converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseTemplateSlice(params ...string) (*types.EnterprisesEnterpriseTemplateSlice, error) {
	resource := new(types.EnterprisesEnterpriseTemplateSlice)

	// Property: mbr EnterprisesEnterpriseTemplateSliceMbr
	//Handle object
	attrMbr, err := d.toEnterprisesEnterpriseTemplateSliceMbr(params...)
	if err != nil {
		return nil, err
	}
	resource.Mbr = attrMbr

	return resource, nil
}

// toEnterprisesEnterpriseTemplateSliceMbr converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseTemplateSliceMbr(params ...string) (*types.EnterprisesEnterpriseTemplateSliceMbr, error) {
	resource := new(types.EnterprisesEnterpriseTemplateSliceMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTemplateSliceMbrDownlink", params...)
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: downlink-burst-size int32
	//encoding gNMI attribute to OAPI
	reflectDownlinkBurstSize, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTemplateSliceMbrDownlinkBurstSize", params...)
	if err != nil {
		return nil, err
	}
	if reflectDownlinkBurstSize != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.DownlinkBurstSize, err = utils.ToInt32Ptr(reflectDownlinkBurstSize); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTemplateSliceMbrUplink", params...)
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	// Property: uplink-burst-size int32
	//encoding gNMI attribute to OAPI
	reflectUplinkBurstSize, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTemplateSliceMbrUplinkBurstSize", params...)
	if err != nil {
		return nil, err
	}
	if reflectUplinkBurstSize != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.UplinkBurstSize, err = utils.ToInt32Ptr(reflectUplinkBurstSize); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toEnterprisesEnterpriseTrafficClass converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprisesEnterpriseTrafficClass(params ...string) (*types.EnterprisesEnterpriseTrafficClass, error) {
	resource := new(types.EnterprisesEnterpriseTrafficClass)

	// Property: arp int
	//encoding gNMI attribute to OAPI
	reflectArp, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTrafficClassArp", params...)
	if err != nil {
		return nil, err
	}
	if reflectArp != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Arp, err = utils.ToIntPtr(reflectArp); err != nil {
			return nil, err
		}
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTrafficClassDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTrafficClassDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: pdb int
	//encoding gNMI attribute to OAPI
	reflectPdb, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTrafficClassPdb", params...)
	if err != nil {
		return nil, err
	}
	if reflectPdb != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Pdb, err = utils.ToIntPtr(reflectPdb); err != nil {
			return nil, err
		}
	}

	// Property: pelr int
	//encoding gNMI attribute to OAPI
	reflectPelr, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTrafficClassPelr", params...)
	if err != nil {
		return nil, err
	}
	if reflectPelr != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Pelr, err = utils.ToIntPtr(reflectPelr); err != nil {
			return nil, err
		}
	}

	// Property: qci int
	//encoding gNMI attribute to OAPI
	reflectQci, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTrafficClassQci", params...)
	if err != nil {
		return nil, err
	}
	if reflectQci != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Qci, err = utils.ToIntPtr(reflectQci); err != nil {
			return nil, err
		}
	}

	// Property: tc-id string
	//encoding gNMI attribute to OAPI
	reflectTcId, err := utils.FindModelPluginObject(d.device, "EnterprisesEnterpriseTrafficClassTcId", params...)
	if err != nil {
		return nil, err
	}
	if reflectTcId != nil {
		attrTcId := reflectTcId.Interface().(string)
		resource.TcId = attrTcId
	}

	return resource, nil
}

// toTarget converts gNMI to OAPI.
func (d *ModelPluginDevice) toTarget(params ...string) (*types.Target, error) {
	resource := new(types.Target)

	return resource, nil
}

//Ignoring RequestBodyConnectivityServices

//Ignoring RequestBodyConnectivityServicesConnectivityService

//Ignoring RequestBodyEnterprises

//Ignoring RequestBodyEnterprisesEnterprise

//Ignoring RequestBodyEnterprisesEnterpriseApplication

//Ignoring RequestBodyEnterprisesEnterpriseApplicationEndpoint

//Ignoring RequestBodyEnterprisesEnterpriseApplicationEndpointMbr

//Ignoring RequestBodyEnterprisesEnterpriseConnectivityService

//Ignoring RequestBodyEnterprisesEnterpriseSite

//Ignoring RequestBodyEnterprisesEnterpriseSiteDevice

//Ignoring RequestBodyEnterprisesEnterpriseSiteDeviceGroup

//Ignoring RequestBodyEnterprisesEnterpriseSiteDeviceGroupDevice

//Ignoring RequestBodyEnterprisesEnterpriseSiteDeviceGroupMbr

//Ignoring RequestBodyEnterprisesEnterpriseSiteImsiDefinition

//Ignoring RequestBodyEnterprisesEnterpriseSiteIpDomain

//Ignoring RequestBodyEnterprisesEnterpriseSiteMonitoring

//Ignoring RequestBodyEnterprisesEnterpriseSiteMonitoringEdgeDevice

//Ignoring RequestBodyEnterprisesEnterpriseSitePriorityTrafficRule

//Ignoring RequestBodyEnterprisesEnterpriseSitePriorityTrafficRuleGbr

//Ignoring RequestBodyEnterprisesEnterpriseSitePriorityTrafficRuleMbr

//Ignoring RequestBodyEnterprisesEnterpriseSiteSimCard

//Ignoring RequestBodyEnterprisesEnterpriseSiteSmallCell

//Ignoring RequestBodyEnterprisesEnterpriseSiteUpf

//Ignoring RequestBodyEnterprisesEnterpriseSiteVcs

//Ignoring RequestBodyEnterprisesEnterpriseSiteVcsDeviceGroup

//Ignoring RequestBodyEnterprisesEnterpriseSiteVcsFilter

//Ignoring RequestBodyEnterprisesEnterpriseSiteVcsSlice

//Ignoring RequestBodyEnterprisesEnterpriseSiteVcsSliceMbr

//Ignoring RequestBodyEnterprisesEnterpriseTemplate

//Ignoring RequestBodyEnterprisesEnterpriseTemplateSlice

//Ignoring RequestBodyEnterprisesEnterpriseTemplateSliceMbr

//Ignoring RequestBodyEnterprisesEnterpriseTrafficClass

// Not generating param-types
// Not generating request-bodies

// Not generating additional-properties
// Not generating additional-properties
