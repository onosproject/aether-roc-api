// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"fmt"
	"strings"
)

import (
	"github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	modelplugin "github.com/onosproject/config-models/modelplugin/aether-2.0.0/aether_2_0_0"
	"github.com/openconfig/gnmi/proto/gnmi"
	"reflect"
	"regexp"
)

var re *regexp.Regexp = regexp.MustCompile(`[A-Z][^A-Z]*`)

// encodeToGnmiAccessProfile converts OAPI to gNMI.
func encodeToGnmiAccessProfile(
	jsonObj *types.AccessProfile, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { Access-profile {[]AccessProfileAccessProfile  map[] [] false <nil> [] false} false false}

	//Property: { Access-profile {[]AccessProfileAccessProfile  map[] [] false <nil> [] false} false false}
	if jsonObj.AccessProfile != nil {
		for _, item := range *jsonObj.AccessProfile {
			item := item //Pinning
			paramsAccessProfile := make([]string, len(params))
			copy(paramsAccessProfile, params)
			paramsAccessProfile = append(paramsAccessProfile, "unknown_id")
			updatesAccessProfile, err :=
				encodeToGnmiAccessProfileAccessProfile(&item, true,
					fmt.Sprintf("%s/%s/{unknown_key}", parentPath, "access-profile"), paramsAccessProfile...)
			if err != nil {
				return nil, err
			}
			updates = append(updates, updatesAccessProfile...)
		}
	}

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "AccessProfile", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiAccessProfileAccessProfile converts OAPI to gNMI.
func encodeToGnmiAccessProfileAccessProfile(
	jsonObj *types.AccessProfileAccessProfile, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { description {string  map[] [] false <nil> [] false} false false}

	paramsDescription := make([]string, len(params))
	copy(paramsDescription, params)
	stringValDescription := fmt.Sprintf("%v", *jsonObj.Description)
	paramsDescription = append(paramsDescription, stringValDescription)
	mpFieldDescription, err := utils.CreateModelPluginObject(&mp, "AccessProfileAccessProfileDescription", paramsDescription...)
	if err != nil {
		return nil, err
	}
	updateDescription, err := utils.UpdateForElement(mpFieldDescription, fmt.Sprintf("%s%s", parentPath, "/description"), paramsDescription...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateDescription)

	//Property: { display-name {string  map[] [] false <nil> [] false} false false}

	paramsDisplayName := make([]string, len(params))
	copy(paramsDisplayName, params)
	stringValDisplayName := fmt.Sprintf("%v", *jsonObj.DisplayName)
	paramsDisplayName = append(paramsDisplayName, stringValDisplayName)
	mpFieldDisplayName, err := utils.CreateModelPluginObject(&mp, "AccessProfileAccessProfileDisplay-name", paramsDisplayName...)
	if err != nil {
		return nil, err
	}
	updateDisplayName, err := utils.UpdateForElement(mpFieldDisplayName, fmt.Sprintf("%s%s", parentPath, "/display-name"), paramsDisplayName...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateDisplayName)

	//Property: { filter {string  map[] [] false <nil> [] false} false false}

	paramsFilter := make([]string, len(params))
	copy(paramsFilter, params)
	stringValFilter := fmt.Sprintf("%v", *jsonObj.Filter)
	paramsFilter = append(paramsFilter, stringValFilter)
	mpFieldFilter, err := utils.CreateModelPluginObject(&mp, "AccessProfileAccessProfileFilter", paramsFilter...)
	if err != nil {
		return nil, err
	}
	updateFilter, err := utils.UpdateForElement(mpFieldFilter, fmt.Sprintf("%s%s", parentPath, "/filter"), paramsFilter...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateFilter)

	//Property: { id {string  map[] [] false <nil> [] false} false false}

	paramsId := make([]string, len(params))
	copy(paramsId, params)
	stringValId := fmt.Sprintf("%v", *jsonObj.Id)
	paramsId = append(paramsId, stringValId)
	mpFieldId, err := utils.CreateModelPluginObject(&mp, "AccessProfileAccessProfileId", paramsId...)
	if err != nil {
		return nil, err
	}
	updateId, err := utils.UpdateForElement(mpFieldId, fmt.Sprintf("%s%s", parentPath, "/id"), paramsId...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateId)

	//Property: { type {string  map[] [] false <nil> [] false} false false}

	paramsType := make([]string, len(params))
	copy(paramsType, params)
	stringValType := fmt.Sprintf("%v", *jsonObj.Type)
	paramsType = append(paramsType, stringValType)
	mpFieldType, err := utils.CreateModelPluginObject(&mp, "AccessProfileAccessProfileType", paramsType...)
	if err != nil {
		return nil, err
	}
	updateType, err := utils.UpdateForElement(mpFieldType, fmt.Sprintf("%s%s", parentPath, "/type"), paramsType...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateType)

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "AccessProfileAccessProfile", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiApnProfile converts OAPI to gNMI.
func encodeToGnmiApnProfile(
	jsonObj *types.ApnProfile, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { Apn-profile {[]ApnProfileApnProfile  map[] [] false <nil> [] false} false false}

	//Property: { Apn-profile {[]ApnProfileApnProfile  map[] [] false <nil> [] false} false false}
	if jsonObj.ApnProfile != nil {
		for _, item := range *jsonObj.ApnProfile {
			item := item //Pinning
			paramsApnProfile := make([]string, len(params))
			copy(paramsApnProfile, params)
			paramsApnProfile = append(paramsApnProfile, "unknown_id")
			updatesApnProfile, err :=
				encodeToGnmiApnProfileApnProfile(&item, true,
					fmt.Sprintf("%s/%s/{unknown_key}", parentPath, "apn-profile"), paramsApnProfile...)
			if err != nil {
				return nil, err
			}
			updates = append(updates, updatesApnProfile...)
		}
	}

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "ApnProfile", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiApnProfileApnProfile converts OAPI to gNMI.
func encodeToGnmiApnProfileApnProfile(
	jsonObj *types.ApnProfileApnProfile, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { apn-name {string  map[] [] false <nil> [] false} false false}

	paramsApnName := make([]string, len(params))
	copy(paramsApnName, params)
	stringValApnName := fmt.Sprintf("%v", *jsonObj.ApnName)
	paramsApnName = append(paramsApnName, stringValApnName)
	mpFieldApnName, err := utils.CreateModelPluginObject(&mp, "ApnProfileApnProfileApn-name", paramsApnName...)
	if err != nil {
		return nil, err
	}
	updateApnName, err := utils.UpdateForElement(mpFieldApnName, fmt.Sprintf("%s%s", parentPath, "/apn-name"), paramsApnName...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateApnName)

	//Property: { description {string  map[] [] false <nil> [] false} false false}

	paramsDescription := make([]string, len(params))
	copy(paramsDescription, params)
	stringValDescription := fmt.Sprintf("%v", *jsonObj.Description)
	paramsDescription = append(paramsDescription, stringValDescription)
	mpFieldDescription, err := utils.CreateModelPluginObject(&mp, "ApnProfileApnProfileDescription", paramsDescription...)
	if err != nil {
		return nil, err
	}
	updateDescription, err := utils.UpdateForElement(mpFieldDescription, fmt.Sprintf("%s%s", parentPath, "/description"), paramsDescription...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateDescription)

	//Property: { display-name {string  map[] [] false <nil> [] false} false false}

	paramsDisplayName := make([]string, len(params))
	copy(paramsDisplayName, params)
	stringValDisplayName := fmt.Sprintf("%v", *jsonObj.DisplayName)
	paramsDisplayName = append(paramsDisplayName, stringValDisplayName)
	mpFieldDisplayName, err := utils.CreateModelPluginObject(&mp, "ApnProfileApnProfileDisplay-name", paramsDisplayName...)
	if err != nil {
		return nil, err
	}
	updateDisplayName, err := utils.UpdateForElement(mpFieldDisplayName, fmt.Sprintf("%s%s", parentPath, "/display-name"), paramsDisplayName...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateDisplayName)

	//Property: { dns-primary {string  map[] [] false <nil> [] false} false false}

	paramsDnsPrimary := make([]string, len(params))
	copy(paramsDnsPrimary, params)
	stringValDnsPrimary := fmt.Sprintf("%v", *jsonObj.DnsPrimary)
	paramsDnsPrimary = append(paramsDnsPrimary, stringValDnsPrimary)
	mpFieldDnsPrimary, err := utils.CreateModelPluginObject(&mp, "ApnProfileApnProfileDns-primary", paramsDnsPrimary...)
	if err != nil {
		return nil, err
	}
	updateDnsPrimary, err := utils.UpdateForElement(mpFieldDnsPrimary, fmt.Sprintf("%s%s", parentPath, "/dns-primary"), paramsDnsPrimary...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateDnsPrimary)

	//Property: { dns-secondary {string  map[] [] false <nil> [] false} false false}

	paramsDnsSecondary := make([]string, len(params))
	copy(paramsDnsSecondary, params)
	stringValDnsSecondary := fmt.Sprintf("%v", *jsonObj.DnsSecondary)
	paramsDnsSecondary = append(paramsDnsSecondary, stringValDnsSecondary)
	mpFieldDnsSecondary, err := utils.CreateModelPluginObject(&mp, "ApnProfileApnProfileDns-secondary", paramsDnsSecondary...)
	if err != nil {
		return nil, err
	}
	updateDnsSecondary, err := utils.UpdateForElement(mpFieldDnsSecondary, fmt.Sprintf("%s%s", parentPath, "/dns-secondary"), paramsDnsSecondary...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateDnsSecondary)

	//Property: { gx-enabled {bool  map[] [] false <nil> [] false} false false}

	paramsGxEnabled := make([]string, len(params))
	copy(paramsGxEnabled, params)
	stringValGxEnabled := fmt.Sprintf("%v", *jsonObj.GxEnabled)
	paramsGxEnabled = append(paramsGxEnabled, stringValGxEnabled)
	mpFieldGxEnabled, err := utils.CreateModelPluginObject(&mp, "ApnProfileApnProfileGx-enabled", paramsGxEnabled...)
	if err != nil {
		return nil, err
	}
	updateGxEnabled, err := utils.UpdateForElement(mpFieldGxEnabled, fmt.Sprintf("%s%s", parentPath, "/gx-enabled"), paramsGxEnabled...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateGxEnabled)

	//Property: { id {string  map[] [] false <nil> [] false} false false}

	paramsId := make([]string, len(params))
	copy(paramsId, params)
	stringValId := fmt.Sprintf("%v", *jsonObj.Id)
	paramsId = append(paramsId, stringValId)
	mpFieldId, err := utils.CreateModelPluginObject(&mp, "ApnProfileApnProfileId", paramsId...)
	if err != nil {
		return nil, err
	}
	updateId, err := utils.UpdateForElement(mpFieldId, fmt.Sprintf("%s%s", parentPath, "/id"), paramsId...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateId)

	//Property: { mtu {int32  map[] [] false <nil> [] false} false false}

	paramsMtu := make([]string, len(params))
	copy(paramsMtu, params)
	stringValMtu := fmt.Sprintf("%v", *jsonObj.Mtu)
	paramsMtu = append(paramsMtu, stringValMtu)
	mpFieldMtu, err := utils.CreateModelPluginObject(&mp, "ApnProfileApnProfileMtu", paramsMtu...)
	if err != nil {
		return nil, err
	}
	updateMtu, err := utils.UpdateForElement(mpFieldMtu, fmt.Sprintf("%s%s", parentPath, "/mtu"), paramsMtu...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateMtu)

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "ApnProfileApnProfile", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiConnectivityService converts OAPI to gNMI.
func encodeToGnmiConnectivityService(
	jsonObj *types.ConnectivityService, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { Connectivity-service {[]ConnectivityServiceConnectivityService  map[] [] false <nil> [] false} false false}

	//Property: { Connectivity-service {[]ConnectivityServiceConnectivityService  map[] [] false <nil> [] false} false false}
	if jsonObj.ConnectivityService != nil {
		for _, item := range *jsonObj.ConnectivityService {
			item := item //Pinning
			paramsConnectivityService := make([]string, len(params))
			copy(paramsConnectivityService, params)
			paramsConnectivityService = append(paramsConnectivityService, "unknown_id")
			updatesConnectivityService, err :=
				encodeToGnmiConnectivityServiceConnectivityService(&item, true,
					fmt.Sprintf("%s/%s/{unknown_key}", parentPath, "connectivity-service"), paramsConnectivityService...)
			if err != nil {
				return nil, err
			}
			updates = append(updates, updatesConnectivityService...)
		}
	}

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "ConnectivityService", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiConnectivityServiceConnectivityService converts OAPI to gNMI.
func encodeToGnmiConnectivityServiceConnectivityService(
	jsonObj *types.ConnectivityServiceConnectivityService, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { description {string  map[] [] false <nil> [] false} false false}

	paramsDescription := make([]string, len(params))
	copy(paramsDescription, params)
	stringValDescription := fmt.Sprintf("%v", *jsonObj.Description)
	paramsDescription = append(paramsDescription, stringValDescription)
	mpFieldDescription, err := utils.CreateModelPluginObject(&mp, "ConnectivityServiceConnectivityServiceDescription", paramsDescription...)
	if err != nil {
		return nil, err
	}
	updateDescription, err := utils.UpdateForElement(mpFieldDescription, fmt.Sprintf("%s%s", parentPath, "/description"), paramsDescription...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateDescription)

	//Property: { display-name {string  map[] [] false <nil> [] false} false false}

	paramsDisplayName := make([]string, len(params))
	copy(paramsDisplayName, params)
	stringValDisplayName := fmt.Sprintf("%v", *jsonObj.DisplayName)
	paramsDisplayName = append(paramsDisplayName, stringValDisplayName)
	mpFieldDisplayName, err := utils.CreateModelPluginObject(&mp, "ConnectivityServiceConnectivityServiceDisplay-name", paramsDisplayName...)
	if err != nil {
		return nil, err
	}
	updateDisplayName, err := utils.UpdateForElement(mpFieldDisplayName, fmt.Sprintf("%s%s", parentPath, "/display-name"), paramsDisplayName...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateDisplayName)

	//Property: { hss-endpoint {string  map[] [] false <nil> [] false} false false}

	paramsHssEndpoint := make([]string, len(params))
	copy(paramsHssEndpoint, params)
	stringValHssEndpoint := fmt.Sprintf("%v", *jsonObj.HssEndpoint)
	paramsHssEndpoint = append(paramsHssEndpoint, stringValHssEndpoint)
	mpFieldHssEndpoint, err := utils.CreateModelPluginObject(&mp, "ConnectivityServiceConnectivityServiceHss-endpoint", paramsHssEndpoint...)
	if err != nil {
		return nil, err
	}
	updateHssEndpoint, err := utils.UpdateForElement(mpFieldHssEndpoint, fmt.Sprintf("%s%s", parentPath, "/hss-endpoint"), paramsHssEndpoint...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateHssEndpoint)

	//Property: { id {string  map[] [] false <nil> [] false} false false}

	paramsId := make([]string, len(params))
	copy(paramsId, params)
	stringValId := fmt.Sprintf("%v", *jsonObj.Id)
	paramsId = append(paramsId, stringValId)
	mpFieldId, err := utils.CreateModelPluginObject(&mp, "ConnectivityServiceConnectivityServiceId", paramsId...)
	if err != nil {
		return nil, err
	}
	updateId, err := utils.UpdateForElement(mpFieldId, fmt.Sprintf("%s%s", parentPath, "/id"), paramsId...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateId)

	//Property: { spgwc-endpoint {string  map[] [] false <nil> [] false} false false}

	paramsSpgwcEndpoint := make([]string, len(params))
	copy(paramsSpgwcEndpoint, params)
	stringValSpgwcEndpoint := fmt.Sprintf("%v", *jsonObj.SpgwcEndpoint)
	paramsSpgwcEndpoint = append(paramsSpgwcEndpoint, stringValSpgwcEndpoint)
	mpFieldSpgwcEndpoint, err := utils.CreateModelPluginObject(&mp, "ConnectivityServiceConnectivityServiceSpgwc-endpoint", paramsSpgwcEndpoint...)
	if err != nil {
		return nil, err
	}
	updateSpgwcEndpoint, err := utils.UpdateForElement(mpFieldSpgwcEndpoint, fmt.Sprintf("%s%s", parentPath, "/spgwc-endpoint"), paramsSpgwcEndpoint...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateSpgwcEndpoint)

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "ConnectivityServiceConnectivityService", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiEnterprise converts OAPI to gNMI.
func encodeToGnmiEnterprise(
	jsonObj *types.Enterprise, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { Enterprise {[]EnterpriseEnterprise  map[] [] false <nil> [] false} false false}

	//Property: { Enterprise {[]EnterpriseEnterprise  map[] [] false <nil> [] false} false false}
	if jsonObj.Enterprise != nil {
		for _, item := range *jsonObj.Enterprise {
			item := item //Pinning
			paramsEnterprise := make([]string, len(params))
			copy(paramsEnterprise, params)
			paramsEnterprise = append(paramsEnterprise, "unknown_id")
			updatesEnterprise, err :=
				encodeToGnmiEnterpriseEnterprise(&item, true,
					fmt.Sprintf("%s/%s/{unknown_key}", parentPath, "enterprise"), paramsEnterprise...)
			if err != nil {
				return nil, err
			}
			updates = append(updates, updatesEnterprise...)
		}
	}

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "Enterprise", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiEnterpriseEnterprise converts OAPI to gNMI.
func encodeToGnmiEnterpriseEnterprise(
	jsonObj *types.EnterpriseEnterprise, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { Connectivity-service {[]EnterpriseEnterpriseConnectivityService  map[] [] false <nil> [] false} false false}

	//Property: { description {string  map[] [] false <nil> [] false} false false}

	paramsDescription := make([]string, len(params))
	copy(paramsDescription, params)
	stringValDescription := fmt.Sprintf("%v", *jsonObj.Description)
	paramsDescription = append(paramsDescription, stringValDescription)
	mpFieldDescription, err := utils.CreateModelPluginObject(&mp, "EnterpriseEnterpriseDescription", paramsDescription...)
	if err != nil {
		return nil, err
	}
	updateDescription, err := utils.UpdateForElement(mpFieldDescription, fmt.Sprintf("%s%s", parentPath, "/description"), paramsDescription...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateDescription)

	//Property: { display-name {string  map[] [] false <nil> [] false} false false}

	paramsDisplayName := make([]string, len(params))
	copy(paramsDisplayName, params)
	stringValDisplayName := fmt.Sprintf("%v", *jsonObj.DisplayName)
	paramsDisplayName = append(paramsDisplayName, stringValDisplayName)
	mpFieldDisplayName, err := utils.CreateModelPluginObject(&mp, "EnterpriseEnterpriseDisplay-name", paramsDisplayName...)
	if err != nil {
		return nil, err
	}
	updateDisplayName, err := utils.UpdateForElement(mpFieldDisplayName, fmt.Sprintf("%s%s", parentPath, "/display-name"), paramsDisplayName...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateDisplayName)

	//Property: { id {string  map[] [] false <nil> [] false} false false}

	paramsId := make([]string, len(params))
	copy(paramsId, params)
	stringValId := fmt.Sprintf("%v", *jsonObj.Id)
	paramsId = append(paramsId, stringValId)
	mpFieldId, err := utils.CreateModelPluginObject(&mp, "EnterpriseEnterpriseId", paramsId...)
	if err != nil {
		return nil, err
	}
	updateId, err := utils.UpdateForElement(mpFieldId, fmt.Sprintf("%s%s", parentPath, "/id"), paramsId...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateId)

	//Property: { Connectivity-service {[]EnterpriseEnterpriseConnectivityService  map[] [] false <nil> [] false} false false}
	if jsonObj.ConnectivityService != nil {
		for _, item := range *jsonObj.ConnectivityService {
			item := item //Pinning
			paramsConnectivityService := make([]string, len(params))
			copy(paramsConnectivityService, params)
			paramsConnectivityService = append(paramsConnectivityService, "unknown_id")
			updatesConnectivityService, err :=
				encodeToGnmiEnterpriseEnterpriseConnectivityService(&item, true,
					fmt.Sprintf("%s/%s/{unknown_key}", parentPath, "connectivity-service"), paramsConnectivityService...)
			if err != nil {
				return nil, err
			}
			updates = append(updates, updatesConnectivityService...)
		}
	}

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "EnterpriseEnterprise", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiEnterpriseEnterpriseConnectivityService converts OAPI to gNMI.
func encodeToGnmiEnterpriseEnterpriseConnectivityService(
	jsonObj *types.EnterpriseEnterpriseConnectivityService, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { connectivity-service {string  map[] [] false <nil> [] false} false false}

	paramsConnectivityService := make([]string, len(params))
	copy(paramsConnectivityService, params)
	stringValConnectivityService := fmt.Sprintf("%v", *jsonObj.ConnectivityService)
	paramsConnectivityService = append(paramsConnectivityService, stringValConnectivityService)
	mpFieldConnectivityService, err := utils.CreateModelPluginObject(&mp, "EnterpriseEnterpriseConnectivityServiceConnectivity-service", paramsConnectivityService...)
	if err != nil {
		return nil, err
	}
	updateConnectivityService, err := utils.UpdateForElement(mpFieldConnectivityService, fmt.Sprintf("%s%s", parentPath, "/connectivity-service"), paramsConnectivityService...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateConnectivityService)

	//Property: { enabled {bool  map[] [] false <nil> [] false} false false}

	paramsEnabled := make([]string, len(params))
	copy(paramsEnabled, params)
	stringValEnabled := fmt.Sprintf("%v", *jsonObj.Enabled)
	paramsEnabled = append(paramsEnabled, stringValEnabled)
	mpFieldEnabled, err := utils.CreateModelPluginObject(&mp, "EnterpriseEnterpriseConnectivityServiceEnabled", paramsEnabled...)
	if err != nil {
		return nil, err
	}
	updateEnabled, err := utils.UpdateForElement(mpFieldEnabled, fmt.Sprintf("%s%s", parentPath, "/enabled"), paramsEnabled...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateEnabled)

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "EnterpriseEnterpriseConnectivityService", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiQosProfile converts OAPI to gNMI.
func encodeToGnmiQosProfile(
	jsonObj *types.QosProfile, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { Qos-profile {[]QosProfileQosProfile  map[] [] false <nil> [] false} false false}

	//Property: { Qos-profile {[]QosProfileQosProfile  map[] [] false <nil> [] false} false false}
	if jsonObj.QosProfile != nil {
		for _, item := range *jsonObj.QosProfile {
			item := item //Pinning
			paramsQosProfile := make([]string, len(params))
			copy(paramsQosProfile, params)
			paramsQosProfile = append(paramsQosProfile, "unknown_id")
			updatesQosProfile, err :=
				encodeToGnmiQosProfileQosProfile(&item, true,
					fmt.Sprintf("%s/%s/{unknown_key}", parentPath, "qos-profile"), paramsQosProfile...)
			if err != nil {
				return nil, err
			}
			updates = append(updates, updatesQosProfile...)
		}
	}

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "QosProfile", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiQosProfileQosProfile converts OAPI to gNMI.
func encodeToGnmiQosProfileQosProfile(
	jsonObj *types.QosProfileQosProfile, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { Apn-ambr {QosProfileQosProfileApnAmbr  map[] [] false <nil> [] false} false false}

	submatchallApnAmbr := re.FindAllString("Apn-ambr", -1)
	updateApnAmbr, err := encodeToGnmiQosProfileQosProfileApnAmbr(
		jsonObj.ApnAmbr, false,
		fmt.Sprintf("%s/%s", parentPath, strings.ToLower(strings.Join(submatchallApnAmbr, "/"))), params...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateApnAmbr...)

	//Property: { description {string  map[] [] false <nil> [] false} false false}

	paramsDescription := make([]string, len(params))
	copy(paramsDescription, params)
	stringValDescription := fmt.Sprintf("%v", *jsonObj.Description)
	paramsDescription = append(paramsDescription, stringValDescription)
	mpFieldDescription, err := utils.CreateModelPluginObject(&mp, "QosProfileQosProfileDescription", paramsDescription...)
	if err != nil {
		return nil, err
	}
	updateDescription, err := utils.UpdateForElement(mpFieldDescription, fmt.Sprintf("%s%s", parentPath, "/description"), paramsDescription...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateDescription)

	//Property: { display-name {string  map[] [] false <nil> [] false} false false}

	paramsDisplayName := make([]string, len(params))
	copy(paramsDisplayName, params)
	stringValDisplayName := fmt.Sprintf("%v", *jsonObj.DisplayName)
	paramsDisplayName = append(paramsDisplayName, stringValDisplayName)
	mpFieldDisplayName, err := utils.CreateModelPluginObject(&mp, "QosProfileQosProfileDisplay-name", paramsDisplayName...)
	if err != nil {
		return nil, err
	}
	updateDisplayName, err := utils.UpdateForElement(mpFieldDisplayName, fmt.Sprintf("%s%s", parentPath, "/display-name"), paramsDisplayName...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateDisplayName)

	//Property: { id {string  map[] [] false <nil> [] false} false false}

	paramsId := make([]string, len(params))
	copy(paramsId, params)
	stringValId := fmt.Sprintf("%v", *jsonObj.Id)
	paramsId = append(paramsId, stringValId)
	mpFieldId, err := utils.CreateModelPluginObject(&mp, "QosProfileQosProfileId", paramsId...)
	if err != nil {
		return nil, err
	}
	updateId, err := utils.UpdateForElement(mpFieldId, fmt.Sprintf("%s%s", parentPath, "/id"), paramsId...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateId)

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "QosProfileQosProfile", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiQosProfileQosProfileApnAmbr converts OAPI to gNMI.
func encodeToGnmiQosProfileQosProfileApnAmbr(
	jsonObj *types.QosProfileQosProfileApnAmbr, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { downlink {int32  map[] [] false <nil> [] false} false false}

	paramsDownlink := make([]string, len(params))
	copy(paramsDownlink, params)
	stringValDownlink := fmt.Sprintf("%v", *jsonObj.Downlink)
	paramsDownlink = append(paramsDownlink, stringValDownlink)
	mpFieldDownlink, err := utils.CreateModelPluginObject(&mp, "QosProfileQosProfileApnAmbrDownlink", paramsDownlink...)
	if err != nil {
		return nil, err
	}
	updateDownlink, err := utils.UpdateForElement(mpFieldDownlink, fmt.Sprintf("%s%s", parentPath, "/downlink"), paramsDownlink...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateDownlink)

	//Property: { uplink {int32  map[] [] false <nil> [] false} false false}

	paramsUplink := make([]string, len(params))
	copy(paramsUplink, params)
	stringValUplink := fmt.Sprintf("%v", *jsonObj.Uplink)
	paramsUplink = append(paramsUplink, stringValUplink)
	mpFieldUplink, err := utils.CreateModelPluginObject(&mp, "QosProfileQosProfileApnAmbrUplink", paramsUplink...)
	if err != nil {
		return nil, err
	}
	updateUplink, err := utils.UpdateForElement(mpFieldUplink, fmt.Sprintf("%s%s", parentPath, "/uplink"), paramsUplink...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateUplink)

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "QosProfileQosProfileApnAmbr", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiSecurityProfile converts OAPI to gNMI.
func encodeToGnmiSecurityProfile(
	jsonObj *types.SecurityProfile, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { Security-profile {[]SecurityProfileSecurityProfile  map[] [] false <nil> [] false} false false}

	//Property: { Security-profile {[]SecurityProfileSecurityProfile  map[] [] false <nil> [] false} false false}
	if jsonObj.SecurityProfile != nil {
		for _, item := range *jsonObj.SecurityProfile {
			item := item //Pinning
			paramsSecurityProfile := make([]string, len(params))
			copy(paramsSecurityProfile, params)
			paramsSecurityProfile = append(paramsSecurityProfile, "unknown_id")
			updatesSecurityProfile, err :=
				encodeToGnmiSecurityProfileSecurityProfile(&item, true,
					fmt.Sprintf("%s/%s/{unknown_key}", parentPath, "security-profile"), paramsSecurityProfile...)
			if err != nil {
				return nil, err
			}
			updates = append(updates, updatesSecurityProfile...)
		}
	}

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "SecurityProfile", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiSecurityProfileSecurityProfile converts OAPI to gNMI.
func encodeToGnmiSecurityProfileSecurityProfile(
	jsonObj *types.SecurityProfileSecurityProfile, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { description {string  map[] [] false <nil> [] false} false false}

	paramsDescription := make([]string, len(params))
	copy(paramsDescription, params)
	stringValDescription := fmt.Sprintf("%v", *jsonObj.Description)
	paramsDescription = append(paramsDescription, stringValDescription)
	mpFieldDescription, err := utils.CreateModelPluginObject(&mp, "SecurityProfileSecurityProfileDescription", paramsDescription...)
	if err != nil {
		return nil, err
	}
	updateDescription, err := utils.UpdateForElement(mpFieldDescription, fmt.Sprintf("%s%s", parentPath, "/description"), paramsDescription...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateDescription)

	//Property: { display-name {string  map[] [] false <nil> [] false} false false}

	paramsDisplayName := make([]string, len(params))
	copy(paramsDisplayName, params)
	stringValDisplayName := fmt.Sprintf("%v", *jsonObj.DisplayName)
	paramsDisplayName = append(paramsDisplayName, stringValDisplayName)
	mpFieldDisplayName, err := utils.CreateModelPluginObject(&mp, "SecurityProfileSecurityProfileDisplay-name", paramsDisplayName...)
	if err != nil {
		return nil, err
	}
	updateDisplayName, err := utils.UpdateForElement(mpFieldDisplayName, fmt.Sprintf("%s%s", parentPath, "/display-name"), paramsDisplayName...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateDisplayName)

	//Property: { id {string  map[] [] false <nil> [] false} false false}

	paramsId := make([]string, len(params))
	copy(paramsId, params)
	stringValId := fmt.Sprintf("%v", *jsonObj.Id)
	paramsId = append(paramsId, stringValId)
	mpFieldId, err := utils.CreateModelPluginObject(&mp, "SecurityProfileSecurityProfileId", paramsId...)
	if err != nil {
		return nil, err
	}
	updateId, err := utils.UpdateForElement(mpFieldId, fmt.Sprintf("%s%s", parentPath, "/id"), paramsId...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateId)

	//Property: { key {string  map[] [] false <nil> [] false} false false}

	paramsKey := make([]string, len(params))
	copy(paramsKey, params)
	stringValKey := fmt.Sprintf("%v", *jsonObj.Key)
	paramsKey = append(paramsKey, stringValKey)
	mpFieldKey, err := utils.CreateModelPluginObject(&mp, "SecurityProfileSecurityProfileKey", paramsKey...)
	if err != nil {
		return nil, err
	}
	updateKey, err := utils.UpdateForElement(mpFieldKey, fmt.Sprintf("%s%s", parentPath, "/key"), paramsKey...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateKey)

	//Property: { opc {string  map[] [] false <nil> [] false} false false}

	paramsOpc := make([]string, len(params))
	copy(paramsOpc, params)
	stringValOpc := fmt.Sprintf("%v", *jsonObj.Opc)
	paramsOpc = append(paramsOpc, stringValOpc)
	mpFieldOpc, err := utils.CreateModelPluginObject(&mp, "SecurityProfileSecurityProfileOpc", paramsOpc...)
	if err != nil {
		return nil, err
	}
	updateOpc, err := utils.UpdateForElement(mpFieldOpc, fmt.Sprintf("%s%s", parentPath, "/opc"), paramsOpc...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateOpc)

	//Property: { sqn {int32  map[] [] false <nil> [] false} false false}

	paramsSqn := make([]string, len(params))
	copy(paramsSqn, params)
	stringValSqn := fmt.Sprintf("%v", *jsonObj.Sqn)
	paramsSqn = append(paramsSqn, stringValSqn)
	mpFieldSqn, err := utils.CreateModelPluginObject(&mp, "SecurityProfileSecurityProfileSqn", paramsSqn...)
	if err != nil {
		return nil, err
	}
	updateSqn, err := utils.UpdateForElement(mpFieldSqn, fmt.Sprintf("%s%s", parentPath, "/sqn"), paramsSqn...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateSqn)

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "SecurityProfileSecurityProfile", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiSubscriber converts OAPI to gNMI.
func encodeToGnmiSubscriber(
	jsonObj *types.Subscriber, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { Ue {[]SubscriberUe  map[] [] false <nil> [] false} false false}

	//Property: { Ue {[]SubscriberUe  map[] [] false <nil> [] false} false false}
	if jsonObj.Ue != nil {
		for _, item := range *jsonObj.Ue {
			item := item //Pinning
			paramsUe := make([]string, len(params))
			copy(paramsUe, params)
			paramsUe = append(paramsUe, "unknown_id")
			updatesUe, err :=
				encodeToGnmiSubscriberUe(&item, true,
					fmt.Sprintf("%s/%s/{unknown_key}", parentPath, "ue"), paramsUe...)
			if err != nil {
				return nil, err
			}
			updates = append(updates, updatesUe...)
		}
	}

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "Subscriber", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiSubscriberUe converts OAPI to gNMI.
func encodeToGnmiSubscriberUe(
	jsonObj *types.SubscriberUe, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { Imsi {SubscriberUeImsi  map[] [] false <nil> [] false} false false}

	submatchallImsi := re.FindAllString("Imsi", -1)
	updateImsi, err := encodeToGnmiSubscriberUeImsi(
		jsonObj.Imsi, false,
		fmt.Sprintf("%s/%s", parentPath, strings.ToLower(strings.Join(submatchallImsi, "/"))), params...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateImsi...)

	//Property: { Profiles {SubscriberUeProfiles  map[] [] false <nil> [] false} false false}

	submatchallProfiles := re.FindAllString("Profiles", -1)
	updateProfiles, err := encodeToGnmiSubscriberUeProfiles(
		jsonObj.Profiles, false,
		fmt.Sprintf("%s/%s", parentPath, strings.ToLower(strings.Join(submatchallProfiles, "/"))), params...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateProfiles...)

	//Property: { Range {SubscriberUeImsiRange  map[] [] false <nil> [] false} false false}

	submatchallRange := re.FindAllString("Range", -1)
	updateRange, err := encodeToGnmiSubscriberUeImsiRange(
		jsonObj.Range, false,
		fmt.Sprintf("%s/%s", parentPath, strings.ToLower(strings.Join(submatchallRange, "/"))), params...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateRange...)

	//Property: { Serving-plmn {SubscriberUeServingPlmn  map[] [] false <nil> [] false} false false}

	submatchallServingPlmn := re.FindAllString("Serving-plmn", -1)
	updateServingPlmn, err := encodeToGnmiSubscriberUeServingPlmn(
		jsonObj.ServingPlmn, false,
		fmt.Sprintf("%s/%s", parentPath, strings.ToLower(strings.Join(submatchallServingPlmn, "/"))), params...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateServingPlmn...)

	//Property: { Wildcard {SubscriberUeImsiWildcard  map[] [] false <nil> [] false} false false}

	submatchallWildcard := re.FindAllString("Wildcard", -1)
	updateWildcard, err := encodeToGnmiSubscriberUeImsiWildcard(
		jsonObj.Wildcard, false,
		fmt.Sprintf("%s/%s", parentPath, strings.ToLower(strings.Join(submatchallWildcard, "/"))), params...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateWildcard...)

	//Property: { display-name {string  map[] [] false <nil> [] false} false false}

	paramsDisplayName := make([]string, len(params))
	copy(paramsDisplayName, params)
	stringValDisplayName := fmt.Sprintf("%v", *jsonObj.DisplayName)
	paramsDisplayName = append(paramsDisplayName, stringValDisplayName)
	mpFieldDisplayName, err := utils.CreateModelPluginObject(&mp, "SubscriberUeDisplay-name", paramsDisplayName...)
	if err != nil {
		return nil, err
	}
	updateDisplayName, err := utils.UpdateForElement(mpFieldDisplayName, fmt.Sprintf("%s%s", parentPath, "/display-name"), paramsDisplayName...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateDisplayName)

	//Property: { enabled {bool  map[] [] false <nil> [] false} false false}

	paramsEnabled := make([]string, len(params))
	copy(paramsEnabled, params)
	stringValEnabled := fmt.Sprintf("%v", *jsonObj.Enabled)
	paramsEnabled = append(paramsEnabled, stringValEnabled)
	mpFieldEnabled, err := utils.CreateModelPluginObject(&mp, "SubscriberUeEnabled", paramsEnabled...)
	if err != nil {
		return nil, err
	}
	updateEnabled, err := utils.UpdateForElement(mpFieldEnabled, fmt.Sprintf("%s%s", parentPath, "/enabled"), paramsEnabled...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateEnabled)

	//Property: { enterprise {string  map[] [] false <nil> [] false} false false}

	paramsEnterprise := make([]string, len(params))
	copy(paramsEnterprise, params)
	stringValEnterprise := fmt.Sprintf("%v", *jsonObj.Enterprise)
	paramsEnterprise = append(paramsEnterprise, stringValEnterprise)
	mpFieldEnterprise, err := utils.CreateModelPluginObject(&mp, "SubscriberUeEnterprise", paramsEnterprise...)
	if err != nil {
		return nil, err
	}
	updateEnterprise, err := utils.UpdateForElement(mpFieldEnterprise, fmt.Sprintf("%s%s", parentPath, "/enterprise"), paramsEnterprise...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateEnterprise)

	//Property: { id {string  map[] [] false <nil> [] false} false false}

	paramsId := make([]string, len(params))
	copy(paramsId, params)
	stringValId := fmt.Sprintf("%v", *jsonObj.Id)
	paramsId = append(paramsId, stringValId)
	mpFieldId, err := utils.CreateModelPluginObject(&mp, "SubscriberUeId", paramsId...)
	if err != nil {
		return nil, err
	}
	updateId, err := utils.UpdateForElement(mpFieldId, fmt.Sprintf("%s%s", parentPath, "/id"), paramsId...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateId)

	//Property: { priority {int32  map[] [] false <nil> [] false} false false}

	paramsPriority := make([]string, len(params))
	copy(paramsPriority, params)
	stringValPriority := fmt.Sprintf("%v", *jsonObj.Priority)
	paramsPriority = append(paramsPriority, stringValPriority)
	mpFieldPriority, err := utils.CreateModelPluginObject(&mp, "SubscriberUePriority", paramsPriority...)
	if err != nil {
		return nil, err
	}
	updatePriority, err := utils.UpdateForElement(mpFieldPriority, fmt.Sprintf("%s%s", parentPath, "/priority"), paramsPriority...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updatePriority)

	//Property: { requested-apn {string  map[] [] false <nil> [] false} false false}

	paramsRequestedApn := make([]string, len(params))
	copy(paramsRequestedApn, params)
	stringValRequestedApn := fmt.Sprintf("%v", *jsonObj.RequestedApn)
	paramsRequestedApn = append(paramsRequestedApn, stringValRequestedApn)
	mpFieldRequestedApn, err := utils.CreateModelPluginObject(&mp, "SubscriberUeRequested-apn", paramsRequestedApn...)
	if err != nil {
		return nil, err
	}
	updateRequestedApn, err := utils.UpdateForElement(mpFieldRequestedApn, fmt.Sprintf("%s%s", parentPath, "/requested-apn"), paramsRequestedApn...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateRequestedApn)

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "SubscriberUe", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiSubscriberUeImsi converts OAPI to gNMI.
func encodeToGnmiSubscriberUeImsi(
	jsonObj *types.SubscriberUeImsi, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "SubscriberUeImsi", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiSubscriberUeImsiRange converts OAPI to gNMI.
func encodeToGnmiSubscriberUeImsiRange(
	jsonObj *types.SubscriberUeImsiRange, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { imsi-range-from {int64  map[] [] false <nil> [] false} false false}

	paramsImsiRangeFrom := make([]string, len(params))
	copy(paramsImsiRangeFrom, params)
	stringValImsiRangeFrom := fmt.Sprintf("%v", *jsonObj.ImsiRangeFrom)
	paramsImsiRangeFrom = append(paramsImsiRangeFrom, stringValImsiRangeFrom)
	mpFieldImsiRangeFrom, err := utils.CreateModelPluginObject(&mp, "SubscriberUeImsiRangeImsi-range-from", paramsImsiRangeFrom...)
	if err != nil {
		return nil, err
	}
	updateImsiRangeFrom, err := utils.UpdateForElement(mpFieldImsiRangeFrom, fmt.Sprintf("%s%s", parentPath, "/imsi-range-from"), paramsImsiRangeFrom...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateImsiRangeFrom)

	//Property: { imsi-range-to {int64  map[] [] false <nil> [] false} false false}

	paramsImsiRangeTo := make([]string, len(params))
	copy(paramsImsiRangeTo, params)
	stringValImsiRangeTo := fmt.Sprintf("%v", *jsonObj.ImsiRangeTo)
	paramsImsiRangeTo = append(paramsImsiRangeTo, stringValImsiRangeTo)
	mpFieldImsiRangeTo, err := utils.CreateModelPluginObject(&mp, "SubscriberUeImsiRangeImsi-range-to", paramsImsiRangeTo...)
	if err != nil {
		return nil, err
	}
	updateImsiRangeTo, err := utils.UpdateForElement(mpFieldImsiRangeTo, fmt.Sprintf("%s%s", parentPath, "/imsi-range-to"), paramsImsiRangeTo...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateImsiRangeTo)

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "SubscriberUeImsiRange", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiSubscriberUeImsiWildcard converts OAPI to gNMI.
func encodeToGnmiSubscriberUeImsiWildcard(
	jsonObj *types.SubscriberUeImsiWildcard, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { imsi-wildcard {string  map[] [] false <nil> [] false} false false}

	paramsImsiWildcard := make([]string, len(params))
	copy(paramsImsiWildcard, params)
	stringValImsiWildcard := fmt.Sprintf("%v", *jsonObj.ImsiWildcard)
	paramsImsiWildcard = append(paramsImsiWildcard, stringValImsiWildcard)
	mpFieldImsiWildcard, err := utils.CreateModelPluginObject(&mp, "SubscriberUeImsiWildcardImsi-wildcard", paramsImsiWildcard...)
	if err != nil {
		return nil, err
	}
	updateImsiWildcard, err := utils.UpdateForElement(mpFieldImsiWildcard, fmt.Sprintf("%s%s", parentPath, "/imsi-wildcard"), paramsImsiWildcard...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateImsiWildcard)

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "SubscriberUeImsiWildcard", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiSubscriberUeProfiles converts OAPI to gNMI.
func encodeToGnmiSubscriberUeProfiles(
	jsonObj *types.SubscriberUeProfiles, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { Access-profile {[]SubscriberUeProfilesAccessProfile  map[] [] false <nil> [] false} false false}

	//Property: { apn-profile {string  map[] [] false <nil> [] false} false false}

	paramsApnProfile := make([]string, len(params))
	copy(paramsApnProfile, params)
	stringValApnProfile := fmt.Sprintf("%v", *jsonObj.ApnProfile)
	paramsApnProfile = append(paramsApnProfile, stringValApnProfile)
	mpFieldApnProfile, err := utils.CreateModelPluginObject(&mp, "SubscriberUeProfilesApn-profile", paramsApnProfile...)
	if err != nil {
		return nil, err
	}
	updateApnProfile, err := utils.UpdateForElement(mpFieldApnProfile, fmt.Sprintf("%s%s", parentPath, "/apn-profile"), paramsApnProfile...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateApnProfile)

	//Property: { qos-profile {string  map[] [] false <nil> [] false} false false}

	paramsQosProfile := make([]string, len(params))
	copy(paramsQosProfile, params)
	stringValQosProfile := fmt.Sprintf("%v", *jsonObj.QosProfile)
	paramsQosProfile = append(paramsQosProfile, stringValQosProfile)
	mpFieldQosProfile, err := utils.CreateModelPluginObject(&mp, "SubscriberUeProfilesQos-profile", paramsQosProfile...)
	if err != nil {
		return nil, err
	}
	updateQosProfile, err := utils.UpdateForElement(mpFieldQosProfile, fmt.Sprintf("%s%s", parentPath, "/qos-profile"), paramsQosProfile...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateQosProfile)

	//Property: { security-profile {string  map[] [] false <nil> [] false} false false}

	paramsSecurityProfile := make([]string, len(params))
	copy(paramsSecurityProfile, params)
	stringValSecurityProfile := fmt.Sprintf("%v", *jsonObj.SecurityProfile)
	paramsSecurityProfile = append(paramsSecurityProfile, stringValSecurityProfile)
	mpFieldSecurityProfile, err := utils.CreateModelPluginObject(&mp, "SubscriberUeProfilesSecurity-profile", paramsSecurityProfile...)
	if err != nil {
		return nil, err
	}
	updateSecurityProfile, err := utils.UpdateForElement(mpFieldSecurityProfile, fmt.Sprintf("%s%s", parentPath, "/security-profile"), paramsSecurityProfile...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateSecurityProfile)

	//Property: { up-profile {string  map[] [] false <nil> [] false} false false}

	paramsUpProfile := make([]string, len(params))
	copy(paramsUpProfile, params)
	stringValUpProfile := fmt.Sprintf("%v", *jsonObj.UpProfile)
	paramsUpProfile = append(paramsUpProfile, stringValUpProfile)
	mpFieldUpProfile, err := utils.CreateModelPluginObject(&mp, "SubscriberUeProfilesUp-profile", paramsUpProfile...)
	if err != nil {
		return nil, err
	}
	updateUpProfile, err := utils.UpdateForElement(mpFieldUpProfile, fmt.Sprintf("%s%s", parentPath, "/up-profile"), paramsUpProfile...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateUpProfile)

	//Property: { Access-profile {[]SubscriberUeProfilesAccessProfile  map[] [] false <nil> [] false} false false}
	if jsonObj.AccessProfile != nil {
		for _, item := range *jsonObj.AccessProfile {
			item := item //Pinning
			paramsAccessProfile := make([]string, len(params))
			copy(paramsAccessProfile, params)
			paramsAccessProfile = append(paramsAccessProfile, "unknown_id")
			updatesAccessProfile, err :=
				encodeToGnmiSubscriberUeProfilesAccessProfile(&item, true,
					fmt.Sprintf("%s/%s/{unknown_key}", parentPath, "access-profile"), paramsAccessProfile...)
			if err != nil {
				return nil, err
			}
			updates = append(updates, updatesAccessProfile...)
		}
	}

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "SubscriberUeProfiles", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiSubscriberUeProfilesAccessProfile converts OAPI to gNMI.
func encodeToGnmiSubscriberUeProfilesAccessProfile(
	jsonObj *types.SubscriberUeProfilesAccessProfile, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { access-profile {string  map[] [] false <nil> [] false} false false}

	paramsAccessProfile := make([]string, len(params))
	copy(paramsAccessProfile, params)
	stringValAccessProfile := fmt.Sprintf("%v", *jsonObj.AccessProfile)
	paramsAccessProfile = append(paramsAccessProfile, stringValAccessProfile)
	mpFieldAccessProfile, err := utils.CreateModelPluginObject(&mp, "SubscriberUeProfilesAccessProfileAccess-profile", paramsAccessProfile...)
	if err != nil {
		return nil, err
	}
	updateAccessProfile, err := utils.UpdateForElement(mpFieldAccessProfile, fmt.Sprintf("%s%s", parentPath, "/access-profile"), paramsAccessProfile...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateAccessProfile)

	//Property: { allowed {bool  map[] [] false <nil> [] false} false false}

	paramsAllowed := make([]string, len(params))
	copy(paramsAllowed, params)
	stringValAllowed := fmt.Sprintf("%v", *jsonObj.Allowed)
	paramsAllowed = append(paramsAllowed, stringValAllowed)
	mpFieldAllowed, err := utils.CreateModelPluginObject(&mp, "SubscriberUeProfilesAccessProfileAllowed", paramsAllowed...)
	if err != nil {
		return nil, err
	}
	updateAllowed, err := utils.UpdateForElement(mpFieldAllowed, fmt.Sprintf("%s%s", parentPath, "/allowed"), paramsAllowed...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateAllowed)

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "SubscriberUeProfilesAccessProfile", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiSubscriberUeServingPlmn converts OAPI to gNMI.
func encodeToGnmiSubscriberUeServingPlmn(
	jsonObj *types.SubscriberUeServingPlmn, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { mcc {int32  map[] [] false <nil> [] false} false false}

	paramsMcc := make([]string, len(params))
	copy(paramsMcc, params)
	stringValMcc := fmt.Sprintf("%v", *jsonObj.Mcc)
	paramsMcc = append(paramsMcc, stringValMcc)
	mpFieldMcc, err := utils.CreateModelPluginObject(&mp, "SubscriberUeServingPlmnMcc", paramsMcc...)
	if err != nil {
		return nil, err
	}
	updateMcc, err := utils.UpdateForElement(mpFieldMcc, fmt.Sprintf("%s%s", parentPath, "/mcc"), paramsMcc...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateMcc)

	//Property: { mnc {int32  map[] [] false <nil> [] false} false false}

	paramsMnc := make([]string, len(params))
	copy(paramsMnc, params)
	stringValMnc := fmt.Sprintf("%v", *jsonObj.Mnc)
	paramsMnc = append(paramsMnc, stringValMnc)
	mpFieldMnc, err := utils.CreateModelPluginObject(&mp, "SubscriberUeServingPlmnMnc", paramsMnc...)
	if err != nil {
		return nil, err
	}
	updateMnc, err := utils.UpdateForElement(mpFieldMnc, fmt.Sprintf("%s%s", parentPath, "/mnc"), paramsMnc...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateMnc)

	//Property: { tac {int32  map[] [] false <nil> [] false} false false}

	paramsTac := make([]string, len(params))
	copy(paramsTac, params)
	stringValTac := fmt.Sprintf("%v", *jsonObj.Tac)
	paramsTac = append(paramsTac, stringValTac)
	mpFieldTac, err := utils.CreateModelPluginObject(&mp, "SubscriberUeServingPlmnTac", paramsTac...)
	if err != nil {
		return nil, err
	}
	updateTac, err := utils.UpdateForElement(mpFieldTac, fmt.Sprintf("%s%s", parentPath, "/tac"), paramsTac...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateTac)

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "SubscriberUeServingPlmn", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiUpProfile converts OAPI to gNMI.
func encodeToGnmiUpProfile(
	jsonObj *types.UpProfile, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { Up-profile {[]UpProfileUpProfile  map[] [] false <nil> [] false} false false}

	//Property: { Up-profile {[]UpProfileUpProfile  map[] [] false <nil> [] false} false false}
	if jsonObj.UpProfile != nil {
		for _, item := range *jsonObj.UpProfile {
			item := item //Pinning
			paramsUpProfile := make([]string, len(params))
			copy(paramsUpProfile, params)
			paramsUpProfile = append(paramsUpProfile, "unknown_id")
			updatesUpProfile, err :=
				encodeToGnmiUpProfileUpProfile(&item, true,
					fmt.Sprintf("%s/%s/{unknown_key}", parentPath, "up-profile"), paramsUpProfile...)
			if err != nil {
				return nil, err
			}
			updates = append(updates, updatesUpProfile...)
		}
	}

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "UpProfile", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

// encodeToGnmiUpProfileUpProfile converts OAPI to gNMI.
func encodeToGnmiUpProfileUpProfile(
	jsonObj *types.UpProfileUpProfile, needKey bool, parentPath string, params ...string) (
	[]*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	mp := modelplugin.Device{}
	fmt.Printf("mp %T\n", mp)

	//Property: { access-control {string  map[] [] false <nil> [] false} false false}

	paramsAccessControl := make([]string, len(params))
	copy(paramsAccessControl, params)
	stringValAccessControl := fmt.Sprintf("%v", *jsonObj.AccessControl)
	paramsAccessControl = append(paramsAccessControl, stringValAccessControl)
	mpFieldAccessControl, err := utils.CreateModelPluginObject(&mp, "UpProfileUpProfileAccess-control", paramsAccessControl...)
	if err != nil {
		return nil, err
	}
	updateAccessControl, err := utils.UpdateForElement(mpFieldAccessControl, fmt.Sprintf("%s%s", parentPath, "/access-control"), paramsAccessControl...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateAccessControl)

	//Property: { description {string  map[] [] false <nil> [] false} false false}

	paramsDescription := make([]string, len(params))
	copy(paramsDescription, params)
	stringValDescription := fmt.Sprintf("%v", *jsonObj.Description)
	paramsDescription = append(paramsDescription, stringValDescription)
	mpFieldDescription, err := utils.CreateModelPluginObject(&mp, "UpProfileUpProfileDescription", paramsDescription...)
	if err != nil {
		return nil, err
	}
	updateDescription, err := utils.UpdateForElement(mpFieldDescription, fmt.Sprintf("%s%s", parentPath, "/description"), paramsDescription...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateDescription)

	//Property: { display-name {string  map[] [] false <nil> [] false} false false}

	paramsDisplayName := make([]string, len(params))
	copy(paramsDisplayName, params)
	stringValDisplayName := fmt.Sprintf("%v", *jsonObj.DisplayName)
	paramsDisplayName = append(paramsDisplayName, stringValDisplayName)
	mpFieldDisplayName, err := utils.CreateModelPluginObject(&mp, "UpProfileUpProfileDisplay-name", paramsDisplayName...)
	if err != nil {
		return nil, err
	}
	updateDisplayName, err := utils.UpdateForElement(mpFieldDisplayName, fmt.Sprintf("%s%s", parentPath, "/display-name"), paramsDisplayName...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateDisplayName)

	//Property: { id {string  map[] [] false <nil> [] false} false false}

	paramsId := make([]string, len(params))
	copy(paramsId, params)
	stringValId := fmt.Sprintf("%v", *jsonObj.Id)
	paramsId = append(paramsId, stringValId)
	mpFieldId, err := utils.CreateModelPluginObject(&mp, "UpProfileUpProfileId", paramsId...)
	if err != nil {
		return nil, err
	}
	updateId, err := utils.UpdateForElement(mpFieldId, fmt.Sprintf("%s%s", parentPath, "/id"), paramsId...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateId)

	//Property: { user-plane {string  map[] [] false <nil> [] false} false false}

	paramsUserPlane := make([]string, len(params))
	copy(paramsUserPlane, params)
	stringValUserPlane := fmt.Sprintf("%v", *jsonObj.UserPlane)
	paramsUserPlane = append(paramsUserPlane, stringValUserPlane)
	mpFieldUserPlane, err := utils.CreateModelPluginObject(&mp, "UpProfileUpProfileUser-plane", paramsUserPlane...)
	if err != nil {
		return nil, err
	}
	updateUserPlane, err := utils.UpdateForElement(mpFieldUserPlane, fmt.Sprintf("%s%s", parentPath, "/user-plane"), paramsUserPlane...)
	if err != nil {
		return nil, err
	}
	updates = append(updates, updateUserPlane)

	if needKey {
		reflectKey, err := utils.FindModelPluginObject(mp, "UpProfileUpProfile", params...)
		if err != nil {
			return nil, err
		}
		reflectType := reflectKey.Type()
		reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
		reflect2.Elem().Set(*reflectKey)
		keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
		if err != nil {
			return nil, err
		}
		for k, v := range keyMap {
			// parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
			for _, u := range updates {
				if err := utils.ReplaceUnknownKey(u, k, v, "unknown_key", "unknown_id"); err != nil {
					return nil, err
				}
			}
		}
	}
	return updates, nil
}

//Ignoring Target

//Ignoring RequestBodyAccessProfile

//Ignoring RequestBodyAccessProfileAccessProfile

//Ignoring RequestBodyApnProfile

//Ignoring RequestBodyApnProfileApnProfile

//Ignoring RequestBodyConnectivityService

//Ignoring RequestBodyConnectivityServiceConnectivityService

//Ignoring RequestBodyEnterprise

//Ignoring RequestBodyEnterpriseEnterprise

//Ignoring RequestBodyEnterpriseEnterpriseConnectivityService

//Ignoring RequestBodyQosProfile

//Ignoring RequestBodyQosProfileQosProfile

//Ignoring RequestBodyQosProfileQosProfileApnAmbr

//Ignoring RequestBodySecurityProfile

//Ignoring RequestBodySecurityProfileSecurityProfile

//Ignoring RequestBodySubscriber

//Ignoring RequestBodySubscriberUe

//Ignoring RequestBodySubscriberUeImsi

//Ignoring RequestBodySubscriberUeImsiRange

//Ignoring RequestBodySubscriberUeImsiWildcard

//Ignoring RequestBodySubscriberUeProfiles

//Ignoring RequestBodySubscriberUeProfilesAccessProfile

//Ignoring RequestBodySubscriberUeServingPlmn

//Ignoring RequestBodyUpProfile

//Ignoring RequestBodyUpProfileUpProfile

// Not generating param-types
// Not generating request-bodies
