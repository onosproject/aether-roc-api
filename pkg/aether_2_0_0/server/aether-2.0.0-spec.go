// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
