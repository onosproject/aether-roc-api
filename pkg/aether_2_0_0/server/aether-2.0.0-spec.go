// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9DXPbOLIu/FdQmrdqkilRcpw4s8mpU/U6juN1ndjRxvbeOjdORTAJSdiQBAcA7Wgz",
	"+e+38EUCFKhPknZmvbU1sSQQ6Aa6n240mo3vvZAkGUlRylnv9fdeBilMEEdUfuKQThEXf4Uk5SiVf3L0",
	"jQ+zGOL0v0A4g5Qh/t85nwR/Ez+ycIYSKJvNM9R73WOc4nTa+/HjR78XIRZSnHFM0t5r3Tl4EqFbHCKA",
	"U0BSwoKQpBM8fdrr97BolUE+6/V7KUxQ8Uyv36PojxxTFPVec5oj0bn4BjH+hkQYSeI/Fl/MvxyRNEUh",
	"x7eYzwOGqBiRVfiCWRbjEArqhv9igkSbnf+Poknvde+XYTlfQ/UrG/p7/yF5XkmF99t2SfMPuUjvccoR",
	"zShmDc6V3efSEa2/2xjc7n5dOr4cliO3TJMz1Db0fTlOo4zglHdIaDnmThR/Obuh90G1HHdtyltV203G",
	"XJviC8xbp1COsRFFX96iLqbOHmob+oIpJXnWIZV6wO1p7X5i3XF3oLwDAPAPuhnNpwnDQYQmOMVdmATv",
	"mBtSnAURSSDuiNZitM2oPCMp5kT6jV2QaQ23LZ1fjqMpCqLuFK5m6M3oH1FMqDAlnMLJBIcBzeNuyPeP",
	"3AD1X046go760Zvg4uxeudgcCS9wEoSQRp0QXQy2IY1xV8qpRtqCuu59Dc+w29D9Dscc0Q4p1gNuQ2tX",
	"ulWOtiGVCYzjIERx3A2Z5XCb0XmVTTohUIyzNmWXKMli2P4+pxhnY8q6kD9nrPUp1DYgjCFjrZPoDPZD",
	"EamfEV0eRpF0cGE8oiRDlM8vi2CkG0f8kKl28RywDIV4MgcQ6OAi4TNEAZ/BFPAZAhGawDzm4AlJ4zkg",
	"KRgdXh79HSSIz0j0tNfvZWosHUHkNSPCFJBbRCmOECAT2bMbzBRdccxjJ2RZDYiWTWp5LR4iN/9CIe/9",
	"6HvaXqXhDKZTFC0SekkAKWeHJJiDX03k9FdQMtsHMIoEHwngBPyamx5/BTFmfGFe8voRD0FIkgQChjJE",
	"IUeR7EHMUvEQSGAaQU7oHEDOKb7JOQIpTBCzZq0cYrOJu1p8rpy72igwrPajGV0m17WLthDovpwhEPqG",
	"BpxkIEa3KBa/c4hTRBcmO6yJM7ljvNezbLcGBYv9HuYoYU0Gi8tFOOUo2eDJYl0gpXDe6/fyFP+Ro1NF",
	"IKc56ve+BV/RnPVef+rhqPfZXnH/Eq671rVBO3fKYRgGGSUCFlDOgpzGixN+9fG9mO/DoyNQNrUE2NPH",
	"giT3eyGhKDiYBsgK1rrj5DQ2GHMwBaK9NcjC454hnO6qvVuf1CiYeUWo1+8l8Nt7lE75rPf62d7+i34v",
	"wWnxRUmS3b+PGsyyGM4DdZ6zQI76VaKBQKKcyXOhk6tTQCg4en/q0vG3vVoq7GE8ZGAPdJ2+BRNC6+dg",
	"4A7+fL86eAY5R1R09QkG/z4M/u+Xz/qPveDV9XXwZfD5N2vxsB/bypMtJf0e2a6cy7SPXiVOoXLoJZiF",
	"nKMbP1JZPa2LT3XHNy4W1bTaDHdQyoMq9hw7FC9blcrZVQVd3EMk/+xYjXacHvckybKd1tebzQ3MMjU3",
	"/TWNkxAh6QYI/Qr9RmEXDldZqAbskJfqz9vAK7JF8i8FqlpnlgJryX3TcKpH99DF9LmXX9Pkr7vJnzr0",
	"Kkm5UF1uIl+CCqNU3NrD1tAc4xAB025XgCj3siULxXebscELZODVzaSfE90MqGY78uFuKS1mnB825Cgs",
	"7IBtmY19WNsOVHMHmjHa5XbnR9UGwyiiyDf1h+qHApAsUzMAx1jumCGYEcaFovcBTMHpqC+wAgKW36SI",
	"D2w/Vw/j0TttJ5bigT14w4Cgh2/CJYaOrfyLgXbdzqOw2NbuoiE/xEoUsd2r6iZmTU9NPeZV01I6jdOy",
	"lcI6yTSumj2wZfQrXGR5H8Uk72hty/E85CQqxtloYk6/lxHKxV7XY04g40D8LGaXCkRUE4uTPOm9fnlw",
	"8PxAMqw+75V8FF0WTOCUoykqx2McUo92vMN0lyFVr95BKeEkJDrkIOOVwoQdjXrVndlIt/QurgWkzlI/",
	"t5f68mj059XbkbWuxeieRV1p0tOvQsarJr0IhPqtsO5fqHSM4ERJzGAwVP93HhoqY7xoiy0E2E2/TXDe",
	"5exMrSq4wZwqn6iCAeQujXH6dfHJEaKBOlwDmTCr5ZDg7M1HYB4EEeQQiL6FMN1kYnomhCaQK9l4+cKW",
	"rWd/e/Hi5e8vXuz9/vz3vVcHB/t7e3t+USsI8wlanq1Dc3BYoVk91hbFmqhFev378LXWc32RWC88uG5E",
	"VqmDNyIL7maIyqjwBE9zqmaXzUgeR+AGgSxnMxT5dk2/MqCOGJgTBly2v/Uq2DBkr70x6bofxPc4UqYG",
	"3sQm9q/xSRnlip8Zx+ROmLkIMyj/lmwxiRFLAo2liVHjFIzcEBIjmC7ov39vvv6qm7zIilJv6iTqjWRD",
	"3iFaHucvhWDXjWuRrlfSpr/ZzA+L0K0G4G9BkjPee/3pc8FImdGwjB0gWzXIlMloqLKmv9+QwanZ2z6U",
	"IPZi+mFjWYX9HrZTBf2rhjOgmjSyZFa2oBXQLb7c8NyoCEQkTjJhEzmCwvzXJM7558k0L1wj0byROavJ",
	"oyvnz99gs7nMOPVpNrNyvupCawkQLRphtcz6sgNt+rtNg22JnyEVg1sasBCNmo5UmIF9sct4qRmQOUbN",
	"TG9cMQLqiw0nVjxjFI85eUw1EiLaANEG6K16Q9xYSU0WS+W3G/JVPGiYy1XyUzX5wSQ7CMiOQJ5N2KAJ",
	"dmQKVMmH+LgZA3k28cZHirDzZt6S9WrBjk5ThJo9XlZOyFINVkM2rcN65Ad85J0g7JmYs+PT6tQ0tJWT",
	"A/o2nssMh9ozMZwYWC8gsor0S+IGpvFQA31V6ktXdQuhL13ZRkQfGFe03X1D7O4bhIhZRBT+cKN+d4M7",
	"C8usKDd8DQ1XM9u4nk8fuJovc9uVdhVNAEOc43TKAJ9BDiLEEU1wimS2UUZUZPF0VJrm/nUKGbiT5pqp",
	"jErVEUWMxLeIWj1KHu10l0VPfokKF62HypPfKaZc965XBRWmu4LCErNoJLh2UQrotQyKfmbNUKl6YKjB",
	"rQjUrIzTHMtmFQPgBmFWx2AsHd1lAnX4tYXD0SYjuhpf7j2Cex8B+bqY/PJ4sjVj9xc/duTVmtfKNOgu",
	"Pq8MOPvFd0Px97xD2rr0F4l70mSWYSRzwL1+Ml/5W6By73EIcIRSjidY5gXaa/p8317TV69e+ZcQeXL2",
	"LKE3PS56shfSk00g1+8BYET7QDW6QQzMyB2YYBRHDECKQAbDrygCOOVEpjicXZwOwFnOOLhBAH2DIY/n",
	"4NmBLHECQ44oAzFJpwPwjlDxe5LFqA+Ojo7Oz8+Pj48v5P8q3sazA9eMH5RcajZ8Z6dhuMhdQm5wjEBI",
	"8pTTOQhJJEGr9F32glefvz//Yam36MfXfVrffYr4HaFf67rf77sDpOHKDFZnMQueFWni+TW1rKolmyqZ",
	"7RR1kHmT4DRgHPKcuae4x+eHb94fLxzkygcwE6YI3yKgn3Ql6aW9HKqfP88OT88vj88Pz4+O/3x7eqH7",
	"LjNzLDKayIIpwr1/tRyYKPXMwNvz8+Hh6HzV9qEYI/VzmLIgoziBdL44hP4BRCmT51+IAkNi0Wv5eE3v",
	"DIUkjbz9Fz+tGKHswr+hWLXfKgSj8RT5ugyuhOeOZj178Wq/qlXa0gj3J2UJZkzIcp5ivmaehhjDG76Q",
	"OXCe2ZbfC0GFcUxC6dpk5d4JTChJHFB98kTC6p+fngWvPqs/n8l/1N/7n/aCF+bvg097wcHnp9fXg6ff",
	"n//Y/MGhHuzpn08+PQv2P5sPzz/tBfufn9ovrGn+ViG7EnizQvqhTZ1/t9LDMi/FOsZZcFCiKQrCOGcc",
	"0XXf2xHPAP2M/wWeZb36ErDcAhA17zyIUUtOmjzFrSsIsc67EUt72DAbr3zSBGzkVyXT666QNU3161Pf",
	"7bLXBteUyK1luVoN5EElFjyQfEVXTmpSFv36snPuojv2She2ItIbikVtkZX2/dDlLxqp4ICb2mzlTi++",
	"HLQ8MGC/Ia6TbbdxMr1n5R2k1SyNwq01Bwvxtwef4W24Ni3E+H55qH3BdA1hMM8O7TzNH/3edLd47pIC",
	"PDvHipeUxembdIilHvGCFMvgUtPusabkJ0rVdaWrUC5LvMpkk91R1hSDcpk/ySGFKUcoajah9+QnTOg9",
	"ecgJvSsWthEJecz3/mnzvVes6obiYVcw29lfV2lvf7miCWHotXtHR26CXMF9I1kkclCfPOOE4fpjgHaI",
	"EUPWpbSszhxUtDSfPZiss40pkx430wuTgNj6dkUH84IbNIO3mHhw+a0u32RaADwBKQETWQtOJdWCBPJw",
	"5s7w/p49p2+Pz/83OHz//s/D9+8//B/rr9HVm/enR47vXyGoiSA6ixvOd1uSXV/mIzr59QNwIv8FdziO",
	"gSyFlUHKcYgzhe/XKZ8hlVsqplh8UHkA6vwMCDZUpPOS5qix7NNWkvbtRx9Q7v6kKJhYt2R2BRATVL4D",
	"MI2GhIIIpfMB+CglHlIE0DcU5lweZ16nxeaD0AjRAbiciYWjjEsVEX1JJVHL7yb9TCBH16muNyRPSPmg",
	"ufU1RRvLadLfbFx/pNhEfN59s2fVaez3mAfElSJEeDJBFKUcQ07oAJwmSc6FUgyWHnM/e/n777/vP6s5",
	"Y2B+01bkUS83KHELeazF0L5kdMZrZmd4oV67AuKZytwUU7F/YM+CpSyM8RqPdVK/d80ZoiCLoZRcyAFO",
	"shglYtXV7NyGE7uenJ0yvWQfm2eToU6WXkxxWjAHcvmsGROMbGVgV+aWLn+Jyg5eFQmllUSyCnquk0um",
	"nhmqxLhdEsoWaNowrUzD91YzW5amrURHBZ5u8BIjSue+YhBFxFR2t8hQv+MwbG0k1lgFzwawsBd15S60",
	"/ta5xUXXK9OuHOjeajm9G/YRoromjtm6v8EcfNx8766g/t636ubH4CanjAcM/9vVupf7B7LjOgbeGuLl",
	"80A+v8xIvdh/9eLVy9/3Xx0sJ9amZ9MQQzm19xRRMORtO6lXWZNTukjL1jGQUjE21SjnDa0HUZGofCFs",
	"vRpDD+aMZWPL6OW01i72K++g1RyYOp3u5gc6w/mOGKAnj/ByniFwqNJfxK73SCUS2nPs0PWimmR4GLy7",
	"vnYpEQOtDG5UqYXhxvZF1zN/EGpwNXq3nvyrChIr6sfqsouy1AROp3Jz545Q7aaJSIca4S8VAc2IrxTQ",
	"iFBVKKvgeK0aQHVbnpX7vjybNL3r08OuUrNSEDUD5r3S9VXNLtD/GFJsLqRYVIP8q+nc9tEd9xaE9WM7",
	"LcRz1guc7BQs4dl6AaNCUJrGEJ6tAyE+Dci2xJDazaD22P/x4QJcmBcSH3eGjzvD/6CdoaMjG6hWNXGo",
	"4rtS3zFT6e/DNAIfERdISlJgAksD8Axg9b7wDE9niPEBeHZgvorJnfjGWdMa7BPDe7ViU5NZTXz6a3mp",
	"0Y1H0d6+cWa4VkvE0966lCj2ge3x+48AfVMW2R2gpnvRja//P0LPab5A8COxRuDUfquwGEUbrQVBEZ15",
	"jWS40ki2mrGnxl9lI3XN6QWtFe1wOiHmbiYYSrcCJRDHks8J+f9JhlL9Gh9OpwNCp+Xt6R8ylILz4kfw",
	"juRpZMK8Mhe/N+M8Y6+HQ083C6+R/vILeAPDr1MqurlOr9PLGQKHSBaQ/vjhSN4PQUkMDkenQtfhLcSx",
	"jH/cYgg+Hl9cCrkXf0/Pz04H4JSLVuhbhkKOInWokxDGAfomphjG12lIUpYniDJzJYroWh5jCmUSXQ4M",
	"HbJ/8TPLM7FZUVjD5xkOYQxOji/7YPThQvz38PLo733w9vj98eUxIPLaIkxS9lr09JtoORCQRjG6RQCm",
	"QC3GQPwmOhiAI4qEqar8dHXZB6rvATgjkbyVKgXoG2bCHbGbqpEH4C2KUaWf69QUslTHvKqs0A1kKAIk",
	"NRzJS6j0M+CCJMi8nmp4GJ8cXwKxsq+HQ0rCIZRrNLx9Mdgb7A195ROD2xfD8tXN4XgAThAHsDicti7v",
	"GDQywgWH9CYPvzI9lExAMN/ZtwbI0cTE7zLcuFw1kKK7xf7ltWAbD8AwtzgJztHd/xL6dTwAV1kkBnOZ",
	"Okd3QPyuSoopucUMRCTME5RKZYDSXgbq6pUFO4b0ouvyHSFMwY0wKRzJF5YjcIf5TL2vDK/TmNwtdtQH",
	"DGm67uB0iqhSGf0qtyrLLij75RcDwHMhvcrMyy1TKD5/UHRIgb1FdK4JMzfEMCHUYxyN9UktE+oayVIk",
	"ulOLG5WvIFtjprJTVDaAZMckp7CQKLmHOncljyFdUAbnVW0oJxokcC6mSanSeELIWLIDnVI416loBmNG",
	"Km37srFUvDuibi0DEQEpkcxOYhxycINCKPCIz9Bcqm2xvTTzIuhkcmKluppl1NMFqJ5aVStV3WGn21R4",
	"SmA6X/64mq5x6eKNdfs+uJvhcKbySlhx+dsNApAxEmJoJMidYktVChFA7DqFqpwt4zSXspczE2mUS6kS",
	"h7TYFgRGxUop8BcISamwxAQIw5pkMssolLp6ncLySaDe2jfzKcvXEMTkQkiQ1XiqpNW0u5thGX5HFMmF",
	"EVbOmq7rVIgkl29qutMuiRPSYCg0WnFEkoSkAuFRDN7J6gJyWdEtojC26w2EqqXK5AGJeECWYVIG0yA1",
	"jsZKAcoqCtI1MXQYB1Y+r8DKUufxAByCWZ7ANKAIRtLYOtpu9I5xIqagiKVJ2UHfOIA3JOe2NqohLI/T",
	"N4ZyabVusxm5S1WBKSS8WzlVh1LCGFo1I32lNdKm3yB5ZaGQJrkiMicJ0UC2tPli4AbF5M6syf+guXFD",
	"LGCSWVBECLuQCQmuxprpxoaCKUrF4sVzQOgUpvjfMq8KQMBJFogNr1C7FBkZ+AWUyiW+cXRNbAOV60EJ",
	"UXldIMwZJwmiZcmM8gkww4hCGs7mGgftzhTjmF2nlgbdzDUK2PKqYKpQbcIsWyF1XOKnFAVHu21OpNjd",
	"pYiyGc5kf5TEKFDeBwxDxFjh4mU5zYhwBlyCC/znzuQrGTAi77OmUsjiZXcaKnGjCMb43+71ioUrf50C",
	"B64OvT0pUXCARdrDt8ERoUhNJEWTWE4eMtejvDgByqwCcHAir+UrpOEC86ocsLEU+ElO5eMRvsWRqT0y",
	"Fu2ZZFjaJ0mOeh1Llo5FTJIlmBJW1J5eKNxubc80ZdlszqSHSyiIyVT++QQP0ECav3QaIzBFZEphNsMh",
	"KPbtoaw8rnSWyPoiypQwhWPCe1B9CRLZ04Fkcr3ldbwusaj61aOqcMv1JHcps+qsKkh0a3/IXiq+0Izc",
	"yQIuBldKM+TWbQVHXorFKrL8JrAIBwD8BsZJGI6F+75Qe2VQtEitFnb5lKJFhf9U7F9waAkmwFHRWEWN",
	"ZMMEsq9qUkoLLeD5ViAtRQWSKn1GyQ2KooV6NpazIIcAYFypWDNWWFvMmZ5HZb4heB5EeIo5ODs66pcf",
	"zq0Px+eXGm30CC/1Dyy/UaV3qGJPLmZ5UDu2NPzgBEzPSYTeCLE9VNAyUipAwUcYYcIG4BgKb0X9qPRj",
	"BisLqZfuNzDWJ1XjAfi7vsjIOB/lEflAt+VQrKHv6Nq0UMfy4wE4nZjM5zGnORr3K13KHayqWz8AH4RG",
	"3mGG+sKpEK49ZuonrRrlm81jIZnWVQBapkXn1uvPEwoTJCXM8CK1UPn9GttQVE7CkhIGY3UIrF61N139",
	"ysCxXRdhVDxiwNLuuPbd+6V9W+ws716542PLTC8WTlD6cYuo2EKgNAo4CVAaOTivtVn0K90XSZEtEAvd",
	"gic5y6X9h+AjZNkNonQORvipMMmYmYCDbKJlXlgAilhGUrWt4dINory4RqugwXGlAFRprBOKURrFKjZY",
	"NrUcO+nE6qucbfQzRkfnj56ozct1Ora/GBsISfKY40w6heYCYiE6GtzjucrTlH7BVPpEA1DpyEC+2lbU",
	"Yb6AbObYcPlajrwlx2iy/LCowoL7BRzWfue5tWry8QG4ks6IMJlf0byAUWkyZItAeI7jAVDX9ZSQZPxT",
	"1Y3nOU7GAyCvFap7CBwpxTM+KrYIU/vWwj6S1MCvhGU1R6Ym1djaSOltzfh0FLxVP7pbnKKYmRjpdCRx",
	"9+35RVl2U6YhHEvXR22XlfVTpVAVAmOOqkMWWKKuJZGPVBZeuxliAzEAp2mEKZIV0op9iqRJjOu6KEw5",
	"OJYvWHG27OYGGI3uUxTLbahzT0qJb8kN1bulxH1jU54bCSXMZEnSUKqlmEBpQ60XHM0+I8YJlkFH8trC",
	"C3USoxBDDqb2IRolxDYq1qCl9FWfhS08oM9dTYa20dl/YspzGIMjFMfS+74wKHidjut+BE/+eXTxdGwg",
	"TkxnZaW0CFnvcY4HYPzPo4ux0Tbh2/sV146BOPpbGWMh8OS+QKQlSIyptF274nRuVEj2W4jEDeEzNzJQ",
	"uIgVHCurzwoetV0uMEOHNCxZlf2gJCMUUhzPAUWJ8KC0G6EHsbRDJX64rNsz6XIuX73RWwIxoSjSqeLY",
	"cj2lTpRTsXIePJsRlwRnEmTvcvCxMwfaK3C8lfI1oqoeEArGExgz1UbmumMZlRHdy8DHTILs2KR6ewcz",
	"Ey7fO6qOIe88SqWjiSNk8tCUYEwIlXFEhe2YFhwJzcU6Cik8NX2o6cOvsTnx1FuJO2iFGcXWQe0ULcmU",
	"XebZxNfblTDLI/l2ybs8DeUkPRlfjd6Nn6ruy8uazCAZJco3la9NyWUvdh96/U/5rxKTTFSD0NIkKw0V",
	"oDITYlVs1+SgilaYeWyF4y7LQlNPxoejQPxlaBVCpvcPlvvMPBK6uGNbnOclmzark4uLy3EfjC/eiv9q",
	"IO1bGNkXMmmdNY8HYASFfysrbaoVFLaoXDorpigJtoThsoi0agNp9rIC/OXaKVYdKTEhNAXGloZJ/HU0",
	"ztQTlahj640JBqPimMYM5NyqemirAaRIeU/qxTvVkdrQyIf1+WMR8roavavbuFbQu9z0CJso/ALl51Kr",
	"iLfxnwzFZsnVJwf4CqY0cC34aq6j5vfTinE8rtpvYFxehjgeyLMRGbGV1yqmeWL2jqYhSiOBomlU10jf",
	"XigMnr7bcNy3Vk9GEM2tiWalrJl4GF4FtEVxlW9hj+t4GFVFLt40Sn2nAVVNdsT3TNnTGE04QEnG5a5H",
	"wmqEQ3WKNo3JDYxdauQBrmWKb+Yl2rkHiDJse6EOasXSLkZvf5GxditQaPtKvh/GlWXX21GYmsheGbsU",
	"KD8ogpEUBQdlJrQStyIcB2W4coKnL6ZjaTTVp4Pp2I0BFv67pM/y5kuifN67+GKplglJSIU/9xZyWMSb",
	"pJYLcT44kfc0H47O5ccXJzp8X1YRlRhsl/wUVmlkV6kkVNNEbxHVp7uquqPQ0MUal5yIDYc2UFbJWaFD",
	"KI6l2ZerqeL/nssHXFMqObCekcJWNokoxKk5ESgGTnguVko8I+irLf3pMXCWMiyYs3LhipU19kMubGlM",
	"CheuEmK271eQVacpCsxuRqmEkfUi8WBwnZp+VTzT48UoZ6E4E7QIWSU+jHEhA0wAqX7DvzhpYsYlWrDW",
	"A2BVTdJZekJYi1zIG5hGdzjiM+2oVUx7AT5gbDLMZFrPsu2tOczVfWlJjKVuuxdnCpnVWzELwyuNyMTG",
	"8yK90Hquiz2fw708KXRQSs6XzXSN4S8sPpXbtJUJeLLxHyEeD8A/yIUeplx49XuGYirdMOG/6oPYmDAm",
	"50o3iW7KFhGKBbrn0RTxQj+uRu8W2boavXO85gmhd5BGxlUWTodoIrYRMnBiWQySIvDPowsg9AdwnAhC",
	"/g7X9YPK4G/VBxJelWKJSN9jVHoTzs8OVtRDRdFeh1eE+yDPSLSDoJoAzNSZi/CENBhVXr0ZS0tV88bO",
	"ddrr94RgpaoYv87req+++YgmwYfzd8EZElwEzwZ7a6R1De+yQB7+pnyYZzGBERvu7+3vDfdeDq3OPqTx",
	"PLggE34HKQr0gMHts8HeIIvU5WSIJuzD5MLch7vxmM9eDff25Ziqe5xOA5hGwenoY/Du8B+BoCrYeynH",
	"KzPqNHzuD/Yku8Jmqew09c2Pfk+MDzPce917rhtlkM9kOmuR1yMbD79zSKeI//Am+OgXSmKk3l0pEsVO",
	"I/kaifje9kMuzFP9ngoMM+QWg6/mIMosQJYnqlR4T+ej1ZCykIsn5M3bFHCSAZX3UxRU7vV7U1XB2uXi",
	"BPF1WNjf2zMZiEi9cma/cf4vppJw1csZq17dOPKz92OBwZPjS/Dhf4AY250o8UPNLPV7HE5lyRBZJyQr",
	"9pe915/8ZJVNhkoWej8+93sZYZ7ZGhFWP11/5IjxNySa101A2QQjNvxYPvDlqG7FK4vwzFMyWybKRJUZ",
	"ktlydYL0o7+ZFni/HX7H0Y/t9MPzXSsq4/12UY/eL8s52FBv1mCtdVXyX2nejH4N6+4d10q3AUHbq2ff",
	"mT2OvvFhFkOc/pe8uIUh/t85nwR/c6exmn69MBtf0RxIme73sLypAfJZmUctU7jLhG1Oc7Q5TNRJR9PI",
	"USMBrcBJjZItwRgrDrAaP6yEml0xwh7Xa0xLs2k1XcuELqGySXW3h9lYn5FDY9tWsjojO4j4sbtuu8mw",
	"IwTrCamds/4dyVrWPzYS3GP7QqSmRNj6u96kuWu+hvTWk9qSHFuru5NID90rxLR01wz0IE2PkSyv+VE/",
	"bmiC6te1GW101q5BxXREe3sddYpifVdVsbZV3EOnPFYLOuylul6x7UPWTTV7CS/tK/kXe/SGFN4/d6tQ",
	"wKHkr4MILdJjVMhLj6461wBCVeWzcbByZbAd4KrR54bRrLxo47t100YDIHdcVgXqCuwWmVqEP3lMPSEU",
	"WFWLtsW+Oha7xcAvBRltgqFnbjeBx5LIR5xsCydbnR8LGmomqbymp1kEd7SsVSS3NKlDSPehVjcgP0xM",
	"JZwmgF6VDLk/rPfwtsYN7rtiv4fre4J/VbCqUxPgmfJHo/BoFDo0Ckb9urELpibcPdoGH8rtYC3853K+",
	"b7fdErRwVLcNU/54fbEbqDmU2sg6dHxyVyO3zRzdbTXFK7H/5znFe2jY79dIL3U1S7Mz+rZw9LiRCLcN",
	"u7ucQno7lIV9vov/7hBRuVDXOLeKl/Kq6NpAsb5IeiMo9FHdAfbJYRvHOj0BK7BNjv2IZWvQU2iElyD9",
	"axOIVUhh8xB1oVWmXUhSitkYBLkX9HyXN/TsgkvqLcsTfUtP6xBVw0g9cjn3120DYUsY7AjNKrfbtQFt",
	"ddO6FuK59D3CX3vw1yJFGgi89KhrvBoC46o+tYPLCzdCtg/StdDULnbrL4ff9Y+Nwflb1MU+fX0Oa87x",
	"CoxnRfmACoTtAvn+SbgP4NcfOsX/6gpsbg4M1Y9W4T/FKrRJTYlwforM7y3YKgsIOrBYhbLfo+FagN+W",
	"7dj2B5GVpergEHJdfpo+fFzN6b2YplZOHded48c9yqM1am+P0t7hYo0aPQTE3/VE0TuG3KE0sj25F3Rf",
	"FWLaIbh0vxjeEXJvhNOPCP2TIrTW8Dr3vHGMbh+b7wmRm8TfSh3sHfD3NGH4bdlRtzhcZWNBBIt3LGU6",
	"R9ncvASwMTwvZ7crmD6t8t0yXlfn+fHY8+c89vRIb0tIebqomZ1C5gIyNIidpurY8DvOdvReTzNVE6xr",
	"3DQs1LuwOAOqyVZebB1fnQFkyWDb0FiMtJ43W1L2CI8/pUOLl6Rb46xJsLZ1qC2YtoGgW4C2NLQxaC6v",
	"X9gBk8/KTrpFZYv6FY5sYpO4MTjXM9gVPFsUtI3PzlQ9eq0/o9dakdeWoPDM0b5OsdBW/DbAcGhdgjP8",
	"bn3Y0Xstp+w4mt5PJNbP5JLCNZV7g3aI1K7DffeA+uXYnobOwNWZ/fU84RqaH/H3p3SLq6jinymnUfP2",
	"oaKIrVsKV9nuzWq40NecBTEXtASmBDfNYzT8nnG6o+EwtaR1BeuPedy13fCyVm82TPPiRg3RfCursQbr",
	"XRmNkX8OWrYZ/plfz2T4KX60GD+lxTAw4iVI/diUhahTupYMxKgOXDq1DzUQ15V5GE53yt7zLNlJ51l8",
	"a3C4CJbl5RY7pPStx/69WoovJx3k+K2xAo+m49F0dGo6TtpNAFyibA/BglTgrzNzkjRtTs4emjlpKz18",
	"Pd7v15ac3b8tSR5tyaMt6dqWnN2HLTl7eLak4fxyhpMghDQSXyU7BqsucHIEadSxrTAcLKvAkgDRYqsw",
	"VA1TXRmBi4K7ljG/mMb1kL2g6xHMf0owN9peQ1DSIJjbGtQSel9YGNApWJfg0yAkx/L0Wf6zKyLH3R80",
	"S7rrwViStB0Sx/d4bqwGbx2E4/VPhRVFj/D7c8JvvPT41/zcGATHLZ/0XsT3cbCroaY96K2+4ml92hmW",
	"76/611IuF5H7EMS+gmADIGln6uJ9eYNwBinHIc7ULc/XKZ8hc931RN/6D29ipC4OBpgBpq41v6Q52toi",
	"PIAiY5KObkuNLV/DDSzI49v9/8nmpP2KMxoslxWdmVoFzZoxdR0VSvPp/X2YwHosb9E0TnDMEZUV1g2k",
	"7mwT38k+79scKs6WGUL78jdhwGAckzsA02hIKIhQOh+Aj3mMGIAUAfQNhTlHkTSJRX4UoRGi6sr6CaaM",
	"y0Qp0VcCeThTRjUSEJvgFKmL9yFH1ylRllRd4j/Y2mr6Z7pbg6lp6NxUTgzv6xtJTeqjeXw0j83dRlLC",
	"Zt2VJJVb+Joxjpbqt2oX3xUwer8W0cB5i7ZwtyN3OV3dH7J7uVgQ1hGiQDYB5oD9Debg45Yn7HWsdmt4",
	"ujhD987uY2Tv0da0ENlr+WzcUpr7xvKmT78TGMdBiOJ4+L38e9dDF9HREYrjrvG8YGDJUbhoA0QbAKOI",
	"Isa2PIup47EzILeYbRvJy6HWxO/ygUcQ/zlB3MUCP112m8bg3NGrtvDcAYpuAd1W28ZgPM8mw+95NtkR",
	"uK+ySceQnWeTZWEmIWkRyLMJ2yrQ4+GnK3gWQ7eNy7lkbx1AFtQ8IvFPicRGq70EqR+bwl6jLi2h7pXS",
	"9U7hVuLLDjjLUZLFUHTJdyngdqm7aRtdDblL/F8ZyTDtNnZ96xjpAFaLoRuHVV4ytQJMCxoewXQNeviS",
	"+me8qfpnjkQ2j1yXlka1i1yl7jaIVzsEZg3nHcRlvVT7ArGBSqb5x4cLcIE4x+mU7RyVXcJnh6jWTkjW",
	"O7GPKPfzolx7gU5XELsCO1fjdwE+/a5QGEPGht95uIu3pvo6El21Dn023fVumykmE2qaNkO4Jfx0AXEu",
	"i41jnNP9anBzmj8i3DoIFy5BuLAphKsKaQsQV9W1ljGuKvc//l8AAAD//0K3nln3RgEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
