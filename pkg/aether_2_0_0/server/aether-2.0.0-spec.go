// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"strings"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
