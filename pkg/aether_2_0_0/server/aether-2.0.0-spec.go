// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9DW/cuNXuXyHmXmCTYj5sZ7PddbFovY6z16jjuLGNixeJEdASx8NGX0tRcVyv//sL",
	"kvogJVIzGlHSxFVRbMYzFHlInvOc55BH5OPECf0oDFBA48nh4ySCBPqIIsL/opDcIco+OWFAUcA/UvSN",
	"LiIP4uBvwFlBEiP6a0KXs5/Zj7GzQj7kxR4iNDmcxJTg4G7y9PQ0nbgodgiOKA6DyWFaOXjhoq/YQQAH",
	"IAzCeOaEwRLfvZxMJ5iViiBdTaaTAPoof2YynRD0R4IJcieHlCSIVc6+QTH9LXQx4sJ/yL94+HwcBgFy",
	"KP6K6cMsRoS1GJf6BaPIww5k0i3+HTMR5e78X4KWk8PJ/1kU47UQv8YLfe1PvM9rpdB+261o+iar8p4E",
	"FJGI4NjiWMl11rYofe6icbn6TeX4fFS03LFMSlPbyPf5JHCjEAe0R0GLNltJ/PndLRlCat7uxpJ3arZN",
	"2txY4ktMO5eQt9FIos9vUB9DJze1jXyzOxImUY9Spg1uL2v/A6u220LyHgBA32gzmU/9GM9ctMQB7sMl",
	"aNtsKHE0c0Mf4p5kzVtrJuW7MMA05LyxDzGl5raV8/OJe4dmbn8GZ2i6mfyX2J85kLi9SJw31lBGr68h",
	"FS1tIV3/HkLT7DZyv8UeRaRHidMGt5G1L5dQtLaNlBcEh4SRM0rgcomdGUm8HrXX0H7DnvjQ82YO8rx+",
	"BC+aaybndbTsRUDWzsaSXSE/8mD3PDtvp7FkfViS0tbmEqY663gwjjsXUWnsSQiZPsOqPHJdTrCgd0HC",
	"CBH6cJUvhqnrWO8jUc57AHGEHLx8ABCki1shXSEC6AoGgK4QcNESJh4FL8LAewBhAC6Oro7/H/ARXYXu",
	"y8l0Eom20hUsamgRBiD8igjBLgLhktesLqaxqiimnrJkVl6QK4oY+5o/FN7+Gzl08jTVlL0OnBUM7pBb",
	"FfQqBGExOqGPKfghW7n7ARSdnQLouqwfPqAh+CHJavwBeDimlXFJzC0eASf0fQhiFCECKXJ5DWyU8oeA",
	"DwMX0pA8AEgpwbcJRSCAPoqlUSuaaDZw19XnirEzrkLCcj1pR+v02jhplYXWqxUCjq5pQMMIeOgr8tjv",
	"FOIAkcpgO4Z1DrWNs3SU5dIg7+J0ginyY5uLlcUknFLkN3gynxdICHyYTCdJgP9I0KkQkJIETSffZl/Q",
	"Qzw5/Kjt/Qy7kxtZDfTzuqkCGFeS1HmAjjOLSMiwAiXxLCFedRauP5yxSTg6PgZFUUmrNXVU1Htq7HOl",
	"udM3YBkyeMOxduLnk+nEh9/OUHBHV5PDn15NJz4Osj/3p5MIUooIq+ojnP3n5gX7797sl9nN39NPNy//",
	"IolvEkzbB4Jmr+9mSFoFVYVPiJeB5+s7wMorLZUe1zShVFeu3QuDOyB9BZYYea46Hvt7Bz+WRyQTQK5N",
	"1zaOIw8+zMS2SLnx9FcOagxQk5hvr/x+fQpCAo7PTlU5ft4zSiE3owPCYhumxlRaGcJnhiysi10giAoE",
	"32bMV8z8xKM4Yv3nW0vTSWkbpHuwLmAZFU3XQDRSdkr0wCzVtCkcm3ZLVOg1lGoGs4V0FXA9UQSvaJJ5",
	"x6gEn+rWjX6QpEItR0ndv5EYg/R1syGSZBNjNN3QNTON4iSIYbWjd4lterrOP3fkhfkI/Ndj8LRkOrU+",
	"uihq2zOrQmikjNO9J73d8V/baaHYeCokuhRVNtEyJkXqsL7N/IS5nY+PkxNCQvIOxTG84z04F5kIEKR5",
	"C3z5DTgwCEIKbhGbaJfNtB8SJCK/MEAg9tIcByg6+zTNKnLCJKAvUEAPeZmPMaKzFOrjF8vQ88J7HNzN",
	"Ynzr4eDu8DAvuWCfXGkNcPGP8jdTsL7MyxvxHa9zht2X4FewN3li1kWlxQzDxPFuZeXaYmaxqFHMY/5d",
	"s7nMRMqgkpbXFvT9SYsBUaxlb9QVBqlLyg8N+yU/m/tKmYaVXOnGLrOc3GCH5hTx8FOZtUDXJUg3GUfi",
	"B8HOcSx75Tk4wXxJBYJVGFOGiVMAA3B6MWWwCkGc3AaIzuWYJ21GA0oll1qLnbIQlsGzJMYYaujdnCmQ",
	"y7mNFKxZYm5SQotMSMsx4YYUVzy2sYeJQkJnMYWEAlaU+RaPmYXwKQSgPxLosTHnBVHgSk4lSPxbRF7M",
	"uY8oKnoJPiV7e6+cX0G1AArclwz2S3BSmE+ZgG6FLEpakooHo5IrOlJFIzdHREnT7bK4onmNdL7YOLCa",
	"bTWd5Npbdcowply52WAT5kVEf7Gf+JPDn16/fvWad1j8vVf0I68y7wQOKLpDRXvcGqotvsWkTZOiVm2j",
	"JKShE6ZLdnwTgBGB44tJOf6/SEuumWt1ql/JU311fPHn9ZsLaV7z1jWTupYYBV+YypeJUb67oOcyaf18",
	"TQXBpdCY+Xwh/q88tKhQmiqjUZCzDeo0W01q6iAaLydtmgmpzsk7oY/gFlMimHEJSMP7wMPBl+qTF4jM",
	"RNYAiBiJKpoE7377ALIHgQspBKxuZga3EZvYZUh8SIVW//TjRG8Fecs6G0iiTYSaHZWEEo9tLVLaalUg",
	"/RLTRjOynQ5aVr32GrfZvsOm+z8CJ7T7P+B+hQjfg1riu4SIuY1XYeK5jNVESbxCrm6Z4oc4jbLjNbsA",
	"a5Bn4cSH2h0w0w+m7zk8MT8Nb71s+zFFc8H3SpEMi94ZR3BxDPln3teYI6pp10RxyKKdvHe3YeghGGy0",
	"9t4EK9uvvDddHGyluRYkay9Elk69QywW1W/OFrbUdqUtz/EtZEu/aRYUpQtRpZDoJu9LkVNX1yOxBmex",
	"X1lOXbl36fdb9ZE/mi1H7Ui8gasJzNbykqcTLCcb6+cPR0AUsTJ5Ur6xtEeVf9ls2nLpsznzlaxkG8nG",
	"00ksZeCalsZ9wEpYGaAiB1deKE+/a7pY7uvMNltDr11LY4VsL6JlDev2HrxaVOSZk3aG1ythovii4cB6",
	"eYrJdBIruZgGDWFlACsD0sUaS72REjOlLhXfNuxX/mDWuUQkcJYTuLKELQZaLkiiZTy30R2exln0g/3Z",
	"rANJtNQuuEvbRpvSrdJ7T7vGINYasChm24SLxnd3hQ77CGvG5t3JaXl0SnPyk9rij8rosKF43P9xuv/T",
	"kzQevC3tXqrZaYgoLMZ+Buk5PJZRvmaJJiu8SEG+rPEKa9tC5wtW1/km0y7ScU+l40xRJb3JOaZVLtsB",
	"YS+R9A1BQ3D1jqAjF2SHAaSOFAvrzYuAGFGKgzu+50OBiygiPg4QT1qMQrFIfHpRuP3ppwDG4J5TgVhk",
	"nIuKCIpD7ysiUo28jzLaVHlyDUTkpRcKT261S2B4JfO7WKPWKKDSahugrGEKRm+djUnui9Y7WcNAiAcW",
	"xXP5+tfa5a8TXqzkFNW1rfVLW3acTfqHlTWtWnBtvaSk1tyJvF0Imu5UdODQbW5+pD5o2M0OSYgONzcU",
	"GypETR+5Wbv7oZ/irUzQthZb0l/N6/udq2+exM15UbH+lmUEb57YLeV5idfOsAOwiwKKl5jniMsa9OpA",
	"3sf+5Zdf9PqENPnbklJnNVbDn0se/viQpq/AYUSmKbO+RTFYhfeCW8cAEgQi6HzhSZI05Mlb7y5P5+Bd",
	"muOCvkGHeg9g/zU/XQo6FJEYMKo+B29Dwn73Iw9NwfHx8fn5+cnJySX/X4lS7r9WGdrropdpN3QZDo5T",
	"7Z0f3mIPAZ6nSR6AE7ocdUrR2ys5cmP16KoPzNUHiN6H5Iup+oOp2kDgrH0fQ5nMvM9CNPb8hhBQtpKG",
	"CKCcONFDTqGPg1lMIU1iNdfi5Pzot7OTSroFfwDHzJfgrwikT1ZC92I6RD1/vjs6Pb86OT86Pz75883p",
	"ZVp3kXMoiTHm82nFCDRdf3N+vji6OC+luhwY2wj0PQziWUSwD8lDtYn0B+AGMd9wRQRkIua1Fo8bao+R",
	"Ewautv78pzUtFFXUBYlrg+p8A8V2RK2IoMMymigGtv/jLwdl40odDgvMgtjHccy0OQkw3TCpirWh80Mi",
	"yVcz9vx7prbQ80KH86moiI7BkoS+gq0vXnB0/fPj/uyXG/Fxn/8jPh983Jv9mH1+/XFv9vrm5adP85eP",
	"r56aP7hIG3v554uP+7ODm+yPVx/3Zgc3L+VXttP+rQN4of6liUqfvdkWpu1xNXU3rj1dsyWYJXHUQ4rq",
	"WJ60cVgheO4dmjleElNENn27lz0D0mf0r/nW1arLOlXPLjK8P8haLXpiM5fAdJbRJu8Z1tbQMEG7eDJb",
	"3+RfFZ3edIakYTLPj7nauhMHNtTIhtZvPshqTNE2G0tNlrbeWmyna6uirI0HSvptRUfsuYsaFGgP1vJJ",
	"Z6NKl9mm42g1+fhYTdoQiShqqwclcv6LZl/z5+nB/hP7fDR7eyNTTN6uIS3JvMpQEWejpTJep5ZMij3O",
	"NQkrojH7SSv+JpZb5No0sthM6e3ZqJI/ZMEqs8ScHraBeZgyu0Ur+BWHmqT6N+nRTFkJgJcgCMGSn1gH",
	"SOKhGPiQOquS/u/Jk/7m5Px/ZkdnZ38enZ29///Sp4vr385Oj5VtmJJAu7ZKUJt+WSTpKAmYc/A7/xfc",
	"Y88D/IyrCBKKHRyJte1PAV0hkXDFxpf9IbaBhPSAmZoI4K5IgqylZHWd1blLKZ3L/ExH05TJh1xksfI9",
	"gIG7CAlwUfAwBx+4ukOCAPqGnITyxdpPQZSeLghC4iIyB1crNnEkptw+WF3cQsT0q7vVS0jRpyA9b4ev",
	"/9K5vfnNzpUshin9ZusjNkTGZ7utbOkoSYZHhpMh9eFWPtTZpjZHIHsjZjgoshhAfYFm46ntszZrVON/",
	"BUq4eLlEBAUUQxqSOTj1/YQyxJjX7nDs//TXv/71YN+wrhTr3wzMMy/ruYDXQepb3rQu3SumhtFZXIoX",
	"KgB7pjQ2+VAcvJZHQUKSOKaGrculOZ8giREBkQe5WUMKsB95yGfKJ0bnq7OUT9GTkyxr0gySaLlI0yur",
	"2/8VR8mnTxox1pHG3Eh7cK82vcL4CoKcYQFyH6LJSGqWapEe1FHOKGmTdlGRrmHyRerlWo+xRSaq9+uW",
	"OKl0MnJpf4n5ygavfaHgoXJ8hLxPxKurzsJ03XFVQvUMleqOmKpXvPl8IR+wWnrTX/JemoSGnBMsdT0t",
	"YGhvz/DmdFb12iwGxT1vpYtiWm1rocQ+bOmfXQmtiqZ9JfkCkfQsoCw/5zdMwYfmCTrC63efn5P9OLtN",
	"SExnMf6Piqs/HbzeYxprkvBNJh1/HvDndYSkRi656aYpRMUwdZVBlLW/7QBdR1sOT7XZbd7dLinsVmhh",
	"PMy9+zSG3UL/3XyntTbBtU12686feJT1PSvBz5XTaoPx/NrNVCF7fCEfwfE0ndzZCIy15vX5dxEu+921",
	"UBeQr43+KnE5T++2HQ4aZduRA1ya58er6pnbqKSfdYsFtsCba1f11J+QAGcVMq+VZhUf3t2SmQNjS2er",
	"7Ny5KsOdqbLRDFmccMtU37xsZotemzFrE731R70dSG+3YZnKy907cd5m8S75Zidojrvn2yzKaUfZuCQ3",
	"Lb06b0g5USq1ujattK5jIFCT1n71ECFwJNIw2dwfi7x2ecgVuSovRB/N3n76NL/5i3KVzfqs94q00GnO",
	"IPI6LPoP9TSF9u4ivf5qJ2Dj+uLtZnghjgBbcytHek49PysMB3d8y1BtoVzNiEw6MaJQd8blRUjEcbli",
	"SDc93NK0VbQ2Ykqipe3wKG12HRQUeph2IDvBoyEcXEdLeziQHUPSCgDkW+bG3JnR/JHd43rV6/s2357v",
	"YEt+s73vVvvd8lUB63f+88sObIOaLMbaNz80FiBfeLA5wOVTbQPglPsbrACccbcp3WX41/tLcJkdaTFu",
	"PY1bTzuw9aTobgNLLK/jlmg40eVhFvEVDFzwAVEGxWEAsjWKOdgHWJwEs8J3KxTTOdh/nX3lhffsGwWl",
	"DeDJmtcq8+hnI/dWYylvflOGdc+Y/uDe6k+MR54O+U7OPgD0TeCx2oChelaNrv4/HE2KPYPTY6Z/4FQ+",
	"SSBvJX0Vt6IdrDKtay1vC9T61063VCqirPOx1Zt2trRlO661cpnQJv6V9QkHyzC7TBk6XBDkQ+zxmVqG",
	"/wgjFKSHD+Dgbh6Su8l0Ikxq8j5CATjPfwRvwyRws00c/gbcZEVpFB8uFppqqncbvn/znt/0C6uowGzz",
	"HaKQeZP5A/S9v0+mEwbngTj8IpXoKILOCs0O5nsVCe7v7+eQ/8xaX6TPxouz0+OT88sT/oyE3hDRFSLs",
	"2/m3yXTyFZFYSCm+eZpOWJdghCeHk1fzPd5gBOmKz+BCPL34ygsvHsUly08Lx3TDr4s8JOK1kF9MjMPg",
	"1OWhE/tePiX7srg/lqA4CoP02smDvT1N5HVydnJ1Ag729sD7f3IVjhNfvPie/WaQqfUtwenN1Gp3fke0",
	"QV+s3O+tv3yXq77awd9PrsD7f7KxKg0U+0E/SuBY6jCFdzyrecKvL02/vmFQDQn0EUUk5tf56IQtiizS",
	"+7ifbqaTKIw1Y3gRxuZBzC9RNw1LUQSjeCHfun5s0oPS1Oxr3mcmCFLklsbt4v3llVG9nqbNjGRh557p",
	"Jlqp+e5MXDfeSlktX1Qr3EcZ8e3ot/ZbkA5Cpu+N7tbmz7YwCitqs3g03N3wtB0Ua77rFp31xlCZ8Y6N",
	"oXfUNtwW0aGq6/C9kb7b8ARTZUwp+kYXkQdx8Dd+AFaM6K8JXc5+Vge3TF4rY/QFPQCzHTBeyMIDSFcF",
	"3TPfr14QY84rG/suk3bZdmfG+0Y68HEGI61BMKReJF4PROq913bARhZgy5vHTZiyXlwruCE30xgY5D4N",
	"xezK49TCAk7U2Wyn4opqbKbDi+b3zm+gPcXH3shY3S1DrYmXfsDKJMt4i36HhEov2eJRuUH4qRFSKaJb",
	"xyxZ4YxkqIXC9QRcyi1UltRJB2dGndpx0lLSPy1VKV8434SgmOfeDhiXbhmzhsuK+re268Wal0yqhwU0",
	"NScpc3NoKK/cw9gRrNcN8maQr1zx2Br+d9xKrSrx4lF9c2lbz6VOQJdOrNYkjQ7Okkn27+zU20t7MLjN",
	"nWLJ6p6/g+xQurIVasUrvWRowYGXVdu6Ly9fvtuFX69HhG7hcmHOyuVHBy1DIl9Gvi3uZDcp7xIlUK8H",
	"H4AbmCejOWso7iR/5vRh5zGsJ3tlT+Wv51pgPZL+DMV+asCpMmFdgNOw5Kiw4GGhZzv+JOPPSKSGBqFO",
	"R09CHcPYFccG2KV4iqF2SvUkY+yf89Xh4CDeZeFnCdk2PIzIkN09J6Pp8wYXkbV1OubR6NvviBc/hvQ9",
	"1RkYvdHojXbdG2UW3I9Dyl7P2h2npMPN9m5qs8zAqxUCeSjg6LN1GiH0kOmBBi3oMD+wxVxsuETRTcbg",
	"s9/h2DzBcdvQv8v0xjYmrs1Q6trEB2BgdrIe2xhwA2r1feZB7ja10hvzximaNshMBwmajbS9JxbTJmWz",
	"rt4Y05ocOP5rQ2i6xHRwulFcu9cXvWAjtSGduBSDOtKH9SO6eGT/bbE5kI51r5QgTq9qtGtSA7h3cedk",
	"lwbTwH2nYzC66xbS5caklSv91YZTzhXWvhfOLkLtxesKU7aNZYt1V5YWV5Q2hglx/uRO+N83qP8oXzvQ",
	"DfxyKvSYgNA7xnRkZOZLcDTXwG1vcPz6uB2yOvnWmkFtTwjS3ALz+4dGO3xGdrh4LF0O1YbXS5Y3BMU3",
	"QY2R+duEmoGigdK9VQMAScOIoYwmY/jQP6R0KFEFTbSSlS+ksxTglM2xm1inclVcb4GPEeB6dhHGcEm9",
	"yjcGOJCvDsxtvg3O7lw4lRK7nYmt1kzatsRvjMNGsDaB9TDwk/9gjbTmKr4r1NUMvfrU9T6gdxeIbgZG",
	"OwWsbYhwga4jHx4hdggJ18nWCUuXEKUHrp6jxvCUvQbY+3am22fhlyZzgAz85j21nXu/8Rj06x+7TLpv",
	"POjjEtHoEndwiai7DHuDPe6k27GUWK9t1GqEthO+Zd1eQotdhGH9Rs/7/9t5hNEXPFNf0Hfw0T3uD4v2",
	"HSA69mM8c9ESB7g45m0rOD/1Y/ymqGhYWC93q6Km+YG1/E2Ronh2OlBjtN+o+52j/mm53/3Af2m4x3TT",
	"Z5xuqlH0jiD3tGrEQ2BvBUvsg3A0c0Mf4ppTNnEERJGtqOhp9IY/vBP7q6dZbwfdVc3HvMnOaS76uF/6",
	"/efL5RqweMw/tgxpMzsbmv3kamqMa+3gyWA0p+hg32jRNMSVIWMkOc8qylVRQyuWXMQaAZONryvqJSPI",
	"IKRLsnDbwO+HAaYhn9rtof5dUcmwYC/1Zk2U68siN8b8tR3uHPUlCXqC/WLExpD2GYe0JdXuCFPfKYY6",
	"BKjKUNEhqi6Qe4dm6969ZIUkSGqz01KM7Il7t0tvZhaCfT4pxmTQuFc/TU2CYH2nxoj4+4+I9bqxeJT+",
	"aBkg6yx1Z/iTglvm26O6xa3hyZVi1cOiUtNg2whNIxd7VpF3GZD0A6YUss8VSzbbOWtU7XJoBqmCpXVX",
	"FGN/5kDi1h2Z5QNWYivkvcT+MSTuTpDEy7Srg9LCbLybEMFM8JH6ff/UL5t/9pXfkuSlxjUwr8sRpOaE",
	"sPYIMhRdy22vb3xoSskkkBhJ2LMiYRlQGATyLZIu2dg64lmXElwMwawKuLKP7V7tQtylt238yp/cDQ7l",
	"Db2uxge5EXvyxlWz50GdPL5Ixv9py5y84dfDBFoYSVNLtBiML3k9rmYJLGjMlLxxreo50iSvdpUq+9ka",
	"VfI6XpC69AZcf0rBqXMMX3Oo5RHwdGfNzQF/AzEG99jzQBh4DyCChGIHR5AigINPAV0hAaEALwH7AwXw",
	"1kNgiZHnAhyDGFFAQ3BFErQ1yO7aUZmCne3MgZm1k92Ywo3naI7I3TvHrHn9tzX/3J3jPutRuTJp3w8q",
	"D8qCBzlbtB5zt6LK43kSI/oOeMbFBgdcWOX0PZ2CqoOIAbm+Gf2797FL7FFE6ti/hNIx8w/Q88J7AAN3",
	"ERLgouBhDj4kHooBJAigb8hJKHK5x4kIDgmmDyAkLiJzcLVi3obEFJDEQ6wuH1JnJXyWy0DKxwHivmkJ",
	"KfoUhMJRRdD5guh8a6f0lvdxh6IEIdBuxQdCEZpHBqIvY0wweqVeYgKhpsrdu62DgVyFdyoOSJG5JgJ4",
	"Lsg8bKSQyjAw7m4XHeTjN8YFIwL3d/P9+mvvrUYFEkp0GhC8zRF3J0KBzAF071TbnaPKB2/4E1S1vaqo",
	"8gUiQGxdZqen/oYp+LDl8alrut6TB+vxxFTdII+bwKPTGmoTuOODUCX72hGn0M2Zp5VmsgBhRglcLrEz",
	"Y3GBOb0ujyfS4jyM2D6B5iKt7krUxoKYHVq9udCNzW4t5minr/najran41LPiNm9LPVolXjxqP3aRk6i",
	"BnV2jdLqYdmYx9g9LA9LfPX4tFugu93Cjgl5R8o8wm/HMpnxVSujqbhVmm9Cnk5p/4UJbHciEDC4Avtu",
	"2YeeN3OQ59W8pszKAFYGQNclKI639DKsnmPkebvB9vOeD0vuczEaEfhi2ka+/v2/fpPP5uKx+NyW9GbW",
	"NjTLLVTV/BqzbYQZjLhKne0dPxpzURlERur5vKinCiN6ueQy1gidYoJdMTgFUwYhbLKh2/YHSbSsS9lj",
	"0+eCJFrGW6VmXEfLnSBg19FyUOaVRMsmlOs6Wo5c6/vnWkm0XDwm0bIluxLaMCSvYiBRkz3WHiSG4lCs",
	"6R4hoClrEiMz0qVnRZcyQNAKJH60RZAyy+qIGl0LWBiCE3FEag/YFPmRB2nNfrTI8MnKNY4Ur9IHh2ZB",
	"mRz9sqBs2DbkPpmQz5373NhT3MVj9qkFyZDGvVeWkVufebHGjvUNQC/ypju3rQakQhqPkVS0kE6xOa1s",
	"UgkbzlxRZPve/EoyxF68eWH5XUFhi0zkbDQGSESu6Ysu/3gm3sL/1/tLcIkoxcFd3DoZeX3v+4DNTjOR",
	"zaM8gul/EZh2l/GranHPmKrDDgsom+YGOB6MY3O4lKWHiWJNoUc8fMyeHTxgkvvbc9QkN71p6KRMzxg/",
	"NRrjxaPyZ5tIStLg3rmDogLGkMqahQ7BDtQu9mJ/TRhByQhHWtCGFlRMUs8NSsWsEISylnfAEMrG2g9F",
	"KNvP0/8GAAD//yeQkgmvcAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
