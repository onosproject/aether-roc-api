// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
