// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
