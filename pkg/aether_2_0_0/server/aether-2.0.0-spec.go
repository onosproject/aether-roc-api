// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/ff/DQAA///l9kNtjSsBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
