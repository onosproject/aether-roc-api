// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AM88UWhs3Arw9oXB5fKPAAAA///O3bhh1IAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
