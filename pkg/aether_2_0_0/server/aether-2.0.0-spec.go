// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
