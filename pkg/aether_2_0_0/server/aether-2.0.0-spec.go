// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
