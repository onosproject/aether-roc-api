// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
