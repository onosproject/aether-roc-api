// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
