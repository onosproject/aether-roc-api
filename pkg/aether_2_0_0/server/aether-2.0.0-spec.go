// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"strings"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
