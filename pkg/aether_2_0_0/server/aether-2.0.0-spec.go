// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
