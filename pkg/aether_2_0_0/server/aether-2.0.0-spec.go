// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3/9fAAAA//+c++JACFQBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
