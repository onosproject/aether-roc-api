// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
