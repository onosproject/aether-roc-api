// Code generated by GENERATOR. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/server"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_4_0_0/server"
	externalRef2 "github.com/onosproject/aether-roc-api/pkg/app_gtwy/server"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-4.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "./aether-app-gtwy-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
