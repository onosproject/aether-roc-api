// Code generated by GENERATOR. DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_1_0/server"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_3_0_0/server"
	externalRef2 "github.com/onosproject/aether-roc-api/pkg/aether_4_0_0/server"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ufYBmuPYwyLo8r8BAAD//6FnHfkYGQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.1.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-3.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "./aether-4.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
