// Code generated by GENERATOR. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_1_0/server"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_3_0_0/server"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6yXbW/bNhDHvwrBDmiLmZbsAgXqV8vaZAvWJm3j7E0SFAx5splKJEtSzrxA3304UvJj",
	"gmyz3kl8+P3vjndH6YEKU1mjQQdPJw/UizlUPD4el1B1w9YZCy4oiG9cCPCeWWcKVQIbD0fDHMd/clDQ",
	"CR1mHMIcXJpgxoLmVr0ZLnlVvsjWelkrlh1t8WgzoNyyUvnA3gzzx9Fx4t+gEygxdY8mr2GJbUsleFBG",
	"92HzCoZsYbQGEdRChSXz4BZK9ODA+0eoT6od7NJTahIif+ZMbQ9X+bBB26BXRkLZUz592EWiDugAzjrl",
	"eziX4xVrh3yw6dtkZZk0FVc95Otph0KuhnBv3PfDqWcJhMwfpsdm88VsdRoPonaYlb0JXOwQk4rbSPQe",
	"JNx2pnd8a0ollv0JJN6mgqv7idGaFukq9JDhFyokWn3rhVO3nUEHWbpiITlAZUveh63TlhSpjheFEkyU",
	"3Pse0Js45Ne2v+y+tJt5XdvicHsvbYGshejB9z+Fp03TDOhnHsT8VyOX+58vH6CEkB5bmcf7Zff90wzo",
	"8V8BtFdGx10SMCVsvKAn9BPeBSQsLRCuJVmAw4XEFORl4G4G4SUxmhTK+UCEg3ivk6tS6e83r+YhWD/J",
	"MmmEHxptvHXmDkQYGjfL8J0Jows1iwuyma7UN1iZkr2oPTBTsNUQG+Uj1t56rR1MaeYhOPhRgw+v6WAn",
	"GGLO9QyY5hWwUR5jH1QogU72pgYUnaQT6oNTeoZxSfcgDrNRPt7cvDPz5N7OzFE+2t++OblHwMJpV2Ng",
	"yDow67XmFqOJapdW8v946BIKXpeBpVPcP/hpHCevUsAJxuk1CYbUHsjtkrTbiSqINoF4C0IVCiRmg9JS",
	"LWTNS1InuzKZkpJwT7gmXEqFKrwk7XEt8eR4COBQ+ipn7zj7+/qaXV8Pv938/Gh08MyVA0knV7u+3DSD",
	"1vwzXsF+ieh2dBe62uZxX1yqAlTPhnVDq1mZyp3jywRVujAxG40OXMRYQ8VVSSdx6hcs/PbLQukZVgcd",
	"tEbScwuanK0myYmptUxfzwNaO2R0ZfYIphnQUgnQHtZ+049p5CsU7PzshH2CCu8S7JzPE7N7i0UbQIes",
	"tqXh0mfjfJxn+dtsA3auyyW7MEW45w5YK8gWo2E+tLJId42r/HnRXpX/Q3P0LsvHUTPhlZ4xriU7/fyV",
	"nRx9YWgVy99GvXUtHcWGS6bGko+wgJIOaFuGdEJTf24GtO3Eq6GYnPOYB13LdkawuOQB58QcHzDH4tGc",
	"SjpJPXpqbKfTNqmua7cexT/O9S9RdufRlO5X9bnMW98DTZOKwlujfcrdcWp422UdjQUZS8jXVcXdEm09",
	"mr7/nfBAwhxIMJaUaDR2+R13cVuWyixqtK1j2/O2iLZ837erlwBs1WsMwba7vx1PyfkfBCW3PcaJzhFy",
	"RPBnB929q30gaTi2vAht/gkAAP//oA7xAkgQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.1.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-3.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
