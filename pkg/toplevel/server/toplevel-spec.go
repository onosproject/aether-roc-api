// Code generated by GENERATOR. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/server"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_4_0_0/server"
	externalRef2 "github.com/onosproject/aether-roc-api/pkg/app_gtwy/server"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"KukfVBD7VwAAAP//8wU486wrAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-4.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "./aether-app-gtwy-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
