// Code generated by GENERATOR. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/server"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_4_0_0/server"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-4.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
