// Code generated by GENERATOR. DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_1_0/server"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_3_0_0/server"
	externalRef2 "github.com/onosproject/aether-roc-api/pkg/aether_4_0_0/server"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.1.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-3.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "./aether-4.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
