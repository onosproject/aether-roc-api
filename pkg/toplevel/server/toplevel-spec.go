// Code generated by GENERATOR. DO NOT EDIT.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_3_0_0/server"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_4_0_0/server"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-3.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-4.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
