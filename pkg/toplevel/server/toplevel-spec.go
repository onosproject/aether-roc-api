// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/server"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_2_1_0/server"
	externalRef2 "github.com/onosproject/aether-roc-api/pkg/aether_4_0_0/server"
	externalRef3 "github.com/onosproject/aether-roc-api/pkg/app_gtwy/server"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-2.1.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "./aether-4.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef3.PathToRawSpec(path.Join(pathPrefix, "./aether-app-gtwy-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
