// Code generated by GENERATOR. DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_1_0/server"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_3_0_0/server"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXbW/bNhD+KwQ7oC1mWrILFKg/zWvTrVhe2sYZMCRBwVAnm6lEsiTlzAv034cj5RfZ",
	"TtI0+tBvNo987nmO90LdUqFLoxUo7+joljoxg5KHnwcFlMtlY7UB6yWEf1wIcI4Zq3NZABv2B/0U13+x",
	"kNMR7Scc/AxsNDBtQHEjX/UXvCyeJWt/SeMsGbfwaN2j3LBCOs9e9dP90MHwPdARKGKqDimvwSK2KaTg",
	"XmrVBecVGGILrRQIL+fSL5gDO5eiAwFv96De6e3Jku7ylkHAn1pdmad7ebeBhuigPFhjpesgXgcrrC3k",
	"J7NuI0vDMl1y2UEefVhCIe433WHBftKtanUgKos325mD0y3E6MVuJEsHLmw7W5b4RhdSLLpzEPE2Pdiq",
	"mxit0QK69B1k46n0Ea26csLKqyWhJzFdYSGyh9IUvAuukwYpoFqe51IwUXDnOoDehEP8ynSX3WdmM68r",
	"kz+d75nJEWsuOtD+t3C0ruse/ci9mP2us8XuE+AdFODjz8bN/t62fEPUPXrwrwflpFbhVAaYEiYMuRE9",
	"0hkUxC8MEK4yMgeLG4nOyXPP7RT8c6IVyaV1nggLYTaS80Kqr5cvZt4bN0qSTAvX10o7Y/U1CN/Xdprg",
	"fya0yuU0bEimqpRfYEUleVY5YDpnqyU2SAesmUsNDyYVc+AtfKvA+Ze0txUMMeNqCkzxEtggDbH30hdA",
	"RzumHkWRdESdt1JNMS4lame4zAbpcPPwluXOs0uag3Swe3zTuIOAhdPsxsCQdWDWe/UVRhO9nZmMP/LS",
	"M8h5VXgWb3H34idhnbyIAScYp5fEa1I5IFcL0hwnMidKe+IMCJlLyDAbpMrkPKt4QarIK8liUhLuCFeE",
	"Z5lEL7wgzXUt8Oa492DR9XnK3nD238UFu7jof7n8dW908M6lhYyOzre1XNa9hv4xL2G3RFSzug26Oubw",
	"XNgqPZQPhnXDV72iyq3liwgqVa5DNmrluQixhpLLgo6C6TcsfAX+RtuvUk2xOmivIUlPDChyvDKS97pS",
	"WXyB9mhlEWNZZntg6h4tpADlYK2bHsaVz5Czk+P37AhKnCXYOR9GTG4MFq0H5ZPKFJpnLhmmwzRJXycb",
	"YCeqWLBTnfsbboE1Dtl80E/7JsvjrLGlO8mbUfkDPgdvknQYfEZ4qaaMq4x9+PiZvR9/YsiKpa+Dv3Ut",
	"jUPDJRNtyCHMoaA92pQhHdHYn+sebTrxaikk5yzkwbJlWy1Y2HKLNjHDH5hj4Wo+ZHQUe/REm6Wfpkkt",
	"u3ajKHy1rT8rkmuHVJafew9l3noO1HUsCme0cjF3h7Hhtcs6kIUslJCrypLbBXIdT97+SbgnfgbEa0MK",
	"JI1dfksuHkuw2BG56Rtt2acGREv1LqM7pOPYa0vfU6BtNX8cTMjJXwRx24LQEHiSyQzW102QHZGK/DM+",
	"OiS5tiX3fXLKSwitKWr12rCgvz2R19rveVXcG5aYfMNB+hPE5R4NIWRNoQRz6O678ve8Wr5D/qv0Z5K/",
	"R8Om/GDekB8HjLtTZjM+fiz/H1f6rUn16Bg0QsiYFNJ5LPTrynkSl8OwD6D1/wEAAP//gCjcPYYSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.1.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-3.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
