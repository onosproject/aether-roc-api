// Code generated by GENERATOR. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_1_0/server"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_3_0_0/server"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6yXbW/bNhDHvwrBDmiLmZbsAgXqV8vaZAvWJm3j7E0SFAx5splKJEtSzrxA3304UvJj",
	"gmyz3kl8+P3vjndH6YEKU1mjQQdPJw/UizlUPD4el1B1w9YZCy4oiG9cCPCeWWcKVQIbD0fDHMd/clDQ",
	"CR1mHMIcXJpgxoLmVr0ZLnlVvsjWelkrlh1t8WgzoNyyUvnA3gzzx9Fx4t+gEygxdY8mr2GJbUsleFBG",
	"92HzCoZsYbQGEdRChSXz4BZK9ODA+0eoT6od7NJTahIif+ZMbQ9X+bBBQzroAM465XuI1/GKtUM+2Opt",
	"srJMmoqrHvLotEMhV0O4N+774dSzBELmD9NjE/hitjqAB1E7zJbeBC52iEnFbSRgDxJuOwM7vjWlEsv+",
	"BBJvU8HV/cRoTYt0FXrI8AsVEq2+9cKp286ggyxdsZAcoLIl78PWaUuKVMeLQgkmSu59D+hNHPJr2192",
	"X9rNvK5tcbi9l7ZA1kL04PufwtOmaQb0Mw9i/quRy/3Pig9QQkiPrczj/bL7LmkG9PivANoro+MuCZgS",
	"Nl6cE/rJSChJWFogXEuyAIcLiSnIy8DdDMJLYjQplPOBCAfxviVXpdLfb17NQ7B+kmXSCD802njrzB2I",
	"MDRuluE7E0YXahYXZDNdqW+wMiV7UXtgpmCrITbKR6y961o7mNLMQ3DwowYfXtPBTjDEnOsZMM0rYKM8",
	"xj6oUAKd7E0NKDpJJ9QHp/QM41Kh7wyH2Sgfb27emXlyb2fmKB/tb9+c3CNg4bSrMTBkHZj1WnOL0US1",
	"Syv5fzx0CQWvy8DSKe4f/DSOk1cp4ATj9JoEQ2oP5HZJ2u1EFUSbQLwFoQoFErNBaakWsuYlqZNdmUxJ",
	"SbgnXBMupUIVXpL2uJZ4cjwEcCh9lbN3nP19fc2ur4ffbn5+NDp45sqBpJOrXV9umkFr/hmvYL9EdDu6",
	"C11t87gvLlUBqmfDuqHVrEzlzvFlgipdmJiNRgcuYqyh4qqkkzj1CxZ++2Wh9Ayrgw5aI+m5BU3OVpPk",
	"xNRapq/aAa0dMroyewTTDGipBGgPa7/pxzTyFQp2fnbCPkGFdwl2zueJ2b3Fog2gQ1bb0nDps3E+zrP8",
	"bbYBO9flkl2YItxzB6wVZIvRMB9aWaS7xlX+vGivyv+hOXqX5eOomfBKzxjXkp1+/spOjr4wtIrlb6Pe",
	"upaOYsMlU2PJR1hASQe0LUM6oak/NwPaduLVUEzOecyDrmU7I1hc8oBzYo4PmGPxaE4lnaQePTW202mb",
	"VNe1W4/in+D6VyW782hK9wv5XOat74GmSUXhrdE+5e44Nbztso7Ggowl5Ouq4m6Jth5N3/9OeCBhDiQY",
	"S0o0Grv8jru4LUtlFjXa1rHteVtEW77v29VLALbqNYZg293fjqfk/A+Cktse40TnCDki+HuL7t7VPpA0",
	"HFtehDb/BAAA//9Kmh3t4A8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.1.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-3.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
