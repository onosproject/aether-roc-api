// Code generated by GENERATOR. DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_1_0/server"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_3_0_0/server"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6yXbW/bNhDHvwrBDmiLiZbsAgXqV8vadCvWJm3j7E0SFAx5splKJEtSzrxA3304UvJj",
	"gmyL3kl8+P3vjndH6Y4KU1ujQQdPp3fUiwXUPD4eV1D3w9YZCy4oiG9cCPCeWWdKVQGbjMajAsd/clDS",
	"KR3lHMICXJpgxoLmVr0arXhdPcs3enknlh/t8GibUW5ZpXxgr0bF/eg48W/QCZSYekCTN7DEtpUSPCij",
	"h7B5DUO2MFqDCGqpwop5cEslBnDg7T3UB9We7NJDahIif+5MY5+u8m6LhnTQAZx1yg8Qr+M1a4/8ZKt3",
	"ycoyaWquBsijDz0KuT/MgAX7xexUqwfRODzZwQTO9ohJxW0lywASbjdber41lRKr4QQSb1vBNcPEaEOL",
	"dBUGyMYzFRKtufbCqeveoCdZumYhOUBtKz6ErbOOFKmOl6USTFTc+wHQ2zjkN3a47D6323nd2PLp9p7b",
	"EllLMYDvfwpP27bN6GcexOJXI1eHnwDvoIKQHjuZ+3tb/w3RZvT4rwDaK6PjLgmYEjZeclP6yUioSFhZ",
	"IFxLsgSHC4kpyfPA3RzCc2I0KZXzgQgH8W4kF5XS369eLEKwfprn0gg/Mtp468wNiDAybp7jOxNGl2oe",
	"F+RzXatvsDYlf9Z4YKZk6yE2Lsasu5c6O5jSzENw8KMBH17SbC8YYsH1HJjmNbBxEWMfVKiATg+mMopO",
	"0in1wSk9x7jU6DvDYTYuJtub92Ye3NubOS7Gh9u3Jw8IWDjdagwM2QRms9ZcYzRR7dxK/h8PXULJmyqw",
	"dIqHBz+L4+RFCjjBOL0kwZDGA7lekW47USXRJhBvQahSgcRsUFqqpWx4RZpkVy5TUhLuCdeES6lQhVek",
	"O64VnhwPARxKXxTsDWd/X16yy8vRt6uf740OnrlyIOn0Yt+XqzbrzD/hNRyWiO5G96HrbR73xaUqQP1o",
	"WLe02rWp3Dm+SlClSxOz0ejARYw11FxVdBqnfsHC1xBujfuu9Byrg2adkfTUgiYn60ny3jRapi/QjDYO",
	"GX2Z3YNpM1opAdrDxm/6MY18hZKdnrxnn6DGuwQ75+PE/NZi0QbQIW9sZbj0+aSYFHnxOt+Cnepqxc5M",
	"GW65A9YJsuV4VIysLNNd42p/WnZX5f/QHL/Ji0nUTHil54xryT58/sreH31haBUrXke9TS0dxYZLZsaS",
	"j7CEima0K0M6pak/txntOvF6KCbnIuZB37KdESwuucM5scAHzLF4NB8knaYePTO21+maVN+1O4/iX9vm",
	"tyK/8WhK/7v3WOZt7oG2TUXhrdE+5e4kNbzdso7Ggowl5Ju65m6Fth7N3v5OeCBhASQYSyo0Grv8nru4",
	"LU9lFjW61rHreVdEO74f2jVIAHbqNYZg193fjmfk9A+Ckrse40TvCDki+CuK7t40PpA0HFtehLb/BAAA",
	"//8UaY95jA8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.1.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-3.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
