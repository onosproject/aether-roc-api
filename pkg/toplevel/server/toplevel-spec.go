// Code generated by GENERATOR. DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_1_0/server"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_3_0_0/server"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXW28TORT+K0dmJUAbz0xaCYk8bRcKWy1QaNOVVgQh13MmMXhsY3tSsij/fXU8k3vK",
	"rXngLfHl+853fG7zhUlbO2vQxMAGX1iQE6xF+nmqsV4sO28d+qgw/RNSYgjceVspjfwo62cFrf/msWID",
	"luUC4wR9u8GtQyOcOs5motb38hVf3pHlJxt4bN5jwnGtQuTHWbEfOm18D3QL1GKaA5q8AmuxnVZSRGXN",
	"IWxeghG2tMagjGqq4owH9FMlDyDgyR7UW9nuLOk2thIT/tjbxt2d5ekaGqGjieidV+EA/jpdYm0h39nq",
	"TWTleGlroQ4QR2cLKML9ZA+YsG/sRrYGlI2nlz0YweUWYsvi14LlABR+M1oW+M5qJWeHI2jx1hl8cxgf",
	"rdASuooHiMZLFVu05jpIr64XBt3J0iUWIUesnRaHsHXYISVUL6pKSS61COEA0OtwhN+4w0X3lVuP68ZV",
	"d7f3ylWENZUH0P6PDGw+n/fYaxHl5E9bznZHgKeoMbY/O5r9tW0xQ8x77PRzRBOUNelWiRQSLjW5AXtp",
	"S9QQZw5BmBKm6Okg2AruR+HHGO+DNVApHyJIj6k3wlutzMd3DyYxujDI89LKkFljg/P2A8qYWT/O6T+X",
	"1lRqnA7kY1Or97g0Jb/XBOS24ssl3i/6vOtLnR1cGR4wevzUYIgPWW/LGXIizBi5ETXyfpF8H1XUyAY7",
	"Wz1GItmAheiVGZNfatLOaZn3i6P1y1s7t95dmNkv+rvX1zd3EChxutPkGFg5ZnXWXpM3ie3KleIHH73E",
	"SjQ68vYVdx9+mNbhQetwID89hGihCQjXM+iug6rA2AjBoVSVwpKiQZlSTctGaGhau/KyDUoQAYQBUZaK",
	"WISG7rlm9HIiRvRE/bbgjwX/bzTio1H2/t3ve71Db648lmzwdlvLu3mvM/+VqHE3RUy3ug26vBboXjqq",
	"ItbfdOsa13xpqvBezFpQZSqbotGaKGTyNdZCaTZIW39Q4huMN9Z/VGZM2cF6nZHs3KGBV8tNeGYbU7YT",
	"aI81njAWabYHJr3zxqtOEEbsJJUdGFoHL3CKesRACgPXSK9bQmU9xAnC65Phk79A2roWpsxG5iyC0Nre",
	"BAg4RS80lQE6eIHBNl5iWCykAF8EhQS/3I+WWAhSxYglKAPW4BrH89NhgDCxjS6B/KVMg92tkk7GibfN",
	"eJJYUpypFGgXp5fDFU02MiMzaoriGGE4UQEUTXKVkAjdH1Ni2cEmydboGYU1fqY4oTUfMjiLdD4duJ4l",
	"yudXZ3StFh8R6kZH5TSODHSKCBv6EL0wQUhyeQaYjTNI8U/PVwszW3OHiGCNxIz1mFYSTcBVfLIX7coF",
	"Vvz81TP+Emvq+dThvv3y+Y2j4hrRxLxx2ooy5EfFUZEXj/I1sHOjZ/zSVvFGeOQdIZ/2syJzZdXOBL4O",
	"51U30vwEZ/9xXhwlzhZemTEXpuRnry/4s5M3nKzixaPEt6p52xHKeqwrl2zA2j4677GuYy6XUhGZpHxd",
	"tFZvJU9HvtCenNAPqgUphc5KNmh76dC6BU/XTBbdtVOUvq5Xn3/5h0CmLD7Lv1UhVv16Pm+LV3DWhLbG",
	"HLWNaTNRk7FYplIXmroWfka2powUMcVitA40GU1ZtyWXruWUf4Tc1fdN2ZcO5YbqXYtukU7jyab0PYV0",
	"U83z0yGc/w2EuymINpKdQJVp+dxA1lEy/Xvy8gXVo1rEDC5FjamFtFqjdTzp35ycVtq/Mv191S1t8B31",
	"i1/AL1/RkFzWJUraTgV3V/6e6fI75B8Xv5L8PRrW5aftNfntIBBuldm1+Z+L/x9L/Y2J4od90AmBE9Aq",
	"REr0D02I0C6noSyBzv8PAAD///kskdguFAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.1.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-3.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
