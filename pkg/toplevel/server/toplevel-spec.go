// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/server"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_2_1_0/server"
	externalRef2 "github.com/onosproject/aether-roc-api/pkg/app_gtwy/server"
	externalRef3 "github.com/onosproject/aether-roc-api/pkg/sdn_fabric_0_1_0/server"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-2.1.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "./aether-app-gtwy-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef3.PathToRawSpec(path.Join(pathPrefix, "./sdn-fabric-0.1.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
