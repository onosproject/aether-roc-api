// Code generated by GENERATOR. DO NOT EDIT.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/server"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_4_0_0/server"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xZeW/byBX/Kg/cAruLiqLsGEHXRYFqHcdrrGO7thKgiIxgTD6Kk5Az3JlHOdrA372Y",
	"gxRJUT4iF+1/Mmfm9+7T34JYFqUUKEgHh98CHWdYMPvzKGNigeZXgjpWvCQuRXAYKCwVavMAGMRSpHxR",
	"KWYOIbZPgCQw0FwscgRiaoEUjIJSyRIVcbTg7vMnnmziU4bAExTEU44KZArmi3tgoO8yHmdAGdc1PVaW",
	"ucEdBbQqMTgMNCkuFsH9qKbjvvcpMQHS/mZ5g78qsUVEWuxVm9oDVJaotEV+AiF/9/m0liyvnA57NEAj",
	"GW15pbh7DWwwCjhhYR/+RWEaHAY/RGvbR97wkbP6B/PYSubIM6XYKri/HwUK/6i4wiQ4/Ngy4k1zU95+",
	"xpjM0zbSkEa4SPiSJxXL4ZJRFtmbwEQCCgu5xATSnC0glsUtF86/uAAGR7Vquh5VMsqGncmcGD1s16kn",
	"uPnc8BgzQg13GVKGylmHG9dPMEdqwd1KmSMTjY2GmWlbZ5OVnoKtTEO6Pc6xqEO2qwYbC7FVV7g/nown",
	"LYOPI2aFcAehLFGwkr8ar1iRDzrDdA1mqLaxD7ZhH3wfdiyFwJj4ktMq1KiWPMbdBTgaQN1KbWeRtlFL",
	"0OIvlKzK3WV600LbQN9Zhj46CkJVKq5fwBrHDVYPeWeuu8i8DBNZMP4CEXBaQ3Vxd2a4g6s5vYB2rzlh",
	"g7YzgzUaYVHm7CX4m3mkDurOfHZQFUtTHodxzrR+AYbbcJv4u7Pex6/KdHeu35dpjbUzhx5rGb+ANj/E",
	"usbamS+LZYrlJaM4+1Umq81C+MaW50f7naaSmqr6lVCYrmygvXonE8xde2halLp9kyn86NqgH0EKSLnS",
	"BLFC1698zLn4cvNTRlTqwyhKZKzHUkhdKmkq+ViqRWT+Dl0bbS9EC1HwT9iwEv1QaQxlGjafwr3JXuiz",
	"vucj5CLUSKZ3QE0/bzRHrusIBSsw3JtY3ROn3DQV/aOB9qgwsofmc7g32W8/7p1sfVuzuTfZ23zePhzq",
	"iOrbRjGwVkww0Be9LxP2TKMnmLIqp9APKhuGn7l+/SencDB6+tl0k5VGuF2Bfw48BSEJdImxmVsSkL7D",
	"tQ1u5fiKXM+ogWlgAliScD8VeHOZNr1kRKgM6Y+T8BcW/jmfh/P5+NPNXx/tF3uy3NyPPPvnrMDNEBH+",
	"ax+0eabNO3v1SbNDi9bG6DAKZooJzWIanJBah6AwReUmFyiqnHhYD2frSyz3nfQYZuwLCkiVLKAOtAWn",
	"rLodx7KIWuHmQo2VPCKFGBVME6qoVJKkPYp8FC73t8TP41OXbo1x0o96+nmj14bqRsHX8AuutBkgmoHL",
	"9LAmy+CWAZp4gcCoGZaxrTy4Yxrq56MglapgFBwGxkdD83IokJ3rJkMqsHOaH5W4WHRnpTZdruEWzQ0P",
	"ZgKIgRas1JmkwVEqwRJFgiJeDVG2roIitjN7X0oj6HpX0OOjxqVhWf3hoMVzrq3JG+LW6i18DZQx8iQM",
	"G30G2h7RdTS3EBnIgf1Mt81FnG9s26tUgv9RDa5XOsxtKISLBL8O6aKQQpIUPGZ5vgIujFdpLhYjWOTy",
	"1n6saRqImlwzije+xwW9PliT5oJwgcoN50s+vFZpzdP1JRBVcYvqaciaGFV6C26lFAqCnKcYr+Icwd0e",
	"VlhvFZExjQ/D2ivDWCiqwiTz2dX0/Hp6NDu9OP909Nv0/OQ4GHU+Xl2cnf06Pfq9tSFYW8xwu4UHezRA",
	"G+44ZXbFcmkFGGbl8vj8zen5SY+Xo4t3l2fHsz6Lb6enZ8dveh8/TM9O30xnmyD+YOuDNeDNo5sTL4FT",
	"w9AKxZXk706fOdMENcZTc2ilUdVFd5OoOanNYm66LFKwBB8P0Z743PDkgrYVQDfdKnzGNT29treob+4F",
	"bYpIpS2VUhCLLTAWjOc25FL5T9PVC6Q7qb5wsTCtbzDyHUhwUaKA8+YQ3spKJMxLWimDUZf2ARibsDvN",
	"RIYwD6auCM1kCWe4xHweQMwE3FrlJpBKZdV6OZ0d/QaxLAomkvFcnBKwPJd3GjQuUbG8NskValkpk+39",
	"B9u91h1fDKo5J2moGEhOpspxU4uwRePkeKZBZ7LKEzD64qJC/yoxNylTslo4x2utSa+Or2drMuO5mIt5",
	"NZm8QpjZraQgVCmLEfwfIsHEw1qRpchXpuTiV5OsrI/pMZySuW8v3K4syZP3p+ZZwb6ga8DKHOcCvEQG",
	"G/ba7jgGHC/Grqgb8xVMrFrqYARSxDgORkHOYxQuN3rTn7kvV5iGF+dvw3do0ne4N548wfLRXWkmJ0JB",
	"UVXmkiU62p/sT6LJ66gFdiHyVXgtU7pjCkNPMFzujSfjMkndOkIV+iK99iu759Pc+yWa7FuaDp6LRchE",
	"Ep5eXoVvp/8KDVfh5LWltx5o+h4ajILmXwjBKzsk348CPw43n+yEkNmAredmJePQXrFr8NjuwU1BsiF0",
	"mgSHblCeybKm4yfFenT2EvUWyNFn7cquSwKPpYj1MH5/7xKSLqXQribuu6mzG6iWWUxs+tJVUTC1Mrza",
	"iGTksp4sITdMm6jriWueRTqJpcJIr0ScKSn4nxh987vXe6cQxQokVDo4/NiRlPArRWXOuPi7aSOURvpH",
	"RWn4t67IA9NRVwrHAXiiLo3bgHAHIUtYSajC5YFNyk7ubJ396k1xO4WTqvD+ZhSU0uXorjWvLfBlpbMj",
	"O7J0DPuY0lua2tD8xfUMHtao03mJsQH2A3OPuRLjRxja4m4rVuTP1P3J8QwufgeD2xXFHFg+wVSDJsTA",
	"cGcS2L+n787AVe0xXBuTmZnc+RfJMrQ+111FrWV/YPf1oFpcwO/bLcv/Wi8PyGBV5pOTPbZFblP8g+8S",
	"/+D/SvyDh8U/6Ilfj/TbxPR7k+/z/+el286K5tk68ILAtBlnP1ea6v9OCw9qJG7NtVvFPkGate/9N8Xu",
	"NbDPl7zLKLGFtjNOD/fGFLH/BAAA//9JBEtKHyEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-4.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
