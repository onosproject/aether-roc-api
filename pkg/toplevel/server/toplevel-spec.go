// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/server"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_2_1_0/server"
	externalRef2 "github.com/onosproject/aether-roc-api/pkg/app_gtwy/server"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-2.1.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "./aether-app-gtwy-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
