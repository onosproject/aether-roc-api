// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/server"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_2_1_0/server"
	externalRef2 "github.com/onosproject/aether-roc-api/pkg/aether_4_0_0/server"
	externalRef3 "github.com/onosproject/aether-roc-api/pkg/app_gtwy/server"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"r0deN1TijTowW12PO3W2/ycAAP//HW3NFwcuAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-2.1.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "./aether-4.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef3.PathToRawSpec(path.Join(pathPrefix, "./aether-app-gtwy-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
