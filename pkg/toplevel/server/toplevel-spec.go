// Code generated by GENERATOR. DO NOT EDIT.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/server"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_4_0_0/server"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-4.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
