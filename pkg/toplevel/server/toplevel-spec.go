// Code generated by GENERATOR. DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_1_0/server"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_3_0_0/server"
	externalRef2 "github.com/onosproject/aether-roc-api/pkg/aether_4_0_0/server"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"WPsAzXIcyiLo/P8AAAD//7dVN+SkFwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.1.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-3.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "./aether-4.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
