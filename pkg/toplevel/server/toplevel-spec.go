// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_2_0_0/server"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_2_1_0/server"
	externalRef2 "github.com/onosproject/aether-roc-api/pkg/aether_4_0_0/server"
	externalRef3 "github.com/onosproject/aether-roc-api/pkg/app_gtwy/server"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//xb36hYktAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./aether-2.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./aether-2.1.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "./aether-4.0.0-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef3.PathToRawSpec(path.Join(pathPrefix, "./aether-app-gtwy-openapi3.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
