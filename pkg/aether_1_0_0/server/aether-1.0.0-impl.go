// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"context"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// server-interface template override

import (
	"github.com/onosproject/aether-roc-api/pkg/aether_1_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/southbound"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	"github.com/onosproject/onos-lib-go/pkg/logging"
	"reflect"
)

// Implement the Server Interface for access to gNMI
var log = logging.GetLogger("aether")

// ServerImpl -
type ServerImpl struct {
	GnmiClient southbound.GnmiClient
}

// DeleteAetherV100targetAccessProfile impl of gNMI access at /aether/v1.0.0/{target}/access-profile
func (i *ServerImpl) DeleteAetherV100targetAccessProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteAetherV100targetAccessProfile(context.Background(), "/aether/v1.0.0/{target}/access-profile", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteAetherV100targetAccessProfile")
	return ctx.JSON(http.StatusOK, response)
}

// GetAetherV100targetAccessProfile impl of gNMI access at /aether/v1.0.0/{target}/access-profile
func (i *ServerImpl) GetAetherV100targetAccessProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetAetherV100targetAccessProfile(context.Background(), "/aether/v1.0.0/{target}/access-profile", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetAetherV100targetAccessProfile")
	return ctx.JSON(http.StatusOK, response)
}

// PostAetherV100targetAccessProfile impl of gNMI access at /aether/v1.0.0/{target}/access-profile
func (i *ServerImpl) PostAetherV100targetAccessProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostAetherV100targetAccessProfile(context.Background(), body, "/aether/v1.0.0/{target}/access-profile", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostAetherV100targetAccessProfile")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteAetherV100targetAccessProfileAccessProfile impl of gNMI access at /aether/v1.0.0/{target}/access-profile/access-profile/{id}
func (i *ServerImpl) DeleteAetherV100targetAccessProfileAccessProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteAetherV100targetAccessProfileAccessProfile(context.Background(), "/aether/v1.0.0/{target}/access-profile/access-profile/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteAetherV100targetAccessProfileAccessProfile")
	return ctx.JSON(http.StatusOK, response)
}

// GetAetherV100targetAccessProfileAccessProfile impl of gNMI access at /aether/v1.0.0/{target}/access-profile/access-profile/{id}
func (i *ServerImpl) GetAetherV100targetAccessProfileAccessProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetAetherV100targetAccessProfileAccessProfile(context.Background(), "/aether/v1.0.0/{target}/access-profile/access-profile/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetAetherV100targetAccessProfileAccessProfile")
	return ctx.JSON(http.StatusOK, response)
}

// PostAetherV100targetAccessProfileAccessProfile impl of gNMI access at /aether/v1.0.0/{target}/access-profile/access-profile/{id}
func (i *ServerImpl) PostAetherV100targetAccessProfileAccessProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostAetherV100targetAccessProfileAccessProfile(context.Background(), body, "/aether/v1.0.0/{target}/access-profile/access-profile/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostAetherV100targetAccessProfileAccessProfile")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteAetherV100targetApnProfile impl of gNMI access at /aether/v1.0.0/{target}/apn-profile
func (i *ServerImpl) DeleteAetherV100targetApnProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteAetherV100targetApnProfile(context.Background(), "/aether/v1.0.0/{target}/apn-profile", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteAetherV100targetApnProfile")
	return ctx.JSON(http.StatusOK, response)
}

// GetAetherV100targetApnProfile impl of gNMI access at /aether/v1.0.0/{target}/apn-profile
func (i *ServerImpl) GetAetherV100targetApnProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetAetherV100targetApnProfile(context.Background(), "/aether/v1.0.0/{target}/apn-profile", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetAetherV100targetApnProfile")
	return ctx.JSON(http.StatusOK, response)
}

// PostAetherV100targetApnProfile impl of gNMI access at /aether/v1.0.0/{target}/apn-profile
func (i *ServerImpl) PostAetherV100targetApnProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostAetherV100targetApnProfile(context.Background(), body, "/aether/v1.0.0/{target}/apn-profile", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostAetherV100targetApnProfile")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteAetherV100targetApnProfileApnProfile impl of gNMI access at /aether/v1.0.0/{target}/apn-profile/apn-profile/{id}
func (i *ServerImpl) DeleteAetherV100targetApnProfileApnProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteAetherV100targetApnProfileApnProfile(context.Background(), "/aether/v1.0.0/{target}/apn-profile/apn-profile/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteAetherV100targetApnProfileApnProfile")
	return ctx.JSON(http.StatusOK, response)
}

// GetAetherV100targetApnProfileApnProfile impl of gNMI access at /aether/v1.0.0/{target}/apn-profile/apn-profile/{id}
func (i *ServerImpl) GetAetherV100targetApnProfileApnProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetAetherV100targetApnProfileApnProfile(context.Background(), "/aether/v1.0.0/{target}/apn-profile/apn-profile/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetAetherV100targetApnProfileApnProfile")
	return ctx.JSON(http.StatusOK, response)
}

// PostAetherV100targetApnProfileApnProfile impl of gNMI access at /aether/v1.0.0/{target}/apn-profile/apn-profile/{id}
func (i *ServerImpl) PostAetherV100targetApnProfileApnProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostAetherV100targetApnProfileApnProfile(context.Background(), body, "/aether/v1.0.0/{target}/apn-profile/apn-profile/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostAetherV100targetApnProfileApnProfile")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteAetherV100targetQosProfile impl of gNMI access at /aether/v1.0.0/{target}/qos-profile
func (i *ServerImpl) DeleteAetherV100targetQosProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteAetherV100targetQosProfile(context.Background(), "/aether/v1.0.0/{target}/qos-profile", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteAetherV100targetQosProfile")
	return ctx.JSON(http.StatusOK, response)
}

// GetAetherV100targetQosProfile impl of gNMI access at /aether/v1.0.0/{target}/qos-profile
func (i *ServerImpl) GetAetherV100targetQosProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetAetherV100targetQosProfile(context.Background(), "/aether/v1.0.0/{target}/qos-profile", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetAetherV100targetQosProfile")
	return ctx.JSON(http.StatusOK, response)
}

// PostAetherV100targetQosProfile impl of gNMI access at /aether/v1.0.0/{target}/qos-profile
func (i *ServerImpl) PostAetherV100targetQosProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostAetherV100targetQosProfile(context.Background(), body, "/aether/v1.0.0/{target}/qos-profile", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostAetherV100targetQosProfile")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteAetherV100targetQosProfileQosProfile impl of gNMI access at /aether/v1.0.0/{target}/qos-profile/qos-profile/{id}
func (i *ServerImpl) DeleteAetherV100targetQosProfileQosProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteAetherV100targetQosProfileQosProfile(context.Background(), "/aether/v1.0.0/{target}/qos-profile/qos-profile/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteAetherV100targetQosProfileQosProfile")
	return ctx.JSON(http.StatusOK, response)
}

// GetAetherV100targetQosProfileQosProfile impl of gNMI access at /aether/v1.0.0/{target}/qos-profile/qos-profile/{id}
func (i *ServerImpl) GetAetherV100targetQosProfileQosProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetAetherV100targetQosProfileQosProfile(context.Background(), "/aether/v1.0.0/{target}/qos-profile/qos-profile/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetAetherV100targetQosProfileQosProfile")
	return ctx.JSON(http.StatusOK, response)
}

// PostAetherV100targetQosProfileQosProfile impl of gNMI access at /aether/v1.0.0/{target}/qos-profile/qos-profile/{id}
func (i *ServerImpl) PostAetherV100targetQosProfileQosProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostAetherV100targetQosProfileQosProfile(context.Background(), body, "/aether/v1.0.0/{target}/qos-profile/qos-profile/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostAetherV100targetQosProfileQosProfile")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteAetherV100targetQosProfileQosProfileidApnAmbr impl of gNMI access at /aether/v1.0.0/{target}/qos-profile/qos-profile/{id}/apn-ambr
func (i *ServerImpl) DeleteAetherV100targetQosProfileQosProfileidApnAmbr(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteAetherV100targetQosProfileQosProfileidApnAmbr(context.Background(), "/aether/v1.0.0/{target}/qos-profile/qos-profile/{id}/apn-ambr", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteAetherV100targetQosProfileQosProfileidApnAmbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetAetherV100targetQosProfileQosProfileidApnAmbr impl of gNMI access at /aether/v1.0.0/{target}/qos-profile/qos-profile/{id}/apn-ambr
func (i *ServerImpl) GetAetherV100targetQosProfileQosProfileidApnAmbr(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetAetherV100targetQosProfileQosProfileidApnAmbr(context.Background(), "/aether/v1.0.0/{target}/qos-profile/qos-profile/{id}/apn-ambr", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetAetherV100targetQosProfileQosProfileidApnAmbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostAetherV100targetQosProfileQosProfileidApnAmbr impl of gNMI access at /aether/v1.0.0/{target}/qos-profile/qos-profile/{id}/apn-ambr
func (i *ServerImpl) PostAetherV100targetQosProfileQosProfileidApnAmbr(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostAetherV100targetQosProfileQosProfileidApnAmbr(context.Background(), body, "/aether/v1.0.0/{target}/qos-profile/qos-profile/{id}/apn-ambr", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostAetherV100targetQosProfileQosProfileidApnAmbr")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteAetherV100targetSubscriber impl of gNMI access at /aether/v1.0.0/{target}/subscriber
func (i *ServerImpl) DeleteAetherV100targetSubscriber(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteAetherV100targetSubscriber(context.Background(), "/aether/v1.0.0/{target}/subscriber", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteAetherV100targetSubscriber")
	return ctx.JSON(http.StatusOK, response)
}

// GetAetherV100targetSubscriber impl of gNMI access at /aether/v1.0.0/{target}/subscriber
func (i *ServerImpl) GetAetherV100targetSubscriber(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetAetherV100targetSubscriber(context.Background(), "/aether/v1.0.0/{target}/subscriber", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetAetherV100targetSubscriber")
	return ctx.JSON(http.StatusOK, response)
}

// PostAetherV100targetSubscriber impl of gNMI access at /aether/v1.0.0/{target}/subscriber
func (i *ServerImpl) PostAetherV100targetSubscriber(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostAetherV100targetSubscriber(context.Background(), body, "/aether/v1.0.0/{target}/subscriber", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostAetherV100targetSubscriber")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteAetherV100targetSubscriberUe impl of gNMI access at /aether/v1.0.0/{target}/subscriber/ue/{ueid}
func (i *ServerImpl) DeleteAetherV100targetSubscriberUe(ctx echo.Context, target types.Target, ueid string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteAetherV100targetSubscriberUe(context.Background(), "/aether/v1.0.0/{target}/subscriber/ue/{ueid}", target, ueid)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteAetherV100targetSubscriberUe")
	return ctx.JSON(http.StatusOK, response)
}

// GetAetherV100targetSubscriberUe impl of gNMI access at /aether/v1.0.0/{target}/subscriber/ue/{ueid}
func (i *ServerImpl) GetAetherV100targetSubscriberUe(ctx echo.Context, target types.Target, ueid string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetAetherV100targetSubscriberUe(context.Background(), "/aether/v1.0.0/{target}/subscriber/ue/{ueid}", target, ueid)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetAetherV100targetSubscriberUe")
	return ctx.JSON(http.StatusOK, response)
}

// PostAetherV100targetSubscriberUe impl of gNMI access at /aether/v1.0.0/{target}/subscriber/ue/{ueid}
func (i *ServerImpl) PostAetherV100targetSubscriberUe(ctx echo.Context, target types.Target, ueid string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostAetherV100targetSubscriberUe(context.Background(), body, "/aether/v1.0.0/{target}/subscriber/ue/{ueid}", target, ueid)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostAetherV100targetSubscriberUe")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteAetherV100targetSubscriberUeueidProfiles impl of gNMI access at /aether/v1.0.0/{target}/subscriber/ue/{ueid}/profiles
func (i *ServerImpl) DeleteAetherV100targetSubscriberUeueidProfiles(ctx echo.Context, target types.Target, ueid string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteAetherV100targetSubscriberUeueidProfiles(context.Background(), "/aether/v1.0.0/{target}/subscriber/ue/{ueid}/profiles", target, ueid)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteAetherV100targetSubscriberUeueidProfiles")
	return ctx.JSON(http.StatusOK, response)
}

// GetAetherV100targetSubscriberUeueidProfiles impl of gNMI access at /aether/v1.0.0/{target}/subscriber/ue/{ueid}/profiles
func (i *ServerImpl) GetAetherV100targetSubscriberUeueidProfiles(ctx echo.Context, target types.Target, ueid string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetAetherV100targetSubscriberUeueidProfiles(context.Background(), "/aether/v1.0.0/{target}/subscriber/ue/{ueid}/profiles", target, ueid)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetAetherV100targetSubscriberUeueidProfiles")
	return ctx.JSON(http.StatusOK, response)
}

// PostAetherV100targetSubscriberUeueidProfiles impl of gNMI access at /aether/v1.0.0/{target}/subscriber/ue/{ueid}/profiles
func (i *ServerImpl) PostAetherV100targetSubscriberUeueidProfiles(ctx echo.Context, target types.Target, ueid string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostAetherV100targetSubscriberUeueidProfiles(context.Background(), body, "/aether/v1.0.0/{target}/subscriber/ue/{ueid}/profiles", target, ueid)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostAetherV100targetSubscriberUeueidProfiles")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteAetherV100targetSubscriberUeueidProfilesAccessProfile impl of gNMI access at /aether/v1.0.0/{target}/subscriber/ue/{ueid}/profiles/access-profile/{access-profile}
func (i *ServerImpl) DeleteAetherV100targetSubscriberUeueidProfilesAccessProfile(ctx echo.Context, target types.Target, ueid string, accessProfile string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteAetherV100targetSubscriberUeueidProfilesAccessProfile(context.Background(), "/aether/v1.0.0/{target}/subscriber/ue/{ueid}/profiles/access-profile/{access-profile}", target, ueid, accessProfile)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteAetherV100targetSubscriberUeueidProfilesAccessProfile")
	return ctx.JSON(http.StatusOK, response)
}

// GetAetherV100targetSubscriberUeueidProfilesAccessProfile impl of gNMI access at /aether/v1.0.0/{target}/subscriber/ue/{ueid}/profiles/access-profile/{access-profile}
func (i *ServerImpl) GetAetherV100targetSubscriberUeueidProfilesAccessProfile(ctx echo.Context, target types.Target, ueid string, accessProfile string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetAetherV100targetSubscriberUeueidProfilesAccessProfile(context.Background(), "/aether/v1.0.0/{target}/subscriber/ue/{ueid}/profiles/access-profile/{access-profile}", target, ueid, accessProfile)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetAetherV100targetSubscriberUeueidProfilesAccessProfile")
	return ctx.JSON(http.StatusOK, response)
}

// PostAetherV100targetSubscriberUeueidProfilesAccessProfile impl of gNMI access at /aether/v1.0.0/{target}/subscriber/ue/{ueid}/profiles/access-profile/{access-profile}
func (i *ServerImpl) PostAetherV100targetSubscriberUeueidProfilesAccessProfile(ctx echo.Context, target types.Target, ueid string, accessProfile string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostAetherV100targetSubscriberUeueidProfilesAccessProfile(context.Background(), body, "/aether/v1.0.0/{target}/subscriber/ue/{ueid}/profiles/access-profile/{access-profile}", target, ueid, accessProfile)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostAetherV100targetSubscriberUeueidProfilesAccessProfile")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteAetherV100targetSubscriberUeueidServingPlmn impl of gNMI access at /aether/v1.0.0/{target}/subscriber/ue/{ueid}/serving-plmn
func (i *ServerImpl) DeleteAetherV100targetSubscriberUeueidServingPlmn(ctx echo.Context, target types.Target, ueid string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteAetherV100targetSubscriberUeueidServingPlmn(context.Background(), "/aether/v1.0.0/{target}/subscriber/ue/{ueid}/serving-plmn", target, ueid)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteAetherV100targetSubscriberUeueidServingPlmn")
	return ctx.JSON(http.StatusOK, response)
}

// GetAetherV100targetSubscriberUeueidServingPlmn impl of gNMI access at /aether/v1.0.0/{target}/subscriber/ue/{ueid}/serving-plmn
func (i *ServerImpl) GetAetherV100targetSubscriberUeueidServingPlmn(ctx echo.Context, target types.Target, ueid string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetAetherV100targetSubscriberUeueidServingPlmn(context.Background(), "/aether/v1.0.0/{target}/subscriber/ue/{ueid}/serving-plmn", target, ueid)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetAetherV100targetSubscriberUeueidServingPlmn")
	return ctx.JSON(http.StatusOK, response)
}

// PostAetherV100targetSubscriberUeueidServingPlmn impl of gNMI access at /aether/v1.0.0/{target}/subscriber/ue/{ueid}/serving-plmn
func (i *ServerImpl) PostAetherV100targetSubscriberUeueidServingPlmn(ctx echo.Context, target types.Target, ueid string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostAetherV100targetSubscriberUeueidServingPlmn(context.Background(), body, "/aether/v1.0.0/{target}/subscriber/ue/{ueid}/serving-plmn", target, ueid)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostAetherV100targetSubscriberUeueidServingPlmn")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteAetherV100targetUpProfile impl of gNMI access at /aether/v1.0.0/{target}/up-profile
func (i *ServerImpl) DeleteAetherV100targetUpProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteAetherV100targetUpProfile(context.Background(), "/aether/v1.0.0/{target}/up-profile", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteAetherV100targetUpProfile")
	return ctx.JSON(http.StatusOK, response)
}

// GetAetherV100targetUpProfile impl of gNMI access at /aether/v1.0.0/{target}/up-profile
func (i *ServerImpl) GetAetherV100targetUpProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetAetherV100targetUpProfile(context.Background(), "/aether/v1.0.0/{target}/up-profile", target)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetAetherV100targetUpProfile")
	return ctx.JSON(http.StatusOK, response)
}

// PostAetherV100targetUpProfile impl of gNMI access at /aether/v1.0.0/{target}/up-profile
func (i *ServerImpl) PostAetherV100targetUpProfile(ctx echo.Context, target types.Target) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostAetherV100targetUpProfile(context.Background(), body, "/aether/v1.0.0/{target}/up-profile", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostAetherV100targetUpProfile")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteAetherV100targetUpProfileUpProfile impl of gNMI access at /aether/v1.0.0/{target}/up-profile/up-profile/{id}
func (i *ServerImpl) DeleteAetherV100targetUpProfileUpProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response
	err = i.gnmiDeleteAetherV100targetUpProfileUpProfile(context.Background(), "/aether/v1.0.0/{target}/up-profile/up-profile/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("DeleteAetherV100targetUpProfileUpProfile")
	return ctx.JSON(http.StatusOK, response)
}

// GetAetherV100targetUpProfileUpProfile impl of gNMI access at /aether/v1.0.0/{target}/up-profile/up-profile/{id}
func (i *ServerImpl) GetAetherV100targetUpProfileUpProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response GET OK 200
	response, err = i.gnmiGetAetherV100targetUpProfileUpProfile(context.Background(), "/aether/v1.0.0/{target}/up-profile/up-profile/{id}", target, id)

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("GetAetherV100targetUpProfileUpProfile")
	return ctx.JSON(http.StatusOK, response)
}

// PostAetherV100targetUpProfileUpProfile impl of gNMI access at /aether/v1.0.0/{target}/up-profile/up-profile/{id}
func (i *ServerImpl) PostAetherV100targetUpProfileUpProfile(ctx echo.Context, target types.Target, id string) error {

	var response interface{}
	var err error

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostAetherV100targetUpProfileUpProfile(context.Background(), body, "/aether/v1.0.0/{target}/up-profile/up-profile/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		if strings.HasPrefix(err.Error(), "rpc error: code = Internal desc = rpc error: code = InvalidArgument") {
			return echo.NewHTTPError(http.StatusNoContent, err.Error())
		} else {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	log.Infof("PostAetherV100targetUpProfileUpProfile")
	return ctx.JSON(http.StatusOK, response)
}

// register template override
