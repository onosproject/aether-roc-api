// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"context"
	"encoding/json"
	"fmt"
)

import (
	"github.com/onosproject/aether-roc-api/pkg/aether_1_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	modelplugin "github.com/onosproject/config-models/modelplugin/aether-1.0.0/aether_1_0_0"
)

// gnmiDeleteAetherV100targetAccessProfile deletes an instance of AetherV100targetAccessProfile.
func (i *ServerImpl) gnmiDeleteAetherV100targetAccessProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetAetherV100targetAccessProfile returns an instance of AetherV100targetAccessProfile.
func (i *ServerImpl) gnmiGetAetherV100targetAccessProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.AetherV100targetAccessProfile, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.handlePropListAetherV100targetAccessProfile()
}

// gnmiPostAetherV100targetAccessProfile adds an instance of AetherV100targetAccessProfile.
func (i *ServerImpl) gnmiPostAetherV100targetAccessProfile(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.AetherV100targetAccessProfile)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.AetherV100targetAccessProfile %v", err)
	}
	gnmiObj, err := encodeToGnmiAetherV100targetAccessProfile(jsonObj)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.AetherV100targetAccessProfile to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequest(openApiPath, string(target), gnmiObj, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteAetherV100targetAccessProfileAccessProfile deletes an instance of AetherV100targetAccessProfileAccessProfile.
func (i *ServerImpl) gnmiDeleteAetherV100targetAccessProfileAccessProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetAetherV100targetAccessProfileAccessProfile returns an instance of AetherV100targetAccessProfileAccessProfile.
func (i *ServerImpl) gnmiGetAetherV100targetAccessProfileAccessProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.AetherV100targetAccessProfileAccessProfile, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.handlePropListAetherV100targetAccessProfileAccessProfile()
}

// gnmiPostAetherV100targetAccessProfileAccessProfile adds an instance of AetherV100targetAccessProfileAccessProfile.
func (i *ServerImpl) gnmiPostAetherV100targetAccessProfileAccessProfile(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.AetherV100targetAccessProfileAccessProfile)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.AetherV100targetAccessProfileAccessProfile %v", err)
	}
	gnmiObj, err := encodeToGnmiAetherV100targetAccessProfileAccessProfile(jsonObj)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.AetherV100targetAccessProfileAccessProfile to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequest(openApiPath, string(target), gnmiObj, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteAetherV100targetApnProfile deletes an instance of AetherV100targetApnProfile.
func (i *ServerImpl) gnmiDeleteAetherV100targetApnProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetAetherV100targetApnProfile returns an instance of AetherV100targetApnProfile.
func (i *ServerImpl) gnmiGetAetherV100targetApnProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.AetherV100targetApnProfile, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.handlePropListAetherV100targetApnProfile()
}

// gnmiPostAetherV100targetApnProfile adds an instance of AetherV100targetApnProfile.
func (i *ServerImpl) gnmiPostAetherV100targetApnProfile(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.AetherV100targetApnProfile)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.AetherV100targetApnProfile %v", err)
	}
	gnmiObj, err := encodeToGnmiAetherV100targetApnProfile(jsonObj)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.AetherV100targetApnProfile to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequest(openApiPath, string(target), gnmiObj, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteAetherV100targetApnProfileApnProfile deletes an instance of AetherV100targetApnProfileApnProfile.
func (i *ServerImpl) gnmiDeleteAetherV100targetApnProfileApnProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetAetherV100targetApnProfileApnProfile returns an instance of AetherV100targetApnProfileApnProfile.
func (i *ServerImpl) gnmiGetAetherV100targetApnProfileApnProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.AetherV100targetApnProfileApnProfile, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.handlePropListAetherV100targetApnProfileApnProfile()
}

// gnmiPostAetherV100targetApnProfileApnProfile adds an instance of AetherV100targetApnProfileApnProfile.
func (i *ServerImpl) gnmiPostAetherV100targetApnProfileApnProfile(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.AetherV100targetApnProfileApnProfile)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.AetherV100targetApnProfileApnProfile %v", err)
	}
	gnmiObj, err := encodeToGnmiAetherV100targetApnProfileApnProfile(jsonObj)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.AetherV100targetApnProfileApnProfile to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequest(openApiPath, string(target), gnmiObj, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteAetherV100targetQosProfile deletes an instance of AetherV100targetQosProfile.
func (i *ServerImpl) gnmiDeleteAetherV100targetQosProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetAetherV100targetQosProfile returns an instance of AetherV100targetQosProfile.
func (i *ServerImpl) gnmiGetAetherV100targetQosProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.AetherV100targetQosProfile, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.handlePropListAetherV100targetQosProfile()
}

// gnmiPostAetherV100targetQosProfile adds an instance of AetherV100targetQosProfile.
func (i *ServerImpl) gnmiPostAetherV100targetQosProfile(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.AetherV100targetQosProfile)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.AetherV100targetQosProfile %v", err)
	}
	gnmiObj, err := encodeToGnmiAetherV100targetQosProfile(jsonObj)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.AetherV100targetQosProfile to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequest(openApiPath, string(target), gnmiObj, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteAetherV100targetQosProfileQosProfile deletes an instance of AetherV100targetQosProfileQosProfile.
func (i *ServerImpl) gnmiDeleteAetherV100targetQosProfileQosProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetAetherV100targetQosProfileQosProfile returns an instance of AetherV100targetQosProfileQosProfile.
func (i *ServerImpl) gnmiGetAetherV100targetQosProfileQosProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.AetherV100targetQosProfileQosProfile, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.handlePropListAetherV100targetQosProfileQosProfile()
}

// gnmiPostAetherV100targetQosProfileQosProfile adds an instance of AetherV100targetQosProfileQosProfile.
func (i *ServerImpl) gnmiPostAetherV100targetQosProfileQosProfile(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.AetherV100targetQosProfileQosProfile)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.AetherV100targetQosProfileQosProfile %v", err)
	}
	gnmiObj, err := encodeToGnmiAetherV100targetQosProfileQosProfile(jsonObj)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.AetherV100targetQosProfileQosProfile to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequest(openApiPath, string(target), gnmiObj, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteAetherV100targetQosProfileQosProfileApnAmbr deletes an instance of AetherV100targetQosProfileQosProfileApnAmbr.
func (i *ServerImpl) gnmiDeleteAetherV100targetQosProfileQosProfileApnAmbr(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetAetherV100targetQosProfileQosProfileApnAmbr returns an instance of AetherV100targetQosProfileQosProfileApnAmbr.
func (i *ServerImpl) gnmiGetAetherV100targetQosProfileQosProfileApnAmbr(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.AetherV100targetQosProfileQosProfileApnAmbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.handlePropListAetherV100targetQosProfileQosProfileApnAmbr()
}

// gnmiPostAetherV100targetQosProfileQosProfileApnAmbr adds an instance of AetherV100targetQosProfileQosProfileApnAmbr.
func (i *ServerImpl) gnmiPostAetherV100targetQosProfileQosProfileApnAmbr(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.AetherV100targetQosProfileQosProfileApnAmbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.AetherV100targetQosProfileQosProfileApnAmbr %v", err)
	}
	gnmiObj, err := encodeToGnmiAetherV100targetQosProfileQosProfileApnAmbr(jsonObj)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.AetherV100targetQosProfileQosProfileApnAmbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequest(openApiPath, string(target), gnmiObj, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteAetherV100targetSubscriber deletes an instance of AetherV100targetSubscriber.
func (i *ServerImpl) gnmiDeleteAetherV100targetSubscriber(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetAetherV100targetSubscriber returns an instance of AetherV100targetSubscriber.
func (i *ServerImpl) gnmiGetAetherV100targetSubscriber(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.AetherV100targetSubscriber, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.handlePropListAetherV100targetSubscriber()
}

// gnmiPostAetherV100targetSubscriber adds an instance of AetherV100targetSubscriber.
func (i *ServerImpl) gnmiPostAetherV100targetSubscriber(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.AetherV100targetSubscriber)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.AetherV100targetSubscriber %v", err)
	}
	gnmiObj, err := encodeToGnmiAetherV100targetSubscriber(jsonObj)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.AetherV100targetSubscriber to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequest(openApiPath, string(target), gnmiObj, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteAetherV100targetSubscriberUe deletes an instance of AetherV100targetSubscriberUe.
func (i *ServerImpl) gnmiDeleteAetherV100targetSubscriberUe(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetAetherV100targetSubscriberUe returns an instance of AetherV100targetSubscriberUe.
func (i *ServerImpl) gnmiGetAetherV100targetSubscriberUe(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.AetherV100targetSubscriberUe, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.handlePropListAetherV100targetSubscriberUe()
}

// gnmiPostAetherV100targetSubscriberUe adds an instance of AetherV100targetSubscriberUe.
func (i *ServerImpl) gnmiPostAetherV100targetSubscriberUe(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.AetherV100targetSubscriberUe)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.AetherV100targetSubscriberUe %v", err)
	}
	gnmiObj, err := encodeToGnmiAetherV100targetSubscriberUe(jsonObj)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.AetherV100targetSubscriberUe to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequest(openApiPath, string(target), gnmiObj, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteAetherV100targetSubscriberUeProfiles deletes an instance of AetherV100targetSubscriberUeProfiles.
func (i *ServerImpl) gnmiDeleteAetherV100targetSubscriberUeProfiles(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetAetherV100targetSubscriberUeProfiles returns an instance of AetherV100targetSubscriberUeProfiles.
func (i *ServerImpl) gnmiGetAetherV100targetSubscriberUeProfiles(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.AetherV100targetSubscriberUeProfiles, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.handlePropListAetherV100targetSubscriberUeProfiles()
}

// gnmiPostAetherV100targetSubscriberUeProfiles adds an instance of AetherV100targetSubscriberUeProfiles.
func (i *ServerImpl) gnmiPostAetherV100targetSubscriberUeProfiles(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.AetherV100targetSubscriberUeProfiles)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.AetherV100targetSubscriberUeProfiles %v", err)
	}
	gnmiObj, err := encodeToGnmiAetherV100targetSubscriberUeProfiles(jsonObj)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.AetherV100targetSubscriberUeProfiles to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequest(openApiPath, string(target), gnmiObj, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteAetherV100targetSubscriberUeProfilesAccessProfile deletes an instance of AetherV100targetSubscriberUeProfilesAccessProfile.
func (i *ServerImpl) gnmiDeleteAetherV100targetSubscriberUeProfilesAccessProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetAetherV100targetSubscriberUeProfilesAccessProfile returns an instance of AetherV100targetSubscriberUeProfilesAccessProfile.
func (i *ServerImpl) gnmiGetAetherV100targetSubscriberUeProfilesAccessProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.AetherV100targetSubscriberUeProfilesAccessProfile, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.handlePropListAetherV100targetSubscriberUeProfilesAccessProfile()
}

// gnmiPostAetherV100targetSubscriberUeProfilesAccessProfile adds an instance of AetherV100targetSubscriberUeProfilesAccessProfile.
func (i *ServerImpl) gnmiPostAetherV100targetSubscriberUeProfilesAccessProfile(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.AetherV100targetSubscriberUeProfilesAccessProfile)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.AetherV100targetSubscriberUeProfilesAccessProfile %v", err)
	}
	gnmiObj, err := encodeToGnmiAetherV100targetSubscriberUeProfilesAccessProfile(jsonObj)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.AetherV100targetSubscriberUeProfilesAccessProfile to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequest(openApiPath, string(target), gnmiObj, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteAetherV100targetSubscriberUeServingPlmn deletes an instance of AetherV100targetSubscriberUeServingPlmn.
func (i *ServerImpl) gnmiDeleteAetherV100targetSubscriberUeServingPlmn(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetAetherV100targetSubscriberUeServingPlmn returns an instance of AetherV100targetSubscriberUeServingPlmn.
func (i *ServerImpl) gnmiGetAetherV100targetSubscriberUeServingPlmn(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.AetherV100targetSubscriberUeServingPlmn, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.handlePropListAetherV100targetSubscriberUeServingPlmn()
}

// gnmiPostAetherV100targetSubscriberUeServingPlmn adds an instance of AetherV100targetSubscriberUeServingPlmn.
func (i *ServerImpl) gnmiPostAetherV100targetSubscriberUeServingPlmn(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.AetherV100targetSubscriberUeServingPlmn)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.AetherV100targetSubscriberUeServingPlmn %v", err)
	}
	gnmiObj, err := encodeToGnmiAetherV100targetSubscriberUeServingPlmn(jsonObj)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.AetherV100targetSubscriberUeServingPlmn to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequest(openApiPath, string(target), gnmiObj, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteAetherV100targetUpProfile deletes an instance of AetherV100targetUpProfile.
func (i *ServerImpl) gnmiDeleteAetherV100targetUpProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetAetherV100targetUpProfile returns an instance of AetherV100targetUpProfile.
func (i *ServerImpl) gnmiGetAetherV100targetUpProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.AetherV100targetUpProfile, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.handlePropListAetherV100targetUpProfile()
}

// gnmiPostAetherV100targetUpProfile adds an instance of AetherV100targetUpProfile.
func (i *ServerImpl) gnmiPostAetherV100targetUpProfile(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.AetherV100targetUpProfile)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.AetherV100targetUpProfile %v", err)
	}
	gnmiObj, err := encodeToGnmiAetherV100targetUpProfile(jsonObj)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.AetherV100targetUpProfile to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequest(openApiPath, string(target), gnmiObj, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteAetherV100targetUpProfileUpProfile deletes an instance of AetherV100targetUpProfileUpProfile.
func (i *ServerImpl) gnmiDeleteAetherV100targetUpProfileUpProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetAetherV100targetUpProfileUpProfile returns an instance of AetherV100targetUpProfileUpProfile.
func (i *ServerImpl) gnmiGetAetherV100targetUpProfileUpProfile(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.AetherV100targetUpProfileUpProfile, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.handlePropListAetherV100targetUpProfileUpProfile()
}

// gnmiPostAetherV100targetUpProfileUpProfile adds an instance of AetherV100targetUpProfileUpProfile.
func (i *ServerImpl) gnmiPostAetherV100targetUpProfileUpProfile(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	jsonObj := new(types.AetherV100targetUpProfileUpProfile)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.AetherV100targetUpProfileUpProfile %v", err)
	}
	gnmiObj, err := encodeToGnmiAetherV100targetUpProfileUpProfile(jsonObj)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.AetherV100targetUpProfileUpProfile to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequest(openApiPath, string(target), gnmiObj, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, fmt.Errorf(" %v", err)
	}
	return utils.ExtractExtension100(gnmiSetResponse), nil
}

// gnmiDeleteTarget deletes an instance of target.
func (i *ServerImpl) gnmiDeleteTarget(ctx context.Context,
	openApiPath string, target types.Target, args ...string) error {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	_, err = i.GnmiClient.Set(ctx, gnmiSet)

	return err
}

// gnmiGetTarget returns an instance of target.
func (i *ServerImpl) gnmiGetTarget(ctx context.Context,
	openApiPath string, target types.Target, args ...string) (*types.Target, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
		return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse modelplugin.Device
	if err = modelplugin.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.handlePropListTarget()
}

// gnmiPostTarget adds an instance of target.
func (i *ServerImpl) gnmiPostTarget(ctx context.Context, body []byte,
	openApiPath string, target types.Target, args ...string) (*string, error) {

	return nil, fmt.Errorf("Not implemented")

}

type Translator interface {
	handlePropListAetherV100targetAccessProfile() (*types.AetherV100targetAccessProfile, error)
	handlePropListAetherV100targetAccessProfileAccessProfile() (*types.AetherV100targetAccessProfileAccessProfile, error)
	handlePropListAetherV100targetApnProfile() (*types.AetherV100targetApnProfile, error)
	handlePropListAetherV100targetApnProfileApnProfile() (*types.AetherV100targetApnProfileApnProfile, error)
	handlePropListAetherV100targetQosProfile() (*types.AetherV100targetQosProfile, error)
	handlePropListAetherV100targetQosProfileQosProfile() (*types.AetherV100targetQosProfileQosProfile, error)
	handlePropListAetherV100targetQosProfileQosProfileApnAmbr() (*types.AetherV100targetQosProfileQosProfileApnAmbr, error)
	handlePropListAetherV100targetSubscriber() (*types.AetherV100targetSubscriber, error)
	handlePropListAetherV100targetSubscriberUe() (*types.AetherV100targetSubscriberUe, error)
	handlePropListAetherV100targetSubscriberUeProfiles() (*types.AetherV100targetSubscriberUeProfiles, error)
	handlePropListAetherV100targetSubscriberUeProfilesAccessProfile() (*types.AetherV100targetSubscriberUeProfilesAccessProfile, error)
	handlePropListAetherV100targetSubscriberUeServingPlmn() (*types.AetherV100targetSubscriberUeServingPlmn, error)
	handlePropListAetherV100targetUpProfile() (*types.AetherV100targetUpProfile, error)
	handlePropListAetherV100targetUpProfileUpProfile() (*types.AetherV100targetUpProfileUpProfile, error)
	handlePropListTarget() (*types.Target, error)
}
