// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

import (
   "github.com/onosproject/aether-roc-api/pkg/utils"
)

// ModelPluginDevice - a wrapper for the model plugin
type ModelPluginDevice struct {
    device externalRef0.Device
}

{{range .Types}}{{$elevenchars := .TypeName}}{{$ltn := len .TypeName}}{{if lt 11 $ltn}}{{$elevenchars = slice .TypeName 0 11}}{{end}}
{{if printf "RequestBody" | eq $elevenchars}}//Ignoring {{.TypeName}}
{{else}}
// To{{.TypeName}} converts gNMI to OAPI from the top level device.{{$tn := .TypeName}}
func (d *ModelPluginDevice) To{{.TypeName}}(params ...string) (*types.{{.TypeName}}, error) {
    resource := new(types.{{.TypeName}})

    {{ if .Schema.ArrayType}}
        // Array list - Go type {{.Schema.ArrayType.GoType}}
        mpObject, err := utils.FindModelPluginObject(d.device,  "{{.Schema.ArrayType.GoType}}", params...)
        if err != nil {
            return nil, err
        }
        for i := mpObject.MapRange(); i.Next(); {
            {{- if eq "string" .Schema.ArrayType.GoType}}
                r := i.Value().Interface().(*string)
            {{- else if eq "int" .Schema.ArrayType.GoType}}
                r := i.Value().Interface().(*int)
            {{- else}}
                iv := i.Value().Elem()
                r, err := To{{.Schema.ArrayType.GoType}}(&iv, params...)
                if err != nil {
                    return nil, err
                }
            {{- end}}
            *resource = append(*resource, *r)
        }
        return resource, nil
    {{else}}
        reflect{{.TypeName}}, err := utils.FindModelPluginObject(d.device, "{{.TypeName}}", params...)
        if err != nil {
            return nil, err
        }
        resource, err = To{{.TypeName}}(reflect{{.TypeName}}, params...)
        return resource, err
    {{end}}
}

// To{{.TypeName}} converts gNMI to OAPI relative to a node in the tree.
{{- $tn := .TypeName}}
func To{{.TypeName}}(ygotObjValue *reflect.Value, params ...string) (*types.{{.TypeName}}, error) {
    resource := new(types.{{.TypeName}})

    {{range .Schema.Properties}}
    // Property: {{.JsonFieldName}} {{.Schema.GoType}}
    {{/* Set up some local variables */}}
    {{- $twoChars := slice .Schema.GoType 0 2 -}}
    {{- $objType := slice .Schema.GoType 2 -}}
    {{- $isOtString := eq "string" $objType -}}
    {{- $isOtInt := eq "int" $objType -}}
    {{- $isArray := eq "[]" $twoChars -}}
    {{- $isString := eq "string" .Schema.GoType -}}
    {{- $isListKey := eq "ListKey" .Schema.GoType -}}
    {{- $isBool := eq "bool" .Schema.GoType -}}
    {{- $isInt := eq "int" .Schema.GoType -}}
    {{- $isInt32 := eq "int32" .Schema.GoType -}}
    {{- $isInt64 := eq "int64" .Schema.GoType -}}
    {{- $toPtr := "&" -}}
    {{- if .Required}}{{ $toPtr = ""}}{{end -}}
    {{- $jfn := .JsonFieldName -}}

    {{if and $isOtString $isOtInt | and $isArray -}}
    // Handle []Object {{$objType}}
    {{camelCase .JsonFieldName | lcFirst}}s := make([]types.{{$objType}}, 0)
    reflect{{$objType}}, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "{{len $tn | slice $objType }}")
    if err != nil {
        return nil, err
    }
    if reflect{{$objType}} != nil {
        for _, key := range reflect{{$objType}}.MapKeys() {
            v := reflect{{$objType}}.MapIndex(key).Interface()
            // Pass down all top level properties as we don't know which one(s) is key
            attribs, err := utils.ExtractGnmiListKeyMap(v)
            if err != nil {
                return nil, err
            }
            childParams := make([]string, len(params))
            copy(childParams, params)
            for _, attribVal := range attribs {
                childParams = append(childParams, fmt.Sprintf("%v", attribVal))
            }
            {{camelCase $jfn | lcFirst}}, err := To{{$objType}}(v, childParams...)
            if err != nil {
                return nil, err
            }
            {{camelCase .JsonFieldName | lcFirst}}s = append({{camelCase .JsonFieldName | lcFirst}}s, *{{camelCase $jfn | lcFirst}})
        }
    }
    resource.{{camelCase .JsonFieldName}} = &{{camelCase .JsonFieldName | lcFirst}}s

    {{- else if len .Schema.EnumValues | lt 0 -}}
    // Enums handling
    reflect{{camelCase .JsonFieldName}}, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "{{camelCase .JsonFieldName}}")
    if err != nil {
        return nil, err
    }
    attr{{camelCase .JsonFieldName}} := reflect{{camelCase .JsonFieldName}}.Interface()
    _, yangDef{{camelCase .JsonFieldName}}, err := utils.ExtractGnmiEnumMap(ygotObjValue, "{{$tn}}{{camelCase .JsonFieldName}}", attr{{camelCase .JsonFieldName}})
    if err != nil {
        return nil, err
    }
    if yangDef{{camelCase .JsonFieldName}} != nil {
        resource.{{camelCase .JsonFieldName}} = ({{- if eq $toPtr "&"}}*{{- end}}types.{{$tn}}{{camelCase .JsonFieldName}})({{$toPtr}}yangDef{{camelCase .JsonFieldName}}.Name)
    }

    {{- else if or $isString $isBool | or $isInt32 | or $isInt64 | or $isInt | or $isListKey -}}
    //encoding gNMI attribute to OAPI
    reflect{{camelCase .JsonFieldName}}, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "{{camelCase .JsonFieldName}}")
    if err != nil {
        return nil, err
    }
    if reflect{{camelCase .JsonFieldName}} != nil {
    {{if $isString -}}
    attr{{camelCase .JsonFieldName}} := reflect{{camelCase .JsonFieldName}}.Interface().(string)
    resource.{{camelCase .JsonFieldName}} = {{$toPtr}}attr{{camelCase .JsonFieldName}}

    {{- else if $isListKey -}}
    attr{{camelCase .JsonFieldName}} := types.ListKey(reflect{{camelCase .JsonFieldName}}.Interface().(string))
    resource.{{camelCase .JsonFieldName}} = {{$toPtr}}attr{{camelCase .JsonFieldName}}

    {{- else if $isBool -}}
    bool{{camelCase .JsonFieldName}} := reflect{{camelCase .JsonFieldName}}.Interface().(bool)
    resource.{{camelCase .JsonFieldName}} = {{$toPtr}}bool{{camelCase .JsonFieldName}}

    {{- else if or $isInt32 $isInt64 | or $isInt -}}
    //OpenAPI does not have unsigned numbers.
    if resource.{{camelCase .JsonFieldName}}, err = utils.To{{camelCase .Schema.GoType}}{{if eq $toPtr "&"}}Ptr{{end}}(reflect{{camelCase .JsonFieldName}}); err != nil {
        return nil, err
    }{{else}}resource.{{camelCase .JsonFieldName}} = {{$toPtr}}attr{{camelCase .JsonFieldName}}
    {{end}}}

    {{- else if eq "[]string" .Schema.GoType -}}
    //Leaf list handling{{$lll := len "leaf-list-"}}
    reflect{{camelCase .JsonFieldName}}, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "{{slice .JsonFieldName $lll | ucFirst}}")
    if err != nil {
        return nil, err
    }
    asArray{{camelCase .JsonFieldName}} := reflect{{camelCase .JsonFieldName}}.Interface().([]string)
    resource.{{camelCase .JsonFieldName}} = {{$toPtr}}asArray{{camelCase .JsonFieldName}}

    {{- else if eq "[]int" .Schema.GoType -}}
    //Leaf list handling{{$lll := len "leaf-list-"}}
    reflect{{camelCase .JsonFieldName}}, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "{{ucFirst .JsonFieldName}}")
    if err != nil {
        return nil, err
    }
	asArrayTagged, err := utils.ToIntArray(reflectTagged)
	if err != nil {
		return nil, err
	}
    resource.{{camelCase .JsonFieldName}} = {{$toPtr}}asArray{{camelCase .JsonFieldName}}

    {{- else -}}
    // Handle object
    reflect{{camelCase .JsonFieldName}}, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "{{camelCase .JsonFieldName}}")
    if err != nil {
        return nil, err
    }
    if reflect{{camelCase .JsonFieldName}} != nil {
        attr{{camelCase .JsonFieldName}}, err := To{{camelCase .Schema.GoType}}(reflect{{camelCase .JsonFieldName}}, params...)
        if err != nil {
            return nil, err
        }
        resource.{{camelCase .JsonFieldName}} = attr{{camelCase .JsonFieldName}}
    }
    {{end}}
    {{end}}

    {{ if .Schema.ArrayType -}}
        {{/* Need to remove the 'List' from the end*/}}
        {{ $jnp := camelCase .JsonName | printf "%100s" }}
        {{ $jnSingle := slice $jnp 0 96}}
        {{ $jnLast4 := slice $jnp 96}}
        // Array list - Go type: {{- $jnSingle }} Last 4: '{{- $jnLast4 }}'
        {{- if ne $jnLast4 "List"}}
 	      for i := 0; i < ygotObjValue.Len(); i++ {
 		    *resource = append(*resource, fmt.Sprintf("%v", ygotObjValue.Index(i).Interface()))
 	      }
        {{- else}}
        for i := ygotObjValue.MapRange(); i.Next(); {
            iv := i.Value().Elem()
            r, err := To > ! {{- $jnSingle}}(&iv, params...)
            if err != nil {
                return nil, err
            }
            *resource = append(*resource, *r)
        }
        {{- end}}
    {{- end}}

    return resource, nil
}
{{end}}
{{end}}