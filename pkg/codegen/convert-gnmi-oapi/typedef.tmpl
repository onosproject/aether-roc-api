import 	(
   	"github.com/onosproject/aether-roc-api/pkg/utils"
)

// ModelPluginDevice - a wrapper for the model plugin
type ModelPluginDevice struct {
	device externalRef0.Device
}

{{range .Types}}{{$elevenchars := .TypeName}}{{$ltn := len .TypeName}}{{if lt 11 $ltn}}{{$elevenchars = slice .TypeName 0 11}}{{end}}
{{if printf "RequestBody" | eq $elevenchars}}//Ignoring {{.TypeName}}
{{else}}
// to{{.TypeName}} converts gNMI to OAPI.{{$tn := .TypeName}}
func (d *ModelPluginDevice) to{{.TypeName}}(params ...string) (*types.{{.TypeName}}, error) {
    resource := new(types.{{.TypeName}})

	{{range .Schema.Properties}}{{$twoChars := slice .Schema.GoType 0 2}}{{$objType := slice .Schema.GoType 2}}
    // Property: {{.JsonFieldName}} {{.Schema.GoType}}{{$isArray := eq "[]" $twoChars}}{{$isString := eq "string" .Schema.GoType}}{{$isBool := eq "bool" .Schema.GoType}}{{$isInt32 := eq "int32" .Schema.GoType}}{{$isInt64 := eq "int64" .Schema.GoType}}
    {{if ne "string" $objType | and $isArray }}{{$jfn := .JsonFieldName }}// Handle []Object
    {{camelCase .JsonFieldName | lcFirst}}s := make([]types.{{$objType}}, 0)
    reflect{{$objType}}, err := utils.FindModelPluginObject(d.device, "{{$objType}}", params...)
    if err != nil {
        return nil, err
    }
    if reflect{{$objType}} != nil {
        for _, key := range reflect{{$objType}}.MapKeys() {
            v := reflect{{$objType}}.MapIndex(key).Interface()
            // Pass down all top level properties as we don't know which one(s) is key
            attribs, err := utils.ExtractGnmiListKeyMap(v)
            if err != nil {
                return nil, err
            }
            childParams := make([]string, len(params))
            copy(childParams, params)
            for _, attribVal := range attribs {
                childParams = append(childParams, fmt.Sprintf("%v", attribVal))
            }
            {{camelCase $jfn | lcFirst}}, err := d.to{{$objType}}(childParams...)
            if err != nil {
                return nil, err
            }
            {{camelCase .JsonFieldName | lcFirst}}s = append({{camelCase .JsonFieldName | lcFirst}}s, *{{camelCase $jfn | lcFirst}})
        }
    }
    resource.{{camelCase .JsonFieldName}} = &{{camelCase .JsonFieldName | lcFirst}}s
    {{else if len .Schema.EnumValues | lt 0}}// Enums handling
    reflect{{camelCase .JsonFieldName}}, err := utils.FindModelPluginObject(d.device, "{{$tn}}{{camelCase .JsonFieldName}}", params...)
    if err != nil {
        return nil, err
    }
    attr{{camelCase .JsonFieldName}} := reflect{{camelCase .JsonFieldName}}.Interface()
    _, yangDef{{ucFirst .JsonFieldName}}, err := utils.ExtractGnmiEnumMap(&d.device, "{{$tn}}{{camelCase .JsonFieldName}}", attr{{camelCase .JsonFieldName}})
    if err != nil {
        return nil, err
    }
    resource.{{ucFirst .JsonFieldName}} = &yangDef{{ucFirst .JsonFieldName}}.Name

    {{else if or $isString $isBool | or $isInt32 | or $isInt64}}//encoding gNMI attribute to OAPI
    reflect{{camelCase .JsonFieldName}}, err := utils.FindModelPluginObject(d.device, "{{$tn}}{{camelCase .JsonFieldName}}", params...)
    if err != nil {
        return nil, err
    }
    if reflect{{camelCase .JsonFieldName}} != nil {
    {{if $isString}}attr{{camelCase .JsonFieldName}} := reflect{{camelCase .JsonFieldName}}.Interface().(string)
    resource.{{camelCase .JsonFieldName}} = &attr{{camelCase .JsonFieldName}}
    {{else if $isBool}}bool{{camelCase .JsonFieldName}} := reflect{{camelCase .JsonFieldName}}.Interface().(bool)
    resource.{{camelCase .JsonFieldName}} = &bool{{camelCase .JsonFieldName}}
    {{else if $isInt32}}//OpenAPI does not have unsigned numbers
    int32{{camelCase .JsonFieldName}}, ok := reflect{{camelCase .JsonFieldName}}.Interface().(int32)
    if !ok { // Might be a uint32
        uint32{{camelCase .JsonFieldName}}, ok := reflect{{camelCase .JsonFieldName}}.Interface().(uint32)
        if !ok {
            return nil, fmt.Errorf("error converting %v to int32 or uint32", reflect{{camelCase .JsonFieldName}}.Interface())
        }
        int32{{camelCase .JsonFieldName}} = int32(uint32{{camelCase .JsonFieldName}})
    }
    resource.{{camelCase .JsonFieldName}} = &int32{{camelCase .JsonFieldName}}
    {{else if $isInt64}}
    int64{{camelCase .JsonFieldName}}, ok := reflect{{camelCase .JsonFieldName}}.Interface().(int64)
    if !ok { // Might be a uint64
        uint64{{camelCase .JsonFieldName}}, ok := reflect{{camelCase .JsonFieldName}}.Interface().(uint64)
        if !ok {
            return nil, fmt.Errorf("error converting %v to int64 or uint64", reflect{{camelCase .JsonFieldName}}.Interface())
        }
        int64{{camelCase .JsonFieldName}} = int64(uint64{{camelCase .JsonFieldName}})
    }
    resource.{{camelCase .JsonFieldName}} = &int64{{camelCase .JsonFieldName}}
    {{else}}resource.{{camelCase .JsonFieldName}} = &attr{{camelCase .JsonFieldName}}
    {{end}}}
    {{else if eq "[]string" .Schema.GoType}}//Leaf list handling{{$lll := len "leaf-list-"}}
    reflect{{camelCase .JsonFieldName}}, err := utils.FindModelPluginObject(d.device, "{{$tn}}{{slice .JsonFieldName $lll | ucFirst}}", params...)
    if err != nil {
        return nil, err
    }
    asArray{{camelCase .JsonFieldName}} := reflect{{camelCase .JsonFieldName}}.Interface().([]string)
    resource.{{camelCase .JsonFieldName}} = &asArray{{camelCase .JsonFieldName}}
    {{else}}//Handle object
    attr{{camelCase .JsonFieldName}}, err := d.to{{camelCase .Schema.GoType}}(params...)
    if err != nil {
        return nil, err
    }
    resource.{{camelCase .JsonFieldName}} = attr{{camelCase .JsonFieldName}}
    {{end}}
    {{end}}

    return resource, nil
}
{{end}}
{{end}}