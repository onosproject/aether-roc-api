// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

import 	(
    "github.com/onosproject/aether-roc-api/pkg/utils"
   	"github.com/onosproject/aether-roc-api/pkg/utils"
    liberrors "github.com/onosproject/onos-lib-go/pkg/errors"
   	"github.com/openconfig/gnmi/proto/gnmi"
   	"regexp"
   	"reflect"
)
var re *regexp.Regexp = regexp.MustCompile(`[A-Z][^A-Z]*`)

{{/* Range over the types - the only variables for each Type are .TypeName and .JsonName */}}
{{range .Types}}
{{/* find the starting 11 chars of typename, so we can ignore it if it starts with 'RequestBody' or 'AdditionalP' or 'Enterprise-'  */}}
{{$elevenchars := .TypeName}}{{$ltn := len .TypeName}}{{if lt 11 $ltn}}{{$elevenchars = slice .TypeName 0 11}}{{end}}

{{/* take the typename and pad it to the left, so we can see if it ends in 'List' */}}
{{$tnp := printf "%100s" .TypeName}}{{$last4chars := slice $tnp 96}}{{$tnbase := slice $tnp 0 96}}

{{- if printf "RequestBody" | eq $elevenchars}}//Ignoring {{.TypeName}}
{{else if printf "AdditionalP" | eq $elevenchars}}//Ignoring {{.TypeName}}
{{else if eq $elevenchars "Enterprise-"}}//Ignoring Enterprise-Id
{{else if printf "List" | eq $last4chars}}{{/* if name ends in 'List' */}}
// {{printf "EncodeToGnmi%s" .TypeName}} converts OAPI List to gNMI List.
func {{printf "EncodeToGnmi%s" .TypeName}}(
    jsonObj *types.{{camelCase .JsonName}}, needKey bool, removeIndex bool, enterpriseId types.EnterpriseId, parentPath string, params ...string) (
    []*gnmi.Update, error) {

	updates := make([]*gnmi.Update, 0)
	for _, childObj := range *jsonObj {
		childObj := childObj //Pinning
		allParams := make([]string, len(params))
		copy(allParams, params)
		allParams = append(allParams, "unknown_id")

{{/* the white space deletion does not happen properly on text strings hence we have the following hack, which is fixed by 'sed' after template generation  */ -}}
		newUpdates, err := {{"EncodeToGnmi" }} >!
{{- $tnbase}}(&childObj, true, removeIndex, enterpriseId, fmt.Sprintf("%s/{unknown_key}", parentPath), allParams...)
		if err != nil {
			return nil, err
		}
		updates = append(updates, newUpdates...)
	}

	return updates, nil
}
{{else}}{{/* if name does not end in list and is not ignored */}}
// {{printf "EncodeToGnmi%s" .TypeName}} converts OAPI to gNMI.{{$tn := .TypeName}}
func {{printf "EncodeToGnmi%s" .TypeName}}(
    jsonObj *types.{{camelCase .JsonName}}, needKey bool, removeIndex bool, enterpriseId types.EnterpriseId, parentPath string, params ...string) (
    []*gnmi.Update, error) {

	unchangedAttrs, tgt := utils.CheckForAdditionalProps(jsonObj)
	if tgt != nil {
		enterpriseId = types.EnterpriseId(*tgt)
	}
	_ = len(unchangedAttrs)

	updates := make([]*gnmi.Update, 0)
    mp := externalRef0.Device{}
    // For when the encode is called on the top level object
    if len(params) == 1 && strings.HasSuffix(parentPath, params[0]) {
        parentPath = strings.Replace(parentPath, params[0], fmt.Sprintf("{%s}", params[0]), 1)
    }

	{{range .Schema.Properties}}
	{{- $twoChars := slice .Schema.GoType 0 2}}
    // Property: {{.JsonFieldName}} {{.Schema.GoType}}
    {{- $isArray := eq "[]" $twoChars -}}
    {{- $objType := slice .Schema.GoType 2 -}}
    {{- $isString := eq "string" .Schema.GoType -}}
    {{- $isListKey := eq "ListKey" .Schema.GoType -}}
    {{- $isBool := eq "bool" .Schema.GoType -}}
    {{- $isInt := eq "int" .Schema.GoType -}}
    {{- $isInt32 := eq "int32" .Schema.GoType -}}
    {{- $isInt64 := eq "int64" .Schema.GoType -}}

    {{/* Some attributes are mandatory if in the 'required' list */}}
    {{if not .Required -}}
    if jsonObj.{{camelCase .JsonFieldName}} != nil { // Optional leaf
    {{- else -}}
    _, unchanged{{camelCase .JsonFieldName}} := unchangedAttrs["{{.JsonFieldName}}"]
    if !unchanged{{camelCase .JsonFieldName}} { // Mandatory leaf
    {{- end}}
	    {{if len .Schema.EnumValues | lt 0}}
            params{{camelCase .JsonFieldName}} := make([]string, len(params))
            copy(params{{camelCase .JsonFieldName}}, params)
            params{{camelCase .JsonFieldName}} = append(params{{camelCase .JsonFieldName}}, (string)(*jsonObj.{{camelCase .JsonFieldName}}))
            mpField, err := utils.CreateModelPluginObject(&mp, "{{$tn}}{{camelCase .JsonFieldName}}", params{{camelCase .JsonFieldName}}...)
            if err != nil {
                return nil, err
            }
            update, err := utils.UpdateForElement(mpField,
            fmt.Sprintf("%s%s", parentPath, "/{{lower .JsonFieldName}}"), params{{camelCase .JsonFieldName}}...)
            if err != nil {
                return nil, err
            }
            if enterpriseId != "" {
                update.Path.Target = string(enterpriseId)
            }
            updates = append(updates, update)
        {{else if $isString | or $isBool | or $isInt | or $isInt32 | or $isInt64 | or $isListKey}}
        params{{camelCase .JsonFieldName}} := make([]string, len(params))
        copy(params{{camelCase .JsonFieldName}}, params)
        stringVal{{camelCase .JsonFieldName}} := fmt.Sprintf("%v", {{if not .Required}}*{{end}}jsonObj.{{camelCase .JsonFieldName}})
        {{if .Required | and $isString}}if stringVal{{camelCase .JsonFieldName}} == "" {
            return nil, liberrors.NewInvalid("mandatory field '{{.JsonFieldName}}' of '{{$tn}}' must be provided or added to 'unchanged'")
        }{{end}}
        params{{camelCase .JsonFieldName}} = append(params{{camelCase .JsonFieldName}}, stringVal{{camelCase .JsonFieldName}})
        mpField, err := utils.CreateModelPluginObject(&mp, "{{$tn}}{{camelCase .JsonFieldName}}", params{{camelCase .JsonFieldName}}...)
        if err != nil {
            return nil, err
        }
        update, err := utils.UpdateForElement(mpField, fmt.Sprintf("%s%s", parentPath, "/{{lower .JsonFieldName}}"), params{{camelCase .JsonFieldName}}...)
        if err != nil {
            return nil, err
        }
        if enterpriseId != "" {
            update.Path.Target = string(enterpriseId)
        }
        updates = append(updates, update)
        {{else if printf "[]string" | eq .Schema.GoType}}{{$jfn := camelCase .JsonFieldName}}
        params{{$jfn}} := make([]string, len(params))
        copy(params{{$jfn}}, params)
        params{{$jfn}} = append(params{{$jfn}}, *jsonObj.{{camelCase .JsonFieldName}}...)
        mpField, err := utils.CreateModelPluginObject(&mp, "{{$tn}}{{slice $jfn 8| ucFirst}}", params{{$jfn}}...)
        if err != nil {
            return nil, err
        }
        update, err := utils.UpdateForElement(mpField, fmt.Sprintf("%s%s", parentPath, "/{{slice $jfn 8| lower}}"), params{{$jfn}}...)
        if err != nil {
            return nil, err
        }
        if enterpriseId != "" {
            update.Path.Target = string(enterpriseId)
        }
        updates = append(updates, update)
        {{else if eq $isArray false}}{{$suffix := .JsonFieldName }}
	    update, err := EncodeToGnmi{{.Schema.GoType}}(
	        jsonObj.{{camelCase .JsonFieldName | title}}, false, removeIndex, enterpriseId,
	        fmt.Sprintf("%s/%s", parentPath, "{{lower $suffix}}"), params...)
        if err != nil {
            return nil, err
        }
        updates = append(updates, update...){{end}}{{if .Required}}
    {{end}}
	}{{end}}
	{{range .Schema.Properties}}{{$twoChars := slice .Schema.GoType 0 2}}{{$isArray := eq "[]" $twoChars}}{{$objType := slice .Schema.GoType 2}}
	    {{if ne $objType "string" | and $isArray}}
        // Property: {{.JsonFieldName}} {{.Schema.GoType}}
        if jsonObj.{{camelCase .JsonFieldName | title}} != nil {
            for _, item := range *jsonObj.{{camelCase .JsonFieldName | title}} {
                item := item //Pinning
                params{{camelCase .JsonFieldName}} := make([]string, len(params))
                copy(params{{camelCase .JsonFieldName}}, params)
                params{{camelCase .JsonFieldName}} = append(params{{camelCase .JsonFieldName}}, "unknown_id")
                updates{{camelCase .JsonFieldName}}, err :=
                    EncodeToGnmi{{$objType}}(&item, true, removeIndex, enterpriseId,
                    fmt.Sprintf("%s/%s/{unknown_key}", parentPath, "{{lower .JsonFieldName}}"), params{{camelCase .JsonFieldName}}...)
                if err != nil {
                     return nil, err
                }
                updates = append(updates, updates{{camelCase .JsonFieldName}}...)
            }
        }
        {{end}}
    {{end}}
    if needKey || removeIndex {
        reflectKey, err := utils.FindModelPluginObject(mp, "{{$tn}}", params...)
        if err != nil {
            return nil, err
        }
        if reflectKey == nil {
            return updates, nil
        }
        reflectType := reflectKey.Type()
        reflect2 := reflect.New(reflectType) // Needed so the type can be read to extract list
        reflect2.Elem().Set(*reflectKey)
        keyMap, err := utils.ExtractGnmiListKeyMap(reflect2.Interface())
        if err != nil {
            return nil, err
        }
        indices := make([]int, 0)
        for k, v := range keyMap {
            // parentPath = fmt.Sprintf("%s/{%s}", parentPath, k)
            for i, u := range updates {
                if needKey {
                    if err := utils.ReplaceUnknownKey(u, k, v, utils.UnknownKey, keyMap); err != nil {
                        return nil, err
                    }
                }
                if removeIndex {
                    lastElem := u.Path.Elem[len(u.Path.Elem) - 1]
                    if k == lastElem.Name {
                        indices = append(indices, i)
                    }
                }
            }
        }
        // Only remove the index field if it's not the only field
        if removeIndex && len(indices) > 0  && len(updates) > 1 {
            updates = utils.RemoveIndexAttributes(updates, indices)
        }
    }
	return updates, nil
}

{{end}}
{{end}}

