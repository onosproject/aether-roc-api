// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0Æ’

{{range .Types}}{{$elevenchars := .TypeName}}{{if len .TypeName | lt 11 }}{{$elevenchars = slice .TypeName 0 11}}{{end}}
{{if printf "RequestBody" | eq $elevenchars}}//Ignoring {{.TypeName}}
{{else if printf "AdditionalP" | eq $elevenchars}}//Ignoring {{.TypeName}}
{{else if printf "EnterpriseI" | eq $elevenchars}}//Ignoring {{.TypeName}}
{{else}}
// {{printf "gnmiDelete%s" .TypeName}} deletes an instance of {{.JsonName}}.
func (i *ServerImpl) {{printf "gnmiDelete%s" .TypeName}}(ctx context.Context,
    openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

    // check to see if the item exists before deleting it
    response, err := i.{{printf "gnmiGet%s" .TypeName}}(ctx, openApiPath, enterpriseId, args...)
    	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
    		log.Infof("Item at path %s with args %v not found", openApiPath, args)
    		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
    	}

    gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
    if err != nil {
        return nil, err
    }
    log.Infof("gnmiSetRequest %s", gnmiSet.String())
    gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
    if err != nil {
        return nil, err
    }

    return utils.ExtractResponseID(gnmiSetResponse)
}

// {{printf "gnmiGet%s" .TypeName}} returns an instance of {{.JsonName}}.
func (i *ServerImpl) {{printf "gnmiGet%s" .TypeName}}(ctx context.Context,
    openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.{{.TypeName}}, error) {

    gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
    if err != nil {
        return nil, err
    }
    log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
    var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
	    return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
	    device: gnmiResponse,
	}

    return mpd.{{printf "to%s" .TypeName}}(args...)
}

// {{printf "gnmiPost%s" .TypeName}} adds an instance of {{.JsonName}}.
func (i *ServerImpl) {{printf "gnmiPost%s" .TypeName}}(ctx context.Context, body []byte,
    openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

    {{ if eq .JsonName "enterpriseId"}}return nil, fmt.Errorf("Not implemented")
    {{else}}
	jsonObj := new(externalRef1.{{camelCase .JsonName}})
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.{{.JsonName}} %v", err)
	}
	gnmiUpdates, err := EncodeToGnmi{{camelCase .JsonName}}(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.{{.TypeName}} to gNMI %v", err)
	}
    gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
    if err != nil {
        return nil, err
    }
    log.Infof("gnmiSetRequest %s", gnmiSet.String())
    gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
    if err != nil {
        return nil, err
    }
    return utils.ExtractResponseID(gnmiSetResponse){{end}}
}

{{end}}
{{end}}
type Translator interface {
    {{range .Types}}{{$elevenchars := .TypeName}}{{if len .TypeName | lt 11 }}{{$elevenchars = slice .TypeName 0 11}}{{end}}{{if printf "RequestBody" | ne $elevenchars}}
    {{printf "to%s" .TypeName}}(args ...string) ({{printf "*externalRef1.%s" .TypeName}}, error){{end}}{{end}}
}
