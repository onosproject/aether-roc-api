import 	(
    "github.com/onosproject/aether-roc-api/pkg/utils"
    "github.com/onosproject/aether-roc-api/pkg/southbound"
   	"github.com/onosproject/aether-roc-api/pkg/utils"

    "github.com/onosproject/onos-lib-go/pkg/logging"
   	"reflect"
)

{{range .Types}}{{$elevenchars := .TypeName}}{{if len .TypeName | lt 11 }}{{$elevenchars = slice .TypeName 0 11}}{{end}}
{{if printf "RequestBody" | eq $elevenchars}}//Ignoring {{.TypeName}}
{{else if printf "AdditionalP" | eq $elevenchars}}//Ignoring {{.TypeName}}
{{else}}
// {{printf "gnmiDelete%s" .TypeName}} deletes an instance of {{.JsonName}}.
func (i *ServerImpl) {{printf "gnmiDelete%s" .TypeName}}(ctx context.Context,
    openApiPath string, target types.Target, args ...string) error {

    gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
    if err != nil {
        return err
    }
    log.Infof("gnmiSetRequest %s", gnmiSet.String())
    _, err = i.GnmiClient.Set(ctx, gnmiSet)

    return err
}

// {{printf "gnmiGet%s" .TypeName}} returns an instance of {{.JsonName}}.
func (i *ServerImpl) {{printf "gnmiGet%s" .TypeName}}(ctx context.Context,
    openApiPath string, target types.Target, args ...string) (*types.{{.TypeName}}, error) {

    gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
    if err != nil {
        return nil, err
    }
    log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiJsonVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiJsonVal == nil {
	    return nil, nil
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
    var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
	    return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
	    device: gnmiResponse,
	}

    return mpd.{{printf "to%s" .TypeName}}(args...)
}

// {{printf "gnmiPost%s" .TypeName}} adds an instance of {{.JsonName}}.
func (i *ServerImpl) {{printf "gnmiPost%s" .TypeName}}(ctx context.Context, body []byte,
    openApiPath string, target types.Target, args ...string) (*string, error) {

    {{ if eq .JsonName "target"}}return nil, fmt.Errorf("Not implemented")
    {{else}}
	jsonObj := new(types.{{camelCase .JsonName}})
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as types.{{.JsonName}} %v", err)
	}
	gnmiUpdates, err := EncodeToGnmi{{camelCase .JsonName}}(jsonObj, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert types.{{.TypeName}} to gNMI %v", err)
	}
    gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
    if err != nil {
        return nil, err
    }
    log.Infof("gnmiSetRequest %s", gnmiSet.String())
    gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
    if err != nil {
        return nil, fmt.Errorf(" %v", err)
    }
    return utils.ExtractExtension100(gnmiSetResponse), nil{{end}}
}

{{end}}
{{end}}
type Translator interface {
    {{range .Types}}{{$elevenchars := .TypeName}}{{if len .TypeName | lt 11 }}{{$elevenchars = slice .TypeName 0 11}}{{end}}{{if printf "RequestBody" | ne $elevenchars}}
    {{printf "to%s" .TypeName}}(args ...string) ({{printf "*types.%s" .TypeName}}, error){{end}}{{end}}
}
