// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"O9yiVyet9/f3/xsAAP//OosrNS8KAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
