// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"cyYBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
