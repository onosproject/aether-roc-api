// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
