// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
