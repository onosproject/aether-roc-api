// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"reflect"

	"github.com/labstack/echo/v4"
	externalRef0 "github.com/onosproject/aether-roc-api/pkg/aether_4_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/southbound"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	externalRef1 "github.com/onosproject/config-models/modelplugin/aether-4.0.0/aether_4_0_0"
	"github.com/onosproject/onos-lib-go/pkg/logging"
	"github.com/openconfig/gnmi/proto/gnmi"
)

//Ignoring AdditionalPropertyTarget

//Ignoring AdditionalPropertyUnchanged

// gnmiDeleteApplication deletes an instance of Application.
func (i *ServerImpl) gnmiDeleteApplication(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetApplication returns an instance of Application.
func (i *ServerImpl) gnmiGetApplication(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.Application, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toApplication(args...)
}

// gnmiPostApplication adds an instance of Application.
func (i *ServerImpl) gnmiPostApplication(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.Application)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Application %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApplication(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.Application to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteApplicationApplication deletes an instance of Application_Application.
func (i *ServerImpl) gnmiDeleteApplicationApplication(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetApplicationApplication returns an instance of Application_Application.
func (i *ServerImpl) gnmiGetApplicationApplication(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.ApplicationApplication, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toApplicationApplication(args...)
}

// gnmiPostApplicationApplication adds an instance of Application_Application.
func (i *ServerImpl) gnmiPostApplicationApplication(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.ApplicationApplication)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Application_Application %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApplicationApplication(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.ApplicationApplication to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteApplicationApplicationEndpoint deletes an instance of Application_Application_Endpoint.
func (i *ServerImpl) gnmiDeleteApplicationApplicationEndpoint(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetApplicationApplicationEndpoint returns an instance of Application_Application_Endpoint.
func (i *ServerImpl) gnmiGetApplicationApplicationEndpoint(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.ApplicationApplicationEndpoint, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toApplicationApplicationEndpoint(args...)
}

// gnmiPostApplicationApplicationEndpoint adds an instance of Application_Application_Endpoint.
func (i *ServerImpl) gnmiPostApplicationApplicationEndpoint(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.ApplicationApplicationEndpoint)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Application_Application_Endpoint %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApplicationApplicationEndpoint(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.ApplicationApplicationEndpoint to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteApplicationApplicationEndpointMbr deletes an instance of Application_Application_Endpoint_Mbr.
func (i *ServerImpl) gnmiDeleteApplicationApplicationEndpointMbr(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetApplicationApplicationEndpointMbr returns an instance of Application_Application_Endpoint_Mbr.
func (i *ServerImpl) gnmiGetApplicationApplicationEndpointMbr(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.ApplicationApplicationEndpointMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toApplicationApplicationEndpointMbr(args...)
}

// gnmiPostApplicationApplicationEndpointMbr adds an instance of Application_Application_Endpoint_Mbr.
func (i *ServerImpl) gnmiPostApplicationApplicationEndpointMbr(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.ApplicationApplicationEndpointMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Application_Application_Endpoint_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApplicationApplicationEndpointMbr(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.ApplicationApplicationEndpointMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteConnectivityService deletes an instance of Connectivity-service.
func (i *ServerImpl) gnmiDeleteConnectivityService(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetConnectivityService returns an instance of Connectivity-service.
func (i *ServerImpl) gnmiGetConnectivityService(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.ConnectivityService, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toConnectivityService(args...)
}

// gnmiPostConnectivityService adds an instance of Connectivity-service.
func (i *ServerImpl) gnmiPostConnectivityService(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.ConnectivityService)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Connectivity-service %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiConnectivityService(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.ConnectivityService to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteConnectivityServiceConnectivityService deletes an instance of Connectivity-service_Connectivity-service.
func (i *ServerImpl) gnmiDeleteConnectivityServiceConnectivityService(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetConnectivityServiceConnectivityService returns an instance of Connectivity-service_Connectivity-service.
func (i *ServerImpl) gnmiGetConnectivityServiceConnectivityService(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.ConnectivityServiceConnectivityService, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toConnectivityServiceConnectivityService(args...)
}

// gnmiPostConnectivityServiceConnectivityService adds an instance of Connectivity-service_Connectivity-service.
func (i *ServerImpl) gnmiPostConnectivityServiceConnectivityService(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.ConnectivityServiceConnectivityService)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Connectivity-service_Connectivity-service %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiConnectivityServiceConnectivityService(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.ConnectivityServiceConnectivityService to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteDeviceGroup deletes an instance of Device-group.
func (i *ServerImpl) gnmiDeleteDeviceGroup(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetDeviceGroup returns an instance of Device-group.
func (i *ServerImpl) gnmiGetDeviceGroup(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.DeviceGroup, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toDeviceGroup(args...)
}

// gnmiPostDeviceGroup adds an instance of Device-group.
func (i *ServerImpl) gnmiPostDeviceGroup(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.DeviceGroup)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Device-group %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiDeviceGroup(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.DeviceGroup to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteDeviceGroupDeviceGroup deletes an instance of Device-group_Device-group.
func (i *ServerImpl) gnmiDeleteDeviceGroupDeviceGroup(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetDeviceGroupDeviceGroup returns an instance of Device-group_Device-group.
func (i *ServerImpl) gnmiGetDeviceGroupDeviceGroup(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.DeviceGroupDeviceGroup, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toDeviceGroupDeviceGroup(args...)
}

// gnmiPostDeviceGroupDeviceGroup adds an instance of Device-group_Device-group.
func (i *ServerImpl) gnmiPostDeviceGroupDeviceGroup(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.DeviceGroupDeviceGroup)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Device-group_Device-group %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiDeviceGroupDeviceGroup(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.DeviceGroupDeviceGroup to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteDeviceGroupDeviceGroupDevice deletes an instance of Device-group_Device-group_Device.
func (i *ServerImpl) gnmiDeleteDeviceGroupDeviceGroupDevice(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetDeviceGroupDeviceGroupDevice returns an instance of Device-group_Device-group_Device.
func (i *ServerImpl) gnmiGetDeviceGroupDeviceGroupDevice(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.DeviceGroupDeviceGroupDevice, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toDeviceGroupDeviceGroupDevice(args...)
}

// gnmiPostDeviceGroupDeviceGroupDevice adds an instance of Device-group_Device-group_Device.
func (i *ServerImpl) gnmiPostDeviceGroupDeviceGroupDevice(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.DeviceGroupDeviceGroupDevice)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Device-group_Device-group_Device %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiDeviceGroupDeviceGroupDevice(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.DeviceGroupDeviceGroupDevice to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteDeviceGroupDeviceGroupDeviceMbr deletes an instance of Device-group_Device-group_Device_Mbr.
func (i *ServerImpl) gnmiDeleteDeviceGroupDeviceGroupDeviceMbr(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetDeviceGroupDeviceGroupDeviceMbr returns an instance of Device-group_Device-group_Device_Mbr.
func (i *ServerImpl) gnmiGetDeviceGroupDeviceGroupDeviceMbr(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.DeviceGroupDeviceGroupDeviceMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toDeviceGroupDeviceGroupDeviceMbr(args...)
}

// gnmiPostDeviceGroupDeviceGroupDeviceMbr adds an instance of Device-group_Device-group_Device_Mbr.
func (i *ServerImpl) gnmiPostDeviceGroupDeviceGroupDeviceMbr(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.DeviceGroupDeviceGroupDeviceMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Device-group_Device-group_Device_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiDeviceGroupDeviceGroupDeviceMbr(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.DeviceGroupDeviceGroupDeviceMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteDeviceGroupDeviceGroupImsis deletes an instance of Device-group_Device-group_Imsis.
func (i *ServerImpl) gnmiDeleteDeviceGroupDeviceGroupImsis(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetDeviceGroupDeviceGroupImsis returns an instance of Device-group_Device-group_Imsis.
func (i *ServerImpl) gnmiGetDeviceGroupDeviceGroupImsis(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.DeviceGroupDeviceGroupImsis, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toDeviceGroupDeviceGroupImsis(args...)
}

// gnmiPostDeviceGroupDeviceGroupImsis adds an instance of Device-group_Device-group_Imsis.
func (i *ServerImpl) gnmiPostDeviceGroupDeviceGroupImsis(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.DeviceGroupDeviceGroupImsis)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Device-group_Device-group_Imsis %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiDeviceGroupDeviceGroupImsis(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.DeviceGroupDeviceGroupImsis to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterprise deletes an instance of Enterprise.
func (i *ServerImpl) gnmiDeleteEnterprise(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterprise returns an instance of Enterprise.
func (i *ServerImpl) gnmiGetEnterprise(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.Enterprise, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterprise(args...)
}

// gnmiPostEnterprise adds an instance of Enterprise.
func (i *ServerImpl) gnmiPostEnterprise(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.Enterprise)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Enterprise %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterprise(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.Enterprise to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterpriseEnterprise deletes an instance of Enterprise_Enterprise.
func (i *ServerImpl) gnmiDeleteEnterpriseEnterprise(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterpriseEnterprise returns an instance of Enterprise_Enterprise.
func (i *ServerImpl) gnmiGetEnterpriseEnterprise(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.EnterpriseEnterprise, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterpriseEnterprise(args...)
}

// gnmiPostEnterpriseEnterprise adds an instance of Enterprise_Enterprise.
func (i *ServerImpl) gnmiPostEnterpriseEnterprise(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.EnterpriseEnterprise)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Enterprise_Enterprise %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterpriseEnterprise(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.EnterpriseEnterprise to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteEnterpriseEnterpriseConnectivityService deletes an instance of Enterprise_Enterprise_Connectivity-service.
func (i *ServerImpl) gnmiDeleteEnterpriseEnterpriseConnectivityService(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetEnterpriseEnterpriseConnectivityService returns an instance of Enterprise_Enterprise_Connectivity-service.
func (i *ServerImpl) gnmiGetEnterpriseEnterpriseConnectivityService(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.EnterpriseEnterpriseConnectivityService, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toEnterpriseEnterpriseConnectivityService(args...)
}

// gnmiPostEnterpriseEnterpriseConnectivityService adds an instance of Enterprise_Enterprise_Connectivity-service.
func (i *ServerImpl) gnmiPostEnterpriseEnterpriseConnectivityService(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.EnterpriseEnterpriseConnectivityService)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Enterprise_Enterprise_Connectivity-service %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiEnterpriseEnterpriseConnectivityService(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.EnterpriseEnterpriseConnectivityService to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteIpDomain deletes an instance of Ip-domain.
func (i *ServerImpl) gnmiDeleteIpDomain(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetIpDomain returns an instance of Ip-domain.
func (i *ServerImpl) gnmiGetIpDomain(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.IpDomain, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toIpDomain(args...)
}

// gnmiPostIpDomain adds an instance of Ip-domain.
func (i *ServerImpl) gnmiPostIpDomain(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.IpDomain)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Ip-domain %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiIpDomain(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.IpDomain to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteIpDomainIpDomain deletes an instance of Ip-domain_Ip-domain.
func (i *ServerImpl) gnmiDeleteIpDomainIpDomain(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetIpDomainIpDomain returns an instance of Ip-domain_Ip-domain.
func (i *ServerImpl) gnmiGetIpDomainIpDomain(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.IpDomainIpDomain, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toIpDomainIpDomain(args...)
}

// gnmiPostIpDomainIpDomain adds an instance of Ip-domain_Ip-domain.
func (i *ServerImpl) gnmiPostIpDomainIpDomain(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.IpDomainIpDomain)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Ip-domain_Ip-domain %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiIpDomainIpDomain(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.IpDomainIpDomain to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSite deletes an instance of Site.
func (i *ServerImpl) gnmiDeleteSite(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSite returns an instance of Site.
func (i *ServerImpl) gnmiGetSite(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.Site, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSite(args...)
}

// gnmiPostSite adds an instance of Site.
func (i *ServerImpl) gnmiPostSite(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.Site)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Site %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSite(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.Site to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSite deletes an instance of Site_Site.
func (i *ServerImpl) gnmiDeleteSiteSite(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSite returns an instance of Site_Site.
func (i *ServerImpl) gnmiGetSiteSite(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.SiteSite, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSite(args...)
}

// gnmiPostSiteSite adds an instance of Site_Site.
func (i *ServerImpl) gnmiPostSiteSite(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SiteSite)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Site_Site %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSite(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SiteSite to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSiteImsiDefinition deletes an instance of Site_Site_Imsi-definition.
func (i *ServerImpl) gnmiDeleteSiteSiteImsiDefinition(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSiteImsiDefinition returns an instance of Site_Site_Imsi-definition.
func (i *ServerImpl) gnmiGetSiteSiteImsiDefinition(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.SiteSiteImsiDefinition, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSiteImsiDefinition(args...)
}

// gnmiPostSiteSiteImsiDefinition adds an instance of Site_Site_Imsi-definition.
func (i *ServerImpl) gnmiPostSiteSiteImsiDefinition(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SiteSiteImsiDefinition)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Site_Site_Imsi-definition %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSiteImsiDefinition(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SiteSiteImsiDefinition to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSiteMonitoring deletes an instance of Site_Site_Monitoring.
func (i *ServerImpl) gnmiDeleteSiteSiteMonitoring(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSiteMonitoring returns an instance of Site_Site_Monitoring.
func (i *ServerImpl) gnmiGetSiteSiteMonitoring(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.SiteSiteMonitoring, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSiteMonitoring(args...)
}

// gnmiPostSiteSiteMonitoring adds an instance of Site_Site_Monitoring.
func (i *ServerImpl) gnmiPostSiteSiteMonitoring(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SiteSiteMonitoring)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Site_Site_Monitoring %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSiteMonitoring(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SiteSiteMonitoring to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSiteMonitoringEdgeDevice deletes an instance of Site_Site_Monitoring_Edge-device.
func (i *ServerImpl) gnmiDeleteSiteSiteMonitoringEdgeDevice(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSiteMonitoringEdgeDevice returns an instance of Site_Site_Monitoring_Edge-device.
func (i *ServerImpl) gnmiGetSiteSiteMonitoringEdgeDevice(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.SiteSiteMonitoringEdgeDevice, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSiteMonitoringEdgeDevice(args...)
}

// gnmiPostSiteSiteMonitoringEdgeDevice adds an instance of Site_Site_Monitoring_Edge-device.
func (i *ServerImpl) gnmiPostSiteSiteMonitoringEdgeDevice(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SiteSiteMonitoringEdgeDevice)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Site_Site_Monitoring_Edge-device %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSiteMonitoringEdgeDevice(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SiteSiteMonitoringEdgeDevice to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSiteSmallCell deletes an instance of Site_Site_Small-cell.
func (i *ServerImpl) gnmiDeleteSiteSiteSmallCell(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSiteSmallCell returns an instance of Site_Site_Small-cell.
func (i *ServerImpl) gnmiGetSiteSiteSmallCell(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.SiteSiteSmallCell, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSiteSmallCell(args...)
}

// gnmiPostSiteSiteSmallCell adds an instance of Site_Site_Small-cell.
func (i *ServerImpl) gnmiPostSiteSiteSmallCell(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.SiteSiteSmallCell)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Site_Site_Small-cell %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSiteSmallCell(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.SiteSiteSmallCell to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteTemplate deletes an instance of Template.
func (i *ServerImpl) gnmiDeleteTemplate(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetTemplate returns an instance of Template.
func (i *ServerImpl) gnmiGetTemplate(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.Template, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toTemplate(args...)
}

// gnmiPostTemplate adds an instance of Template.
func (i *ServerImpl) gnmiPostTemplate(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.Template)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Template %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTemplate(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.Template to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteTemplateTemplate deletes an instance of Template_Template.
func (i *ServerImpl) gnmiDeleteTemplateTemplate(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetTemplateTemplate returns an instance of Template_Template.
func (i *ServerImpl) gnmiGetTemplateTemplate(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.TemplateTemplate, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toTemplateTemplate(args...)
}

// gnmiPostTemplateTemplate adds an instance of Template_Template.
func (i *ServerImpl) gnmiPostTemplateTemplate(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.TemplateTemplate)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Template_Template %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTemplateTemplate(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.TemplateTemplate to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteTemplateTemplateSlice deletes an instance of Template_Template_Slice.
func (i *ServerImpl) gnmiDeleteTemplateTemplateSlice(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetTemplateTemplateSlice returns an instance of Template_Template_Slice.
func (i *ServerImpl) gnmiGetTemplateTemplateSlice(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.TemplateTemplateSlice, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toTemplateTemplateSlice(args...)
}

// gnmiPostTemplateTemplateSlice adds an instance of Template_Template_Slice.
func (i *ServerImpl) gnmiPostTemplateTemplateSlice(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.TemplateTemplateSlice)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Template_Template_Slice %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTemplateTemplateSlice(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.TemplateTemplateSlice to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteTemplateTemplateSliceMbr deletes an instance of Template_Template_Slice_Mbr.
func (i *ServerImpl) gnmiDeleteTemplateTemplateSliceMbr(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetTemplateTemplateSliceMbr returns an instance of Template_Template_Slice_Mbr.
func (i *ServerImpl) gnmiGetTemplateTemplateSliceMbr(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.TemplateTemplateSliceMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toTemplateTemplateSliceMbr(args...)
}

// gnmiPostTemplateTemplateSliceMbr adds an instance of Template_Template_Slice_Mbr.
func (i *ServerImpl) gnmiPostTemplateTemplateSliceMbr(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.TemplateTemplateSliceMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Template_Template_Slice_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTemplateTemplateSliceMbr(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.TemplateTemplateSliceMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteTrafficClass deletes an instance of Traffic-class.
func (i *ServerImpl) gnmiDeleteTrafficClass(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetTrafficClass returns an instance of Traffic-class.
func (i *ServerImpl) gnmiGetTrafficClass(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.TrafficClass, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toTrafficClass(args...)
}

// gnmiPostTrafficClass adds an instance of Traffic-class.
func (i *ServerImpl) gnmiPostTrafficClass(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.TrafficClass)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Traffic-class %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTrafficClass(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.TrafficClass to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteTrafficClassTrafficClass deletes an instance of Traffic-class_Traffic-class.
func (i *ServerImpl) gnmiDeleteTrafficClassTrafficClass(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetTrafficClassTrafficClass returns an instance of Traffic-class_Traffic-class.
func (i *ServerImpl) gnmiGetTrafficClassTrafficClass(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.TrafficClassTrafficClass, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toTrafficClassTrafficClass(args...)
}

// gnmiPostTrafficClassTrafficClass adds an instance of Traffic-class_Traffic-class.
func (i *ServerImpl) gnmiPostTrafficClassTrafficClass(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.TrafficClassTrafficClass)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Traffic-class_Traffic-class %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTrafficClassTrafficClass(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.TrafficClassTrafficClass to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteUpf deletes an instance of Upf.
func (i *ServerImpl) gnmiDeleteUpf(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetUpf returns an instance of Upf.
func (i *ServerImpl) gnmiGetUpf(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.Upf, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toUpf(args...)
}

// gnmiPostUpf adds an instance of Upf.
func (i *ServerImpl) gnmiPostUpf(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.Upf)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Upf %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiUpf(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.Upf to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteUpfUpf deletes an instance of Upf_Upf.
func (i *ServerImpl) gnmiDeleteUpfUpf(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetUpfUpf returns an instance of Upf_Upf.
func (i *ServerImpl) gnmiGetUpfUpf(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.UpfUpf, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toUpfUpf(args...)
}

// gnmiPostUpfUpf adds an instance of Upf_Upf.
func (i *ServerImpl) gnmiPostUpfUpf(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.UpfUpf)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Upf_Upf %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiUpfUpf(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.UpfUpf to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteVcs deletes an instance of Vcs.
func (i *ServerImpl) gnmiDeleteVcs(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetVcs returns an instance of Vcs.
func (i *ServerImpl) gnmiGetVcs(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.Vcs, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toVcs(args...)
}

// gnmiPostVcs adds an instance of Vcs.
func (i *ServerImpl) gnmiPostVcs(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.Vcs)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Vcs %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiVcs(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.Vcs to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteVcsVcs deletes an instance of Vcs_Vcs.
func (i *ServerImpl) gnmiDeleteVcsVcs(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetVcsVcs returns an instance of Vcs_Vcs.
func (i *ServerImpl) gnmiGetVcsVcs(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.VcsVcs, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toVcsVcs(args...)
}

// gnmiPostVcsVcs adds an instance of Vcs_Vcs.
func (i *ServerImpl) gnmiPostVcsVcs(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.VcsVcs)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Vcs_Vcs %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiVcsVcs(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.VcsVcs to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteVcsVcsDeviceGroup deletes an instance of Vcs_Vcs_Device-group.
func (i *ServerImpl) gnmiDeleteVcsVcsDeviceGroup(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetVcsVcsDeviceGroup returns an instance of Vcs_Vcs_Device-group.
func (i *ServerImpl) gnmiGetVcsVcsDeviceGroup(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.VcsVcsDeviceGroup, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toVcsVcsDeviceGroup(args...)
}

// gnmiPostVcsVcsDeviceGroup adds an instance of Vcs_Vcs_Device-group.
func (i *ServerImpl) gnmiPostVcsVcsDeviceGroup(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.VcsVcsDeviceGroup)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Vcs_Vcs_Device-group %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiVcsVcsDeviceGroup(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.VcsVcsDeviceGroup to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteVcsVcsFilter deletes an instance of Vcs_Vcs_Filter.
func (i *ServerImpl) gnmiDeleteVcsVcsFilter(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetVcsVcsFilter returns an instance of Vcs_Vcs_Filter.
func (i *ServerImpl) gnmiGetVcsVcsFilter(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.VcsVcsFilter, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toVcsVcsFilter(args...)
}

// gnmiPostVcsVcsFilter adds an instance of Vcs_Vcs_Filter.
func (i *ServerImpl) gnmiPostVcsVcsFilter(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.VcsVcsFilter)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Vcs_Vcs_Filter %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiVcsVcsFilter(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.VcsVcsFilter to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteVcsVcsSlice deletes an instance of Vcs_Vcs_Slice.
func (i *ServerImpl) gnmiDeleteVcsVcsSlice(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetVcsVcsSlice returns an instance of Vcs_Vcs_Slice.
func (i *ServerImpl) gnmiGetVcsVcsSlice(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.VcsVcsSlice, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toVcsVcsSlice(args...)
}

// gnmiPostVcsVcsSlice adds an instance of Vcs_Vcs_Slice.
func (i *ServerImpl) gnmiPostVcsVcsSlice(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.VcsVcsSlice)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Vcs_Vcs_Slice %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiVcsVcsSlice(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.VcsVcsSlice to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteVcsVcsSliceMbr deletes an instance of Vcs_Vcs_Slice_Mbr.
func (i *ServerImpl) gnmiDeleteVcsVcsSliceMbr(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetVcsVcsSliceMbr returns an instance of Vcs_Vcs_Slice_Mbr.
func (i *ServerImpl) gnmiGetVcsVcsSliceMbr(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.VcsVcsSliceMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toVcsVcsSliceMbr(args...)
}

// gnmiPostVcsVcsSliceMbr adds an instance of Vcs_Vcs_Slice_Mbr.
func (i *ServerImpl) gnmiPostVcsVcsSliceMbr(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	jsonObj := new(externalRef0.VcsVcsSliceMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef0.Vcs_Vcs_Slice_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiVcsVcsSliceMbr(jsonObj, false, false, target, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef0.VcsVcsSliceMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(target), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteTarget deletes an instance of target.
func (i *ServerImpl) gnmiDeleteTarget(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetTarget returns an instance of target.
func (i *ServerImpl) gnmiGetTarget(ctx context.Context,
	openApiPath string, target externalRef0.Target, args ...string) (*externalRef0.Target, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(target), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Infof("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef1.Device
	if err = externalRef1.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toTarget(args...)
}

// gnmiPostTarget adds an instance of target.
func (i *ServerImpl) gnmiPostTarget(ctx context.Context, body []byte,
	openApiPath string, target externalRef0.Target, args ...string) (*string, error) {

	return nil, fmt.Errorf("Not implemented")

}

//Ignoring RequestBodyApplication

//Ignoring RequestBodyApplicationApplication

//Ignoring RequestBodyApplicationApplicationEndpoint

//Ignoring RequestBodyApplicationApplicationEndpointMbr

//Ignoring RequestBodyConnectivityService

//Ignoring RequestBodyConnectivityServiceConnectivityService

//Ignoring RequestBodyDeviceGroup

//Ignoring RequestBodyDeviceGroupDeviceGroup

//Ignoring RequestBodyDeviceGroupDeviceGroupDevice

//Ignoring RequestBodyDeviceGroupDeviceGroupDeviceMbr

//Ignoring RequestBodyDeviceGroupDeviceGroupImsis

//Ignoring RequestBodyEnterprise

//Ignoring RequestBodyEnterpriseEnterprise

//Ignoring RequestBodyEnterpriseEnterpriseConnectivityService

//Ignoring RequestBodyIpDomain

//Ignoring RequestBodyIpDomainIpDomain

//Ignoring RequestBodySite

//Ignoring RequestBodySiteSite

//Ignoring RequestBodySiteSiteImsiDefinition

//Ignoring RequestBodySiteSiteMonitoring

//Ignoring RequestBodySiteSiteMonitoringEdgeDevice

//Ignoring RequestBodySiteSiteSmallCell

//Ignoring RequestBodyTemplate

//Ignoring RequestBodyTemplateTemplate

//Ignoring RequestBodyTemplateTemplateSlice

//Ignoring RequestBodyTemplateTemplateSliceMbr

//Ignoring RequestBodyTrafficClass

//Ignoring RequestBodyTrafficClassTrafficClass

//Ignoring RequestBodyUpf

//Ignoring RequestBodyUpfUpf

//Ignoring RequestBodyVcs

//Ignoring RequestBodyVcsVcs

//Ignoring RequestBodyVcsVcsDeviceGroup

//Ignoring RequestBodyVcsVcsFilter

//Ignoring RequestBodyVcsVcsSlice

//Ignoring RequestBodyVcsVcsSliceMbr

type Translator interface {
	toAdditionalPropertyTarget(args ...string) (*externalRef0.AdditionalPropertyTarget, error)
	toAdditionalPropertyUnchanged(args ...string) (*externalRef0.AdditionalPropertyUnchanged, error)
	toApplication(args ...string) (*externalRef0.Application, error)
	toApplicationApplication(args ...string) (*externalRef0.ApplicationApplication, error)
	toApplicationApplicationEndpoint(args ...string) (*externalRef0.ApplicationApplicationEndpoint, error)
	toApplicationApplicationEndpointMbr(args ...string) (*externalRef0.ApplicationApplicationEndpointMbr, error)
	toConnectivityService(args ...string) (*externalRef0.ConnectivityService, error)
	toConnectivityServiceConnectivityService(args ...string) (*externalRef0.ConnectivityServiceConnectivityService, error)
	toDeviceGroup(args ...string) (*externalRef0.DeviceGroup, error)
	toDeviceGroupDeviceGroup(args ...string) (*externalRef0.DeviceGroupDeviceGroup, error)
	toDeviceGroupDeviceGroupDevice(args ...string) (*externalRef0.DeviceGroupDeviceGroupDevice, error)
	toDeviceGroupDeviceGroupDeviceMbr(args ...string) (*externalRef0.DeviceGroupDeviceGroupDeviceMbr, error)
	toDeviceGroupDeviceGroupImsis(args ...string) (*externalRef0.DeviceGroupDeviceGroupImsis, error)
	toEnterprise(args ...string) (*externalRef0.Enterprise, error)
	toEnterpriseEnterprise(args ...string) (*externalRef0.EnterpriseEnterprise, error)
	toEnterpriseEnterpriseConnectivityService(args ...string) (*externalRef0.EnterpriseEnterpriseConnectivityService, error)
	toIpDomain(args ...string) (*externalRef0.IpDomain, error)
	toIpDomainIpDomain(args ...string) (*externalRef0.IpDomainIpDomain, error)
	toSite(args ...string) (*externalRef0.Site, error)
	toSiteSite(args ...string) (*externalRef0.SiteSite, error)
	toSiteSiteImsiDefinition(args ...string) (*externalRef0.SiteSiteImsiDefinition, error)
	toSiteSiteMonitoring(args ...string) (*externalRef0.SiteSiteMonitoring, error)
	toSiteSiteMonitoringEdgeDevice(args ...string) (*externalRef0.SiteSiteMonitoringEdgeDevice, error)
	toSiteSiteSmallCell(args ...string) (*externalRef0.SiteSiteSmallCell, error)
	toTemplate(args ...string) (*externalRef0.Template, error)
	toTemplateTemplate(args ...string) (*externalRef0.TemplateTemplate, error)
	toTemplateTemplateSlice(args ...string) (*externalRef0.TemplateTemplateSlice, error)
	toTemplateTemplateSliceMbr(args ...string) (*externalRef0.TemplateTemplateSliceMbr, error)
	toTrafficClass(args ...string) (*externalRef0.TrafficClass, error)
	toTrafficClassTrafficClass(args ...string) (*externalRef0.TrafficClassTrafficClass, error)
	toUpf(args ...string) (*externalRef0.Upf, error)
	toUpfUpf(args ...string) (*externalRef0.UpfUpf, error)
	toVcs(args ...string) (*externalRef0.Vcs, error)
	toVcsVcs(args ...string) (*externalRef0.VcsVcs, error)
	toVcsVcsDeviceGroup(args ...string) (*externalRef0.VcsVcsDeviceGroup, error)
	toVcsVcsFilter(args ...string) (*externalRef0.VcsVcsFilter, error)
	toVcsVcsSlice(args ...string) (*externalRef0.VcsVcsSlice, error)
	toVcsVcsSliceMbr(args ...string) (*externalRef0.VcsVcsSliceMbr, error)
	toTarget(args ...string) (*externalRef0.Target, error)
}

// Not generating param-types
// Not generating request-bodies

// Not generating additional-properties
// Not generating additional-properties
// server-interface template override

const authorization = "Authorization"

// Implement the Server Interface for access to gNMI
var log = logging.GetLogger("model_0_0_0")

// ServerImpl -
type ServerImpl struct {
	GnmiClient southbound.GnmiClient
}

// DeleteApplication impl of gNMI access at /aether/v4.0.0/{target}/application
func (i *ServerImpl) DeleteApplication(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteApplication(gnmiCtx, "/aether/v4.0.0/{target}/application", target)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteApplication")
	return ctx.JSON(http.StatusOK, response)
}

// GetApplication impl of gNMI access at /aether/v4.0.0/{target}/application
func (i *ServerImpl) GetApplication(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetApplication(gnmiCtx, "/aether/v4.0.0/{target}/application", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetApplication")
	return ctx.JSON(http.StatusOK, response)
}

// PostApplication impl of gNMI access at /aether/v4.0.0/{target}/application
func (i *ServerImpl) PostApplication(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostApplication(gnmiCtx, body, "/aether/v4.0.0/{target}/application", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostApplication")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteApplicationApplication impl of gNMI access at /aether/v4.0.0/{target}/application/application/{id}
func (i *ServerImpl) DeleteApplicationApplication(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteApplicationApplication(gnmiCtx, "/aether/v4.0.0/{target}/application/application/{id}", target, id)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteApplicationApplication")
	return ctx.JSON(http.StatusOK, response)
}

// GetApplicationApplication impl of gNMI access at /aether/v4.0.0/{target}/application/application/{id}
func (i *ServerImpl) GetApplicationApplication(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetApplicationApplication(gnmiCtx, "/aether/v4.0.0/{target}/application/application/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetApplicationApplication")
	return ctx.JSON(http.StatusOK, response)
}

// PostApplicationApplication impl of gNMI access at /aether/v4.0.0/{target}/application/application/{id}
func (i *ServerImpl) PostApplicationApplication(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostApplicationApplication(gnmiCtx, body, "/aether/v4.0.0/{target}/application/application/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostApplicationApplication")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteApplicationApplicationEndpoint impl of gNMI access at /aether/v4.0.0/{target}/application/application/{id}/endpoint/{endpoint-id}
func (i *ServerImpl) DeleteApplicationApplicationEndpoint(ctx echo.Context, target externalRef0.Target, id string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteApplicationApplicationEndpoint(gnmiCtx, "/aether/v4.0.0/{target}/application/application/{id}/endpoint/{endpoint-id}", target, id, endpointId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteApplicationApplicationEndpoint")
	return ctx.JSON(http.StatusOK, response)
}

// GetApplicationApplicationEndpoint impl of gNMI access at /aether/v4.0.0/{target}/application/application/{id}/endpoint/{endpoint-id}
func (i *ServerImpl) GetApplicationApplicationEndpoint(ctx echo.Context, target externalRef0.Target, id string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetApplicationApplicationEndpoint(gnmiCtx, "/aether/v4.0.0/{target}/application/application/{id}/endpoint/{endpoint-id}", target, id, endpointId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetApplicationApplicationEndpoint")
	return ctx.JSON(http.StatusOK, response)
}

// PostApplicationApplicationEndpoint impl of gNMI access at /aether/v4.0.0/{target}/application/application/{id}/endpoint/{endpoint-id}
func (i *ServerImpl) PostApplicationApplicationEndpoint(ctx echo.Context, target externalRef0.Target, id string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostApplicationApplicationEndpoint(gnmiCtx, body, "/aether/v4.0.0/{target}/application/application/{id}/endpoint/{endpoint-id}", target, id, endpointId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostApplicationApplicationEndpoint")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteApplicationApplicationEndpointMbr impl of gNMI access at /aether/v4.0.0/{target}/application/application/{id}/endpoint/{endpoint-id}/mbr
func (i *ServerImpl) DeleteApplicationApplicationEndpointMbr(ctx echo.Context, target externalRef0.Target, id string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteApplicationApplicationEndpointMbr(gnmiCtx, "/aether/v4.0.0/{target}/application/application/{id}/endpoint/{endpoint-id}/mbr", target, id, endpointId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteApplicationApplicationEndpointMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetApplicationApplicationEndpointMbr impl of gNMI access at /aether/v4.0.0/{target}/application/application/{id}/endpoint/{endpoint-id}/mbr
func (i *ServerImpl) GetApplicationApplicationEndpointMbr(ctx echo.Context, target externalRef0.Target, id string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetApplicationApplicationEndpointMbr(gnmiCtx, "/aether/v4.0.0/{target}/application/application/{id}/endpoint/{endpoint-id}/mbr", target, id, endpointId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetApplicationApplicationEndpointMbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostApplicationApplicationEndpointMbr impl of gNMI access at /aether/v4.0.0/{target}/application/application/{id}/endpoint/{endpoint-id}/mbr
func (i *ServerImpl) PostApplicationApplicationEndpointMbr(ctx echo.Context, target externalRef0.Target, id string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostApplicationApplicationEndpointMbr(gnmiCtx, body, "/aether/v4.0.0/{target}/application/application/{id}/endpoint/{endpoint-id}/mbr", target, id, endpointId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostApplicationApplicationEndpointMbr")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteConnectivityService impl of gNMI access at /aether/v4.0.0/{target}/connectivity-service
func (i *ServerImpl) DeleteConnectivityService(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteConnectivityService(gnmiCtx, "/aether/v4.0.0/{target}/connectivity-service", target)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// GetConnectivityService impl of gNMI access at /aether/v4.0.0/{target}/connectivity-service
func (i *ServerImpl) GetConnectivityService(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetConnectivityService(gnmiCtx, "/aether/v4.0.0/{target}/connectivity-service", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// PostConnectivityService impl of gNMI access at /aether/v4.0.0/{target}/connectivity-service
func (i *ServerImpl) PostConnectivityService(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostConnectivityService(gnmiCtx, body, "/aether/v4.0.0/{target}/connectivity-service", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteConnectivityServiceConnectivityService impl of gNMI access at /aether/v4.0.0/{target}/connectivity-service/connectivity-service/{id}
func (i *ServerImpl) DeleteConnectivityServiceConnectivityService(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteConnectivityServiceConnectivityService(gnmiCtx, "/aether/v4.0.0/{target}/connectivity-service/connectivity-service/{id}", target, id)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteConnectivityServiceConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// GetConnectivityServiceConnectivityService impl of gNMI access at /aether/v4.0.0/{target}/connectivity-service/connectivity-service/{id}
func (i *ServerImpl) GetConnectivityServiceConnectivityService(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetConnectivityServiceConnectivityService(gnmiCtx, "/aether/v4.0.0/{target}/connectivity-service/connectivity-service/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetConnectivityServiceConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// PostConnectivityServiceConnectivityService impl of gNMI access at /aether/v4.0.0/{target}/connectivity-service/connectivity-service/{id}
func (i *ServerImpl) PostConnectivityServiceConnectivityService(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostConnectivityServiceConnectivityService(gnmiCtx, body, "/aether/v4.0.0/{target}/connectivity-service/connectivity-service/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostConnectivityServiceConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteDeviceGroup impl of gNMI access at /aether/v4.0.0/{target}/device-group
func (i *ServerImpl) DeleteDeviceGroup(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteDeviceGroup(gnmiCtx, "/aether/v4.0.0/{target}/device-group", target)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetDeviceGroup impl of gNMI access at /aether/v4.0.0/{target}/device-group
func (i *ServerImpl) GetDeviceGroup(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetDeviceGroup(gnmiCtx, "/aether/v4.0.0/{target}/device-group", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// PostDeviceGroup impl of gNMI access at /aether/v4.0.0/{target}/device-group
func (i *ServerImpl) PostDeviceGroup(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostDeviceGroup(gnmiCtx, body, "/aether/v4.0.0/{target}/device-group", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteDeviceGroupDeviceGroup impl of gNMI access at /aether/v4.0.0/{target}/device-group/device-group/{id}
func (i *ServerImpl) DeleteDeviceGroupDeviceGroup(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteDeviceGroupDeviceGroup(gnmiCtx, "/aether/v4.0.0/{target}/device-group/device-group/{id}", target, id)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteDeviceGroupDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetDeviceGroupDeviceGroup impl of gNMI access at /aether/v4.0.0/{target}/device-group/device-group/{id}
func (i *ServerImpl) GetDeviceGroupDeviceGroup(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetDeviceGroupDeviceGroup(gnmiCtx, "/aether/v4.0.0/{target}/device-group/device-group/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetDeviceGroupDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// PostDeviceGroupDeviceGroup impl of gNMI access at /aether/v4.0.0/{target}/device-group/device-group/{id}
func (i *ServerImpl) PostDeviceGroupDeviceGroup(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostDeviceGroupDeviceGroup(gnmiCtx, body, "/aether/v4.0.0/{target}/device-group/device-group/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostDeviceGroupDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteDeviceGroupDeviceGroupDevice impl of gNMI access at /aether/v4.0.0/{target}/device-group/device-group/{id}/device
func (i *ServerImpl) DeleteDeviceGroupDeviceGroupDevice(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteDeviceGroupDeviceGroupDevice(gnmiCtx, "/aether/v4.0.0/{target}/device-group/device-group/{id}/device", target, id)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteDeviceGroupDeviceGroupDevice")
	return ctx.JSON(http.StatusOK, response)
}

// GetDeviceGroupDeviceGroupDevice impl of gNMI access at /aether/v4.0.0/{target}/device-group/device-group/{id}/device
func (i *ServerImpl) GetDeviceGroupDeviceGroupDevice(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetDeviceGroupDeviceGroupDevice(gnmiCtx, "/aether/v4.0.0/{target}/device-group/device-group/{id}/device", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetDeviceGroupDeviceGroupDevice")
	return ctx.JSON(http.StatusOK, response)
}

// PostDeviceGroupDeviceGroupDevice impl of gNMI access at /aether/v4.0.0/{target}/device-group/device-group/{id}/device
func (i *ServerImpl) PostDeviceGroupDeviceGroupDevice(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostDeviceGroupDeviceGroupDevice(gnmiCtx, body, "/aether/v4.0.0/{target}/device-group/device-group/{id}/device", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostDeviceGroupDeviceGroupDevice")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteDeviceGroupDeviceGroupDeviceMbr impl of gNMI access at /aether/v4.0.0/{target}/device-group/device-group/{id}/device/mbr
func (i *ServerImpl) DeleteDeviceGroupDeviceGroupDeviceMbr(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteDeviceGroupDeviceGroupDeviceMbr(gnmiCtx, "/aether/v4.0.0/{target}/device-group/device-group/{id}/device/mbr", target, id)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteDeviceGroupDeviceGroupDeviceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetDeviceGroupDeviceGroupDeviceMbr impl of gNMI access at /aether/v4.0.0/{target}/device-group/device-group/{id}/device/mbr
func (i *ServerImpl) GetDeviceGroupDeviceGroupDeviceMbr(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetDeviceGroupDeviceGroupDeviceMbr(gnmiCtx, "/aether/v4.0.0/{target}/device-group/device-group/{id}/device/mbr", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetDeviceGroupDeviceGroupDeviceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostDeviceGroupDeviceGroupDeviceMbr impl of gNMI access at /aether/v4.0.0/{target}/device-group/device-group/{id}/device/mbr
func (i *ServerImpl) PostDeviceGroupDeviceGroupDeviceMbr(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostDeviceGroupDeviceGroupDeviceMbr(gnmiCtx, body, "/aether/v4.0.0/{target}/device-group/device-group/{id}/device/mbr", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostDeviceGroupDeviceGroupDeviceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteDeviceGroupDeviceGroupImsis impl of gNMI access at /aether/v4.0.0/{target}/device-group/device-group/{id}/imsis/{imsi-id}
func (i *ServerImpl) DeleteDeviceGroupDeviceGroupImsis(ctx echo.Context, target externalRef0.Target, id string, imsiId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteDeviceGroupDeviceGroupImsis(gnmiCtx, "/aether/v4.0.0/{target}/device-group/device-group/{id}/imsis/{imsi-id}", target, id, imsiId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteDeviceGroupDeviceGroupImsis")
	return ctx.JSON(http.StatusOK, response)
}

// GetDeviceGroupDeviceGroupImsis impl of gNMI access at /aether/v4.0.0/{target}/device-group/device-group/{id}/imsis/{imsi-id}
func (i *ServerImpl) GetDeviceGroupDeviceGroupImsis(ctx echo.Context, target externalRef0.Target, id string, imsiId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetDeviceGroupDeviceGroupImsis(gnmiCtx, "/aether/v4.0.0/{target}/device-group/device-group/{id}/imsis/{imsi-id}", target, id, imsiId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetDeviceGroupDeviceGroupImsis")
	return ctx.JSON(http.StatusOK, response)
}

// PostDeviceGroupDeviceGroupImsis impl of gNMI access at /aether/v4.0.0/{target}/device-group/device-group/{id}/imsis/{imsi-id}
func (i *ServerImpl) PostDeviceGroupDeviceGroupImsis(ctx echo.Context, target externalRef0.Target, id string, imsiId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostDeviceGroupDeviceGroupImsis(gnmiCtx, body, "/aether/v4.0.0/{target}/device-group/device-group/{id}/imsis/{imsi-id}", target, id, imsiId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostDeviceGroupDeviceGroupImsis")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterprise impl of gNMI access at /aether/v4.0.0/{target}/enterprise
func (i *ServerImpl) DeleteEnterprise(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteEnterprise(gnmiCtx, "/aether/v4.0.0/{target}/enterprise", target)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterprise impl of gNMI access at /aether/v4.0.0/{target}/enterprise
func (i *ServerImpl) GetEnterprise(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterprise(gnmiCtx, "/aether/v4.0.0/{target}/enterprise", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterprise impl of gNMI access at /aether/v4.0.0/{target}/enterprise
func (i *ServerImpl) PostEnterprise(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterprise(gnmiCtx, body, "/aether/v4.0.0/{target}/enterprise", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterpriseEnterprise impl of gNMI access at /aether/v4.0.0/{target}/enterprise/enterprise/{id}
func (i *ServerImpl) DeleteEnterpriseEnterprise(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteEnterpriseEnterprise(gnmiCtx, "/aether/v4.0.0/{target}/enterprise/enterprise/{id}", target, id)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteEnterpriseEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterpriseEnterprise impl of gNMI access at /aether/v4.0.0/{target}/enterprise/enterprise/{id}
func (i *ServerImpl) GetEnterpriseEnterprise(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterpriseEnterprise(gnmiCtx, "/aether/v4.0.0/{target}/enterprise/enterprise/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetEnterpriseEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterpriseEnterprise impl of gNMI access at /aether/v4.0.0/{target}/enterprise/enterprise/{id}
func (i *ServerImpl) PostEnterpriseEnterprise(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterpriseEnterprise(gnmiCtx, body, "/aether/v4.0.0/{target}/enterprise/enterprise/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostEnterpriseEnterprise")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteEnterpriseEnterpriseConnectivityService impl of gNMI access at /aether/v4.0.0/{target}/enterprise/enterprise/{id}/connectivity-service/{connectivity-service}
func (i *ServerImpl) DeleteEnterpriseEnterpriseConnectivityService(ctx echo.Context, target externalRef0.Target, id string, connectivityService string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteEnterpriseEnterpriseConnectivityService(gnmiCtx, "/aether/v4.0.0/{target}/enterprise/enterprise/{id}/connectivity-service/{connectivity-service}", target, id, connectivityService)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteEnterpriseEnterpriseConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// GetEnterpriseEnterpriseConnectivityService impl of gNMI access at /aether/v4.0.0/{target}/enterprise/enterprise/{id}/connectivity-service/{connectivity-service}
func (i *ServerImpl) GetEnterpriseEnterpriseConnectivityService(ctx echo.Context, target externalRef0.Target, id string, connectivityService string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetEnterpriseEnterpriseConnectivityService(gnmiCtx, "/aether/v4.0.0/{target}/enterprise/enterprise/{id}/connectivity-service/{connectivity-service}", target, id, connectivityService)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetEnterpriseEnterpriseConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// PostEnterpriseEnterpriseConnectivityService impl of gNMI access at /aether/v4.0.0/{target}/enterprise/enterprise/{id}/connectivity-service/{connectivity-service}
func (i *ServerImpl) PostEnterpriseEnterpriseConnectivityService(ctx echo.Context, target externalRef0.Target, id string, connectivityService string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostEnterpriseEnterpriseConnectivityService(gnmiCtx, body, "/aether/v4.0.0/{target}/enterprise/enterprise/{id}/connectivity-service/{connectivity-service}", target, id, connectivityService)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostEnterpriseEnterpriseConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteIpDomain impl of gNMI access at /aether/v4.0.0/{target}/ip-domain
func (i *ServerImpl) DeleteIpDomain(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteIpDomain(gnmiCtx, "/aether/v4.0.0/{target}/ip-domain", target)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// GetIpDomain impl of gNMI access at /aether/v4.0.0/{target}/ip-domain
func (i *ServerImpl) GetIpDomain(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetIpDomain(gnmiCtx, "/aether/v4.0.0/{target}/ip-domain", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// PostIpDomain impl of gNMI access at /aether/v4.0.0/{target}/ip-domain
func (i *ServerImpl) PostIpDomain(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostIpDomain(gnmiCtx, body, "/aether/v4.0.0/{target}/ip-domain", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteIpDomainIpDomain impl of gNMI access at /aether/v4.0.0/{target}/ip-domain/ip-domain/{id}
func (i *ServerImpl) DeleteIpDomainIpDomain(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteIpDomainIpDomain(gnmiCtx, "/aether/v4.0.0/{target}/ip-domain/ip-domain/{id}", target, id)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteIpDomainIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// GetIpDomainIpDomain impl of gNMI access at /aether/v4.0.0/{target}/ip-domain/ip-domain/{id}
func (i *ServerImpl) GetIpDomainIpDomain(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetIpDomainIpDomain(gnmiCtx, "/aether/v4.0.0/{target}/ip-domain/ip-domain/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetIpDomainIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// PostIpDomainIpDomain impl of gNMI access at /aether/v4.0.0/{target}/ip-domain/ip-domain/{id}
func (i *ServerImpl) PostIpDomainIpDomain(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostIpDomainIpDomain(gnmiCtx, body, "/aether/v4.0.0/{target}/ip-domain/ip-domain/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostIpDomainIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSite impl of gNMI access at /aether/v4.0.0/{target}/site
func (i *ServerImpl) DeleteSite(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteSite(gnmiCtx, "/aether/v4.0.0/{target}/site", target)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteSite")
	return ctx.JSON(http.StatusOK, response)
}

// GetSite impl of gNMI access at /aether/v4.0.0/{target}/site
func (i *ServerImpl) GetSite(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSite(gnmiCtx, "/aether/v4.0.0/{target}/site", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetSite")
	return ctx.JSON(http.StatusOK, response)
}

// PostSite impl of gNMI access at /aether/v4.0.0/{target}/site
func (i *ServerImpl) PostSite(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSite(gnmiCtx, body, "/aether/v4.0.0/{target}/site", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostSite")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteSite impl of gNMI access at /aether/v4.0.0/{target}/site/site/{id}
func (i *ServerImpl) DeleteSiteSite(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteSiteSite(gnmiCtx, "/aether/v4.0.0/{target}/site/site/{id}", target, id)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteSiteSite")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSite impl of gNMI access at /aether/v4.0.0/{target}/site/site/{id}
func (i *ServerImpl) GetSiteSite(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteSite(gnmiCtx, "/aether/v4.0.0/{target}/site/site/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetSiteSite")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteSite impl of gNMI access at /aether/v4.0.0/{target}/site/site/{id}
func (i *ServerImpl) PostSiteSite(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteSite(gnmiCtx, body, "/aether/v4.0.0/{target}/site/site/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostSiteSite")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteSiteImsiDefinition impl of gNMI access at /aether/v4.0.0/{target}/site/site/{id}/imsi-definition
func (i *ServerImpl) DeleteSiteSiteImsiDefinition(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteSiteSiteImsiDefinition(gnmiCtx, "/aether/v4.0.0/{target}/site/site/{id}/imsi-definition", target, id)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteSiteSiteImsiDefinition")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSiteImsiDefinition impl of gNMI access at /aether/v4.0.0/{target}/site/site/{id}/imsi-definition
func (i *ServerImpl) GetSiteSiteImsiDefinition(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteSiteImsiDefinition(gnmiCtx, "/aether/v4.0.0/{target}/site/site/{id}/imsi-definition", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetSiteSiteImsiDefinition")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteSiteImsiDefinition impl of gNMI access at /aether/v4.0.0/{target}/site/site/{id}/imsi-definition
func (i *ServerImpl) PostSiteSiteImsiDefinition(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteSiteImsiDefinition(gnmiCtx, body, "/aether/v4.0.0/{target}/site/site/{id}/imsi-definition", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostSiteSiteImsiDefinition")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteSiteMonitoring impl of gNMI access at /aether/v4.0.0/{target}/site/site/{id}/monitoring
func (i *ServerImpl) DeleteSiteSiteMonitoring(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteSiteSiteMonitoring(gnmiCtx, "/aether/v4.0.0/{target}/site/site/{id}/monitoring", target, id)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteSiteSiteMonitoring")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSiteMonitoring impl of gNMI access at /aether/v4.0.0/{target}/site/site/{id}/monitoring
func (i *ServerImpl) GetSiteSiteMonitoring(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteSiteMonitoring(gnmiCtx, "/aether/v4.0.0/{target}/site/site/{id}/monitoring", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetSiteSiteMonitoring")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteSiteMonitoring impl of gNMI access at /aether/v4.0.0/{target}/site/site/{id}/monitoring
func (i *ServerImpl) PostSiteSiteMonitoring(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteSiteMonitoring(gnmiCtx, body, "/aether/v4.0.0/{target}/site/site/{id}/monitoring", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostSiteSiteMonitoring")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteSiteMonitoringEdgeDevice impl of gNMI access at /aether/v4.0.0/{target}/site/site/{id}/monitoring/edge-device/{edge-device-id}
func (i *ServerImpl) DeleteSiteSiteMonitoringEdgeDevice(ctx echo.Context, target externalRef0.Target, id string, edgeDeviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteSiteSiteMonitoringEdgeDevice(gnmiCtx, "/aether/v4.0.0/{target}/site/site/{id}/monitoring/edge-device/{edge-device-id}", target, id, edgeDeviceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteSiteSiteMonitoringEdgeDevice")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSiteMonitoringEdgeDevice impl of gNMI access at /aether/v4.0.0/{target}/site/site/{id}/monitoring/edge-device/{edge-device-id}
func (i *ServerImpl) GetSiteSiteMonitoringEdgeDevice(ctx echo.Context, target externalRef0.Target, id string, edgeDeviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteSiteMonitoringEdgeDevice(gnmiCtx, "/aether/v4.0.0/{target}/site/site/{id}/monitoring/edge-device/{edge-device-id}", target, id, edgeDeviceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetSiteSiteMonitoringEdgeDevice")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteSiteMonitoringEdgeDevice impl of gNMI access at /aether/v4.0.0/{target}/site/site/{id}/monitoring/edge-device/{edge-device-id}
func (i *ServerImpl) PostSiteSiteMonitoringEdgeDevice(ctx echo.Context, target externalRef0.Target, id string, edgeDeviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteSiteMonitoringEdgeDevice(gnmiCtx, body, "/aether/v4.0.0/{target}/site/site/{id}/monitoring/edge-device/{edge-device-id}", target, id, edgeDeviceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostSiteSiteMonitoringEdgeDevice")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteSiteSmallCell impl of gNMI access at /aether/v4.0.0/{target}/site/site/{id}/small-cell/{small-cell-id}
func (i *ServerImpl) DeleteSiteSiteSmallCell(ctx echo.Context, target externalRef0.Target, id string, smallCellId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteSiteSiteSmallCell(gnmiCtx, "/aether/v4.0.0/{target}/site/site/{id}/small-cell/{small-cell-id}", target, id, smallCellId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteSiteSiteSmallCell")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSiteSmallCell impl of gNMI access at /aether/v4.0.0/{target}/site/site/{id}/small-cell/{small-cell-id}
func (i *ServerImpl) GetSiteSiteSmallCell(ctx echo.Context, target externalRef0.Target, id string, smallCellId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteSiteSmallCell(gnmiCtx, "/aether/v4.0.0/{target}/site/site/{id}/small-cell/{small-cell-id}", target, id, smallCellId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetSiteSiteSmallCell")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteSiteSmallCell impl of gNMI access at /aether/v4.0.0/{target}/site/site/{id}/small-cell/{small-cell-id}
func (i *ServerImpl) PostSiteSiteSmallCell(ctx echo.Context, target externalRef0.Target, id string, smallCellId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteSiteSmallCell(gnmiCtx, body, "/aether/v4.0.0/{target}/site/site/{id}/small-cell/{small-cell-id}", target, id, smallCellId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostSiteSiteSmallCell")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteTemplate impl of gNMI access at /aether/v4.0.0/{target}/template
func (i *ServerImpl) DeleteTemplate(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteTemplate(gnmiCtx, "/aether/v4.0.0/{target}/template", target)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// GetTemplate impl of gNMI access at /aether/v4.0.0/{target}/template
func (i *ServerImpl) GetTemplate(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetTemplate(gnmiCtx, "/aether/v4.0.0/{target}/template", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// PostTemplate impl of gNMI access at /aether/v4.0.0/{target}/template
func (i *ServerImpl) PostTemplate(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostTemplate(gnmiCtx, body, "/aether/v4.0.0/{target}/template", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteTemplateTemplate impl of gNMI access at /aether/v4.0.0/{target}/template/template/{id}
func (i *ServerImpl) DeleteTemplateTemplate(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteTemplateTemplate(gnmiCtx, "/aether/v4.0.0/{target}/template/template/{id}", target, id)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteTemplateTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// GetTemplateTemplate impl of gNMI access at /aether/v4.0.0/{target}/template/template/{id}
func (i *ServerImpl) GetTemplateTemplate(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetTemplateTemplate(gnmiCtx, "/aether/v4.0.0/{target}/template/template/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetTemplateTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// PostTemplateTemplate impl of gNMI access at /aether/v4.0.0/{target}/template/template/{id}
func (i *ServerImpl) PostTemplateTemplate(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostTemplateTemplate(gnmiCtx, body, "/aether/v4.0.0/{target}/template/template/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostTemplateTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteTemplateTemplateSlice impl of gNMI access at /aether/v4.0.0/{target}/template/template/{id}/slice
func (i *ServerImpl) DeleteTemplateTemplateSlice(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteTemplateTemplateSlice(gnmiCtx, "/aether/v4.0.0/{target}/template/template/{id}/slice", target, id)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteTemplateTemplateSlice")
	return ctx.JSON(http.StatusOK, response)
}

// GetTemplateTemplateSlice impl of gNMI access at /aether/v4.0.0/{target}/template/template/{id}/slice
func (i *ServerImpl) GetTemplateTemplateSlice(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetTemplateTemplateSlice(gnmiCtx, "/aether/v4.0.0/{target}/template/template/{id}/slice", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetTemplateTemplateSlice")
	return ctx.JSON(http.StatusOK, response)
}

// PostTemplateTemplateSlice impl of gNMI access at /aether/v4.0.0/{target}/template/template/{id}/slice
func (i *ServerImpl) PostTemplateTemplateSlice(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostTemplateTemplateSlice(gnmiCtx, body, "/aether/v4.0.0/{target}/template/template/{id}/slice", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostTemplateTemplateSlice")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteTemplateTemplateSliceMbr impl of gNMI access at /aether/v4.0.0/{target}/template/template/{id}/slice/mbr
func (i *ServerImpl) DeleteTemplateTemplateSliceMbr(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteTemplateTemplateSliceMbr(gnmiCtx, "/aether/v4.0.0/{target}/template/template/{id}/slice/mbr", target, id)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteTemplateTemplateSliceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetTemplateTemplateSliceMbr impl of gNMI access at /aether/v4.0.0/{target}/template/template/{id}/slice/mbr
func (i *ServerImpl) GetTemplateTemplateSliceMbr(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetTemplateTemplateSliceMbr(gnmiCtx, "/aether/v4.0.0/{target}/template/template/{id}/slice/mbr", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetTemplateTemplateSliceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostTemplateTemplateSliceMbr impl of gNMI access at /aether/v4.0.0/{target}/template/template/{id}/slice/mbr
func (i *ServerImpl) PostTemplateTemplateSliceMbr(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostTemplateTemplateSliceMbr(gnmiCtx, body, "/aether/v4.0.0/{target}/template/template/{id}/slice/mbr", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostTemplateTemplateSliceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteTrafficClass impl of gNMI access at /aether/v4.0.0/{target}/traffic-class
func (i *ServerImpl) DeleteTrafficClass(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteTrafficClass(gnmiCtx, "/aether/v4.0.0/{target}/traffic-class", target)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// GetTrafficClass impl of gNMI access at /aether/v4.0.0/{target}/traffic-class
func (i *ServerImpl) GetTrafficClass(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetTrafficClass(gnmiCtx, "/aether/v4.0.0/{target}/traffic-class", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// PostTrafficClass impl of gNMI access at /aether/v4.0.0/{target}/traffic-class
func (i *ServerImpl) PostTrafficClass(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostTrafficClass(gnmiCtx, body, "/aether/v4.0.0/{target}/traffic-class", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteTrafficClassTrafficClass impl of gNMI access at /aether/v4.0.0/{target}/traffic-class/traffic-class/{id}
func (i *ServerImpl) DeleteTrafficClassTrafficClass(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteTrafficClassTrafficClass(gnmiCtx, "/aether/v4.0.0/{target}/traffic-class/traffic-class/{id}", target, id)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteTrafficClassTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// GetTrafficClassTrafficClass impl of gNMI access at /aether/v4.0.0/{target}/traffic-class/traffic-class/{id}
func (i *ServerImpl) GetTrafficClassTrafficClass(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetTrafficClassTrafficClass(gnmiCtx, "/aether/v4.0.0/{target}/traffic-class/traffic-class/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetTrafficClassTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// PostTrafficClassTrafficClass impl of gNMI access at /aether/v4.0.0/{target}/traffic-class/traffic-class/{id}
func (i *ServerImpl) PostTrafficClassTrafficClass(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostTrafficClassTrafficClass(gnmiCtx, body, "/aether/v4.0.0/{target}/traffic-class/traffic-class/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostTrafficClassTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteUpf impl of gNMI access at /aether/v4.0.0/{target}/upf
func (i *ServerImpl) DeleteUpf(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteUpf(gnmiCtx, "/aether/v4.0.0/{target}/upf", target)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteUpf")
	return ctx.JSON(http.StatusOK, response)
}

// GetUpf impl of gNMI access at /aether/v4.0.0/{target}/upf
func (i *ServerImpl) GetUpf(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetUpf(gnmiCtx, "/aether/v4.0.0/{target}/upf", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetUpf")
	return ctx.JSON(http.StatusOK, response)
}

// PostUpf impl of gNMI access at /aether/v4.0.0/{target}/upf
func (i *ServerImpl) PostUpf(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostUpf(gnmiCtx, body, "/aether/v4.0.0/{target}/upf", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostUpf")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteUpfUpf impl of gNMI access at /aether/v4.0.0/{target}/upf/upf/{id}
func (i *ServerImpl) DeleteUpfUpf(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteUpfUpf(gnmiCtx, "/aether/v4.0.0/{target}/upf/upf/{id}", target, id)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteUpfUpf")
	return ctx.JSON(http.StatusOK, response)
}

// GetUpfUpf impl of gNMI access at /aether/v4.0.0/{target}/upf/upf/{id}
func (i *ServerImpl) GetUpfUpf(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetUpfUpf(gnmiCtx, "/aether/v4.0.0/{target}/upf/upf/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetUpfUpf")
	return ctx.JSON(http.StatusOK, response)
}

// PostUpfUpf impl of gNMI access at /aether/v4.0.0/{target}/upf/upf/{id}
func (i *ServerImpl) PostUpfUpf(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostUpfUpf(gnmiCtx, body, "/aether/v4.0.0/{target}/upf/upf/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostUpfUpf")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteVcs impl of gNMI access at /aether/v4.0.0/{target}/vcs
func (i *ServerImpl) DeleteVcs(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteVcs(gnmiCtx, "/aether/v4.0.0/{target}/vcs", target)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteVcs")
	return ctx.JSON(http.StatusOK, response)
}

// GetVcs impl of gNMI access at /aether/v4.0.0/{target}/vcs
func (i *ServerImpl) GetVcs(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetVcs(gnmiCtx, "/aether/v4.0.0/{target}/vcs", target)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetVcs")
	return ctx.JSON(http.StatusOK, response)
}

// PostVcs impl of gNMI access at /aether/v4.0.0/{target}/vcs
func (i *ServerImpl) PostVcs(ctx echo.Context, target externalRef0.Target) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostVcs(gnmiCtx, body, "/aether/v4.0.0/{target}/vcs", target)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostVcs")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteVcsVcs impl of gNMI access at /aether/v4.0.0/{target}/vcs/vcs/{id}
func (i *ServerImpl) DeleteVcsVcs(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteVcsVcs(gnmiCtx, "/aether/v4.0.0/{target}/vcs/vcs/{id}", target, id)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteVcsVcs")
	return ctx.JSON(http.StatusOK, response)
}

// GetVcsVcs impl of gNMI access at /aether/v4.0.0/{target}/vcs/vcs/{id}
func (i *ServerImpl) GetVcsVcs(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetVcsVcs(gnmiCtx, "/aether/v4.0.0/{target}/vcs/vcs/{id}", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetVcsVcs")
	return ctx.JSON(http.StatusOK, response)
}

// PostVcsVcs impl of gNMI access at /aether/v4.0.0/{target}/vcs/vcs/{id}
func (i *ServerImpl) PostVcsVcs(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostVcsVcs(gnmiCtx, body, "/aether/v4.0.0/{target}/vcs/vcs/{id}", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostVcsVcs")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteVcsVcsDeviceGroup impl of gNMI access at /aether/v4.0.0/{target}/vcs/vcs/{id}/device-group/{device-group}
func (i *ServerImpl) DeleteVcsVcsDeviceGroup(ctx echo.Context, target externalRef0.Target, id string, deviceGroup string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteVcsVcsDeviceGroup(gnmiCtx, "/aether/v4.0.0/{target}/vcs/vcs/{id}/device-group/{device-group}", target, id, deviceGroup)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteVcsVcsDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetVcsVcsDeviceGroup impl of gNMI access at /aether/v4.0.0/{target}/vcs/vcs/{id}/device-group/{device-group}
func (i *ServerImpl) GetVcsVcsDeviceGroup(ctx echo.Context, target externalRef0.Target, id string, deviceGroup string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetVcsVcsDeviceGroup(gnmiCtx, "/aether/v4.0.0/{target}/vcs/vcs/{id}/device-group/{device-group}", target, id, deviceGroup)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetVcsVcsDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// PostVcsVcsDeviceGroup impl of gNMI access at /aether/v4.0.0/{target}/vcs/vcs/{id}/device-group/{device-group}
func (i *ServerImpl) PostVcsVcsDeviceGroup(ctx echo.Context, target externalRef0.Target, id string, deviceGroup string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostVcsVcsDeviceGroup(gnmiCtx, body, "/aether/v4.0.0/{target}/vcs/vcs/{id}/device-group/{device-group}", target, id, deviceGroup)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostVcsVcsDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteVcsVcsFilter impl of gNMI access at /aether/v4.0.0/{target}/vcs/vcs/{id}/filter/{application}
func (i *ServerImpl) DeleteVcsVcsFilter(ctx echo.Context, target externalRef0.Target, id string, application string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteVcsVcsFilter(gnmiCtx, "/aether/v4.0.0/{target}/vcs/vcs/{id}/filter/{application}", target, id, application)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteVcsVcsFilter")
	return ctx.JSON(http.StatusOK, response)
}

// GetVcsVcsFilter impl of gNMI access at /aether/v4.0.0/{target}/vcs/vcs/{id}/filter/{application}
func (i *ServerImpl) GetVcsVcsFilter(ctx echo.Context, target externalRef0.Target, id string, application string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetVcsVcsFilter(gnmiCtx, "/aether/v4.0.0/{target}/vcs/vcs/{id}/filter/{application}", target, id, application)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetVcsVcsFilter")
	return ctx.JSON(http.StatusOK, response)
}

// PostVcsVcsFilter impl of gNMI access at /aether/v4.0.0/{target}/vcs/vcs/{id}/filter/{application}
func (i *ServerImpl) PostVcsVcsFilter(ctx echo.Context, target externalRef0.Target, id string, application string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostVcsVcsFilter(gnmiCtx, body, "/aether/v4.0.0/{target}/vcs/vcs/{id}/filter/{application}", target, id, application)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostVcsVcsFilter")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteVcsVcsSlice impl of gNMI access at /aether/v4.0.0/{target}/vcs/vcs/{id}/slice
func (i *ServerImpl) DeleteVcsVcsSlice(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteVcsVcsSlice(gnmiCtx, "/aether/v4.0.0/{target}/vcs/vcs/{id}/slice", target, id)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteVcsVcsSlice")
	return ctx.JSON(http.StatusOK, response)
}

// GetVcsVcsSlice impl of gNMI access at /aether/v4.0.0/{target}/vcs/vcs/{id}/slice
func (i *ServerImpl) GetVcsVcsSlice(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetVcsVcsSlice(gnmiCtx, "/aether/v4.0.0/{target}/vcs/vcs/{id}/slice", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetVcsVcsSlice")
	return ctx.JSON(http.StatusOK, response)
}

// PostVcsVcsSlice impl of gNMI access at /aether/v4.0.0/{target}/vcs/vcs/{id}/slice
func (i *ServerImpl) PostVcsVcsSlice(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostVcsVcsSlice(gnmiCtx, body, "/aether/v4.0.0/{target}/vcs/vcs/{id}/slice", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostVcsVcsSlice")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteVcsVcsSliceMbr impl of gNMI access at /aether/v4.0.0/{target}/vcs/vcs/{id}/slice/mbr
func (i *ServerImpl) DeleteVcsVcsSliceMbr(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response
	extension100, err := i.gnmiDeleteVcsVcsSliceMbr(gnmiCtx, "/aether/v4.0.0/{target}/vcs/vcs/{id}/slice/mbr", target, id)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("DeleteVcsVcsSliceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetVcsVcsSliceMbr impl of gNMI access at /aether/v4.0.0/{target}/vcs/vcs/{id}/slice/mbr
func (i *ServerImpl) GetVcsVcsSliceMbr(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetVcsVcsSliceMbr(gnmiCtx, "/aether/v4.0.0/{target}/vcs/vcs/{id}/slice/mbr", target, id)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("GetVcsVcsSliceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostVcsVcsSliceMbr impl of gNMI access at /aether/v4.0.0/{target}/vcs/vcs/{id}/slice/mbr
func (i *ServerImpl) PostVcsVcsSliceMbr(ctx echo.Context, target externalRef0.Target, id string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostVcsVcsSliceMbr(gnmiCtx, body, "/aether/v4.0.0/{target}/vcs/vcs/{id}/slice/mbr", target, id)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return echo.NewHTTPError(http.StatusNoContent)
	}

	log.Infof("PostVcsVcsSliceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// register template override
