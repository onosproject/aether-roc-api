// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"fmt"

	"github.com/onosproject/aether-roc-api/pkg/aether_4_0_0/types"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	externalRef0 "github.com/onosproject/config-models/modelplugin/aether-4.0.0/aether_4_0_0"
)

// ModelPluginDevice - a wrapper for the model plugin
type ModelPluginDevice struct {
	device externalRef0.Device
}

// toAdditionalPropertyTarget converts gNMI to OAPI.
func (d *ModelPluginDevice) toAdditionalPropertyTarget(params ...string) (*types.AdditionalPropertyTarget, error) {
	resource := new(types.AdditionalPropertyTarget)

	// Property: target string
	//encoding gNMI attribute to OAPI
	reflectTarget, err := utils.FindModelPluginObject(d.device, "AdditionalPropertyTargetTarget", params...)
	if err != nil {
		return nil, err
	}
	if reflectTarget != nil {
		attrTarget := reflectTarget.Interface().(string)
		resource.Target = &attrTarget
	}

	return resource, nil
}

// toAdditionalPropertyUnchanged converts gNMI to OAPI.
func (d *ModelPluginDevice) toAdditionalPropertyUnchanged(params ...string) (*types.AdditionalPropertyUnchanged, error) {
	resource := new(types.AdditionalPropertyUnchanged)

	// Property: unchanged string
	//encoding gNMI attribute to OAPI
	reflectUnchanged, err := utils.FindModelPluginObject(d.device, "AdditionalPropertyUnchangedUnchanged", params...)
	if err != nil {
		return nil, err
	}
	if reflectUnchanged != nil {
		attrUnchanged := reflectUnchanged.Interface().(string)
		resource.Unchanged = &attrUnchanged
	}

	return resource, nil
}

// toApplication converts gNMI to OAPI.
func (d *ModelPluginDevice) toApplication(params ...string) (*types.Application, error) {
	resource := new(types.Application)

	// Property: application []ApplicationApplication
	// Handle []Object
	applications := make([]types.ApplicationApplication, 0)
	reflectApplicationApplication, err := utils.FindModelPluginObject(d.device, "ApplicationApplication", params...)
	if err != nil {
		return nil, err
	}
	if reflectApplicationApplication != nil {
		for _, key := range reflectApplicationApplication.MapKeys() {
			v := reflectApplicationApplication.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			application, err := d.toApplicationApplication(childParams...)
			if err != nil {
				return nil, err
			}
			applications = append(applications, *application)
		}
	}
	resource.Application = &applications

	return resource, nil
}

// toApplicationApplication converts gNMI to OAPI.
func (d *ModelPluginDevice) toApplicationApplication(params ...string) (*types.ApplicationApplication, error) {
	resource := new(types.ApplicationApplication)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationAddress", params...)
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := reflectAddress.Interface().(string)
		resource.Address = attrAddress
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: endpoint []ApplicationApplicationEndpoint
	// Handle []Object
	endpoints := make([]types.ApplicationApplicationEndpoint, 0)
	reflectApplicationApplicationEndpoint, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationEndpoint", params...)
	if err != nil {
		return nil, err
	}
	if reflectApplicationApplicationEndpoint != nil {
		for _, key := range reflectApplicationApplicationEndpoint.MapKeys() {
			v := reflectApplicationApplicationEndpoint.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			endpoint, err := d.toApplicationApplicationEndpoint(childParams...)
			if err != nil {
				return nil, err
			}
			endpoints = append(endpoints, *endpoint)
		}
	}
	resource.Endpoint = &endpoints

	// Property: enterprise string
	//encoding gNMI attribute to OAPI
	reflectEnterprise, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationEnterprise", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprise != nil {
		attrEnterprise := reflectEnterprise.Interface().(string)
		resource.Enterprise = attrEnterprise
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = attrId
	}

	return resource, nil
}

// toApplicationApplicationEndpoint converts gNMI to OAPI.
func (d *ModelPluginDevice) toApplicationApplicationEndpoint(params ...string) (*types.ApplicationApplicationEndpoint, error) {
	resource := new(types.ApplicationApplicationEndpoint)

	// Property: mbr ApplicationApplicationEndpointMbr
	//Handle object
	attrMbr, err := d.toApplicationApplicationEndpointMbr(params...)
	if err != nil {
		return nil, err
	}
	resource.Mbr = attrMbr

	// Property: name string
	//encoding gNMI attribute to OAPI
	reflectName, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationEndpointName", params...)
	if err != nil {
		return nil, err
	}
	if reflectName != nil {
		attrName := reflectName.Interface().(string)
		resource.Name = attrName
	}

	// Property: port-end int
	//encoding gNMI attribute to OAPI
	reflectPortEnd, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationEndpointPortEnd", params...)
	if err != nil {
		return nil, err
	}
	if reflectPortEnd != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.PortEnd, err = utils.ToIntPtr(reflectPortEnd); err != nil {
			return nil, err
		}
	}

	// Property: port-start int
	//encoding gNMI attribute to OAPI
	reflectPortStart, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationEndpointPortStart", params...)
	if err != nil {
		return nil, err
	}
	if reflectPortStart != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.PortStart, err = utils.ToInt(reflectPortStart); err != nil {
			return nil, err
		}
	}

	// Property: protocol string
	//encoding gNMI attribute to OAPI
	reflectProtocol, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationEndpointProtocol", params...)
	if err != nil {
		return nil, err
	}
	if reflectProtocol != nil {
		attrProtocol := reflectProtocol.Interface().(string)
		resource.Protocol = &attrProtocol
	}

	return resource, nil
}

// toApplicationApplicationEndpointMbr converts gNMI to OAPI.
func (d *ModelPluginDevice) toApplicationApplicationEndpointMbr(params ...string) (*types.ApplicationApplicationEndpointMbr, error) {
	resource := new(types.ApplicationApplicationEndpointMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationEndpointMbrDownlink", params...)
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(d.device, "ApplicationApplicationEndpointMbrUplink", params...)
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toConnectivityService converts gNMI to OAPI.
func (d *ModelPluginDevice) toConnectivityService(params ...string) (*types.ConnectivityService, error) {
	resource := new(types.ConnectivityService)

	// Property: connectivity-service []ConnectivityServiceConnectivityService
	// Handle []Object
	connectivityServices := make([]types.ConnectivityServiceConnectivityService, 0)
	reflectConnectivityServiceConnectivityService, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	if reflectConnectivityServiceConnectivityService != nil {
		for _, key := range reflectConnectivityServiceConnectivityService.MapKeys() {
			v := reflectConnectivityServiceConnectivityService.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			connectivityService, err := d.toConnectivityServiceConnectivityService(childParams...)
			if err != nil {
				return nil, err
			}
			connectivityServices = append(connectivityServices, *connectivityService)
		}
	}
	resource.ConnectivityService = &connectivityServices

	return resource, nil
}

// toConnectivityServiceConnectivityService converts gNMI to OAPI.
func (d *ModelPluginDevice) toConnectivityServiceConnectivityService(params ...string) (*types.ConnectivityServiceConnectivityService, error) {
	resource := new(types.ConnectivityServiceConnectivityService)

	// Property: core-5g-endpoint string
	//encoding gNMI attribute to OAPI
	reflectCore5gEndpoint, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityServiceCore5gEndpoint", params...)
	if err != nil {
		return nil, err
	}
	if reflectCore5gEndpoint != nil {
		attrCore5gEndpoint := reflectCore5gEndpoint.Interface().(string)
		resource.Core5gEndpoint = &attrCore5gEndpoint
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityServiceDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityServiceDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: hss-endpoint string
	//encoding gNMI attribute to OAPI
	reflectHssEndpoint, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityServiceHssEndpoint", params...)
	if err != nil {
		return nil, err
	}
	if reflectHssEndpoint != nil {
		attrHssEndpoint := reflectHssEndpoint.Interface().(string)
		resource.HssEndpoint = &attrHssEndpoint
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityServiceId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = attrId
	}

	// Property: pcrf-endpoint string
	//encoding gNMI attribute to OAPI
	reflectPcrfEndpoint, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityServicePcrfEndpoint", params...)
	if err != nil {
		return nil, err
	}
	if reflectPcrfEndpoint != nil {
		attrPcrfEndpoint := reflectPcrfEndpoint.Interface().(string)
		resource.PcrfEndpoint = &attrPcrfEndpoint
	}

	// Property: spgwc-endpoint string
	//encoding gNMI attribute to OAPI
	reflectSpgwcEndpoint, err := utils.FindModelPluginObject(d.device, "ConnectivityServiceConnectivityServiceSpgwcEndpoint", params...)
	if err != nil {
		return nil, err
	}
	if reflectSpgwcEndpoint != nil {
		attrSpgwcEndpoint := reflectSpgwcEndpoint.Interface().(string)
		resource.SpgwcEndpoint = &attrSpgwcEndpoint
	}

	return resource, nil
}

// toDeviceGroup converts gNMI to OAPI.
func (d *ModelPluginDevice) toDeviceGroup(params ...string) (*types.DeviceGroup, error) {
	resource := new(types.DeviceGroup)

	// Property: device-group []DeviceGroupDeviceGroup
	// Handle []Object
	deviceGroups := make([]types.DeviceGroupDeviceGroup, 0)
	reflectDeviceGroupDeviceGroup, err := utils.FindModelPluginObject(d.device, "DeviceGroupDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroupDeviceGroup != nil {
		for _, key := range reflectDeviceGroupDeviceGroup.MapKeys() {
			v := reflectDeviceGroupDeviceGroup.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			deviceGroup, err := d.toDeviceGroupDeviceGroup(childParams...)
			if err != nil {
				return nil, err
			}
			deviceGroups = append(deviceGroups, *deviceGroup)
		}
	}
	resource.DeviceGroup = &deviceGroups

	return resource, nil
}

// toDeviceGroupDeviceGroup converts gNMI to OAPI.
func (d *ModelPluginDevice) toDeviceGroupDeviceGroup(params ...string) (*types.DeviceGroupDeviceGroup, error) {
	resource := new(types.DeviceGroupDeviceGroup)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "DeviceGroupDeviceGroupDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "DeviceGroupDeviceGroupDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "DeviceGroupDeviceGroupId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = attrId
	}

	// Property: imsis []DeviceGroupDeviceGroupImsis
	// Handle []Object
	imsiss := make([]types.DeviceGroupDeviceGroupImsis, 0)
	reflectDeviceGroupDeviceGroupImsis, err := utils.FindModelPluginObject(d.device, "DeviceGroupDeviceGroupImsis", params...)
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroupDeviceGroupImsis != nil {
		for _, key := range reflectDeviceGroupDeviceGroupImsis.MapKeys() {
			v := reflectDeviceGroupDeviceGroupImsis.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			imsis, err := d.toDeviceGroupDeviceGroupImsis(childParams...)
			if err != nil {
				return nil, err
			}
			imsiss = append(imsiss, *imsis)
		}
	}
	resource.Imsis = &imsiss

	// Property: ip-domain string
	//encoding gNMI attribute to OAPI
	reflectIpDomain, err := utils.FindModelPluginObject(d.device, "DeviceGroupDeviceGroupIpDomain", params...)
	if err != nil {
		return nil, err
	}
	if reflectIpDomain != nil {
		attrIpDomain := reflectIpDomain.Interface().(string)
		resource.IpDomain = &attrIpDomain
	}

	// Property: site string
	//encoding gNMI attribute to OAPI
	reflectSite, err := utils.FindModelPluginObject(d.device, "DeviceGroupDeviceGroupSite", params...)
	if err != nil {
		return nil, err
	}
	if reflectSite != nil {
		attrSite := reflectSite.Interface().(string)
		resource.Site = attrSite
	}

	return resource, nil
}

// toDeviceGroupDeviceGroupImsis converts gNMI to OAPI.
func (d *ModelPluginDevice) toDeviceGroupDeviceGroupImsis(params ...string) (*types.DeviceGroupDeviceGroupImsis, error) {
	resource := new(types.DeviceGroupDeviceGroupImsis)

	// Property: imsi-range-from int64
	//encoding gNMI attribute to OAPI
	reflectImsiRangeFrom, err := utils.FindModelPluginObject(d.device, "DeviceGroupDeviceGroupImsisImsiRangeFrom", params...)
	if err != nil {
		return nil, err
	}
	if reflectImsiRangeFrom != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.ImsiRangeFrom, err = utils.ToInt64Ptr(reflectImsiRangeFrom); err != nil {
			return nil, err
		}
	}

	// Property: imsi-range-to int64
	//encoding gNMI attribute to OAPI
	reflectImsiRangeTo, err := utils.FindModelPluginObject(d.device, "DeviceGroupDeviceGroupImsisImsiRangeTo", params...)
	if err != nil {
		return nil, err
	}
	if reflectImsiRangeTo != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.ImsiRangeTo, err = utils.ToInt64Ptr(reflectImsiRangeTo); err != nil {
			return nil, err
		}
	}

	// Property: name string
	//encoding gNMI attribute to OAPI
	reflectName, err := utils.FindModelPluginObject(d.device, "DeviceGroupDeviceGroupImsisName", params...)
	if err != nil {
		return nil, err
	}
	if reflectName != nil {
		attrName := reflectName.Interface().(string)
		resource.Name = attrName
	}

	return resource, nil
}

// toEnterprise converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterprise(params ...string) (*types.Enterprise, error) {
	resource := new(types.Enterprise)

	// Property: enterprise []EnterpriseEnterprise
	// Handle []Object
	enterprises := make([]types.EnterpriseEnterprise, 0)
	reflectEnterpriseEnterprise, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterprise", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterpriseEnterprise != nil {
		for _, key := range reflectEnterpriseEnterprise.MapKeys() {
			v := reflectEnterpriseEnterprise.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			enterprise, err := d.toEnterpriseEnterprise(childParams...)
			if err != nil {
				return nil, err
			}
			enterprises = append(enterprises, *enterprise)
		}
	}
	resource.Enterprise = &enterprises

	return resource, nil
}

// toEnterpriseEnterprise converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterpriseEnterprise(params ...string) (*types.EnterpriseEnterprise, error) {
	resource := new(types.EnterpriseEnterprise)

	// Property: connectivity-service []EnterpriseEnterpriseConnectivityService
	// Handle []Object
	connectivityServices := make([]types.EnterpriseEnterpriseConnectivityService, 0)
	reflectEnterpriseEnterpriseConnectivityService, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterpriseConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterpriseEnterpriseConnectivityService != nil {
		for _, key := range reflectEnterpriseEnterpriseConnectivityService.MapKeys() {
			v := reflectEnterpriseEnterpriseConnectivityService.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			connectivityService, err := d.toEnterpriseEnterpriseConnectivityService(childParams...)
			if err != nil {
				return nil, err
			}
			connectivityServices = append(connectivityServices, *connectivityService)
		}
	}
	resource.ConnectivityService = &connectivityServices

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterpriseDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterpriseDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterpriseId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = attrId
	}

	return resource, nil
}

// toEnterpriseEnterpriseConnectivityService converts gNMI to OAPI.
func (d *ModelPluginDevice) toEnterpriseEnterpriseConnectivityService(params ...string) (*types.EnterpriseEnterpriseConnectivityService, error) {
	resource := new(types.EnterpriseEnterpriseConnectivityService)

	// Property: connectivity-service string
	//encoding gNMI attribute to OAPI
	reflectConnectivityService, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterpriseConnectivityServiceConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	if reflectConnectivityService != nil {
		attrConnectivityService := reflectConnectivityService.Interface().(string)
		resource.ConnectivityService = attrConnectivityService
	}

	// Property: enabled bool
	//encoding gNMI attribute to OAPI
	reflectEnabled, err := utils.FindModelPluginObject(d.device, "EnterpriseEnterpriseConnectivityServiceEnabled", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnabled != nil {
		boolEnabled := reflectEnabled.Interface().(bool)
		resource.Enabled = &boolEnabled
	}

	return resource, nil
}

// toIpDomain converts gNMI to OAPI.
func (d *ModelPluginDevice) toIpDomain(params ...string) (*types.IpDomain, error) {
	resource := new(types.IpDomain)

	// Property: ip-domain []IpDomainIpDomain
	// Handle []Object
	ipDomains := make([]types.IpDomainIpDomain, 0)
	reflectIpDomainIpDomain, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomain", params...)
	if err != nil {
		return nil, err
	}
	if reflectIpDomainIpDomain != nil {
		for _, key := range reflectIpDomainIpDomain.MapKeys() {
			v := reflectIpDomainIpDomain.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			ipDomain, err := d.toIpDomainIpDomain(childParams...)
			if err != nil {
				return nil, err
			}
			ipDomains = append(ipDomains, *ipDomain)
		}
	}
	resource.IpDomain = &ipDomains

	return resource, nil
}

// toIpDomainIpDomain converts gNMI to OAPI.
func (d *ModelPluginDevice) toIpDomainIpDomain(params ...string) (*types.IpDomainIpDomain, error) {
	resource := new(types.IpDomainIpDomain)

	// Property: admin-status string
	//encoding gNMI attribute to OAPI
	reflectAdminStatus, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomainAdminStatus", params...)
	if err != nil {
		return nil, err
	}
	if reflectAdminStatus != nil {
		attrAdminStatus := reflectAdminStatus.Interface().(string)
		resource.AdminStatus = &attrAdminStatus
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomainDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomainDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: dnn string
	//encoding gNMI attribute to OAPI
	reflectDnn, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomainDnn", params...)
	if err != nil {
		return nil, err
	}
	if reflectDnn != nil {
		attrDnn := reflectDnn.Interface().(string)
		resource.Dnn = &attrDnn
	}

	// Property: dns-primary string
	//encoding gNMI attribute to OAPI
	reflectDnsPrimary, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomainDnsPrimary", params...)
	if err != nil {
		return nil, err
	}
	if reflectDnsPrimary != nil {
		attrDnsPrimary := reflectDnsPrimary.Interface().(string)
		resource.DnsPrimary = &attrDnsPrimary
	}

	// Property: dns-secondary string
	//encoding gNMI attribute to OAPI
	reflectDnsSecondary, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomainDnsSecondary", params...)
	if err != nil {
		return nil, err
	}
	if reflectDnsSecondary != nil {
		attrDnsSecondary := reflectDnsSecondary.Interface().(string)
		resource.DnsSecondary = &attrDnsSecondary
	}

	// Property: enterprise string
	//encoding gNMI attribute to OAPI
	reflectEnterprise, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomainEnterprise", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprise != nil {
		attrEnterprise := reflectEnterprise.Interface().(string)
		resource.Enterprise = attrEnterprise
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomainId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = attrId
	}

	// Property: mtu int
	//encoding gNMI attribute to OAPI
	reflectMtu, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomainMtu", params...)
	if err != nil {
		return nil, err
	}
	if reflectMtu != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Mtu, err = utils.ToIntPtr(reflectMtu); err != nil {
			return nil, err
		}
	}

	// Property: subnet string
	//encoding gNMI attribute to OAPI
	reflectSubnet, err := utils.FindModelPluginObject(d.device, "IpDomainIpDomainSubnet", params...)
	if err != nil {
		return nil, err
	}
	if reflectSubnet != nil {
		attrSubnet := reflectSubnet.Interface().(string)
		resource.Subnet = attrSubnet
	}

	return resource, nil
}

// toSite converts gNMI to OAPI.
func (d *ModelPluginDevice) toSite(params ...string) (*types.Site, error) {
	resource := new(types.Site)

	// Property: site []SiteSite
	// Handle []Object
	sites := make([]types.SiteSite, 0)
	reflectSiteSite, err := utils.FindModelPluginObject(d.device, "SiteSite", params...)
	if err != nil {
		return nil, err
	}
	if reflectSiteSite != nil {
		for _, key := range reflectSiteSite.MapKeys() {
			v := reflectSiteSite.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			site, err := d.toSiteSite(childParams...)
			if err != nil {
				return nil, err
			}
			sites = append(sites, *site)
		}
	}
	resource.Site = &sites

	return resource, nil
}

// toSiteSite converts gNMI to OAPI.
func (d *ModelPluginDevice) toSiteSite(params ...string) (*types.SiteSite, error) {
	resource := new(types.SiteSite)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "SiteSiteDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "SiteSiteDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: enterprise string
	//encoding gNMI attribute to OAPI
	reflectEnterprise, err := utils.FindModelPluginObject(d.device, "SiteSiteEnterprise", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprise != nil {
		attrEnterprise := reflectEnterprise.Interface().(string)
		resource.Enterprise = attrEnterprise
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "SiteSiteId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = attrId
	}

	// Property: imsi-definition SiteSiteImsiDefinition
	//Handle object
	attrImsiDefinition, err := d.toSiteSiteImsiDefinition(params...)
	if err != nil {
		return nil, err
	}
	resource.ImsiDefinition = attrImsiDefinition

	// Property: small-cell []SiteSiteSmallCell
	// Handle []Object
	smallCells := make([]types.SiteSiteSmallCell, 0)
	reflectSiteSiteSmallCell, err := utils.FindModelPluginObject(d.device, "SiteSiteSmallCell", params...)
	if err != nil {
		return nil, err
	}
	if reflectSiteSiteSmallCell != nil {
		for _, key := range reflectSiteSiteSmallCell.MapKeys() {
			v := reflectSiteSiteSmallCell.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			smallCell, err := d.toSiteSiteSmallCell(childParams...)
			if err != nil {
				return nil, err
			}
			smallCells = append(smallCells, *smallCell)
		}
	}
	resource.SmallCell = &smallCells

	return resource, nil
}

// toSiteSiteImsiDefinition converts gNMI to OAPI.
func (d *ModelPluginDevice) toSiteSiteImsiDefinition(params ...string) (*types.SiteSiteImsiDefinition, error) {
	resource := new(types.SiteSiteImsiDefinition)

	// Property: enterprise int32
	//encoding gNMI attribute to OAPI
	reflectEnterprise, err := utils.FindModelPluginObject(d.device, "SiteSiteImsiDefinitionEnterprise", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprise != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Enterprise, err = utils.ToInt32(reflectEnterprise); err != nil {
			return nil, err
		}
	}

	// Property: format string
	//encoding gNMI attribute to OAPI
	reflectFormat, err := utils.FindModelPluginObject(d.device, "SiteSiteImsiDefinitionFormat", params...)
	if err != nil {
		return nil, err
	}
	if reflectFormat != nil {
		attrFormat := reflectFormat.Interface().(string)
		resource.Format = attrFormat
	}

	// Property: mcc string
	//encoding gNMI attribute to OAPI
	reflectMcc, err := utils.FindModelPluginObject(d.device, "SiteSiteImsiDefinitionMcc", params...)
	if err != nil {
		return nil, err
	}
	if reflectMcc != nil {
		attrMcc := reflectMcc.Interface().(string)
		resource.Mcc = attrMcc
	}

	// Property: mnc string
	//encoding gNMI attribute to OAPI
	reflectMnc, err := utils.FindModelPluginObject(d.device, "SiteSiteImsiDefinitionMnc", params...)
	if err != nil {
		return nil, err
	}
	if reflectMnc != nil {
		attrMnc := reflectMnc.Interface().(string)
		resource.Mnc = attrMnc
	}

	return resource, nil
}

// toSiteSiteSmallCell converts gNMI to OAPI.
func (d *ModelPluginDevice) toSiteSiteSmallCell(params ...string) (*types.SiteSiteSmallCell, error) {
	resource := new(types.SiteSiteSmallCell)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(d.device, "SiteSiteSmallCellAddress", params...)
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := reflectAddress.Interface().(string)
		resource.Address = &attrAddress
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(d.device, "SiteSiteSmallCellEnable", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = &boolEnable
	}

	// Property: name string
	//encoding gNMI attribute to OAPI
	reflectName, err := utils.FindModelPluginObject(d.device, "SiteSiteSmallCellName", params...)
	if err != nil {
		return nil, err
	}
	if reflectName != nil {
		attrName := reflectName.Interface().(string)
		resource.Name = attrName
	}

	// Property: tac string
	//encoding gNMI attribute to OAPI
	reflectTac, err := utils.FindModelPluginObject(d.device, "SiteSiteSmallCellTac", params...)
	if err != nil {
		return nil, err
	}
	if reflectTac != nil {
		attrTac := reflectTac.Interface().(string)
		resource.Tac = attrTac
	}

	return resource, nil
}

// toTemplate converts gNMI to OAPI.
func (d *ModelPluginDevice) toTemplate(params ...string) (*types.Template, error) {
	resource := new(types.Template)

	// Property: template []TemplateTemplate
	// Handle []Object
	templates := make([]types.TemplateTemplate, 0)
	reflectTemplateTemplate, err := utils.FindModelPluginObject(d.device, "TemplateTemplate", params...)
	if err != nil {
		return nil, err
	}
	if reflectTemplateTemplate != nil {
		for _, key := range reflectTemplateTemplate.MapKeys() {
			v := reflectTemplateTemplate.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			template, err := d.toTemplateTemplate(childParams...)
			if err != nil {
				return nil, err
			}
			templates = append(templates, *template)
		}
	}
	resource.Template = &templates

	return resource, nil
}

// toTemplateTemplate converts gNMI to OAPI.
func (d *ModelPluginDevice) toTemplateTemplate(params ...string) (*types.TemplateTemplate, error) {
	resource := new(types.TemplateTemplate)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "TemplateTemplateDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device TemplateTemplateDevice
	//Handle object
	attrDevice, err := d.toTemplateTemplateDevice(params...)
	if err != nil {
		return nil, err
	}
	resource.Device = attrDevice

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "TemplateTemplateDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "TemplateTemplateId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = attrId
	}

	// Property: sd int32
	//encoding gNMI attribute to OAPI
	reflectSd, err := utils.FindModelPluginObject(d.device, "TemplateTemplateSd", params...)
	if err != nil {
		return nil, err
	}
	if reflectSd != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sd, err = utils.ToInt32Ptr(reflectSd); err != nil {
			return nil, err
		}
	}

	// Property: slice TemplateTemplateSlice
	//Handle object
	attrSlice, err := d.toTemplateTemplateSlice(params...)
	if err != nil {
		return nil, err
	}
	resource.Slice = attrSlice

	// Property: sst int
	//encoding gNMI attribute to OAPI
	reflectSst, err := utils.FindModelPluginObject(d.device, "TemplateTemplateSst", params...)
	if err != nil {
		return nil, err
	}
	if reflectSst != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sst, err = utils.ToIntPtr(reflectSst); err != nil {
			return nil, err
		}
	}

	// Property: traffic-class string
	//encoding gNMI attribute to OAPI
	reflectTrafficClass, err := utils.FindModelPluginObject(d.device, "TemplateTemplateTrafficClass", params...)
	if err != nil {
		return nil, err
	}
	if reflectTrafficClass != nil {
		attrTrafficClass := reflectTrafficClass.Interface().(string)
		resource.TrafficClass = &attrTrafficClass
	}

	return resource, nil
}

// toTemplateTemplateDevice converts gNMI to OAPI.
func (d *ModelPluginDevice) toTemplateTemplateDevice(params ...string) (*types.TemplateTemplateDevice, error) {
	resource := new(types.TemplateTemplateDevice)

	// Property: mbr TemplateTemplateDeviceMbr
	//Handle object
	attrMbr, err := d.toTemplateTemplateDeviceMbr(params...)
	if err != nil {
		return nil, err
	}
	resource.Mbr = attrMbr

	return resource, nil
}

// toTemplateTemplateDeviceMbr converts gNMI to OAPI.
func (d *ModelPluginDevice) toTemplateTemplateDeviceMbr(params ...string) (*types.TemplateTemplateDeviceMbr, error) {
	resource := new(types.TemplateTemplateDeviceMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(d.device, "TemplateTemplateDeviceMbrDownlink", params...)
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(d.device, "TemplateTemplateDeviceMbrUplink", params...)
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toTemplateTemplateSlice converts gNMI to OAPI.
func (d *ModelPluginDevice) toTemplateTemplateSlice(params ...string) (*types.TemplateTemplateSlice, error) {
	resource := new(types.TemplateTemplateSlice)

	// Property: mbr TemplateTemplateSliceMbr
	//Handle object
	attrMbr, err := d.toTemplateTemplateSliceMbr(params...)
	if err != nil {
		return nil, err
	}
	resource.Mbr = attrMbr

	return resource, nil
}

// toTemplateTemplateSliceMbr converts gNMI to OAPI.
func (d *ModelPluginDevice) toTemplateTemplateSliceMbr(params ...string) (*types.TemplateTemplateSliceMbr, error) {
	resource := new(types.TemplateTemplateSliceMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(d.device, "TemplateTemplateSliceMbrDownlink", params...)
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(d.device, "TemplateTemplateSliceMbrUplink", params...)
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toTrafficClass converts gNMI to OAPI.
func (d *ModelPluginDevice) toTrafficClass(params ...string) (*types.TrafficClass, error) {
	resource := new(types.TrafficClass)

	// Property: traffic-class []TrafficClassTrafficClass
	// Handle []Object
	trafficClasss := make([]types.TrafficClassTrafficClass, 0)
	reflectTrafficClassTrafficClass, err := utils.FindModelPluginObject(d.device, "TrafficClassTrafficClass", params...)
	if err != nil {
		return nil, err
	}
	if reflectTrafficClassTrafficClass != nil {
		for _, key := range reflectTrafficClassTrafficClass.MapKeys() {
			v := reflectTrafficClassTrafficClass.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			trafficClass, err := d.toTrafficClassTrafficClass(childParams...)
			if err != nil {
				return nil, err
			}
			trafficClasss = append(trafficClasss, *trafficClass)
		}
	}
	resource.TrafficClass = &trafficClasss

	return resource, nil
}

// toTrafficClassTrafficClass converts gNMI to OAPI.
func (d *ModelPluginDevice) toTrafficClassTrafficClass(params ...string) (*types.TrafficClassTrafficClass, error) {
	resource := new(types.TrafficClassTrafficClass)

	// Property: arp int
	//encoding gNMI attribute to OAPI
	reflectArp, err := utils.FindModelPluginObject(d.device, "TrafficClassTrafficClassArp", params...)
	if err != nil {
		return nil, err
	}
	if reflectArp != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Arp, err = utils.ToIntPtr(reflectArp); err != nil {
			return nil, err
		}
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "TrafficClassTrafficClassDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "TrafficClassTrafficClassDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "TrafficClassTrafficClassId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = attrId
	}

	// Property: qci int
	//encoding gNMI attribute to OAPI
	reflectQci, err := utils.FindModelPluginObject(d.device, "TrafficClassTrafficClassQci", params...)
	if err != nil {
		return nil, err
	}
	if reflectQci != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Qci, err = utils.ToIntPtr(reflectQci); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toUpf converts gNMI to OAPI.
func (d *ModelPluginDevice) toUpf(params ...string) (*types.Upf, error) {
	resource := new(types.Upf)

	// Property: upf []UpfUpf
	// Handle []Object
	upfs := make([]types.UpfUpf, 0)
	reflectUpfUpf, err := utils.FindModelPluginObject(d.device, "UpfUpf", params...)
	if err != nil {
		return nil, err
	}
	if reflectUpfUpf != nil {
		for _, key := range reflectUpfUpf.MapKeys() {
			v := reflectUpfUpf.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			upf, err := d.toUpfUpf(childParams...)
			if err != nil {
				return nil, err
			}
			upfs = append(upfs, *upf)
		}
	}
	resource.Upf = &upfs

	return resource, nil
}

// toUpfUpf converts gNMI to OAPI.
func (d *ModelPluginDevice) toUpfUpf(params ...string) (*types.UpfUpf, error) {
	resource := new(types.UpfUpf)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(d.device, "UpfUpfAddress", params...)
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := reflectAddress.Interface().(string)
		resource.Address = attrAddress
	}

	// Property: config-endpoint string
	//encoding gNMI attribute to OAPI
	reflectConfigEndpoint, err := utils.FindModelPluginObject(d.device, "UpfUpfConfigEndpoint", params...)
	if err != nil {
		return nil, err
	}
	if reflectConfigEndpoint != nil {
		attrConfigEndpoint := reflectConfigEndpoint.Interface().(string)
		resource.ConfigEndpoint = &attrConfigEndpoint
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "UpfUpfDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "UpfUpfDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: enterprise string
	//encoding gNMI attribute to OAPI
	reflectEnterprise, err := utils.FindModelPluginObject(d.device, "UpfUpfEnterprise", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprise != nil {
		attrEnterprise := reflectEnterprise.Interface().(string)
		resource.Enterprise = attrEnterprise
	}

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "UpfUpfId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = attrId
	}

	// Property: port int
	//encoding gNMI attribute to OAPI
	reflectPort, err := utils.FindModelPluginObject(d.device, "UpfUpfPort", params...)
	if err != nil {
		return nil, err
	}
	if reflectPort != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Port, err = utils.ToInt(reflectPort); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toVcs converts gNMI to OAPI.
func (d *ModelPluginDevice) toVcs(params ...string) (*types.Vcs, error) {
	resource := new(types.Vcs)

	// Property: vcs []VcsVcs
	// Handle []Object
	vcss := make([]types.VcsVcs, 0)
	reflectVcsVcs, err := utils.FindModelPluginObject(d.device, "VcsVcs", params...)
	if err != nil {
		return nil, err
	}
	if reflectVcsVcs != nil {
		for _, key := range reflectVcsVcs.MapKeys() {
			v := reflectVcsVcs.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			vcs, err := d.toVcsVcs(childParams...)
			if err != nil {
				return nil, err
			}
			vcss = append(vcss, *vcs)
		}
	}
	resource.Vcs = &vcss

	return resource, nil
}

// toVcsVcs converts gNMI to OAPI.
func (d *ModelPluginDevice) toVcsVcs(params ...string) (*types.VcsVcs, error) {
	resource := new(types.VcsVcs)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(d.device, "VcsVcsDescription", params...)
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device VcsVcsDevice
	//Handle object
	attrDevice, err := d.toVcsVcsDevice(params...)
	if err != nil {
		return nil, err
	}
	resource.Device = attrDevice

	// Property: device-group []VcsVcsDeviceGroup
	// Handle []Object
	deviceGroups := make([]types.VcsVcsDeviceGroup, 0)
	reflectVcsVcsDeviceGroup, err := utils.FindModelPluginObject(d.device, "VcsVcsDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	if reflectVcsVcsDeviceGroup != nil {
		for _, key := range reflectVcsVcsDeviceGroup.MapKeys() {
			v := reflectVcsVcsDeviceGroup.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			deviceGroup, err := d.toVcsVcsDeviceGroup(childParams...)
			if err != nil {
				return nil, err
			}
			deviceGroups = append(deviceGroups, *deviceGroup)
		}
	}
	resource.DeviceGroup = &deviceGroups

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(d.device, "VcsVcsDisplayName", params...)
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: enterprise string
	//encoding gNMI attribute to OAPI
	reflectEnterprise, err := utils.FindModelPluginObject(d.device, "VcsVcsEnterprise", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnterprise != nil {
		attrEnterprise := reflectEnterprise.Interface().(string)
		resource.Enterprise = attrEnterprise
	}

	// Property: filter []VcsVcsFilter
	// Handle []Object
	filters := make([]types.VcsVcsFilter, 0)
	reflectVcsVcsFilter, err := utils.FindModelPluginObject(d.device, "VcsVcsFilter", params...)
	if err != nil {
		return nil, err
	}
	if reflectVcsVcsFilter != nil {
		for _, key := range reflectVcsVcsFilter.MapKeys() {
			v := reflectVcsVcsFilter.MapIndex(key).Interface()
			// Pass down all top level properties as we don't know which one(s) is key
			attribs, err := utils.ExtractGnmiListKeyMap(v)
			if err != nil {
				return nil, err
			}
			childParams := make([]string, len(params))
			copy(childParams, params)
			for _, attribVal := range attribs {
				childParams = append(childParams, fmt.Sprintf("%v", attribVal))
			}
			filter, err := d.toVcsVcsFilter(childParams...)
			if err != nil {
				return nil, err
			}
			filters = append(filters, *filter)
		}
	}
	resource.Filter = &filters

	// Property: id string
	//encoding gNMI attribute to OAPI
	reflectId, err := utils.FindModelPluginObject(d.device, "VcsVcsId", params...)
	if err != nil {
		return nil, err
	}
	if reflectId != nil {
		attrId := reflectId.Interface().(string)
		resource.Id = attrId
	}

	// Property: sd int32
	//encoding gNMI attribute to OAPI
	reflectSd, err := utils.FindModelPluginObject(d.device, "VcsVcsSd", params...)
	if err != nil {
		return nil, err
	}
	if reflectSd != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sd, err = utils.ToInt32(reflectSd); err != nil {
			return nil, err
		}
	}

	// Property: slice VcsVcsSlice
	//Handle object
	attrSlice, err := d.toVcsVcsSlice(params...)
	if err != nil {
		return nil, err
	}
	resource.Slice = attrSlice

	// Property: sst int
	//encoding gNMI attribute to OAPI
	reflectSst, err := utils.FindModelPluginObject(d.device, "VcsVcsSst", params...)
	if err != nil {
		return nil, err
	}
	if reflectSst != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sst, err = utils.ToInt(reflectSst); err != nil {
			return nil, err
		}
	}

	// Property: template string
	//encoding gNMI attribute to OAPI
	reflectTemplate, err := utils.FindModelPluginObject(d.device, "VcsVcsTemplate", params...)
	if err != nil {
		return nil, err
	}
	if reflectTemplate != nil {
		attrTemplate := reflectTemplate.Interface().(string)
		resource.Template = &attrTemplate
	}

	// Property: traffic-class string
	//encoding gNMI attribute to OAPI
	reflectTrafficClass, err := utils.FindModelPluginObject(d.device, "VcsVcsTrafficClass", params...)
	if err != nil {
		return nil, err
	}
	if reflectTrafficClass != nil {
		attrTrafficClass := reflectTrafficClass.Interface().(string)
		resource.TrafficClass = attrTrafficClass
	}

	// Property: upf string
	//encoding gNMI attribute to OAPI
	reflectUpf, err := utils.FindModelPluginObject(d.device, "VcsVcsUpf", params...)
	if err != nil {
		return nil, err
	}
	if reflectUpf != nil {
		attrUpf := reflectUpf.Interface().(string)
		resource.Upf = &attrUpf
	}

	return resource, nil
}

// toVcsVcsDevice converts gNMI to OAPI.
func (d *ModelPluginDevice) toVcsVcsDevice(params ...string) (*types.VcsVcsDevice, error) {
	resource := new(types.VcsVcsDevice)

	// Property: mbr VcsVcsDeviceMbr
	//Handle object
	attrMbr, err := d.toVcsVcsDeviceMbr(params...)
	if err != nil {
		return nil, err
	}
	resource.Mbr = attrMbr

	return resource, nil
}

// toVcsVcsDeviceGroup converts gNMI to OAPI.
func (d *ModelPluginDevice) toVcsVcsDeviceGroup(params ...string) (*types.VcsVcsDeviceGroup, error) {
	resource := new(types.VcsVcsDeviceGroup)

	// Property: device-group string
	//encoding gNMI attribute to OAPI
	reflectDeviceGroup, err := utils.FindModelPluginObject(d.device, "VcsVcsDeviceGroupDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroup != nil {
		attrDeviceGroup := reflectDeviceGroup.Interface().(string)
		resource.DeviceGroup = attrDeviceGroup
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(d.device, "VcsVcsDeviceGroupEnable", params...)
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = &boolEnable
	}

	return resource, nil
}

// toVcsVcsDeviceMbr converts gNMI to OAPI.
func (d *ModelPluginDevice) toVcsVcsDeviceMbr(params ...string) (*types.VcsVcsDeviceMbr, error) {
	resource := new(types.VcsVcsDeviceMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(d.device, "VcsVcsDeviceMbrDownlink", params...)
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(d.device, "VcsVcsDeviceMbrUplink", params...)
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toVcsVcsFilter converts gNMI to OAPI.
func (d *ModelPluginDevice) toVcsVcsFilter(params ...string) (*types.VcsVcsFilter, error) {
	resource := new(types.VcsVcsFilter)

	// Property: allow bool
	//encoding gNMI attribute to OAPI
	reflectAllow, err := utils.FindModelPluginObject(d.device, "VcsVcsFilterAllow", params...)
	if err != nil {
		return nil, err
	}
	if reflectAllow != nil {
		boolAllow := reflectAllow.Interface().(bool)
		resource.Allow = &boolAllow
	}

	// Property: application string
	//encoding gNMI attribute to OAPI
	reflectApplication, err := utils.FindModelPluginObject(d.device, "VcsVcsFilterApplication", params...)
	if err != nil {
		return nil, err
	}
	if reflectApplication != nil {
		attrApplication := reflectApplication.Interface().(string)
		resource.Application = attrApplication
	}

	// Property: priority int
	//encoding gNMI attribute to OAPI
	reflectPriority, err := utils.FindModelPluginObject(d.device, "VcsVcsFilterPriority", params...)
	if err != nil {
		return nil, err
	}
	if reflectPriority != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Priority, err = utils.ToIntPtr(reflectPriority); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toVcsVcsSlice converts gNMI to OAPI.
func (d *ModelPluginDevice) toVcsVcsSlice(params ...string) (*types.VcsVcsSlice, error) {
	resource := new(types.VcsVcsSlice)

	// Property: mbr VcsVcsSliceMbr
	//Handle object
	attrMbr, err := d.toVcsVcsSliceMbr(params...)
	if err != nil {
		return nil, err
	}
	resource.Mbr = attrMbr

	return resource, nil
}

// toVcsVcsSliceMbr converts gNMI to OAPI.
func (d *ModelPluginDevice) toVcsVcsSliceMbr(params ...string) (*types.VcsVcsSliceMbr, error) {
	resource := new(types.VcsVcsSliceMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(d.device, "VcsVcsSliceMbrDownlink", params...)
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(d.device, "VcsVcsSliceMbrUplink", params...)
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toTarget converts gNMI to OAPI.
func (d *ModelPluginDevice) toTarget(params ...string) (*types.Target, error) {
	resource := new(types.Target)

	return resource, nil
}

//Ignoring RequestBodyApplication

//Ignoring RequestBodyApplicationApplication

//Ignoring RequestBodyApplicationApplicationEndpoint

//Ignoring RequestBodyApplicationApplicationEndpointMbr

//Ignoring RequestBodyConnectivityService

//Ignoring RequestBodyConnectivityServiceConnectivityService

//Ignoring RequestBodyDeviceGroup

//Ignoring RequestBodyDeviceGroupDeviceGroup

//Ignoring RequestBodyDeviceGroupDeviceGroupImsis

//Ignoring RequestBodyEnterprise

//Ignoring RequestBodyEnterpriseEnterprise

//Ignoring RequestBodyEnterpriseEnterpriseConnectivityService

//Ignoring RequestBodyIpDomain

//Ignoring RequestBodyIpDomainIpDomain

//Ignoring RequestBodySite

//Ignoring RequestBodySiteSite

//Ignoring RequestBodySiteSiteImsiDefinition

//Ignoring RequestBodySiteSiteSmallCell

//Ignoring RequestBodyTemplate

//Ignoring RequestBodyTemplateTemplate

//Ignoring RequestBodyTemplateTemplateDevice

//Ignoring RequestBodyTemplateTemplateDeviceMbr

//Ignoring RequestBodyTemplateTemplateSlice

//Ignoring RequestBodyTemplateTemplateSliceMbr

//Ignoring RequestBodyTrafficClass

//Ignoring RequestBodyTrafficClassTrafficClass

//Ignoring RequestBodyUpf

//Ignoring RequestBodyUpfUpf

//Ignoring RequestBodyVcs

//Ignoring RequestBodyVcsVcs

//Ignoring RequestBodyVcsVcsDevice

//Ignoring RequestBodyVcsVcsDeviceGroup

//Ignoring RequestBodyVcsVcsDeviceMbr

//Ignoring RequestBodyVcsVcsFilter

//Ignoring RequestBodyVcsVcsSlice

//Ignoring RequestBodyVcsVcsSliceMbr

// Not generating param-types
// Not generating request-bodies

// Not generating additional-properties
// Not generating additional-properties
