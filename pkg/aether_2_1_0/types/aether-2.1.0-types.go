// Code generated by oapi-codegen. DO NOT EDIT.
// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package types

import (
	"encoding/json"
	"fmt"

	"github.com/pkg/errors"
)

// AccessProfile defines model for Access-profile.
type AccessProfile struct {
	AccessProfile        *[]AccessProfileAccessProfile       `json:"access-profile,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// AccessProfileAccessProfile defines model for Access-profile_Access-profile.
type AccessProfileAccessProfile struct {

	// description of this profile
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// filter
	Filter *string `json:"filter,omitempty"`

	// ID for this access profile.
	Id *string `json:"id,omitempty"`

	// type of profile
	Type                 *string                             `json:"type,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// Used for updates
type AdditionalPropertyTarget struct {
	Target *string `json:"target,omitempty"`
}

// ApnProfile defines model for Apn-profile.
type ApnProfile struct {
	ApnProfile           *[]ApnProfileApnProfile             `json:"apn-profile,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ApnProfileApnProfile defines model for Apn-profile_Apn-profile.
type ApnProfileApnProfile struct {

	// apn name
	ApnName *string `json:"apn-name,omitempty"`

	// description of this profile
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// primary dns server name
	DnsPrimary *string `json:"dns-primary,omitempty"`

	// secondary dns server name
	DnsSecondary *string `json:"dns-secondary,omitempty"`

	// enable gx interface
	GxEnabled *bool `json:"gx-enabled,omitempty"`

	// ID for this apn profile.
	Id *string `json:"id,omitempty"`

	// maximum transmission unit
	Mtu *int32 `json:"mtu,omitempty"`

	// Link to service group
	ServiceGroup         *string                             `json:"service-group,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ConnectivityService defines model for Connectivity-service.
type ConnectivityService struct {
	ConnectivityService  *[]ConnectivityServiceConnectivityService `json:"connectivity-service,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget       `json:"-"`
}

// ConnectivityServiceConnectivityService defines model for Connectivity-service_Connectivity-service.
type ConnectivityServiceConnectivityService struct {

	// description of this connectivity service
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// url of the hss service
	HssEndpoint *string `json:"hss-endpoint,omitempty"`

	// ID for this connectivity service.
	Id *string `json:"id,omitempty"`

	// url of the pcrf service
	PcrfEndpoint *string `json:"pcrf-endpoint,omitempty"`

	// url of the spgwc service
	SpgwcEndpoint        *string                             `json:"spgwc-endpoint,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// Enterprise defines model for Enterprise.
type Enterprise struct {
	Enterprise           *[]EnterpriseEnterprise             `json:"enterprise,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// EnterpriseEnterprise defines model for Enterprise_Enterprise.
type EnterpriseEnterprise struct {
	ConnectivityService *[]EnterpriseEnterpriseConnectivityService `json:"connectivity-service,omitempty"`

	// description of this enterprise
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// ID for this enterprise.
	Id                   *string                             `json:"id,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// EnterpriseEnterpriseConnectivityService defines model for Enterprise_Enterprise_Connectivity-service.
type EnterpriseEnterpriseConnectivityService struct {

	// Link to connectivity services where configuration should be pushed for this enterprise's devices
	ConnectivityService *string `json:"connectivity-service,omitempty"`

	// Allow or disallow pushes to this connectivity service
	Enabled              *bool                               `json:"enabled,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// QosProfile defines model for Qos-profile.
type QosProfile struct {
	QosProfile           *[]QosProfileQosProfile             `json:"qos-profile,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// QosProfileQosProfile defines model for Qos-profile_Qos-profile.
type QosProfileQosProfile struct {
	ApnAmbr *QosProfileQosProfileApnAmbr `json:"apn-ambr,omitempty"`
	Arp     *QosProfileQosProfileArp     `json:"arp,omitempty"`

	// description of this profile
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// ID for this qos profile.
	Id *string `json:"id,omitempty"`

	// QoS Class Identifier
	Qci                  *int32                              `json:"qci,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// QosProfileQosProfileApnAmbr defines model for Qos-profile_Qos-profile_Apn-ambr.
type QosProfileQosProfileApnAmbr struct {

	// Downstream aggregate maximum bit rate
	Downlink *int32 `json:"downlink,omitempty"`

	// Upstream aggregate maximum bit rate
	Uplink               *int32                              `json:"uplink,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// QosProfileQosProfileArp defines model for Qos-profile_Qos-profile_Arp.
type QosProfileQosProfileArp struct {

	// True if a bearer with lower priority should be dropped
	PreemptionCapability *bool `json:"preemption-capability,omitempty"`

	// This bearer may be dropped for a bearer with higher priority
	PreemptionVulnerability *bool `json:"preemption-vulnerability,omitempty"`

	// Priority
	Priority             *int32                              `json:"priority,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// SecurityProfile defines model for Security-profile.
type SecurityProfile struct {
	SecurityProfile      *[]SecurityProfileSecurityProfile   `json:"security-profile,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// SecurityProfileSecurityProfile defines model for Security-profile_Security-profile.
type SecurityProfileSecurityProfile struct {

	// description of this security profile
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// ID for this security profile.
	Id *string `json:"id,omitempty"`

	// Secret key for USIM
	Key *string `json:"key,omitempty"`

	// Secret key for Operator
	Opc *string `json:"opc,omitempty"`

	// sequence number
	Sqn                  *int32                              `json:"sqn,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ServiceGroup defines model for Service-group.
type ServiceGroup struct {
	ServiceGroup         *[]ServiceGroupServiceGroup         `json:"service-group,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ServiceGroupServiceGroup defines model for Service-group_Service-group.
type ServiceGroupServiceGroup struct {

	// description of this service group
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// ID for this service group.
	Id                   *string                                    `json:"id,omitempty"`
	ServicePolicies      *[]ServiceGroupServiceGroupServicePolicies `json:"service-policies,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget        `json:"-"`
}

// ServiceGroupServiceGroupServicePolicies defines model for Service-group_Service-group_Service-policies.
type ServiceGroupServiceGroupServicePolicies struct {

	// Type of service link
	Kind *string `json:"kind,omitempty"`

	// Link to service policy
	ServicePolicy        *string                             `json:"service-policy,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ServicePolicy defines model for Service-policy.
type ServicePolicy struct {
	ServicePolicy        *[]ServicePolicyServicePolicy       `json:"service-policy,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ServicePolicyServicePolicy defines model for Service-policy_Service-policy.
type ServicePolicyServicePolicy struct {
	Ambr *ServicePolicyServicePolicyAmbr `json:"ambr,omitempty"`

	// Evolved-ARP
	Arp *int32 `json:"arp,omitempty"`

	// description of this profile
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// ID for this service.
	Id *string `json:"id,omitempty"`

	// QoS Class Identifier
	Qci                  *int32                              `json:"qci,omitempty"`
	Rules                *[]ServicePolicyServicePolicyRules  `json:"rules,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ServicePolicyServicePolicyAmbr defines model for Service-policy_Service-policy_Ambr.
type ServicePolicyServicePolicyAmbr struct {

	// Downstream aggregate maximum bit rate
	Downlink *int32 `json:"downlink,omitempty"`

	// Upstream aggregate maximum bit rate
	Uplink               *int32                              `json:"uplink,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ServicePolicyServicePolicyRules defines model for Service-policy_Service-policy_Rules.
type ServicePolicyServicePolicyRules struct {

	// Enable or disable this service to use this rule
	Enabled *bool `json:"enabled,omitempty"`

	// Link to service rule
	Rule                 *string                             `json:"rule,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ServiceRule defines model for Service-rule.
type ServiceRule struct {
	ServiceRule          *[]ServiceRuleServiceRule           `json:"service-rule,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ServiceRuleServiceRule defines model for Service-rule_Service-rule.
type ServiceRuleServiceRule struct {

	// name of charging rule
	ChargingRuleName *string `json:"charging-rule-name,omitempty"`

	// description of this rule
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string                     `json:"display-name,omitempty"`
	Flow        *ServiceRuleServiceRuleFlow `json:"flow,omitempty"`

	// ID for this service.
	Id                   *string                             `json:"id,omitempty"`
	Qos                  *ServiceRuleServiceRuleQos          `json:"qos,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ServiceRuleServiceRuleFlow defines model for Service-rule_Service-rule_Flow.
type ServiceRuleServiceRuleFlow struct {

	// specification of this flow
	Specification        *string                             `json:"specification,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ServiceRuleServiceRuleQos defines model for Service-rule_Service-rule_Qos.
type ServiceRuleServiceRuleQos struct {
	AggregateMaximumBitrate   *ServiceRuleServiceRuleQosAggregateMaximumBitrate   `json:"aggregate-maximum-bitrate,omitempty"`
	Arp                       *ServiceRuleServiceRuleQosArp                       `json:"arp,omitempty"`
	GuaranteedBitrate         *ServiceRuleServiceRuleQosGuaranteedBitrate         `json:"guaranteed-bitrate,omitempty"`
	MaximumRequestedBandwidth *ServiceRuleServiceRuleQosMaximumRequestedBandwidth `json:"maximum-requested-bandwidth,omitempty"`

	// QoS Class Identifier
	Qci                  *int32                              `json:"qci,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ServiceRuleServiceRuleQosAggregateMaximumBitrate defines model for Service-rule_Service-rule_Qos_Aggregate-maximum-bitrate.
type ServiceRuleServiceRuleQosAggregateMaximumBitrate struct {

	// Downstream aggregate maximum bitrate
	Downlink *int32 `json:"downlink,omitempty"`

	// Upstream aggregate maximum bitrate
	Uplink               *int32                              `json:"uplink,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ServiceRuleServiceRuleQosArp defines model for Service-rule_Service-rule_Qos_Arp.
type ServiceRuleServiceRuleQosArp struct {

	// True if a bearer with lower priority should be dropped
	PreemptionCapability *bool `json:"preemption-capability,omitempty"`

	// This bearer may be dropped for a bearer with higher priority
	PreemptionVulnerability *bool `json:"preemption-vulnerability,omitempty"`

	// Priority
	Priority             *int32                              `json:"priority,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ServiceRuleServiceRuleQosGuaranteedBitrate defines model for Service-rule_Service-rule_Qos_Guaranteed-bitrate.
type ServiceRuleServiceRuleQosGuaranteedBitrate struct {

	// Downstream guaranteed bitrate
	Downlink *int32 `json:"downlink,omitempty"`

	// Upstream guaranteed bitrate
	Uplink               *int32                              `json:"uplink,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// ServiceRuleServiceRuleQosMaximumRequestedBandwidth defines model for Service-rule_Service-rule_Qos_Maximum-requested-bandwidth.
type ServiceRuleServiceRuleQosMaximumRequestedBandwidth struct {

	// Downstream maximum requested bandwidth
	Downlink *int32 `json:"downlink,omitempty"`

	// Upstream maximum requested bandwidth
	Uplink               *int32                              `json:"uplink,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// Subscriber defines model for Subscriber.
type Subscriber struct {
	Ue                   *[]SubscriberUe                     `json:"ue,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// SubscriberUe defines model for Subscriber_Ue.
type SubscriberUe struct {

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// Enable or disable this ue
	Enabled *bool `json:"enabled,omitempty"`

	// Link to enterprise that owns this UE range
	Enterprise *string `json:"enterprise,omitempty"`

	// identifier for this subscriber, typically a UUID
	Id *string `json:"id,omitempty"`

	// For choice imsi:range
	ImsiRangeFrom *int64 `json:"imsi-range-from,omitempty"`

	// For choice imsi:range
	ImsiRangeTo *int64 `json:"imsi-range-to,omitempty"`

	// For choice imsi:wildcard
	ImsiWildcard *string `json:"imsi-wildcard,omitempty"`

	// Priority for this subscriber range
	Priority *int32                `json:"priority,omitempty"`
	Profiles *SubscriberUeProfiles `json:"profiles,omitempty"`

	// requested access point name
	RequestedApn         *string                             `json:"requested-apn,omitempty"`
	ServingPlmn          *SubscriberUeServingPlmn            `json:"serving-plmn,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// SubscriberUeProfiles defines model for Subscriber_Ue_Profiles.
type SubscriberUeProfiles struct {
	AccessProfile *[]SubscriberUeProfilesAccessProfile `json:"access-profile,omitempty"`

	// Link to apn profile
	ApnProfile *string `json:"apn-profile,omitempty"`

	// Link to qos profile
	QosProfile *string `json:"qos-profile,omitempty"`

	// Link to security profile
	SecurityProfile *string `json:"security-profile,omitempty"`

	// Link to user plane profile
	UpProfile            *string                             `json:"up-profile,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// SubscriberUeProfilesAccessProfile defines model for Subscriber_Ue_Profiles_Access-profile.
type SubscriberUeProfilesAccessProfile struct {

	// Link to access profile
	AccessProfile *string `json:"access-profile,omitempty"`

	// Allow or disallow this ue to use this access profile
	Allowed              *bool                               `json:"allowed,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// SubscriberUeServingPlmn defines model for Subscriber_Ue_Serving-plmn.
type SubscriberUeServingPlmn struct {

	// mobile country code
	Mcc *int32 `json:"mcc,omitempty"`

	// mobile network code
	Mnc *int32 `json:"mnc,omitempty"`

	// type allocation code
	Tac                  *int32                              `json:"tac,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// UpProfile defines model for Up-profile.
type UpProfile struct {
	UpProfile            *[]UpProfileUpProfile               `json:"up-profile,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// UpProfileUpProfile defines model for Up-profile_Up-profile.
type UpProfileUpProfile struct {

	// access control policy
	AccessControl *string `json:"access-control,omitempty"`

	// description of this profile
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// ID for this user plane profile.
	Id *string `json:"id,omitempty"`

	// user plane name
	UserPlane            *string                             `json:"user-plane,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-"`
}

// target (device in onos-config)
type Target string

// RequestBodyAccessProfile defines model for RequestBody_Access-profile.
type RequestBodyAccessProfile AccessProfile

// RequestBodyAccessProfileAccessProfile defines model for RequestBody_Access-profile_Access-profile.
type RequestBodyAccessProfileAccessProfile AccessProfileAccessProfile

// RequestBodyApnProfile defines model for RequestBody_Apn-profile.
type RequestBodyApnProfile ApnProfile

// RequestBodyApnProfileApnProfile defines model for RequestBody_Apn-profile_Apn-profile.
type RequestBodyApnProfileApnProfile ApnProfileApnProfile

// RequestBodyConnectivityService defines model for RequestBody_Connectivity-service.
type RequestBodyConnectivityService ConnectivityService

// RequestBodyConnectivityServiceConnectivityService defines model for RequestBody_Connectivity-service_Connectivity-service.
type RequestBodyConnectivityServiceConnectivityService ConnectivityServiceConnectivityService

// RequestBodyEnterprise defines model for RequestBody_Enterprise.
type RequestBodyEnterprise Enterprise

// RequestBodyEnterpriseEnterprise defines model for RequestBody_Enterprise_Enterprise.
type RequestBodyEnterpriseEnterprise EnterpriseEnterprise

// RequestBodyEnterpriseEnterpriseConnectivityService defines model for RequestBody_Enterprise_Enterprise_Connectivity-service.
type RequestBodyEnterpriseEnterpriseConnectivityService EnterpriseEnterpriseConnectivityService

// RequestBodyQosProfile defines model for RequestBody_Qos-profile.
type RequestBodyQosProfile QosProfile

// RequestBodyQosProfileQosProfile defines model for RequestBody_Qos-profile_Qos-profile.
type RequestBodyQosProfileQosProfile QosProfileQosProfile

// RequestBodyQosProfileQosProfileApnAmbr defines model for RequestBody_Qos-profile_Qos-profile_Apn-ambr.
type RequestBodyQosProfileQosProfileApnAmbr QosProfileQosProfileApnAmbr

// RequestBodyQosProfileQosProfileArp defines model for RequestBody_Qos-profile_Qos-profile_Arp.
type RequestBodyQosProfileQosProfileArp QosProfileQosProfileArp

// RequestBodySecurityProfile defines model for RequestBody_Security-profile.
type RequestBodySecurityProfile SecurityProfile

// RequestBodySecurityProfileSecurityProfile defines model for RequestBody_Security-profile_Security-profile.
type RequestBodySecurityProfileSecurityProfile SecurityProfileSecurityProfile

// RequestBodyServiceGroup defines model for RequestBody_Service-group.
type RequestBodyServiceGroup ServiceGroup

// RequestBodyServiceGroupServiceGroup defines model for RequestBody_Service-group_Service-group.
type RequestBodyServiceGroupServiceGroup ServiceGroupServiceGroup

// RequestBodyServiceGroupServiceGroupServicePolicies defines model for RequestBody_Service-group_Service-group_Service-policies.
type RequestBodyServiceGroupServiceGroupServicePolicies ServiceGroupServiceGroupServicePolicies

// RequestBodyServicePolicy defines model for RequestBody_Service-policy.
type RequestBodyServicePolicy ServicePolicy

// RequestBodyServicePolicyServicePolicy defines model for RequestBody_Service-policy_Service-policy.
type RequestBodyServicePolicyServicePolicy ServicePolicyServicePolicy

// RequestBodyServicePolicyServicePolicyAmbr defines model for RequestBody_Service-policy_Service-policy_Ambr.
type RequestBodyServicePolicyServicePolicyAmbr ServicePolicyServicePolicyAmbr

// RequestBodyServicePolicyServicePolicyRules defines model for RequestBody_Service-policy_Service-policy_Rules.
type RequestBodyServicePolicyServicePolicyRules ServicePolicyServicePolicyRules

// RequestBodyServiceRule defines model for RequestBody_Service-rule.
type RequestBodyServiceRule ServiceRule

// RequestBodyServiceRuleServiceRule defines model for RequestBody_Service-rule_Service-rule.
type RequestBodyServiceRuleServiceRule ServiceRuleServiceRule

// RequestBodyServiceRuleServiceRuleFlow defines model for RequestBody_Service-rule_Service-rule_Flow.
type RequestBodyServiceRuleServiceRuleFlow ServiceRuleServiceRuleFlow

// RequestBodyServiceRuleServiceRuleQos defines model for RequestBody_Service-rule_Service-rule_Qos.
type RequestBodyServiceRuleServiceRuleQos ServiceRuleServiceRuleQos

// RequestBodyServiceRuleServiceRuleQosAggregateMaximumBitrate defines model for RequestBody_Service-rule_Service-rule_Qos_Aggregate-maximum-bitrate.
type RequestBodyServiceRuleServiceRuleQosAggregateMaximumBitrate ServiceRuleServiceRuleQosAggregateMaximumBitrate

// RequestBodyServiceRuleServiceRuleQosArp defines model for RequestBody_Service-rule_Service-rule_Qos_Arp.
type RequestBodyServiceRuleServiceRuleQosArp ServiceRuleServiceRuleQosArp

// RequestBodyServiceRuleServiceRuleQosGuaranteedBitrate defines model for RequestBody_Service-rule_Service-rule_Qos_Guaranteed-bitrate.
type RequestBodyServiceRuleServiceRuleQosGuaranteedBitrate ServiceRuleServiceRuleQosGuaranteedBitrate

// RequestBodyServiceRuleServiceRuleQosMaximumRequestedBandwidth defines model for RequestBody_Service-rule_Service-rule_Qos_Maximum-requested-bandwidth.
type RequestBodyServiceRuleServiceRuleQosMaximumRequestedBandwidth ServiceRuleServiceRuleQosMaximumRequestedBandwidth

// RequestBodySubscriber defines model for RequestBody_Subscriber.
type RequestBodySubscriber Subscriber

// RequestBodySubscriberUe defines model for RequestBody_Subscriber_Ue.
type RequestBodySubscriberUe SubscriberUe

// RequestBodySubscriberUeProfiles defines model for RequestBody_Subscriber_Ue_Profiles.
type RequestBodySubscriberUeProfiles SubscriberUeProfiles

// RequestBodySubscriberUeProfilesAccessProfile defines model for RequestBody_Subscriber_Ue_Profiles_Access-profile.
type RequestBodySubscriberUeProfilesAccessProfile SubscriberUeProfilesAccessProfile

// RequestBodySubscriberUeServingPlmn defines model for RequestBody_Subscriber_Ue_Serving-plmn.
type RequestBodySubscriberUeServingPlmn SubscriberUeServingPlmn

// RequestBodyUpProfile defines model for RequestBody_Up-profile.
type RequestBodyUpProfile UpProfile

// RequestBodyUpProfileUpProfile defines model for RequestBody_Up-profile_Up-profile.
type RequestBodyUpProfileUpProfile UpProfileUpProfile

// PostAccessProfileJSONRequestBody defines body for PostAccessProfile for application/json ContentType.
type PostAccessProfileJSONRequestBody RequestBodyAccessProfile

// PostAccessProfileAccessProfileJSONRequestBody defines body for PostAccessProfileAccessProfile for application/json ContentType.
type PostAccessProfileAccessProfileJSONRequestBody RequestBodyAccessProfileAccessProfile

// PostApnProfileJSONRequestBody defines body for PostApnProfile for application/json ContentType.
type PostApnProfileJSONRequestBody RequestBodyApnProfile

// PostApnProfileApnProfileJSONRequestBody defines body for PostApnProfileApnProfile for application/json ContentType.
type PostApnProfileApnProfileJSONRequestBody RequestBodyApnProfileApnProfile

// PostConnectivityServiceJSONRequestBody defines body for PostConnectivityService for application/json ContentType.
type PostConnectivityServiceJSONRequestBody RequestBodyConnectivityService

// PostConnectivityServiceConnectivityServiceJSONRequestBody defines body for PostConnectivityServiceConnectivityService for application/json ContentType.
type PostConnectivityServiceConnectivityServiceJSONRequestBody RequestBodyConnectivityServiceConnectivityService

// PostEnterpriseJSONRequestBody defines body for PostEnterprise for application/json ContentType.
type PostEnterpriseJSONRequestBody RequestBodyEnterprise

// PostEnterpriseEnterpriseJSONRequestBody defines body for PostEnterpriseEnterprise for application/json ContentType.
type PostEnterpriseEnterpriseJSONRequestBody RequestBodyEnterpriseEnterprise

// PostEnterpriseEnterpriseConnectivityServiceJSONRequestBody defines body for PostEnterpriseEnterpriseConnectivityService for application/json ContentType.
type PostEnterpriseEnterpriseConnectivityServiceJSONRequestBody RequestBodyEnterpriseEnterpriseConnectivityService

// PostQosProfileJSONRequestBody defines body for PostQosProfile for application/json ContentType.
type PostQosProfileJSONRequestBody RequestBodyQosProfile

// PostQosProfileQosProfileJSONRequestBody defines body for PostQosProfileQosProfile for application/json ContentType.
type PostQosProfileQosProfileJSONRequestBody RequestBodyQosProfileQosProfile

// PostQosProfileQosProfileApnAmbrJSONRequestBody defines body for PostQosProfileQosProfileApnAmbr for application/json ContentType.
type PostQosProfileQosProfileApnAmbrJSONRequestBody RequestBodyQosProfileQosProfileApnAmbr

// PostQosProfileQosProfileArpJSONRequestBody defines body for PostQosProfileQosProfileArp for application/json ContentType.
type PostQosProfileQosProfileArpJSONRequestBody RequestBodyQosProfileQosProfileArp

// PostSecurityProfileJSONRequestBody defines body for PostSecurityProfile for application/json ContentType.
type PostSecurityProfileJSONRequestBody RequestBodySecurityProfile

// PostSecurityProfileSecurityProfileJSONRequestBody defines body for PostSecurityProfileSecurityProfile for application/json ContentType.
type PostSecurityProfileSecurityProfileJSONRequestBody RequestBodySecurityProfileSecurityProfile

// PostServiceGroupJSONRequestBody defines body for PostServiceGroup for application/json ContentType.
type PostServiceGroupJSONRequestBody RequestBodyServiceGroup

// PostServiceGroupServiceGroupJSONRequestBody defines body for PostServiceGroupServiceGroup for application/json ContentType.
type PostServiceGroupServiceGroupJSONRequestBody RequestBodyServiceGroupServiceGroup

// PostServiceGroupServiceGroupServicePoliciesJSONRequestBody defines body for PostServiceGroupServiceGroupServicePolicies for application/json ContentType.
type PostServiceGroupServiceGroupServicePoliciesJSONRequestBody RequestBodyServiceGroupServiceGroupServicePolicies

// PostServicePolicyJSONRequestBody defines body for PostServicePolicy for application/json ContentType.
type PostServicePolicyJSONRequestBody RequestBodyServicePolicy

// PostServicePolicyServicePolicyJSONRequestBody defines body for PostServicePolicyServicePolicy for application/json ContentType.
type PostServicePolicyServicePolicyJSONRequestBody RequestBodyServicePolicyServicePolicy

// PostServicePolicyServicePolicyAmbrJSONRequestBody defines body for PostServicePolicyServicePolicyAmbr for application/json ContentType.
type PostServicePolicyServicePolicyAmbrJSONRequestBody RequestBodyServicePolicyServicePolicyAmbr

// PostServicePolicyServicePolicyRulesJSONRequestBody defines body for PostServicePolicyServicePolicyRules for application/json ContentType.
type PostServicePolicyServicePolicyRulesJSONRequestBody RequestBodyServicePolicyServicePolicyRules

// PostServiceRuleJSONRequestBody defines body for PostServiceRule for application/json ContentType.
type PostServiceRuleJSONRequestBody RequestBodyServiceRule

// PostServiceRuleServiceRuleJSONRequestBody defines body for PostServiceRuleServiceRule for application/json ContentType.
type PostServiceRuleServiceRuleJSONRequestBody RequestBodyServiceRuleServiceRule

// PostServiceRuleServiceRuleFlowJSONRequestBody defines body for PostServiceRuleServiceRuleFlow for application/json ContentType.
type PostServiceRuleServiceRuleFlowJSONRequestBody RequestBodyServiceRuleServiceRuleFlow

// PostServiceRuleServiceRuleQosJSONRequestBody defines body for PostServiceRuleServiceRuleQos for application/json ContentType.
type PostServiceRuleServiceRuleQosJSONRequestBody RequestBodyServiceRuleServiceRuleQos

// PostServiceRuleServiceRuleQosAggregateMaximumBitrateJSONRequestBody defines body for PostServiceRuleServiceRuleQosAggregateMaximumBitrate for application/json ContentType.
type PostServiceRuleServiceRuleQosAggregateMaximumBitrateJSONRequestBody RequestBodyServiceRuleServiceRuleQosAggregateMaximumBitrate

// PostServiceRuleServiceRuleQosArpJSONRequestBody defines body for PostServiceRuleServiceRuleQosArp for application/json ContentType.
type PostServiceRuleServiceRuleQosArpJSONRequestBody RequestBodyServiceRuleServiceRuleQosArp

// PostServiceRuleServiceRuleQosGuaranteedBitrateJSONRequestBody defines body for PostServiceRuleServiceRuleQosGuaranteedBitrate for application/json ContentType.
type PostServiceRuleServiceRuleQosGuaranteedBitrateJSONRequestBody RequestBodyServiceRuleServiceRuleQosGuaranteedBitrate

// PostServiceRuleServiceRuleQosMaximumRequestedBandwidthJSONRequestBody defines body for PostServiceRuleServiceRuleQosMaximumRequestedBandwidth for application/json ContentType.
type PostServiceRuleServiceRuleQosMaximumRequestedBandwidthJSONRequestBody RequestBodyServiceRuleServiceRuleQosMaximumRequestedBandwidth

// PostSubscriberJSONRequestBody defines body for PostSubscriber for application/json ContentType.
type PostSubscriberJSONRequestBody RequestBodySubscriber

// PostSubscriberUeJSONRequestBody defines body for PostSubscriberUe for application/json ContentType.
type PostSubscriberUeJSONRequestBody RequestBodySubscriberUe

// PostSubscriberUeProfilesJSONRequestBody defines body for PostSubscriberUeProfiles for application/json ContentType.
type PostSubscriberUeProfilesJSONRequestBody RequestBodySubscriberUeProfiles

// PostSubscriberUeProfilesAccessProfileJSONRequestBody defines body for PostSubscriberUeProfilesAccessProfile for application/json ContentType.
type PostSubscriberUeProfilesAccessProfileJSONRequestBody RequestBodySubscriberUeProfilesAccessProfile

// PostSubscriberUeServingPlmnJSONRequestBody defines body for PostSubscriberUeServingPlmn for application/json ContentType.
type PostSubscriberUeServingPlmnJSONRequestBody RequestBodySubscriberUeServingPlmn

// PostUpProfileJSONRequestBody defines body for PostUpProfile for application/json ContentType.
type PostUpProfileJSONRequestBody RequestBodyUpProfile

// PostUpProfileUpProfileJSONRequestBody defines body for PostUpProfileUpProfile for application/json ContentType.
type PostUpProfileUpProfileJSONRequestBody RequestBodyUpProfileUpProfile

// Getter for additional properties for AccessProfile. Returns the specified
// element and whether it was found
func (a AccessProfile) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccessProfile
func (a *AccessProfile) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccessProfile to handle AdditionalProperties
func (a *AccessProfile) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["access-profile"]; found {
		err = json.Unmarshal(raw, &a.AccessProfile)
		if err != nil {
			return errors.Wrap(err, "error reading 'access-profile'")
		}
		delete(object, "access-profile")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccessProfile to handle AdditionalProperties
func (a AccessProfile) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccessProfile != nil {
		object["access-profile"], err = json.Marshal(a.AccessProfile)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'access-profile'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AccessProfileAccessProfile. Returns the specified
// element and whether it was found
func (a AccessProfileAccessProfile) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccessProfileAccessProfile
func (a *AccessProfileAccessProfile) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccessProfileAccessProfile to handle AdditionalProperties
func (a *AccessProfileAccessProfile) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["filter"]; found {
		err = json.Unmarshal(raw, &a.Filter)
		if err != nil {
			return errors.Wrap(err, "error reading 'filter'")
		}
		delete(object, "filter")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return errors.Wrap(err, "error reading 'type'")
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccessProfileAccessProfile to handle AdditionalProperties
func (a AccessProfileAccessProfile) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Filter != nil {
		object["filter"], err = json.Marshal(a.Filter)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'filter'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'type'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ApnProfile. Returns the specified
// element and whether it was found
func (a ApnProfile) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApnProfile
func (a *ApnProfile) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApnProfile to handle AdditionalProperties
func (a *ApnProfile) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["apn-profile"]; found {
		err = json.Unmarshal(raw, &a.ApnProfile)
		if err != nil {
			return errors.Wrap(err, "error reading 'apn-profile'")
		}
		delete(object, "apn-profile")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApnProfile to handle AdditionalProperties
func (a ApnProfile) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ApnProfile != nil {
		object["apn-profile"], err = json.Marshal(a.ApnProfile)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'apn-profile'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ApnProfileApnProfile. Returns the specified
// element and whether it was found
func (a ApnProfileApnProfile) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApnProfileApnProfile
func (a *ApnProfileApnProfile) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApnProfileApnProfile to handle AdditionalProperties
func (a *ApnProfileApnProfile) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["apn-name"]; found {
		err = json.Unmarshal(raw, &a.ApnName)
		if err != nil {
			return errors.Wrap(err, "error reading 'apn-name'")
		}
		delete(object, "apn-name")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["dns-primary"]; found {
		err = json.Unmarshal(raw, &a.DnsPrimary)
		if err != nil {
			return errors.Wrap(err, "error reading 'dns-primary'")
		}
		delete(object, "dns-primary")
	}

	if raw, found := object["dns-secondary"]; found {
		err = json.Unmarshal(raw, &a.DnsSecondary)
		if err != nil {
			return errors.Wrap(err, "error reading 'dns-secondary'")
		}
		delete(object, "dns-secondary")
	}

	if raw, found := object["gx-enabled"]; found {
		err = json.Unmarshal(raw, &a.GxEnabled)
		if err != nil {
			return errors.Wrap(err, "error reading 'gx-enabled'")
		}
		delete(object, "gx-enabled")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if raw, found := object["mtu"]; found {
		err = json.Unmarshal(raw, &a.Mtu)
		if err != nil {
			return errors.Wrap(err, "error reading 'mtu'")
		}
		delete(object, "mtu")
	}

	if raw, found := object["service-group"]; found {
		err = json.Unmarshal(raw, &a.ServiceGroup)
		if err != nil {
			return errors.Wrap(err, "error reading 'service-group'")
		}
		delete(object, "service-group")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApnProfileApnProfile to handle AdditionalProperties
func (a ApnProfileApnProfile) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ApnName != nil {
		object["apn-name"], err = json.Marshal(a.ApnName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'apn-name'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.DnsPrimary != nil {
		object["dns-primary"], err = json.Marshal(a.DnsPrimary)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'dns-primary'"))
		}
	}

	if a.DnsSecondary != nil {
		object["dns-secondary"], err = json.Marshal(a.DnsSecondary)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'dns-secondary'"))
		}
	}

	if a.GxEnabled != nil {
		object["gx-enabled"], err = json.Marshal(a.GxEnabled)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'gx-enabled'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	if a.Mtu != nil {
		object["mtu"], err = json.Marshal(a.Mtu)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'mtu'"))
		}
	}

	if a.ServiceGroup != nil {
		object["service-group"], err = json.Marshal(a.ServiceGroup)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'service-group'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ConnectivityService. Returns the specified
// element and whether it was found
func (a ConnectivityService) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ConnectivityService
func (a *ConnectivityService) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ConnectivityService to handle AdditionalProperties
func (a *ConnectivityService) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["connectivity-service"]; found {
		err = json.Unmarshal(raw, &a.ConnectivityService)
		if err != nil {
			return errors.Wrap(err, "error reading 'connectivity-service'")
		}
		delete(object, "connectivity-service")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ConnectivityService to handle AdditionalProperties
func (a ConnectivityService) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ConnectivityService != nil {
		object["connectivity-service"], err = json.Marshal(a.ConnectivityService)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'connectivity-service'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ConnectivityServiceConnectivityService. Returns the specified
// element and whether it was found
func (a ConnectivityServiceConnectivityService) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ConnectivityServiceConnectivityService
func (a *ConnectivityServiceConnectivityService) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ConnectivityServiceConnectivityService to handle AdditionalProperties
func (a *ConnectivityServiceConnectivityService) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["hss-endpoint"]; found {
		err = json.Unmarshal(raw, &a.HssEndpoint)
		if err != nil {
			return errors.Wrap(err, "error reading 'hss-endpoint'")
		}
		delete(object, "hss-endpoint")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if raw, found := object["pcrf-endpoint"]; found {
		err = json.Unmarshal(raw, &a.PcrfEndpoint)
		if err != nil {
			return errors.Wrap(err, "error reading 'pcrf-endpoint'")
		}
		delete(object, "pcrf-endpoint")
	}

	if raw, found := object["spgwc-endpoint"]; found {
		err = json.Unmarshal(raw, &a.SpgwcEndpoint)
		if err != nil {
			return errors.Wrap(err, "error reading 'spgwc-endpoint'")
		}
		delete(object, "spgwc-endpoint")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ConnectivityServiceConnectivityService to handle AdditionalProperties
func (a ConnectivityServiceConnectivityService) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.HssEndpoint != nil {
		object["hss-endpoint"], err = json.Marshal(a.HssEndpoint)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'hss-endpoint'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	if a.PcrfEndpoint != nil {
		object["pcrf-endpoint"], err = json.Marshal(a.PcrfEndpoint)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'pcrf-endpoint'"))
		}
	}

	if a.SpgwcEndpoint != nil {
		object["spgwc-endpoint"], err = json.Marshal(a.SpgwcEndpoint)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'spgwc-endpoint'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Enterprise. Returns the specified
// element and whether it was found
func (a Enterprise) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Enterprise
func (a *Enterprise) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Enterprise to handle AdditionalProperties
func (a *Enterprise) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["enterprise"]; found {
		err = json.Unmarshal(raw, &a.Enterprise)
		if err != nil {
			return errors.Wrap(err, "error reading 'enterprise'")
		}
		delete(object, "enterprise")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Enterprise to handle AdditionalProperties
func (a Enterprise) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Enterprise != nil {
		object["enterprise"], err = json.Marshal(a.Enterprise)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'enterprise'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EnterpriseEnterprise. Returns the specified
// element and whether it was found
func (a EnterpriseEnterprise) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EnterpriseEnterprise
func (a *EnterpriseEnterprise) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EnterpriseEnterprise to handle AdditionalProperties
func (a *EnterpriseEnterprise) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["connectivity-service"]; found {
		err = json.Unmarshal(raw, &a.ConnectivityService)
		if err != nil {
			return errors.Wrap(err, "error reading 'connectivity-service'")
		}
		delete(object, "connectivity-service")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EnterpriseEnterprise to handle AdditionalProperties
func (a EnterpriseEnterprise) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ConnectivityService != nil {
		object["connectivity-service"], err = json.Marshal(a.ConnectivityService)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'connectivity-service'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EnterpriseEnterpriseConnectivityService. Returns the specified
// element and whether it was found
func (a EnterpriseEnterpriseConnectivityService) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EnterpriseEnterpriseConnectivityService
func (a *EnterpriseEnterpriseConnectivityService) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EnterpriseEnterpriseConnectivityService to handle AdditionalProperties
func (a *EnterpriseEnterpriseConnectivityService) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["connectivity-service"]; found {
		err = json.Unmarshal(raw, &a.ConnectivityService)
		if err != nil {
			return errors.Wrap(err, "error reading 'connectivity-service'")
		}
		delete(object, "connectivity-service")
	}

	if raw, found := object["enabled"]; found {
		err = json.Unmarshal(raw, &a.Enabled)
		if err != nil {
			return errors.Wrap(err, "error reading 'enabled'")
		}
		delete(object, "enabled")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EnterpriseEnterpriseConnectivityService to handle AdditionalProperties
func (a EnterpriseEnterpriseConnectivityService) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ConnectivityService != nil {
		object["connectivity-service"], err = json.Marshal(a.ConnectivityService)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'connectivity-service'"))
		}
	}

	if a.Enabled != nil {
		object["enabled"], err = json.Marshal(a.Enabled)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'enabled'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosProfile. Returns the specified
// element and whether it was found
func (a QosProfile) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosProfile
func (a *QosProfile) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosProfile to handle AdditionalProperties
func (a *QosProfile) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["qos-profile"]; found {
		err = json.Unmarshal(raw, &a.QosProfile)
		if err != nil {
			return errors.Wrap(err, "error reading 'qos-profile'")
		}
		delete(object, "qos-profile")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosProfile to handle AdditionalProperties
func (a QosProfile) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.QosProfile != nil {
		object["qos-profile"], err = json.Marshal(a.QosProfile)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'qos-profile'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosProfileQosProfile. Returns the specified
// element and whether it was found
func (a QosProfileQosProfile) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosProfileQosProfile
func (a *QosProfileQosProfile) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosProfileQosProfile to handle AdditionalProperties
func (a *QosProfileQosProfile) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["apn-ambr"]; found {
		err = json.Unmarshal(raw, &a.ApnAmbr)
		if err != nil {
			return errors.Wrap(err, "error reading 'apn-ambr'")
		}
		delete(object, "apn-ambr")
	}

	if raw, found := object["arp"]; found {
		err = json.Unmarshal(raw, &a.Arp)
		if err != nil {
			return errors.Wrap(err, "error reading 'arp'")
		}
		delete(object, "arp")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if raw, found := object["qci"]; found {
		err = json.Unmarshal(raw, &a.Qci)
		if err != nil {
			return errors.Wrap(err, "error reading 'qci'")
		}
		delete(object, "qci")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosProfileQosProfile to handle AdditionalProperties
func (a QosProfileQosProfile) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ApnAmbr != nil {
		object["apn-ambr"], err = json.Marshal(a.ApnAmbr)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'apn-ambr'"))
		}
	}

	if a.Arp != nil {
		object["arp"], err = json.Marshal(a.Arp)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'arp'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	if a.Qci != nil {
		object["qci"], err = json.Marshal(a.Qci)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'qci'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosProfileQosProfileApnAmbr. Returns the specified
// element and whether it was found
func (a QosProfileQosProfileApnAmbr) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosProfileQosProfileApnAmbr
func (a *QosProfileQosProfileApnAmbr) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosProfileQosProfileApnAmbr to handle AdditionalProperties
func (a *QosProfileQosProfileApnAmbr) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["downlink"]; found {
		err = json.Unmarshal(raw, &a.Downlink)
		if err != nil {
			return errors.Wrap(err, "error reading 'downlink'")
		}
		delete(object, "downlink")
	}

	if raw, found := object["uplink"]; found {
		err = json.Unmarshal(raw, &a.Uplink)
		if err != nil {
			return errors.Wrap(err, "error reading 'uplink'")
		}
		delete(object, "uplink")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosProfileQosProfileApnAmbr to handle AdditionalProperties
func (a QosProfileQosProfileApnAmbr) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Downlink != nil {
		object["downlink"], err = json.Marshal(a.Downlink)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'downlink'"))
		}
	}

	if a.Uplink != nil {
		object["uplink"], err = json.Marshal(a.Uplink)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'uplink'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosProfileQosProfileArp. Returns the specified
// element and whether it was found
func (a QosProfileQosProfileArp) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosProfileQosProfileArp
func (a *QosProfileQosProfileArp) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosProfileQosProfileArp to handle AdditionalProperties
func (a *QosProfileQosProfileArp) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["preemption-capability"]; found {
		err = json.Unmarshal(raw, &a.PreemptionCapability)
		if err != nil {
			return errors.Wrap(err, "error reading 'preemption-capability'")
		}
		delete(object, "preemption-capability")
	}

	if raw, found := object["preemption-vulnerability"]; found {
		err = json.Unmarshal(raw, &a.PreemptionVulnerability)
		if err != nil {
			return errors.Wrap(err, "error reading 'preemption-vulnerability'")
		}
		delete(object, "preemption-vulnerability")
	}

	if raw, found := object["priority"]; found {
		err = json.Unmarshal(raw, &a.Priority)
		if err != nil {
			return errors.Wrap(err, "error reading 'priority'")
		}
		delete(object, "priority")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosProfileQosProfileArp to handle AdditionalProperties
func (a QosProfileQosProfileArp) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PreemptionCapability != nil {
		object["preemption-capability"], err = json.Marshal(a.PreemptionCapability)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'preemption-capability'"))
		}
	}

	if a.PreemptionVulnerability != nil {
		object["preemption-vulnerability"], err = json.Marshal(a.PreemptionVulnerability)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'preemption-vulnerability'"))
		}
	}

	if a.Priority != nil {
		object["priority"], err = json.Marshal(a.Priority)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'priority'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SecurityProfile. Returns the specified
// element and whether it was found
func (a SecurityProfile) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SecurityProfile
func (a *SecurityProfile) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SecurityProfile to handle AdditionalProperties
func (a *SecurityProfile) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["security-profile"]; found {
		err = json.Unmarshal(raw, &a.SecurityProfile)
		if err != nil {
			return errors.Wrap(err, "error reading 'security-profile'")
		}
		delete(object, "security-profile")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SecurityProfile to handle AdditionalProperties
func (a SecurityProfile) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SecurityProfile != nil {
		object["security-profile"], err = json.Marshal(a.SecurityProfile)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'security-profile'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SecurityProfileSecurityProfile. Returns the specified
// element and whether it was found
func (a SecurityProfileSecurityProfile) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SecurityProfileSecurityProfile
func (a *SecurityProfileSecurityProfile) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SecurityProfileSecurityProfile to handle AdditionalProperties
func (a *SecurityProfileSecurityProfile) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if raw, found := object["key"]; found {
		err = json.Unmarshal(raw, &a.Key)
		if err != nil {
			return errors.Wrap(err, "error reading 'key'")
		}
		delete(object, "key")
	}

	if raw, found := object["opc"]; found {
		err = json.Unmarshal(raw, &a.Opc)
		if err != nil {
			return errors.Wrap(err, "error reading 'opc'")
		}
		delete(object, "opc")
	}

	if raw, found := object["sqn"]; found {
		err = json.Unmarshal(raw, &a.Sqn)
		if err != nil {
			return errors.Wrap(err, "error reading 'sqn'")
		}
		delete(object, "sqn")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SecurityProfileSecurityProfile to handle AdditionalProperties
func (a SecurityProfileSecurityProfile) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	if a.Key != nil {
		object["key"], err = json.Marshal(a.Key)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'key'"))
		}
	}

	if a.Opc != nil {
		object["opc"], err = json.Marshal(a.Opc)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'opc'"))
		}
	}

	if a.Sqn != nil {
		object["sqn"], err = json.Marshal(a.Sqn)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'sqn'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceGroup. Returns the specified
// element and whether it was found
func (a ServiceGroup) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceGroup
func (a *ServiceGroup) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceGroup to handle AdditionalProperties
func (a *ServiceGroup) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["service-group"]; found {
		err = json.Unmarshal(raw, &a.ServiceGroup)
		if err != nil {
			return errors.Wrap(err, "error reading 'service-group'")
		}
		delete(object, "service-group")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceGroup to handle AdditionalProperties
func (a ServiceGroup) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ServiceGroup != nil {
		object["service-group"], err = json.Marshal(a.ServiceGroup)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'service-group'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceGroupServiceGroup. Returns the specified
// element and whether it was found
func (a ServiceGroupServiceGroup) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceGroupServiceGroup
func (a *ServiceGroupServiceGroup) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceGroupServiceGroup to handle AdditionalProperties
func (a *ServiceGroupServiceGroup) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if raw, found := object["service-policies"]; found {
		err = json.Unmarshal(raw, &a.ServicePolicies)
		if err != nil {
			return errors.Wrap(err, "error reading 'service-policies'")
		}
		delete(object, "service-policies")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceGroupServiceGroup to handle AdditionalProperties
func (a ServiceGroupServiceGroup) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	if a.ServicePolicies != nil {
		object["service-policies"], err = json.Marshal(a.ServicePolicies)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'service-policies'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceGroupServiceGroupServicePolicies. Returns the specified
// element and whether it was found
func (a ServiceGroupServiceGroupServicePolicies) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceGroupServiceGroupServicePolicies
func (a *ServiceGroupServiceGroupServicePolicies) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceGroupServiceGroupServicePolicies to handle AdditionalProperties
func (a *ServiceGroupServiceGroupServicePolicies) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["kind"]; found {
		err = json.Unmarshal(raw, &a.Kind)
		if err != nil {
			return errors.Wrap(err, "error reading 'kind'")
		}
		delete(object, "kind")
	}

	if raw, found := object["service-policy"]; found {
		err = json.Unmarshal(raw, &a.ServicePolicy)
		if err != nil {
			return errors.Wrap(err, "error reading 'service-policy'")
		}
		delete(object, "service-policy")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceGroupServiceGroupServicePolicies to handle AdditionalProperties
func (a ServiceGroupServiceGroupServicePolicies) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Kind != nil {
		object["kind"], err = json.Marshal(a.Kind)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'kind'"))
		}
	}

	if a.ServicePolicy != nil {
		object["service-policy"], err = json.Marshal(a.ServicePolicy)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'service-policy'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServicePolicy. Returns the specified
// element and whether it was found
func (a ServicePolicy) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServicePolicy
func (a *ServicePolicy) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServicePolicy to handle AdditionalProperties
func (a *ServicePolicy) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["service-policy"]; found {
		err = json.Unmarshal(raw, &a.ServicePolicy)
		if err != nil {
			return errors.Wrap(err, "error reading 'service-policy'")
		}
		delete(object, "service-policy")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServicePolicy to handle AdditionalProperties
func (a ServicePolicy) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ServicePolicy != nil {
		object["service-policy"], err = json.Marshal(a.ServicePolicy)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'service-policy'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServicePolicyServicePolicy. Returns the specified
// element and whether it was found
func (a ServicePolicyServicePolicy) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServicePolicyServicePolicy
func (a *ServicePolicyServicePolicy) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServicePolicyServicePolicy to handle AdditionalProperties
func (a *ServicePolicyServicePolicy) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ambr"]; found {
		err = json.Unmarshal(raw, &a.Ambr)
		if err != nil {
			return errors.Wrap(err, "error reading 'ambr'")
		}
		delete(object, "ambr")
	}

	if raw, found := object["arp"]; found {
		err = json.Unmarshal(raw, &a.Arp)
		if err != nil {
			return errors.Wrap(err, "error reading 'arp'")
		}
		delete(object, "arp")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if raw, found := object["qci"]; found {
		err = json.Unmarshal(raw, &a.Qci)
		if err != nil {
			return errors.Wrap(err, "error reading 'qci'")
		}
		delete(object, "qci")
	}

	if raw, found := object["rules"]; found {
		err = json.Unmarshal(raw, &a.Rules)
		if err != nil {
			return errors.Wrap(err, "error reading 'rules'")
		}
		delete(object, "rules")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServicePolicyServicePolicy to handle AdditionalProperties
func (a ServicePolicyServicePolicy) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Ambr != nil {
		object["ambr"], err = json.Marshal(a.Ambr)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'ambr'"))
		}
	}

	if a.Arp != nil {
		object["arp"], err = json.Marshal(a.Arp)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'arp'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	if a.Qci != nil {
		object["qci"], err = json.Marshal(a.Qci)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'qci'"))
		}
	}

	if a.Rules != nil {
		object["rules"], err = json.Marshal(a.Rules)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'rules'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServicePolicyServicePolicyAmbr. Returns the specified
// element and whether it was found
func (a ServicePolicyServicePolicyAmbr) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServicePolicyServicePolicyAmbr
func (a *ServicePolicyServicePolicyAmbr) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServicePolicyServicePolicyAmbr to handle AdditionalProperties
func (a *ServicePolicyServicePolicyAmbr) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["downlink"]; found {
		err = json.Unmarshal(raw, &a.Downlink)
		if err != nil {
			return errors.Wrap(err, "error reading 'downlink'")
		}
		delete(object, "downlink")
	}

	if raw, found := object["uplink"]; found {
		err = json.Unmarshal(raw, &a.Uplink)
		if err != nil {
			return errors.Wrap(err, "error reading 'uplink'")
		}
		delete(object, "uplink")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServicePolicyServicePolicyAmbr to handle AdditionalProperties
func (a ServicePolicyServicePolicyAmbr) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Downlink != nil {
		object["downlink"], err = json.Marshal(a.Downlink)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'downlink'"))
		}
	}

	if a.Uplink != nil {
		object["uplink"], err = json.Marshal(a.Uplink)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'uplink'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServicePolicyServicePolicyRules. Returns the specified
// element and whether it was found
func (a ServicePolicyServicePolicyRules) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServicePolicyServicePolicyRules
func (a *ServicePolicyServicePolicyRules) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServicePolicyServicePolicyRules to handle AdditionalProperties
func (a *ServicePolicyServicePolicyRules) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["enabled"]; found {
		err = json.Unmarshal(raw, &a.Enabled)
		if err != nil {
			return errors.Wrap(err, "error reading 'enabled'")
		}
		delete(object, "enabled")
	}

	if raw, found := object["rule"]; found {
		err = json.Unmarshal(raw, &a.Rule)
		if err != nil {
			return errors.Wrap(err, "error reading 'rule'")
		}
		delete(object, "rule")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServicePolicyServicePolicyRules to handle AdditionalProperties
func (a ServicePolicyServicePolicyRules) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Enabled != nil {
		object["enabled"], err = json.Marshal(a.Enabled)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'enabled'"))
		}
	}

	if a.Rule != nil {
		object["rule"], err = json.Marshal(a.Rule)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'rule'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceRule. Returns the specified
// element and whether it was found
func (a ServiceRule) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceRule
func (a *ServiceRule) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceRule to handle AdditionalProperties
func (a *ServiceRule) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["service-rule"]; found {
		err = json.Unmarshal(raw, &a.ServiceRule)
		if err != nil {
			return errors.Wrap(err, "error reading 'service-rule'")
		}
		delete(object, "service-rule")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceRule to handle AdditionalProperties
func (a ServiceRule) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ServiceRule != nil {
		object["service-rule"], err = json.Marshal(a.ServiceRule)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'service-rule'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceRuleServiceRule. Returns the specified
// element and whether it was found
func (a ServiceRuleServiceRule) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceRuleServiceRule
func (a *ServiceRuleServiceRule) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceRuleServiceRule to handle AdditionalProperties
func (a *ServiceRuleServiceRule) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["charging-rule-name"]; found {
		err = json.Unmarshal(raw, &a.ChargingRuleName)
		if err != nil {
			return errors.Wrap(err, "error reading 'charging-rule-name'")
		}
		delete(object, "charging-rule-name")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["flow"]; found {
		err = json.Unmarshal(raw, &a.Flow)
		if err != nil {
			return errors.Wrap(err, "error reading 'flow'")
		}
		delete(object, "flow")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if raw, found := object["qos"]; found {
		err = json.Unmarshal(raw, &a.Qos)
		if err != nil {
			return errors.Wrap(err, "error reading 'qos'")
		}
		delete(object, "qos")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceRuleServiceRule to handle AdditionalProperties
func (a ServiceRuleServiceRule) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ChargingRuleName != nil {
		object["charging-rule-name"], err = json.Marshal(a.ChargingRuleName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'charging-rule-name'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Flow != nil {
		object["flow"], err = json.Marshal(a.Flow)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'flow'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	if a.Qos != nil {
		object["qos"], err = json.Marshal(a.Qos)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'qos'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceRuleServiceRuleFlow. Returns the specified
// element and whether it was found
func (a ServiceRuleServiceRuleFlow) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceRuleServiceRuleFlow
func (a *ServiceRuleServiceRuleFlow) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceRuleServiceRuleFlow to handle AdditionalProperties
func (a *ServiceRuleServiceRuleFlow) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["specification"]; found {
		err = json.Unmarshal(raw, &a.Specification)
		if err != nil {
			return errors.Wrap(err, "error reading 'specification'")
		}
		delete(object, "specification")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceRuleServiceRuleFlow to handle AdditionalProperties
func (a ServiceRuleServiceRuleFlow) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Specification != nil {
		object["specification"], err = json.Marshal(a.Specification)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'specification'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceRuleServiceRuleQos. Returns the specified
// element and whether it was found
func (a ServiceRuleServiceRuleQos) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceRuleServiceRuleQos
func (a *ServiceRuleServiceRuleQos) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceRuleServiceRuleQos to handle AdditionalProperties
func (a *ServiceRuleServiceRuleQos) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["aggregate-maximum-bitrate"]; found {
		err = json.Unmarshal(raw, &a.AggregateMaximumBitrate)
		if err != nil {
			return errors.Wrap(err, "error reading 'aggregate-maximum-bitrate'")
		}
		delete(object, "aggregate-maximum-bitrate")
	}

	if raw, found := object["arp"]; found {
		err = json.Unmarshal(raw, &a.Arp)
		if err != nil {
			return errors.Wrap(err, "error reading 'arp'")
		}
		delete(object, "arp")
	}

	if raw, found := object["guaranteed-bitrate"]; found {
		err = json.Unmarshal(raw, &a.GuaranteedBitrate)
		if err != nil {
			return errors.Wrap(err, "error reading 'guaranteed-bitrate'")
		}
		delete(object, "guaranteed-bitrate")
	}

	if raw, found := object["maximum-requested-bandwidth"]; found {
		err = json.Unmarshal(raw, &a.MaximumRequestedBandwidth)
		if err != nil {
			return errors.Wrap(err, "error reading 'maximum-requested-bandwidth'")
		}
		delete(object, "maximum-requested-bandwidth")
	}

	if raw, found := object["qci"]; found {
		err = json.Unmarshal(raw, &a.Qci)
		if err != nil {
			return errors.Wrap(err, "error reading 'qci'")
		}
		delete(object, "qci")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceRuleServiceRuleQos to handle AdditionalProperties
func (a ServiceRuleServiceRuleQos) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AggregateMaximumBitrate != nil {
		object["aggregate-maximum-bitrate"], err = json.Marshal(a.AggregateMaximumBitrate)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'aggregate-maximum-bitrate'"))
		}
	}

	if a.Arp != nil {
		object["arp"], err = json.Marshal(a.Arp)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'arp'"))
		}
	}

	if a.GuaranteedBitrate != nil {
		object["guaranteed-bitrate"], err = json.Marshal(a.GuaranteedBitrate)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'guaranteed-bitrate'"))
		}
	}

	if a.MaximumRequestedBandwidth != nil {
		object["maximum-requested-bandwidth"], err = json.Marshal(a.MaximumRequestedBandwidth)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'maximum-requested-bandwidth'"))
		}
	}

	if a.Qci != nil {
		object["qci"], err = json.Marshal(a.Qci)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'qci'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceRuleServiceRuleQosAggregateMaximumBitrate. Returns the specified
// element and whether it was found
func (a ServiceRuleServiceRuleQosAggregateMaximumBitrate) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceRuleServiceRuleQosAggregateMaximumBitrate
func (a *ServiceRuleServiceRuleQosAggregateMaximumBitrate) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceRuleServiceRuleQosAggregateMaximumBitrate to handle AdditionalProperties
func (a *ServiceRuleServiceRuleQosAggregateMaximumBitrate) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["downlink"]; found {
		err = json.Unmarshal(raw, &a.Downlink)
		if err != nil {
			return errors.Wrap(err, "error reading 'downlink'")
		}
		delete(object, "downlink")
	}

	if raw, found := object["uplink"]; found {
		err = json.Unmarshal(raw, &a.Uplink)
		if err != nil {
			return errors.Wrap(err, "error reading 'uplink'")
		}
		delete(object, "uplink")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceRuleServiceRuleQosAggregateMaximumBitrate to handle AdditionalProperties
func (a ServiceRuleServiceRuleQosAggregateMaximumBitrate) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Downlink != nil {
		object["downlink"], err = json.Marshal(a.Downlink)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'downlink'"))
		}
	}

	if a.Uplink != nil {
		object["uplink"], err = json.Marshal(a.Uplink)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'uplink'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceRuleServiceRuleQosArp. Returns the specified
// element and whether it was found
func (a ServiceRuleServiceRuleQosArp) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceRuleServiceRuleQosArp
func (a *ServiceRuleServiceRuleQosArp) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceRuleServiceRuleQosArp to handle AdditionalProperties
func (a *ServiceRuleServiceRuleQosArp) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["preemption-capability"]; found {
		err = json.Unmarshal(raw, &a.PreemptionCapability)
		if err != nil {
			return errors.Wrap(err, "error reading 'preemption-capability'")
		}
		delete(object, "preemption-capability")
	}

	if raw, found := object["preemption-vulnerability"]; found {
		err = json.Unmarshal(raw, &a.PreemptionVulnerability)
		if err != nil {
			return errors.Wrap(err, "error reading 'preemption-vulnerability'")
		}
		delete(object, "preemption-vulnerability")
	}

	if raw, found := object["priority"]; found {
		err = json.Unmarshal(raw, &a.Priority)
		if err != nil {
			return errors.Wrap(err, "error reading 'priority'")
		}
		delete(object, "priority")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceRuleServiceRuleQosArp to handle AdditionalProperties
func (a ServiceRuleServiceRuleQosArp) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PreemptionCapability != nil {
		object["preemption-capability"], err = json.Marshal(a.PreemptionCapability)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'preemption-capability'"))
		}
	}

	if a.PreemptionVulnerability != nil {
		object["preemption-vulnerability"], err = json.Marshal(a.PreemptionVulnerability)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'preemption-vulnerability'"))
		}
	}

	if a.Priority != nil {
		object["priority"], err = json.Marshal(a.Priority)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'priority'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceRuleServiceRuleQosGuaranteedBitrate. Returns the specified
// element and whether it was found
func (a ServiceRuleServiceRuleQosGuaranteedBitrate) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceRuleServiceRuleQosGuaranteedBitrate
func (a *ServiceRuleServiceRuleQosGuaranteedBitrate) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceRuleServiceRuleQosGuaranteedBitrate to handle AdditionalProperties
func (a *ServiceRuleServiceRuleQosGuaranteedBitrate) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["downlink"]; found {
		err = json.Unmarshal(raw, &a.Downlink)
		if err != nil {
			return errors.Wrap(err, "error reading 'downlink'")
		}
		delete(object, "downlink")
	}

	if raw, found := object["uplink"]; found {
		err = json.Unmarshal(raw, &a.Uplink)
		if err != nil {
			return errors.Wrap(err, "error reading 'uplink'")
		}
		delete(object, "uplink")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceRuleServiceRuleQosGuaranteedBitrate to handle AdditionalProperties
func (a ServiceRuleServiceRuleQosGuaranteedBitrate) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Downlink != nil {
		object["downlink"], err = json.Marshal(a.Downlink)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'downlink'"))
		}
	}

	if a.Uplink != nil {
		object["uplink"], err = json.Marshal(a.Uplink)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'uplink'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceRuleServiceRuleQosMaximumRequestedBandwidth. Returns the specified
// element and whether it was found
func (a ServiceRuleServiceRuleQosMaximumRequestedBandwidth) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceRuleServiceRuleQosMaximumRequestedBandwidth
func (a *ServiceRuleServiceRuleQosMaximumRequestedBandwidth) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceRuleServiceRuleQosMaximumRequestedBandwidth to handle AdditionalProperties
func (a *ServiceRuleServiceRuleQosMaximumRequestedBandwidth) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["downlink"]; found {
		err = json.Unmarshal(raw, &a.Downlink)
		if err != nil {
			return errors.Wrap(err, "error reading 'downlink'")
		}
		delete(object, "downlink")
	}

	if raw, found := object["uplink"]; found {
		err = json.Unmarshal(raw, &a.Uplink)
		if err != nil {
			return errors.Wrap(err, "error reading 'uplink'")
		}
		delete(object, "uplink")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceRuleServiceRuleQosMaximumRequestedBandwidth to handle AdditionalProperties
func (a ServiceRuleServiceRuleQosMaximumRequestedBandwidth) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Downlink != nil {
		object["downlink"], err = json.Marshal(a.Downlink)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'downlink'"))
		}
	}

	if a.Uplink != nil {
		object["uplink"], err = json.Marshal(a.Uplink)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'uplink'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Subscriber. Returns the specified
// element and whether it was found
func (a Subscriber) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Subscriber
func (a *Subscriber) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Subscriber to handle AdditionalProperties
func (a *Subscriber) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ue"]; found {
		err = json.Unmarshal(raw, &a.Ue)
		if err != nil {
			return errors.Wrap(err, "error reading 'ue'")
		}
		delete(object, "ue")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Subscriber to handle AdditionalProperties
func (a Subscriber) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Ue != nil {
		object["ue"], err = json.Marshal(a.Ue)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'ue'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SubscriberUe. Returns the specified
// element and whether it was found
func (a SubscriberUe) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SubscriberUe
func (a *SubscriberUe) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SubscriberUe to handle AdditionalProperties
func (a *SubscriberUe) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["enabled"]; found {
		err = json.Unmarshal(raw, &a.Enabled)
		if err != nil {
			return errors.Wrap(err, "error reading 'enabled'")
		}
		delete(object, "enabled")
	}

	if raw, found := object["enterprise"]; found {
		err = json.Unmarshal(raw, &a.Enterprise)
		if err != nil {
			return errors.Wrap(err, "error reading 'enterprise'")
		}
		delete(object, "enterprise")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if raw, found := object["imsi-range-from"]; found {
		err = json.Unmarshal(raw, &a.ImsiRangeFrom)
		if err != nil {
			return errors.Wrap(err, "error reading 'imsi-range-from'")
		}
		delete(object, "imsi-range-from")
	}

	if raw, found := object["imsi-range-to"]; found {
		err = json.Unmarshal(raw, &a.ImsiRangeTo)
		if err != nil {
			return errors.Wrap(err, "error reading 'imsi-range-to'")
		}
		delete(object, "imsi-range-to")
	}

	if raw, found := object["imsi-wildcard"]; found {
		err = json.Unmarshal(raw, &a.ImsiWildcard)
		if err != nil {
			return errors.Wrap(err, "error reading 'imsi-wildcard'")
		}
		delete(object, "imsi-wildcard")
	}

	if raw, found := object["priority"]; found {
		err = json.Unmarshal(raw, &a.Priority)
		if err != nil {
			return errors.Wrap(err, "error reading 'priority'")
		}
		delete(object, "priority")
	}

	if raw, found := object["profiles"]; found {
		err = json.Unmarshal(raw, &a.Profiles)
		if err != nil {
			return errors.Wrap(err, "error reading 'profiles'")
		}
		delete(object, "profiles")
	}

	if raw, found := object["requested-apn"]; found {
		err = json.Unmarshal(raw, &a.RequestedApn)
		if err != nil {
			return errors.Wrap(err, "error reading 'requested-apn'")
		}
		delete(object, "requested-apn")
	}

	if raw, found := object["serving-plmn"]; found {
		err = json.Unmarshal(raw, &a.ServingPlmn)
		if err != nil {
			return errors.Wrap(err, "error reading 'serving-plmn'")
		}
		delete(object, "serving-plmn")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SubscriberUe to handle AdditionalProperties
func (a SubscriberUe) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Enabled != nil {
		object["enabled"], err = json.Marshal(a.Enabled)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'enabled'"))
		}
	}

	if a.Enterprise != nil {
		object["enterprise"], err = json.Marshal(a.Enterprise)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'enterprise'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	if a.ImsiRangeFrom != nil {
		object["imsi-range-from"], err = json.Marshal(a.ImsiRangeFrom)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'imsi-range-from'"))
		}
	}

	if a.ImsiRangeTo != nil {
		object["imsi-range-to"], err = json.Marshal(a.ImsiRangeTo)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'imsi-range-to'"))
		}
	}

	if a.ImsiWildcard != nil {
		object["imsi-wildcard"], err = json.Marshal(a.ImsiWildcard)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'imsi-wildcard'"))
		}
	}

	if a.Priority != nil {
		object["priority"], err = json.Marshal(a.Priority)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'priority'"))
		}
	}

	if a.Profiles != nil {
		object["profiles"], err = json.Marshal(a.Profiles)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'profiles'"))
		}
	}

	if a.RequestedApn != nil {
		object["requested-apn"], err = json.Marshal(a.RequestedApn)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'requested-apn'"))
		}
	}

	if a.ServingPlmn != nil {
		object["serving-plmn"], err = json.Marshal(a.ServingPlmn)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'serving-plmn'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SubscriberUeProfiles. Returns the specified
// element and whether it was found
func (a SubscriberUeProfiles) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SubscriberUeProfiles
func (a *SubscriberUeProfiles) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SubscriberUeProfiles to handle AdditionalProperties
func (a *SubscriberUeProfiles) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["access-profile"]; found {
		err = json.Unmarshal(raw, &a.AccessProfile)
		if err != nil {
			return errors.Wrap(err, "error reading 'access-profile'")
		}
		delete(object, "access-profile")
	}

	if raw, found := object["apn-profile"]; found {
		err = json.Unmarshal(raw, &a.ApnProfile)
		if err != nil {
			return errors.Wrap(err, "error reading 'apn-profile'")
		}
		delete(object, "apn-profile")
	}

	if raw, found := object["qos-profile"]; found {
		err = json.Unmarshal(raw, &a.QosProfile)
		if err != nil {
			return errors.Wrap(err, "error reading 'qos-profile'")
		}
		delete(object, "qos-profile")
	}

	if raw, found := object["security-profile"]; found {
		err = json.Unmarshal(raw, &a.SecurityProfile)
		if err != nil {
			return errors.Wrap(err, "error reading 'security-profile'")
		}
		delete(object, "security-profile")
	}

	if raw, found := object["up-profile"]; found {
		err = json.Unmarshal(raw, &a.UpProfile)
		if err != nil {
			return errors.Wrap(err, "error reading 'up-profile'")
		}
		delete(object, "up-profile")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SubscriberUeProfiles to handle AdditionalProperties
func (a SubscriberUeProfiles) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccessProfile != nil {
		object["access-profile"], err = json.Marshal(a.AccessProfile)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'access-profile'"))
		}
	}

	if a.ApnProfile != nil {
		object["apn-profile"], err = json.Marshal(a.ApnProfile)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'apn-profile'"))
		}
	}

	if a.QosProfile != nil {
		object["qos-profile"], err = json.Marshal(a.QosProfile)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'qos-profile'"))
		}
	}

	if a.SecurityProfile != nil {
		object["security-profile"], err = json.Marshal(a.SecurityProfile)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'security-profile'"))
		}
	}

	if a.UpProfile != nil {
		object["up-profile"], err = json.Marshal(a.UpProfile)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'up-profile'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SubscriberUeProfilesAccessProfile. Returns the specified
// element and whether it was found
func (a SubscriberUeProfilesAccessProfile) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SubscriberUeProfilesAccessProfile
func (a *SubscriberUeProfilesAccessProfile) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SubscriberUeProfilesAccessProfile to handle AdditionalProperties
func (a *SubscriberUeProfilesAccessProfile) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["access-profile"]; found {
		err = json.Unmarshal(raw, &a.AccessProfile)
		if err != nil {
			return errors.Wrap(err, "error reading 'access-profile'")
		}
		delete(object, "access-profile")
	}

	if raw, found := object["allowed"]; found {
		err = json.Unmarshal(raw, &a.Allowed)
		if err != nil {
			return errors.Wrap(err, "error reading 'allowed'")
		}
		delete(object, "allowed")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SubscriberUeProfilesAccessProfile to handle AdditionalProperties
func (a SubscriberUeProfilesAccessProfile) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccessProfile != nil {
		object["access-profile"], err = json.Marshal(a.AccessProfile)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'access-profile'"))
		}
	}

	if a.Allowed != nil {
		object["allowed"], err = json.Marshal(a.Allowed)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'allowed'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SubscriberUeServingPlmn. Returns the specified
// element and whether it was found
func (a SubscriberUeServingPlmn) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SubscriberUeServingPlmn
func (a *SubscriberUeServingPlmn) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SubscriberUeServingPlmn to handle AdditionalProperties
func (a *SubscriberUeServingPlmn) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["mcc"]; found {
		err = json.Unmarshal(raw, &a.Mcc)
		if err != nil {
			return errors.Wrap(err, "error reading 'mcc'")
		}
		delete(object, "mcc")
	}

	if raw, found := object["mnc"]; found {
		err = json.Unmarshal(raw, &a.Mnc)
		if err != nil {
			return errors.Wrap(err, "error reading 'mnc'")
		}
		delete(object, "mnc")
	}

	if raw, found := object["tac"]; found {
		err = json.Unmarshal(raw, &a.Tac)
		if err != nil {
			return errors.Wrap(err, "error reading 'tac'")
		}
		delete(object, "tac")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SubscriberUeServingPlmn to handle AdditionalProperties
func (a SubscriberUeServingPlmn) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Mcc != nil {
		object["mcc"], err = json.Marshal(a.Mcc)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'mcc'"))
		}
	}

	if a.Mnc != nil {
		object["mnc"], err = json.Marshal(a.Mnc)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'mnc'"))
		}
	}

	if a.Tac != nil {
		object["tac"], err = json.Marshal(a.Tac)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'tac'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpProfile. Returns the specified
// element and whether it was found
func (a UpProfile) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpProfile
func (a *UpProfile) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpProfile to handle AdditionalProperties
func (a *UpProfile) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["up-profile"]; found {
		err = json.Unmarshal(raw, &a.UpProfile)
		if err != nil {
			return errors.Wrap(err, "error reading 'up-profile'")
		}
		delete(object, "up-profile")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpProfile to handle AdditionalProperties
func (a UpProfile) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.UpProfile != nil {
		object["up-profile"], err = json.Marshal(a.UpProfile)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'up-profile'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpProfileUpProfile. Returns the specified
// element and whether it was found
func (a UpProfileUpProfile) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpProfileUpProfile
func (a *UpProfileUpProfile) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpProfileUpProfile to handle AdditionalProperties
func (a *UpProfileUpProfile) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["access-control"]; found {
		err = json.Unmarshal(raw, &a.AccessControl)
		if err != nil {
			return errors.Wrap(err, "error reading 'access-control'")
		}
		delete(object, "access-control")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return errors.Wrap(err, "error reading 'id'")
		}
		delete(object, "id")
	}

	if raw, found := object["user-plane"]; found {
		err = json.Unmarshal(raw, &a.UserPlane)
		if err != nil {
			return errors.Wrap(err, "error reading 'user-plane'")
		}
		delete(object, "user-plane")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpProfileUpProfile to handle AdditionalProperties
func (a UpProfileUpProfile) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccessControl != nil {
		object["access-control"], err = json.Marshal(a.AccessControl)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'access-control'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'id'"))
		}
	}

	if a.UserPlane != nil {
		object["user-plane"], err = json.Marshal(a.UserPlane)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'user-plane'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
