// Code generated by oapi-codegen. DO NOT EDIT.
// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package types

import (
	"encoding/json"
	"fmt"

	"github.com/pkg/errors"
)

// Defines values for SiteSliceConnectivityService.
const (
	SiteSliceConnectivityServiceG SiteSliceConnectivityService = "4g"

	SiteSliceConnectivityServiceG1 SiteSliceConnectivityService = "5g"
)

// both the additional property 'unchanged' and the 'enterprise-id'
type AdditionalPropertiesUnchTarget struct {

	// an override of the enterprise-id (target)
	EnterpriseId *string `json:"enterprise-id,omitempty"`

	// A comma seperated list of unchanged mandatory attribute names
	Unchanged *string `json:"unchanged,omitempty"`
}

// Optionally specify a enterprise-id other than the default (only on PATCH method)
type AdditionalPropertyEnterpriseId struct {

	// an override of the enterprise-id (target)
	EnterpriseId *string `json:"enterprise-id,omitempty"`
}

// To optionally omit 'required' properties, add them to 'unchanged' list
type AdditionalPropertyUnchanged struct {

	// A comma seperated list of unchanged mandatory attribute names
	Unchanged *string `json:"unchanged,omitempty"`
}

// List of applications (single)
type Application struct {

	// Address of this application. Either a hostname, an IP, or a subnet.
	Address string `json:"address"`

	// ID for this application.
	ApplicationId ListKey `json:"application-id"`

	// long description field
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// list for endpoint (list)
	Endpoint             *ApplicationEndpointList                  `json:"endpoint,omitempty"`
	AdditionalProperties map[string]AdditionalPropertiesUnchTarget `json:"-"`
}

// list for endpoint (single)
type ApplicationEndpoint struct {

	// long description field
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// Id of this endpoint
	EndpointId ListKey `json:"endpoint-id"`

	// Maximum bitrate
	Mbr *ApplicationEndpointMbr `json:"mbr,omitempty"`

	// Last port in range
	PortEnd *int `json:"port-end,omitempty"`

	// First port in range
	PortStart *int `json:"port-start,omitempty"`

	// Protocol of this endpoint
	Protocol *string `json:"protocol,omitempty"`

	// Link to traffic class
	TrafficClass *string `json:"traffic-class,omitempty"`
}

// list for endpoint (list)
type ApplicationEndpointList []ApplicationEndpoint

// Maximum bitrate
type ApplicationEndpointMbr struct {

	// Per-Device per application MBR downlink data rate in bps
	Downlink *int64 `json:"downlink,omitempty"`

	// Per-Device per-Application MBR uplink data rate in bps
	Uplink *int64 `json:"uplink,omitempty"`
}

// List of applications (list)
type ApplicationList []Application

// List of site (single)
type Site struct {

	// Connectivity to the mobile core
	ConnectivityService *SiteConnectivityService `json:"connectivity-service,omitempty"`

	// long description field
	Description *string `json:"description,omitempty"`

	// List of devices (list)
	Device *SiteDeviceList `json:"device,omitempty"`

	// List of device groups (list)
	DeviceGroup *SiteDeviceGroupList `json:"device-group,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// container for imsi-defination
	ImsiDefinition *SiteImsiDefinition `json:"imsi-definition,omitempty"`

	// List of ip domains (list)
	IpDomain *SiteIpDomainList `json:"ip-domain,omitempty"`

	// container for monitoring
	Monitoring *SiteMonitoring `json:"monitoring,omitempty"`

	// List of sim cards (list)
	SimCard *SiteSimCardList `json:"sim-card,omitempty"`

	// ID for this site.
	SiteId ListKey `json:"site-id"`

	// List of Slices (list)
	Slice *SiteSliceList `json:"slice,omitempty"`

	// List of small cell addresses (list)
	SmallCell *SiteSmallCellList `json:"small-cell,omitempty"`

	// A list of named upfs. (list)
	Upf                  *SiteUpfList                              `json:"upf,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyEnterpriseId `json:"-"`
}

// Connectivity to the mobile core
type SiteConnectivityService struct {

	// The 4g core endpoint
	Core4g *SiteConnectivityServiceCore4g `json:"core-4g,omitempty"`

	// The 5g core endpoint
	Core5g *SiteConnectivityServiceCore5g `json:"core-5g,omitempty"`
}

// The 4g core endpoint
type SiteConnectivityServiceCore4g struct {

	// URL of ACC prometheus
	AccPrometheusUrl *string `json:"acc-prometheus-url,omitempty"`

	// Endpoint URL
	Endpoint *string `json:"endpoint,omitempty"`
}

// The 5g core endpoint
type SiteConnectivityServiceCore5g struct {

	// URL of ACC prometheus
	AccPrometheusUrl *string `json:"acc-prometheus-url,omitempty"`

	// Endpoint URL
	Endpoint *string `json:"endpoint,omitempty"`
}

// List of devices (single)
type SiteDevice struct {

	// long description field
	Description *string `json:"description,omitempty"`

	// ID for this device.
	DeviceId ListKey `json:"device-id"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// IMEI for this device
	Imei *string `json:"imei,omitempty"`

	// Link to simcard
	SimCard *string `json:"sim-card,omitempty"`

	// read only attributes of device
	State *SiteDeviceState `json:"state,omitempty"`
}

// List of device groups (single)
type SiteDeviceGroup struct {

	// long description field
	Description *string `json:"description,omitempty"`

	// list of devices in this device-group (list)
	Device *SiteDeviceGroupDeviceList `json:"device,omitempty"`

	// ID for this device group.
	DeviceGroupId ListKey `json:"device-group-id"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// Link to ip-domain settings that determine the pool of IP addresses,
	// as well as the domain resolver settings to use
	IpDomain *string `json:"ip-domain,omitempty"`

	// Maximum bitrate
	Mbr *SiteDeviceGroupMbr `json:"mbr,omitempty"`

	// Link to traffic class
	TrafficClass         string                                 `json:"traffic-class"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-"`
}

// list of devices in this device-group (single)
type SiteDeviceGroupDevice struct {

	// Link to device
	DeviceId ListKey `json:"device-id"`

	// Enable this device
	Enable *bool `json:"enable,omitempty"`
}

// list of devices in this device-group (list)
type SiteDeviceGroupDeviceList []SiteDeviceGroupDevice

// List of device groups (list)
type SiteDeviceGroupList []SiteDeviceGroup

// Maximum bitrate
type SiteDeviceGroupMbr struct {

	// Per-device MBR downlink data rate in bps
	Downlink int64 `json:"downlink"`

	// Per-device MBR uplink data rate in bps
	Uplink               int64                                  `json:"uplink"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-"`
}

// List of devices (list)
type SiteDeviceList []SiteDevice

// read only attributes of device
type SiteDeviceState struct {

	// the connected status (Yes|No|Idle)
	Connected *string `json:"connected,omitempty"`

	// the ip address assigned to the device
	IpAddress *string `json:"ip-address,omitempty"`

	// The time in UTC that the device was last connected
	LastConnected *string `json:"last-connected,omitempty"`
}

// container for imsi-defination
type SiteImsiDefinition struct {

	// enterprise-specific identifier
	Enterprise int32 `json:"enterprise"`

	// IMSI format specifier, describes how fields are packed into an IMSI. Must be exactly 15 characters long. For example, CCCNNNEEESSSSSS.
	Format string `json:"format"`

	// mobile country code
	Mcc string `json:"mcc"`

	// mobile network code
	Mnc                  string                                 `json:"mnc"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-"`
}

// List of ip domains (single)
type SiteIpDomain struct {

	// administrative status
	AdminStatus *string `json:"admin-status,omitempty"`

	// long description field
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// DNN/APN
	Dnn string `json:"dnn"`

	// primary dns server name
	DnsPrimary *string `json:"dns-primary,omitempty"`

	// secondary dns server name
	DnsSecondary *string `json:"dns-secondary,omitempty"`

	// ID for this ip domain.
	IpDomainId ListKey `json:"ip-domain-id"`

	// maximum transmission unit
	Mtu *int `json:"mtu,omitempty"`

	// subnet to allocate ip addresses from
	Subnet               string                                 `json:"subnet"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-"`
}

// List of ip domains (list)
type SiteIpDomainList []SiteIpDomain

// List of site (list)
type SiteList []Site

// container for monitoring
type SiteMonitoring struct {

	// URL of edge cluster prometheus
	EdgeClusterPrometheusUrl *string `json:"edge-cluster-prometheus-url,omitempty"`

	// List of edge monitoring devices (list)
	EdgeDevice *SiteMonitoringEdgeDeviceList `json:"edge-device,omitempty"`

	// URL of monitoring prometheus
	EdgeMonitoringPrometheusUrl *string `json:"edge-monitoring-prometheus-url,omitempty"`
}

// List of edge monitoring devices (single)
type SiteMonitoringEdgeDevice struct {

	// long description field
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// Id of edge monitoring device
	EdgeDeviceId ListKey `json:"edge-device-id"`
}

// List of edge monitoring devices (list)
type SiteMonitoringEdgeDeviceList []SiteMonitoringEdgeDevice

// List of sim cards (single)
type SiteSimCard struct {

	// long description field
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// ICCID for this sim card
	Iccid *string `json:"iccid,omitempty"`

	// IMSI for this sim card
	Imsi *int64 `json:"imsi,omitempty"`

	// ID for this sim card.
	SimId ListKey `json:"sim-id"`
}

// List of sim cards (list)
type SiteSimCardList []SiteSimCard

// List of Slices (single)
type SiteSlice struct {

	// The type of connectivity service 4g/5g to use with the slice
	ConnectivityService *SiteSliceConnectivityService `json:"connectivity-service,omitempty"`

	// Default behavior if no filter rules match
	DefaultBehavior string `json:"default-behavior"`

	// long description field
	Description *string `json:"description,omitempty"`

	// A list of device groups. Groups will only participate in
	// the Slice if the enable field is set to True (list)
	DeviceGroup *SiteSliceDeviceGroupList `json:"device-group,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// A list of applications to allow and/or deny. Rules are executed in
	// priority order. The first rule to match will determine the fate
	// of the packet. (list)
	Filter *SiteSliceFilterList `json:"filter,omitempty"`

	// Per slice Maximum Bit Rate
	Mbr *SiteSliceMbr `json:"mbr,omitempty"`

	// List of priority traffic rules (list)
	PriorityTrafficRule *SiteSlicePriorityTrafficRuleList `json:"priority-traffic-rule,omitempty"`

	// Slice differentiator. Immutable.
	Sd int32 `json:"sd"`

	// ID for this slice.
	SliceId ListKey `json:"slice-id"`

	// Slice/Service type. Immutable.
	Sst int `json:"sst"`

	// Link to user plane that implements this vcf
	Upf                  *string                                `json:"upf,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-"`
}

// The type of connectivity service 4g/5g to use with the slice
type SiteSliceConnectivityService string

// A list of device groups. Groups will only participate in
// the Slice if the enable field is set to True (single)
type SiteSliceDeviceGroup struct {

	// Link to device group
	DeviceGroup ListKey `json:"device-group"`

	// Enable this device group
	Enable *bool `json:"enable,omitempty"`
}

// A list of device groups. Groups will only participate in
// the Slice if the enable field is set to True (list)
type SiteSliceDeviceGroupList []SiteSliceDeviceGroup

// A list of applications to allow and/or deny. Rules are executed in
// priority order. The first rule to match will determine the fate
// of the packet. (single)
type SiteSliceFilter struct {

	// Allow or deny this application
	Allow *bool `json:"allow,omitempty"`

	// Link to application
	Application ListKey `json:"application"`

	// Priority of this application
	Priority *int `json:"priority,omitempty"`
}

// A list of applications to allow and/or deny. Rules are executed in
// priority order. The first rule to match will determine the fate
// of the packet. (list)
type SiteSliceFilterList []SiteSliceFilter

// List of Slices (list)
type SiteSliceList []SiteSlice

// Per slice Maximum Bit Rate
type SiteSliceMbr struct {

	// Per-Slice MBR downlink data rate in bps
	Downlink *int64 `json:"downlink,omitempty"`

	// Per-Slice Downlink burst size
	DownlinkBurstSize *int32 `json:"downlink-burst-size,omitempty"`

	// Per-Slice MBR uplink data rate in bps
	Uplink *int64 `json:"uplink,omitempty"`

	// Per-Slice Uplink burst size
	UplinkBurstSize *int32 `json:"uplink-burst-size,omitempty"`
}

// List of priority traffic rules (single)
type SiteSlicePriorityTrafficRule struct {

	// Link to application
	Application string `json:"application"`

	// long description field
	Description *string `json:"description,omitempty"`

	// Link to device
	Device string `json:"device"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// Link to endpoint in application
	Endpoint string `json:"endpoint"`

	// For choice bitrate:gbr-case
	Gbr *SiteSlicePriorityTrafficRuleGbr `json:"gbr,omitempty"`

	// For choice bitrate:mbr-case
	Mbr *SiteSlicePriorityTrafficRuleMbr `json:"mbr,omitempty"`

	// ID for this priority traffic class.
	PriorityTrafficRuleId ListKey `json:"priority-traffic-rule-id"`

	// Link to traffic class
	TrafficClass         *string                                `json:"traffic-class,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-"`
}

// For choice bitrate:gbr-case
type SiteSlicePriorityTrafficRuleGbr struct {

	// Per-Device per application downlink data rate in bps
	Downlink *int64 `json:"downlink,omitempty"`

	// Per-Device per-Application uplink data rate in bps
	Uplink *int64 `json:"uplink,omitempty"`
}

// List of priority traffic rules (list)
type SiteSlicePriorityTrafficRuleList []SiteSlicePriorityTrafficRule

// For choice bitrate:mbr-case
type SiteSlicePriorityTrafficRuleMbr struct {

	// Per-Device per application downlink data rate in bps
	Downlink *int64 `json:"downlink,omitempty"`

	// Per-Device per-Application uplink data rate in bps
	Uplink *int64 `json:"uplink,omitempty"`
}

// List of small cell addresses (single)
type SiteSmallCell struct {

	// Address of small cell
	Address *string `json:"address,omitempty"`

	// long description field
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// Enable this small cell
	Enable *bool `json:"enable,omitempty"`

	// Id of small cell
	SmallCellId ListKey `json:"small-cell-id"`

	// Type Allocation Code
	Tac                  string                                 `json:"tac"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-"`
}

// List of small cell addresses (list)
type SiteSmallCellList []SiteSmallCell

// A list of named upfs. (single)
type SiteUpf struct {

	// Address of UPF
	Address string `json:"address"`

	// url for configuring the UPF
	ConfigEndpoint *string `json:"config-endpoint,omitempty"`

	// long description field
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// Port for UPF
	Port int `json:"port"`

	// ID for this upf.
	UpfId                ListKey                                `json:"upf-id"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-"`
}

// A list of named upfs. (list)
type SiteUpfList []SiteUpf

// List of slice templates (single)
type Template struct {

	// Default behavior if no filter rules match
	DefaultBehavior string `json:"default-behavior"`

	// long description field
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// Per-Slice QOS Settings Maximum Bit Rate
	Mbr *TemplateMbr `json:"mbr,omitempty"`

	// Slice differentiator
	Sd *int32 `json:"sd,omitempty"`

	// Slice/Service type
	Sst *int `json:"sst,omitempty"`

	// ID for this slice template.
	TemplateId           ListKey                                   `json:"template-id"`
	AdditionalProperties map[string]AdditionalPropertiesUnchTarget `json:"-"`
}

// List of slice templates (list)
type TemplateList []Template

// Per-Slice QOS Settings Maximum Bit Rate
type TemplateMbr struct {

	// Per-Slice MBR downlink data rate in bps
	Downlink *int64 `json:"downlink,omitempty"`

	// Per-Slice Downlink burst size
	DownlinkBurstSize *int32 `json:"downlink-burst-size,omitempty"`

	// Per-Slice MBR uplink data rate in bps
	Uplink *int64 `json:"uplink,omitempty"`

	// Per-Slice Uplink burst size
	UplinkBurstSize *int32 `json:"uplink-burst-size,omitempty"`
}

// List of traffic class (single)
type TrafficClass struct {

	// Allocation and Retention Priority. 1 is the highest. 15 is the lowest.
	Arp *int `json:"arp,omitempty"`

	// long description field
	Description *string `json:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty"`

	// PDB
	Pdb *int `json:"pdb,omitempty"`

	// PELR exponent
	Pelr *int `json:"pelr,omitempty"`

	// QOS Class Identifier
	Qci *int `json:"qci,omitempty"`

	// ID for this traffic class.
	TrafficClassId       ListKey                                   `json:"traffic-class-id"`
	AdditionalProperties map[string]AdditionalPropertyEnterpriseId `json:"-"`
}

// List of traffic class (list)
type TrafficClassList []TrafficClass

// enterprise-id (target in onos-config)
type EnterpriseId string

// List of applications (single)
type RequestBodyApplication Application

// list for endpoint (single)
type RequestBodyApplicationEndpoint ApplicationEndpoint

// Maximum bitrate
type RequestBodyApplicationEndpointMbr ApplicationEndpointMbr

// List of site (single)
type RequestBodySite Site

// Connectivity to the mobile core
type RequestBodySiteConnectivityService SiteConnectivityService

// The 4g core endpoint
type RequestBodySiteConnectivityServiceCore4g SiteConnectivityServiceCore4g

// The 5g core endpoint
type RequestBodySiteConnectivityServiceCore5g SiteConnectivityServiceCore5g

// List of devices (single)
type RequestBodySiteDevice SiteDevice

// List of device groups (single)
type RequestBodySiteDeviceGroup SiteDeviceGroup

// list of devices in this device-group (single)
type RequestBodySiteDeviceGroupDevice SiteDeviceGroupDevice

// Maximum bitrate
type RequestBodySiteDeviceGroupMbr SiteDeviceGroupMbr

// container for imsi-defination
type RequestBodySiteImsiDefinition SiteImsiDefinition

// List of ip domains (single)
type RequestBodySiteIpDomain SiteIpDomain

// container for monitoring
type RequestBodySiteMonitoring SiteMonitoring

// List of edge monitoring devices (single)
type RequestBodySiteMonitoringEdgeDevice SiteMonitoringEdgeDevice

// List of sim cards (single)
type RequestBodySiteSimCard SiteSimCard

// List of Slices (single)
type RequestBodySiteSlice SiteSlice

// A list of device groups. Groups will only participate in
// the Slice if the enable field is set to True (single)
type RequestBodySiteSliceDeviceGroup SiteSliceDeviceGroup

// A list of applications to allow and/or deny. Rules are executed in
// priority order. The first rule to match will determine the fate
// of the packet. (single)
type RequestBodySiteSliceFilter SiteSliceFilter

// Per slice Maximum Bit Rate
type RequestBodySiteSliceMbr SiteSliceMbr

// List of priority traffic rules (single)
type RequestBodySiteSlicePriorityTrafficRule SiteSlicePriorityTrafficRule

// List of small cell addresses (single)
type RequestBodySiteSmallCell SiteSmallCell

// A list of named upfs. (single)
type RequestBodySiteUpf SiteUpf

// List of slice templates (single)
type RequestBodyTemplate Template

// Per-Slice QOS Settings Maximum Bit Rate
type RequestBodyTemplateMbr TemplateMbr

// List of traffic class (single)
type RequestBodyTrafficClass TrafficClass

// PostApplicationJSONRequestBody defines body for PostApplication for application/json ContentType.
type PostApplicationJSONRequestBody RequestBodyApplication

// PostApplicationEndpointJSONRequestBody defines body for PostApplicationEndpoint for application/json ContentType.
type PostApplicationEndpointJSONRequestBody RequestBodyApplicationEndpoint

// PostApplicationEndpointMbrJSONRequestBody defines body for PostApplicationEndpointMbr for application/json ContentType.
type PostApplicationEndpointMbrJSONRequestBody RequestBodyApplicationEndpointMbr

// PostSiteJSONRequestBody defines body for PostSite for application/json ContentType.
type PostSiteJSONRequestBody RequestBodySite

// PostSiteConnectivityServiceJSONRequestBody defines body for PostSiteConnectivityService for application/json ContentType.
type PostSiteConnectivityServiceJSONRequestBody RequestBodySiteConnectivityService

// PostSiteConnectivityServiceCore4gJSONRequestBody defines body for PostSiteConnectivityServiceCore4g for application/json ContentType.
type PostSiteConnectivityServiceCore4gJSONRequestBody RequestBodySiteConnectivityServiceCore4g

// PostSiteConnectivityServiceCore5gJSONRequestBody defines body for PostSiteConnectivityServiceCore5g for application/json ContentType.
type PostSiteConnectivityServiceCore5gJSONRequestBody RequestBodySiteConnectivityServiceCore5g

// PostSiteDeviceGroupJSONRequestBody defines body for PostSiteDeviceGroup for application/json ContentType.
type PostSiteDeviceGroupJSONRequestBody RequestBodySiteDeviceGroup

// PostSiteDeviceGroupDeviceJSONRequestBody defines body for PostSiteDeviceGroupDevice for application/json ContentType.
type PostSiteDeviceGroupDeviceJSONRequestBody RequestBodySiteDeviceGroupDevice

// PostSiteDeviceGroupMbrJSONRequestBody defines body for PostSiteDeviceGroupMbr for application/json ContentType.
type PostSiteDeviceGroupMbrJSONRequestBody RequestBodySiteDeviceGroupMbr

// PostSiteDeviceJSONRequestBody defines body for PostSiteDevice for application/json ContentType.
type PostSiteDeviceJSONRequestBody RequestBodySiteDevice

// PostSiteImsiDefinitionJSONRequestBody defines body for PostSiteImsiDefinition for application/json ContentType.
type PostSiteImsiDefinitionJSONRequestBody RequestBodySiteImsiDefinition

// PostSiteIpDomainJSONRequestBody defines body for PostSiteIpDomain for application/json ContentType.
type PostSiteIpDomainJSONRequestBody RequestBodySiteIpDomain

// PostSiteMonitoringJSONRequestBody defines body for PostSiteMonitoring for application/json ContentType.
type PostSiteMonitoringJSONRequestBody RequestBodySiteMonitoring

// PostSiteMonitoringEdgeDeviceJSONRequestBody defines body for PostSiteMonitoringEdgeDevice for application/json ContentType.
type PostSiteMonitoringEdgeDeviceJSONRequestBody RequestBodySiteMonitoringEdgeDevice

// PostSiteSimCardJSONRequestBody defines body for PostSiteSimCard for application/json ContentType.
type PostSiteSimCardJSONRequestBody RequestBodySiteSimCard

// PostSiteSliceJSONRequestBody defines body for PostSiteSlice for application/json ContentType.
type PostSiteSliceJSONRequestBody RequestBodySiteSlice

// PostSiteSliceDeviceGroupJSONRequestBody defines body for PostSiteSliceDeviceGroup for application/json ContentType.
type PostSiteSliceDeviceGroupJSONRequestBody RequestBodySiteSliceDeviceGroup

// PostSiteSliceFilterJSONRequestBody defines body for PostSiteSliceFilter for application/json ContentType.
type PostSiteSliceFilterJSONRequestBody RequestBodySiteSliceFilter

// PostSiteSliceMbrJSONRequestBody defines body for PostSiteSliceMbr for application/json ContentType.
type PostSiteSliceMbrJSONRequestBody RequestBodySiteSliceMbr

// PostSiteSlicePriorityTrafficRuleJSONRequestBody defines body for PostSiteSlicePriorityTrafficRule for application/json ContentType.
type PostSiteSlicePriorityTrafficRuleJSONRequestBody RequestBodySiteSlicePriorityTrafficRule

// PostSiteSmallCellJSONRequestBody defines body for PostSiteSmallCell for application/json ContentType.
type PostSiteSmallCellJSONRequestBody RequestBodySiteSmallCell

// PostSiteUpfJSONRequestBody defines body for PostSiteUpf for application/json ContentType.
type PostSiteUpfJSONRequestBody RequestBodySiteUpf

// PostTemplateJSONRequestBody defines body for PostTemplate for application/json ContentType.
type PostTemplateJSONRequestBody RequestBodyTemplate

// PostTemplateMbrJSONRequestBody defines body for PostTemplateMbr for application/json ContentType.
type PostTemplateMbrJSONRequestBody RequestBodyTemplateMbr

// PostTrafficClassJSONRequestBody defines body for PostTrafficClass for application/json ContentType.
type PostTrafficClassJSONRequestBody RequestBodyTrafficClass

// Getter for additional properties for Application. Returns the specified
// element and whether it was found
func (a Application) Get(fieldName string) (value AdditionalPropertiesUnchTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Application
func (a *Application) Set(fieldName string, value AdditionalPropertiesUnchTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertiesUnchTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Application to handle AdditionalProperties
func (a *Application) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["address"]; found {
		err = json.Unmarshal(raw, &a.Address)
		if err != nil {
			return errors.Wrap(err, "error reading 'address'")
		}
		delete(object, "address")
	}

	if raw, found := object["application-id"]; found {
		err = json.Unmarshal(raw, &a.ApplicationId)
		if err != nil {
			return errors.Wrap(err, "error reading 'application-id'")
		}
		delete(object, "application-id")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["endpoint"]; found {
		err = json.Unmarshal(raw, &a.Endpoint)
		if err != nil {
			return errors.Wrap(err, "error reading 'endpoint'")
		}
		delete(object, "endpoint")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertiesUnchTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertiesUnchTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Application to handle AdditionalProperties
func (a Application) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["address"], err = json.Marshal(a.Address)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'address'"))
	}

	object["application-id"], err = json.Marshal(a.ApplicationId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'application-id'"))
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Endpoint != nil {
		object["endpoint"], err = json.Marshal(a.Endpoint)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'endpoint'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Site. Returns the specified
// element and whether it was found
func (a Site) Get(fieldName string) (value AdditionalPropertyEnterpriseId, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Site
func (a *Site) Set(fieldName string, value AdditionalPropertyEnterpriseId) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyEnterpriseId)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Site to handle AdditionalProperties
func (a *Site) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["connectivity-service"]; found {
		err = json.Unmarshal(raw, &a.ConnectivityService)
		if err != nil {
			return errors.Wrap(err, "error reading 'connectivity-service'")
		}
		delete(object, "connectivity-service")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["device"]; found {
		err = json.Unmarshal(raw, &a.Device)
		if err != nil {
			return errors.Wrap(err, "error reading 'device'")
		}
		delete(object, "device")
	}

	if raw, found := object["device-group"]; found {
		err = json.Unmarshal(raw, &a.DeviceGroup)
		if err != nil {
			return errors.Wrap(err, "error reading 'device-group'")
		}
		delete(object, "device-group")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["imsi-definition"]; found {
		err = json.Unmarshal(raw, &a.ImsiDefinition)
		if err != nil {
			return errors.Wrap(err, "error reading 'imsi-definition'")
		}
		delete(object, "imsi-definition")
	}

	if raw, found := object["ip-domain"]; found {
		err = json.Unmarshal(raw, &a.IpDomain)
		if err != nil {
			return errors.Wrap(err, "error reading 'ip-domain'")
		}
		delete(object, "ip-domain")
	}

	if raw, found := object["monitoring"]; found {
		err = json.Unmarshal(raw, &a.Monitoring)
		if err != nil {
			return errors.Wrap(err, "error reading 'monitoring'")
		}
		delete(object, "monitoring")
	}

	if raw, found := object["sim-card"]; found {
		err = json.Unmarshal(raw, &a.SimCard)
		if err != nil {
			return errors.Wrap(err, "error reading 'sim-card'")
		}
		delete(object, "sim-card")
	}

	if raw, found := object["site-id"]; found {
		err = json.Unmarshal(raw, &a.SiteId)
		if err != nil {
			return errors.Wrap(err, "error reading 'site-id'")
		}
		delete(object, "site-id")
	}

	if raw, found := object["slice"]; found {
		err = json.Unmarshal(raw, &a.Slice)
		if err != nil {
			return errors.Wrap(err, "error reading 'slice'")
		}
		delete(object, "slice")
	}

	if raw, found := object["small-cell"]; found {
		err = json.Unmarshal(raw, &a.SmallCell)
		if err != nil {
			return errors.Wrap(err, "error reading 'small-cell'")
		}
		delete(object, "small-cell")
	}

	if raw, found := object["upf"]; found {
		err = json.Unmarshal(raw, &a.Upf)
		if err != nil {
			return errors.Wrap(err, "error reading 'upf'")
		}
		delete(object, "upf")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyEnterpriseId)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyEnterpriseId
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Site to handle AdditionalProperties
func (a Site) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ConnectivityService != nil {
		object["connectivity-service"], err = json.Marshal(a.ConnectivityService)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'connectivity-service'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.Device != nil {
		object["device"], err = json.Marshal(a.Device)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'device'"))
		}
	}

	if a.DeviceGroup != nil {
		object["device-group"], err = json.Marshal(a.DeviceGroup)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'device-group'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.ImsiDefinition != nil {
		object["imsi-definition"], err = json.Marshal(a.ImsiDefinition)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'imsi-definition'"))
		}
	}

	if a.IpDomain != nil {
		object["ip-domain"], err = json.Marshal(a.IpDomain)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'ip-domain'"))
		}
	}

	if a.Monitoring != nil {
		object["monitoring"], err = json.Marshal(a.Monitoring)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'monitoring'"))
		}
	}

	if a.SimCard != nil {
		object["sim-card"], err = json.Marshal(a.SimCard)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'sim-card'"))
		}
	}

	object["site-id"], err = json.Marshal(a.SiteId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'site-id'"))
	}

	if a.Slice != nil {
		object["slice"], err = json.Marshal(a.Slice)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'slice'"))
		}
	}

	if a.SmallCell != nil {
		object["small-cell"], err = json.Marshal(a.SmallCell)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'small-cell'"))
		}
	}

	if a.Upf != nil {
		object["upf"], err = json.Marshal(a.Upf)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'upf'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SiteDeviceGroup. Returns the specified
// element and whether it was found
func (a SiteDeviceGroup) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SiteDeviceGroup
func (a *SiteDeviceGroup) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SiteDeviceGroup to handle AdditionalProperties
func (a *SiteDeviceGroup) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["device"]; found {
		err = json.Unmarshal(raw, &a.Device)
		if err != nil {
			return errors.Wrap(err, "error reading 'device'")
		}
		delete(object, "device")
	}

	if raw, found := object["device-group-id"]; found {
		err = json.Unmarshal(raw, &a.DeviceGroupId)
		if err != nil {
			return errors.Wrap(err, "error reading 'device-group-id'")
		}
		delete(object, "device-group-id")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["ip-domain"]; found {
		err = json.Unmarshal(raw, &a.IpDomain)
		if err != nil {
			return errors.Wrap(err, "error reading 'ip-domain'")
		}
		delete(object, "ip-domain")
	}

	if raw, found := object["mbr"]; found {
		err = json.Unmarshal(raw, &a.Mbr)
		if err != nil {
			return errors.Wrap(err, "error reading 'mbr'")
		}
		delete(object, "mbr")
	}

	if raw, found := object["traffic-class"]; found {
		err = json.Unmarshal(raw, &a.TrafficClass)
		if err != nil {
			return errors.Wrap(err, "error reading 'traffic-class'")
		}
		delete(object, "traffic-class")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SiteDeviceGroup to handle AdditionalProperties
func (a SiteDeviceGroup) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.Device != nil {
		object["device"], err = json.Marshal(a.Device)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'device'"))
		}
	}

	object["device-group-id"], err = json.Marshal(a.DeviceGroupId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'device-group-id'"))
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.IpDomain != nil {
		object["ip-domain"], err = json.Marshal(a.IpDomain)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'ip-domain'"))
		}
	}

	if a.Mbr != nil {
		object["mbr"], err = json.Marshal(a.Mbr)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'mbr'"))
		}
	}

	object["traffic-class"], err = json.Marshal(a.TrafficClass)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'traffic-class'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SiteDeviceGroupMbr. Returns the specified
// element and whether it was found
func (a SiteDeviceGroupMbr) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SiteDeviceGroupMbr
func (a *SiteDeviceGroupMbr) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SiteDeviceGroupMbr to handle AdditionalProperties
func (a *SiteDeviceGroupMbr) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["downlink"]; found {
		err = json.Unmarshal(raw, &a.Downlink)
		if err != nil {
			return errors.Wrap(err, "error reading 'downlink'")
		}
		delete(object, "downlink")
	}

	if raw, found := object["uplink"]; found {
		err = json.Unmarshal(raw, &a.Uplink)
		if err != nil {
			return errors.Wrap(err, "error reading 'uplink'")
		}
		delete(object, "uplink")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SiteDeviceGroupMbr to handle AdditionalProperties
func (a SiteDeviceGroupMbr) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["downlink"], err = json.Marshal(a.Downlink)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'downlink'"))
	}

	object["uplink"], err = json.Marshal(a.Uplink)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'uplink'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SiteImsiDefinition. Returns the specified
// element and whether it was found
func (a SiteImsiDefinition) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SiteImsiDefinition
func (a *SiteImsiDefinition) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SiteImsiDefinition to handle AdditionalProperties
func (a *SiteImsiDefinition) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["enterprise"]; found {
		err = json.Unmarshal(raw, &a.Enterprise)
		if err != nil {
			return errors.Wrap(err, "error reading 'enterprise'")
		}
		delete(object, "enterprise")
	}

	if raw, found := object["format"]; found {
		err = json.Unmarshal(raw, &a.Format)
		if err != nil {
			return errors.Wrap(err, "error reading 'format'")
		}
		delete(object, "format")
	}

	if raw, found := object["mcc"]; found {
		err = json.Unmarshal(raw, &a.Mcc)
		if err != nil {
			return errors.Wrap(err, "error reading 'mcc'")
		}
		delete(object, "mcc")
	}

	if raw, found := object["mnc"]; found {
		err = json.Unmarshal(raw, &a.Mnc)
		if err != nil {
			return errors.Wrap(err, "error reading 'mnc'")
		}
		delete(object, "mnc")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SiteImsiDefinition to handle AdditionalProperties
func (a SiteImsiDefinition) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["enterprise"], err = json.Marshal(a.Enterprise)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'enterprise'"))
	}

	object["format"], err = json.Marshal(a.Format)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'format'"))
	}

	object["mcc"], err = json.Marshal(a.Mcc)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'mcc'"))
	}

	object["mnc"], err = json.Marshal(a.Mnc)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'mnc'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SiteIpDomain. Returns the specified
// element and whether it was found
func (a SiteIpDomain) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SiteIpDomain
func (a *SiteIpDomain) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SiteIpDomain to handle AdditionalProperties
func (a *SiteIpDomain) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["admin-status"]; found {
		err = json.Unmarshal(raw, &a.AdminStatus)
		if err != nil {
			return errors.Wrap(err, "error reading 'admin-status'")
		}
		delete(object, "admin-status")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return errors.Wrap(err, "error reading 'dnn'")
		}
		delete(object, "dnn")
	}

	if raw, found := object["dns-primary"]; found {
		err = json.Unmarshal(raw, &a.DnsPrimary)
		if err != nil {
			return errors.Wrap(err, "error reading 'dns-primary'")
		}
		delete(object, "dns-primary")
	}

	if raw, found := object["dns-secondary"]; found {
		err = json.Unmarshal(raw, &a.DnsSecondary)
		if err != nil {
			return errors.Wrap(err, "error reading 'dns-secondary'")
		}
		delete(object, "dns-secondary")
	}

	if raw, found := object["ip-domain-id"]; found {
		err = json.Unmarshal(raw, &a.IpDomainId)
		if err != nil {
			return errors.Wrap(err, "error reading 'ip-domain-id'")
		}
		delete(object, "ip-domain-id")
	}

	if raw, found := object["mtu"]; found {
		err = json.Unmarshal(raw, &a.Mtu)
		if err != nil {
			return errors.Wrap(err, "error reading 'mtu'")
		}
		delete(object, "mtu")
	}

	if raw, found := object["subnet"]; found {
		err = json.Unmarshal(raw, &a.Subnet)
		if err != nil {
			return errors.Wrap(err, "error reading 'subnet'")
		}
		delete(object, "subnet")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SiteIpDomain to handle AdditionalProperties
func (a SiteIpDomain) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AdminStatus != nil {
		object["admin-status"], err = json.Marshal(a.AdminStatus)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'admin-status'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'dnn'"))
	}

	if a.DnsPrimary != nil {
		object["dns-primary"], err = json.Marshal(a.DnsPrimary)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'dns-primary'"))
		}
	}

	if a.DnsSecondary != nil {
		object["dns-secondary"], err = json.Marshal(a.DnsSecondary)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'dns-secondary'"))
		}
	}

	object["ip-domain-id"], err = json.Marshal(a.IpDomainId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'ip-domain-id'"))
	}

	if a.Mtu != nil {
		object["mtu"], err = json.Marshal(a.Mtu)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'mtu'"))
		}
	}

	object["subnet"], err = json.Marshal(a.Subnet)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'subnet'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SiteSlice. Returns the specified
// element and whether it was found
func (a SiteSlice) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SiteSlice
func (a *SiteSlice) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SiteSlice to handle AdditionalProperties
func (a *SiteSlice) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["connectivity-service"]; found {
		err = json.Unmarshal(raw, &a.ConnectivityService)
		if err != nil {
			return errors.Wrap(err, "error reading 'connectivity-service'")
		}
		delete(object, "connectivity-service")
	}

	if raw, found := object["default-behavior"]; found {
		err = json.Unmarshal(raw, &a.DefaultBehavior)
		if err != nil {
			return errors.Wrap(err, "error reading 'default-behavior'")
		}
		delete(object, "default-behavior")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["device-group"]; found {
		err = json.Unmarshal(raw, &a.DeviceGroup)
		if err != nil {
			return errors.Wrap(err, "error reading 'device-group'")
		}
		delete(object, "device-group")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["filter"]; found {
		err = json.Unmarshal(raw, &a.Filter)
		if err != nil {
			return errors.Wrap(err, "error reading 'filter'")
		}
		delete(object, "filter")
	}

	if raw, found := object["mbr"]; found {
		err = json.Unmarshal(raw, &a.Mbr)
		if err != nil {
			return errors.Wrap(err, "error reading 'mbr'")
		}
		delete(object, "mbr")
	}

	if raw, found := object["priority-traffic-rule"]; found {
		err = json.Unmarshal(raw, &a.PriorityTrafficRule)
		if err != nil {
			return errors.Wrap(err, "error reading 'priority-traffic-rule'")
		}
		delete(object, "priority-traffic-rule")
	}

	if raw, found := object["sd"]; found {
		err = json.Unmarshal(raw, &a.Sd)
		if err != nil {
			return errors.Wrap(err, "error reading 'sd'")
		}
		delete(object, "sd")
	}

	if raw, found := object["slice-id"]; found {
		err = json.Unmarshal(raw, &a.SliceId)
		if err != nil {
			return errors.Wrap(err, "error reading 'slice-id'")
		}
		delete(object, "slice-id")
	}

	if raw, found := object["sst"]; found {
		err = json.Unmarshal(raw, &a.Sst)
		if err != nil {
			return errors.Wrap(err, "error reading 'sst'")
		}
		delete(object, "sst")
	}

	if raw, found := object["upf"]; found {
		err = json.Unmarshal(raw, &a.Upf)
		if err != nil {
			return errors.Wrap(err, "error reading 'upf'")
		}
		delete(object, "upf")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SiteSlice to handle AdditionalProperties
func (a SiteSlice) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ConnectivityService != nil {
		object["connectivity-service"], err = json.Marshal(a.ConnectivityService)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'connectivity-service'"))
		}
	}

	object["default-behavior"], err = json.Marshal(a.DefaultBehavior)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'default-behavior'"))
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DeviceGroup != nil {
		object["device-group"], err = json.Marshal(a.DeviceGroup)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'device-group'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Filter != nil {
		object["filter"], err = json.Marshal(a.Filter)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'filter'"))
		}
	}

	if a.Mbr != nil {
		object["mbr"], err = json.Marshal(a.Mbr)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'mbr'"))
		}
	}

	if a.PriorityTrafficRule != nil {
		object["priority-traffic-rule"], err = json.Marshal(a.PriorityTrafficRule)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'priority-traffic-rule'"))
		}
	}

	object["sd"], err = json.Marshal(a.Sd)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'sd'"))
	}

	object["slice-id"], err = json.Marshal(a.SliceId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'slice-id'"))
	}

	object["sst"], err = json.Marshal(a.Sst)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'sst'"))
	}

	if a.Upf != nil {
		object["upf"], err = json.Marshal(a.Upf)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'upf'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SiteSlicePriorityTrafficRule. Returns the specified
// element and whether it was found
func (a SiteSlicePriorityTrafficRule) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SiteSlicePriorityTrafficRule
func (a *SiteSlicePriorityTrafficRule) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SiteSlicePriorityTrafficRule to handle AdditionalProperties
func (a *SiteSlicePriorityTrafficRule) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["application"]; found {
		err = json.Unmarshal(raw, &a.Application)
		if err != nil {
			return errors.Wrap(err, "error reading 'application'")
		}
		delete(object, "application")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["device"]; found {
		err = json.Unmarshal(raw, &a.Device)
		if err != nil {
			return errors.Wrap(err, "error reading 'device'")
		}
		delete(object, "device")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["endpoint"]; found {
		err = json.Unmarshal(raw, &a.Endpoint)
		if err != nil {
			return errors.Wrap(err, "error reading 'endpoint'")
		}
		delete(object, "endpoint")
	}

	if raw, found := object["gbr"]; found {
		err = json.Unmarshal(raw, &a.Gbr)
		if err != nil {
			return errors.Wrap(err, "error reading 'gbr'")
		}
		delete(object, "gbr")
	}

	if raw, found := object["mbr"]; found {
		err = json.Unmarshal(raw, &a.Mbr)
		if err != nil {
			return errors.Wrap(err, "error reading 'mbr'")
		}
		delete(object, "mbr")
	}

	if raw, found := object["priority-traffic-rule-id"]; found {
		err = json.Unmarshal(raw, &a.PriorityTrafficRuleId)
		if err != nil {
			return errors.Wrap(err, "error reading 'priority-traffic-rule-id'")
		}
		delete(object, "priority-traffic-rule-id")
	}

	if raw, found := object["traffic-class"]; found {
		err = json.Unmarshal(raw, &a.TrafficClass)
		if err != nil {
			return errors.Wrap(err, "error reading 'traffic-class'")
		}
		delete(object, "traffic-class")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SiteSlicePriorityTrafficRule to handle AdditionalProperties
func (a SiteSlicePriorityTrafficRule) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["application"], err = json.Marshal(a.Application)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'application'"))
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	object["device"], err = json.Marshal(a.Device)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'device'"))
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	object["endpoint"], err = json.Marshal(a.Endpoint)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'endpoint'"))
	}

	if a.Gbr != nil {
		object["gbr"], err = json.Marshal(a.Gbr)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'gbr'"))
		}
	}

	if a.Mbr != nil {
		object["mbr"], err = json.Marshal(a.Mbr)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'mbr'"))
		}
	}

	object["priority-traffic-rule-id"], err = json.Marshal(a.PriorityTrafficRuleId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'priority-traffic-rule-id'"))
	}

	if a.TrafficClass != nil {
		object["traffic-class"], err = json.Marshal(a.TrafficClass)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'traffic-class'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SiteSmallCell. Returns the specified
// element and whether it was found
func (a SiteSmallCell) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SiteSmallCell
func (a *SiteSmallCell) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SiteSmallCell to handle AdditionalProperties
func (a *SiteSmallCell) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["address"]; found {
		err = json.Unmarshal(raw, &a.Address)
		if err != nil {
			return errors.Wrap(err, "error reading 'address'")
		}
		delete(object, "address")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["enable"]; found {
		err = json.Unmarshal(raw, &a.Enable)
		if err != nil {
			return errors.Wrap(err, "error reading 'enable'")
		}
		delete(object, "enable")
	}

	if raw, found := object["small-cell-id"]; found {
		err = json.Unmarshal(raw, &a.SmallCellId)
		if err != nil {
			return errors.Wrap(err, "error reading 'small-cell-id'")
		}
		delete(object, "small-cell-id")
	}

	if raw, found := object["tac"]; found {
		err = json.Unmarshal(raw, &a.Tac)
		if err != nil {
			return errors.Wrap(err, "error reading 'tac'")
		}
		delete(object, "tac")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SiteSmallCell to handle AdditionalProperties
func (a SiteSmallCell) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Address != nil {
		object["address"], err = json.Marshal(a.Address)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'address'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Enable != nil {
		object["enable"], err = json.Marshal(a.Enable)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'enable'"))
		}
	}

	object["small-cell-id"], err = json.Marshal(a.SmallCellId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'small-cell-id'"))
	}

	object["tac"], err = json.Marshal(a.Tac)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'tac'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SiteUpf. Returns the specified
// element and whether it was found
func (a SiteUpf) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SiteUpf
func (a *SiteUpf) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SiteUpf to handle AdditionalProperties
func (a *SiteUpf) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["address"]; found {
		err = json.Unmarshal(raw, &a.Address)
		if err != nil {
			return errors.Wrap(err, "error reading 'address'")
		}
		delete(object, "address")
	}

	if raw, found := object["config-endpoint"]; found {
		err = json.Unmarshal(raw, &a.ConfigEndpoint)
		if err != nil {
			return errors.Wrap(err, "error reading 'config-endpoint'")
		}
		delete(object, "config-endpoint")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["port"]; found {
		err = json.Unmarshal(raw, &a.Port)
		if err != nil {
			return errors.Wrap(err, "error reading 'port'")
		}
		delete(object, "port")
	}

	if raw, found := object["upf-id"]; found {
		err = json.Unmarshal(raw, &a.UpfId)
		if err != nil {
			return errors.Wrap(err, "error reading 'upf-id'")
		}
		delete(object, "upf-id")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SiteUpf to handle AdditionalProperties
func (a SiteUpf) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["address"], err = json.Marshal(a.Address)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'address'"))
	}

	if a.ConfigEndpoint != nil {
		object["config-endpoint"], err = json.Marshal(a.ConfigEndpoint)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'config-endpoint'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	object["port"], err = json.Marshal(a.Port)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'port'"))
	}

	object["upf-id"], err = json.Marshal(a.UpfId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'upf-id'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Template. Returns the specified
// element and whether it was found
func (a Template) Get(fieldName string) (value AdditionalPropertiesUnchTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Template
func (a *Template) Set(fieldName string, value AdditionalPropertiesUnchTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertiesUnchTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Template to handle AdditionalProperties
func (a *Template) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["default-behavior"]; found {
		err = json.Unmarshal(raw, &a.DefaultBehavior)
		if err != nil {
			return errors.Wrap(err, "error reading 'default-behavior'")
		}
		delete(object, "default-behavior")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["mbr"]; found {
		err = json.Unmarshal(raw, &a.Mbr)
		if err != nil {
			return errors.Wrap(err, "error reading 'mbr'")
		}
		delete(object, "mbr")
	}

	if raw, found := object["sd"]; found {
		err = json.Unmarshal(raw, &a.Sd)
		if err != nil {
			return errors.Wrap(err, "error reading 'sd'")
		}
		delete(object, "sd")
	}

	if raw, found := object["sst"]; found {
		err = json.Unmarshal(raw, &a.Sst)
		if err != nil {
			return errors.Wrap(err, "error reading 'sst'")
		}
		delete(object, "sst")
	}

	if raw, found := object["template-id"]; found {
		err = json.Unmarshal(raw, &a.TemplateId)
		if err != nil {
			return errors.Wrap(err, "error reading 'template-id'")
		}
		delete(object, "template-id")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertiesUnchTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertiesUnchTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Template to handle AdditionalProperties
func (a Template) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["default-behavior"], err = json.Marshal(a.DefaultBehavior)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'default-behavior'"))
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Mbr != nil {
		object["mbr"], err = json.Marshal(a.Mbr)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'mbr'"))
		}
	}

	if a.Sd != nil {
		object["sd"], err = json.Marshal(a.Sd)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'sd'"))
		}
	}

	if a.Sst != nil {
		object["sst"], err = json.Marshal(a.Sst)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'sst'"))
		}
	}

	object["template-id"], err = json.Marshal(a.TemplateId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'template-id'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TrafficClass. Returns the specified
// element and whether it was found
func (a TrafficClass) Get(fieldName string) (value AdditionalPropertyEnterpriseId, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TrafficClass
func (a *TrafficClass) Set(fieldName string, value AdditionalPropertyEnterpriseId) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyEnterpriseId)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TrafficClass to handle AdditionalProperties
func (a *TrafficClass) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["arp"]; found {
		err = json.Unmarshal(raw, &a.Arp)
		if err != nil {
			return errors.Wrap(err, "error reading 'arp'")
		}
		delete(object, "arp")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["pdb"]; found {
		err = json.Unmarshal(raw, &a.Pdb)
		if err != nil {
			return errors.Wrap(err, "error reading 'pdb'")
		}
		delete(object, "pdb")
	}

	if raw, found := object["pelr"]; found {
		err = json.Unmarshal(raw, &a.Pelr)
		if err != nil {
			return errors.Wrap(err, "error reading 'pelr'")
		}
		delete(object, "pelr")
	}

	if raw, found := object["qci"]; found {
		err = json.Unmarshal(raw, &a.Qci)
		if err != nil {
			return errors.Wrap(err, "error reading 'qci'")
		}
		delete(object, "qci")
	}

	if raw, found := object["traffic-class-id"]; found {
		err = json.Unmarshal(raw, &a.TrafficClassId)
		if err != nil {
			return errors.Wrap(err, "error reading 'traffic-class-id'")
		}
		delete(object, "traffic-class-id")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyEnterpriseId)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyEnterpriseId
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TrafficClass to handle AdditionalProperties
func (a TrafficClass) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Arp != nil {
		object["arp"], err = json.Marshal(a.Arp)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'arp'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Pdb != nil {
		object["pdb"], err = json.Marshal(a.Pdb)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'pdb'"))
		}
	}

	if a.Pelr != nil {
		object["pelr"], err = json.Marshal(a.Pelr)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'pelr'"))
		}
	}

	if a.Qci != nil {
		object["qci"], err = json.Marshal(a.Qci)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'qci'"))
		}
	}

	object["traffic-class-id"], err = json.Marshal(a.TrafficClassId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'traffic-class-id'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
