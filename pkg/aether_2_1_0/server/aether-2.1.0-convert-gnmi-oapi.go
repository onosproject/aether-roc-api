// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.

package server

import (
	"reflect"

	externalRef0 "github.com/onosproject/aether-models/models/aether-2.1.x/api"
	"github.com/onosproject/aether-roc-api/pkg/aether_2_1_0/types" // SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
	//
	// SPDX-License-Identifier: Apache-2.0
	// Not generating constants
	// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
	//
	// SPDX-License-Identifier: Apache-2.0
	// Not generating constants
	// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
	//
	// SPDX-License-Identifier: Apache-2.0
	"github.com/onosproject/aether-roc-api/pkg/utils"
)

// ModelPluginDevice - a wrapper for the model plugin
type ModelPluginDevice struct {
	device externalRef0.Device
}

// toAdditionalPropertiesUnchTarget converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toAdditionalPropertiesUnchTarget(params ...string) (*types.AdditionalPropertiesUnchTarget, error) {
	resource := new(types.AdditionalPropertiesUnchTarget)

	reflectAdditionalPropertiesUnchTarget, err := utils.FindModelPluginObject(d.device, "AdditionalPropertiesUnchTarget", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toAdditionalPropertiesUnchTarget(reflectAdditionalPropertiesUnchTarget, params...)
	return resource, err

}

// toAdditionalPropertiesUnchTarget converts gNMI to OAPI relative to a node in the tree.
func toAdditionalPropertiesUnchTarget(ygotObjValue *reflect.Value, params ...string) (*types.AdditionalPropertiesUnchTarget, error) {
	resource := new(types.AdditionalPropertiesUnchTarget)

	// Property: enterprise-id string
	//encoding gNMI attribute to OAPI
	reflectEnterpriseId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EnterpriseId")
	if err != nil {
		return nil, err
	}
	if reflectEnterpriseId != nil {
		attrEnterpriseId := reflectEnterpriseId.Interface().(string)
		resource.EnterpriseId = &attrEnterpriseId
	}

	// Property: unchanged string
	//encoding gNMI attribute to OAPI
	reflectUnchanged, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Unchanged")
	if err != nil {
		return nil, err
	}
	if reflectUnchanged != nil {
		attrUnchanged := reflectUnchanged.Interface().(string)
		resource.Unchanged = &attrUnchanged
	}

	return resource, nil
}

// toAdditionalPropertyEnterpriseId converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toAdditionalPropertyEnterpriseId(params ...string) (*types.AdditionalPropertyEnterpriseId, error) {
	resource := new(types.AdditionalPropertyEnterpriseId)

	reflectAdditionalPropertyEnterpriseId, err := utils.FindModelPluginObject(d.device, "AdditionalPropertyEnterpriseId", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toAdditionalPropertyEnterpriseId(reflectAdditionalPropertyEnterpriseId, params...)
	return resource, err

}

// toAdditionalPropertyEnterpriseId converts gNMI to OAPI relative to a node in the tree.
func toAdditionalPropertyEnterpriseId(ygotObjValue *reflect.Value, params ...string) (*types.AdditionalPropertyEnterpriseId, error) {
	resource := new(types.AdditionalPropertyEnterpriseId)

	// Property: enterprise-id string
	//encoding gNMI attribute to OAPI
	reflectEnterpriseId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EnterpriseId")
	if err != nil {
		return nil, err
	}
	if reflectEnterpriseId != nil {
		attrEnterpriseId := reflectEnterpriseId.Interface().(string)
		resource.EnterpriseId = &attrEnterpriseId
	}

	return resource, nil
}

// toAdditionalPropertyUnchanged converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toAdditionalPropertyUnchanged(params ...string) (*types.AdditionalPropertyUnchanged, error) {
	resource := new(types.AdditionalPropertyUnchanged)

	reflectAdditionalPropertyUnchanged, err := utils.FindModelPluginObject(d.device, "AdditionalPropertyUnchanged", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toAdditionalPropertyUnchanged(reflectAdditionalPropertyUnchanged, params...)
	return resource, err

}

// toAdditionalPropertyUnchanged converts gNMI to OAPI relative to a node in the tree.
func toAdditionalPropertyUnchanged(ygotObjValue *reflect.Value, params ...string) (*types.AdditionalPropertyUnchanged, error) {
	resource := new(types.AdditionalPropertyUnchanged)

	// Property: unchanged string
	//encoding gNMI attribute to OAPI
	reflectUnchanged, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Unchanged")
	if err != nil {
		return nil, err
	}
	if reflectUnchanged != nil {
		attrUnchanged := reflectUnchanged.Interface().(string)
		resource.Unchanged = &attrUnchanged
	}

	return resource, nil
}

// toApplication converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toApplication(params ...string) (*types.Application, error) {
	resource := new(types.Application)

	reflectApplication, err := utils.FindModelPluginObject(d.device, "Application", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toApplication(reflectApplication, params...)
	return resource, err

}

// toApplication converts gNMI to OAPI relative to a node in the tree.
func toApplication(ygotObjValue *reflect.Value, params ...string) (*types.Application, error) {
	resource := new(types.Application)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Address")
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := reflectAddress.Interface().(string)
		resource.Address = attrAddress
	}

	// Property: application-id ListKey
	//encoding gNMI attribute to OAPI
	reflectApplicationId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ApplicationId")
	if err != nil {
		return nil, err
	}
	if reflectApplicationId != nil {
		attrApplicationId := types.ListKey(reflectApplicationId.Interface().(string))
		resource.ApplicationId = attrApplicationId
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: endpoint ApplicationEndpointList
	// Handle object
	reflectEndpoint, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Endpoint")
	if err != nil {
		return nil, err
	}
	if reflectEndpoint != nil {
		attrEndpoint, err := toApplicationEndpointList(reflectEndpoint, params...)
		if err != nil {
			return nil, err
		}
		resource.Endpoint = attrEndpoint
	}

	return resource, nil
}

// toApplicationEndpoint converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toApplicationEndpoint(params ...string) (*types.ApplicationEndpoint, error) {
	resource := new(types.ApplicationEndpoint)

	reflectApplicationEndpoint, err := utils.FindModelPluginObject(d.device, "ApplicationEndpoint", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toApplicationEndpoint(reflectApplicationEndpoint, params...)
	return resource, err

}

// toApplicationEndpoint converts gNMI to OAPI relative to a node in the tree.
func toApplicationEndpoint(ygotObjValue *reflect.Value, params ...string) (*types.ApplicationEndpoint, error) {
	resource := new(types.ApplicationEndpoint)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: endpoint-id ListKey
	//encoding gNMI attribute to OAPI
	reflectEndpointId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EndpointId")
	if err != nil {
		return nil, err
	}
	if reflectEndpointId != nil {
		attrEndpointId := types.ListKey(reflectEndpointId.Interface().(string))
		resource.EndpointId = attrEndpointId
	}

	// Property: mbr ApplicationEndpointMbr
	// Handle object
	reflectMbr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mbr")
	if err != nil {
		return nil, err
	}
	if reflectMbr != nil {
		attrMbr, err := toApplicationEndpointMbr(reflectMbr, params...)
		if err != nil {
			return nil, err
		}
		resource.Mbr = attrMbr
	}

	// Property: port-end int
	//encoding gNMI attribute to OAPI
	reflectPortEnd, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "PortEnd")
	if err != nil {
		return nil, err
	}
	if reflectPortEnd != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.PortEnd, err = utils.ToIntPtr(reflectPortEnd); err != nil {
			return nil, err
		}
	}

	// Property: port-start int
	//encoding gNMI attribute to OAPI
	reflectPortStart, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "PortStart")
	if err != nil {
		return nil, err
	}
	if reflectPortStart != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.PortStart, err = utils.ToIntPtr(reflectPortStart); err != nil {
			return nil, err
		}
	}

	// Property: protocol string
	//encoding gNMI attribute to OAPI
	reflectProtocol, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Protocol")
	if err != nil {
		return nil, err
	}
	if reflectProtocol != nil {
		attrProtocol := reflectProtocol.Interface().(string)
		resource.Protocol = &attrProtocol
	}

	// Property: traffic-class string
	//encoding gNMI attribute to OAPI
	reflectTrafficClass, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "TrafficClass")
	if err != nil {
		return nil, err
	}
	if reflectTrafficClass != nil {
		attrTrafficClass := reflectTrafficClass.Interface().(string)
		resource.TrafficClass = &attrTrafficClass
	}

	return resource, nil
}

// toApplicationEndpointList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toApplicationEndpointList(params ...string) (*types.ApplicationEndpointList, error) {
	resource := new(types.ApplicationEndpointList)

	// Array list - Go type ApplicationEndpoint
	mpObject, err := utils.FindModelPluginObject(d.device, "ApplicationEndpoint", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toApplicationEndpoint(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toApplicationEndpointList converts gNMI to OAPI relative to a node in the tree.
func toApplicationEndpointList(ygotObjValue *reflect.Value, params ...string) (*types.ApplicationEndpointList, error) {
	resource := new(types.ApplicationEndpointList)

	// Array list - Go type                                                                             ApplicationEndpoint
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toApplicationEndpoint(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// toApplicationEndpointMbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toApplicationEndpointMbr(params ...string) (*types.ApplicationEndpointMbr, error) {
	resource := new(types.ApplicationEndpointMbr)

	reflectApplicationEndpointMbr, err := utils.FindModelPluginObject(d.device, "ApplicationEndpointMbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toApplicationEndpointMbr(reflectApplicationEndpointMbr, params...)
	return resource, err

}

// toApplicationEndpointMbr converts gNMI to OAPI relative to a node in the tree.
func toApplicationEndpointMbr(ygotObjValue *reflect.Value, params ...string) (*types.ApplicationEndpointMbr, error) {
	resource := new(types.ApplicationEndpointMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toApplicationList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toApplicationList(params ...string) (*types.ApplicationList, error) {
	resource := new(types.ApplicationList)

	// Array list - Go type Application
	mpObject, err := utils.FindModelPluginObject(d.device, "Application", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toApplication(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toApplicationList converts gNMI to OAPI relative to a node in the tree.
func toApplicationList(ygotObjValue *reflect.Value, params ...string) (*types.ApplicationList, error) {
	resource := new(types.ApplicationList)

	// Array list - Go type                                                                                     Application
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toApplication(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// toSite converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSite(params ...string) (*types.Site, error) {
	resource := new(types.Site)

	reflectSite, err := utils.FindModelPluginObject(d.device, "Site", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSite(reflectSite, params...)
	return resource, err

}

// toSite converts gNMI to OAPI relative to a node in the tree.
func toSite(ygotObjValue *reflect.Value, params ...string) (*types.Site, error) {
	resource := new(types.Site)

	// Property: connectivity-service SiteConnectivityService
	// Handle object
	reflectConnectivityService, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ConnectivityService")
	if err != nil {
		return nil, err
	}
	if reflectConnectivityService != nil {
		attrConnectivityService, err := toSiteConnectivityService(reflectConnectivityService, params...)
		if err != nil {
			return nil, err
		}
		resource.ConnectivityService = attrConnectivityService
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device SiteDeviceList
	// Handle object
	reflectDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Device")
	if err != nil {
		return nil, err
	}
	if reflectDevice != nil {
		attrDevice, err := toSiteDeviceList(reflectDevice, params...)
		if err != nil {
			return nil, err
		}
		resource.Device = attrDevice
	}

	// Property: device-group SiteDeviceGroupList
	// Handle object
	reflectDeviceGroup, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DeviceGroup")
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroup != nil {
		attrDeviceGroup, err := toSiteDeviceGroupList(reflectDeviceGroup, params...)
		if err != nil {
			return nil, err
		}
		resource.DeviceGroup = attrDeviceGroup
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: imsi-definition SiteImsiDefinition
	// Handle object
	reflectImsiDefinition, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ImsiDefinition")
	if err != nil {
		return nil, err
	}
	if reflectImsiDefinition != nil {
		attrImsiDefinition, err := toSiteImsiDefinition(reflectImsiDefinition, params...)
		if err != nil {
			return nil, err
		}
		resource.ImsiDefinition = attrImsiDefinition
	}

	// Property: ip-domain SiteIpDomainList
	// Handle object
	reflectIpDomain, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "IpDomain")
	if err != nil {
		return nil, err
	}
	if reflectIpDomain != nil {
		attrIpDomain, err := toSiteIpDomainList(reflectIpDomain, params...)
		if err != nil {
			return nil, err
		}
		resource.IpDomain = attrIpDomain
	}

	// Property: monitoring SiteMonitoring
	// Handle object
	reflectMonitoring, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Monitoring")
	if err != nil {
		return nil, err
	}
	if reflectMonitoring != nil {
		attrMonitoring, err := toSiteMonitoring(reflectMonitoring, params...)
		if err != nil {
			return nil, err
		}
		resource.Monitoring = attrMonitoring
	}

	// Property: sim-card SiteSimCardList
	// Handle object
	reflectSimCard, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SimCard")
	if err != nil {
		return nil, err
	}
	if reflectSimCard != nil {
		attrSimCard, err := toSiteSimCardList(reflectSimCard, params...)
		if err != nil {
			return nil, err
		}
		resource.SimCard = attrSimCard
	}

	// Property: site-id ListKey
	//encoding gNMI attribute to OAPI
	reflectSiteId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SiteId")
	if err != nil {
		return nil, err
	}
	if reflectSiteId != nil {
		attrSiteId := types.ListKey(reflectSiteId.Interface().(string))
		resource.SiteId = attrSiteId
	}

	// Property: slice SiteSliceList
	// Handle object
	reflectSlice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Slice")
	if err != nil {
		return nil, err
	}
	if reflectSlice != nil {
		attrSlice, err := toSiteSliceList(reflectSlice, params...)
		if err != nil {
			return nil, err
		}
		resource.Slice = attrSlice
	}

	// Property: small-cell SiteSmallCellList
	// Handle object
	reflectSmallCell, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SmallCell")
	if err != nil {
		return nil, err
	}
	if reflectSmallCell != nil {
		attrSmallCell, err := toSiteSmallCellList(reflectSmallCell, params...)
		if err != nil {
			return nil, err
		}
		resource.SmallCell = attrSmallCell
	}

	// Property: upf SiteUpfList
	// Handle object
	reflectUpf, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Upf")
	if err != nil {
		return nil, err
	}
	if reflectUpf != nil {
		attrUpf, err := toSiteUpfList(reflectUpf, params...)
		if err != nil {
			return nil, err
		}
		resource.Upf = attrUpf
	}

	return resource, nil
}

// toSiteConnectivityService converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteConnectivityService(params ...string) (*types.SiteConnectivityService, error) {
	resource := new(types.SiteConnectivityService)

	reflectSiteConnectivityService, err := utils.FindModelPluginObject(d.device, "SiteConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteConnectivityService(reflectSiteConnectivityService, params...)
	return resource, err

}

// toSiteConnectivityService converts gNMI to OAPI relative to a node in the tree.
func toSiteConnectivityService(ygotObjValue *reflect.Value, params ...string) (*types.SiteConnectivityService, error) {
	resource := new(types.SiteConnectivityService)

	// Property: core-4g SiteConnectivityServiceCore4g
	// Handle object
	reflectCore4g, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Core4g")
	if err != nil {
		return nil, err
	}
	if reflectCore4g != nil {
		attrCore4g, err := toSiteConnectivityServiceCore4g(reflectCore4g, params...)
		if err != nil {
			return nil, err
		}
		resource.Core4g = attrCore4g
	}

	// Property: core-5g SiteConnectivityServiceCore5g
	// Handle object
	reflectCore5g, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Core5g")
	if err != nil {
		return nil, err
	}
	if reflectCore5g != nil {
		attrCore5g, err := toSiteConnectivityServiceCore5g(reflectCore5g, params...)
		if err != nil {
			return nil, err
		}
		resource.Core5g = attrCore5g
	}

	return resource, nil
}

// toSiteConnectivityServiceCore4g converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteConnectivityServiceCore4g(params ...string) (*types.SiteConnectivityServiceCore4g, error) {
	resource := new(types.SiteConnectivityServiceCore4g)

	reflectSiteConnectivityServiceCore4g, err := utils.FindModelPluginObject(d.device, "SiteConnectivityServiceCore4g", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteConnectivityServiceCore4g(reflectSiteConnectivityServiceCore4g, params...)
	return resource, err

}

// toSiteConnectivityServiceCore4g converts gNMI to OAPI relative to a node in the tree.
func toSiteConnectivityServiceCore4g(ygotObjValue *reflect.Value, params ...string) (*types.SiteConnectivityServiceCore4g, error) {
	resource := new(types.SiteConnectivityServiceCore4g)

	// Property: acc-prometheus-url string
	//encoding gNMI attribute to OAPI
	reflectAccPrometheusUrl, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "AccPrometheusUrl")
	if err != nil {
		return nil, err
	}
	if reflectAccPrometheusUrl != nil {
		attrAccPrometheusUrl := reflectAccPrometheusUrl.Interface().(string)
		resource.AccPrometheusUrl = &attrAccPrometheusUrl
	}

	// Property: endpoint string
	//encoding gNMI attribute to OAPI
	reflectEndpoint, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Endpoint")
	if err != nil {
		return nil, err
	}
	if reflectEndpoint != nil {
		attrEndpoint := reflectEndpoint.Interface().(string)
		resource.Endpoint = &attrEndpoint
	}

	return resource, nil
}

// toSiteConnectivityServiceCore5g converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteConnectivityServiceCore5g(params ...string) (*types.SiteConnectivityServiceCore5g, error) {
	resource := new(types.SiteConnectivityServiceCore5g)

	reflectSiteConnectivityServiceCore5g, err := utils.FindModelPluginObject(d.device, "SiteConnectivityServiceCore5g", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteConnectivityServiceCore5g(reflectSiteConnectivityServiceCore5g, params...)
	return resource, err

}

// toSiteConnectivityServiceCore5g converts gNMI to OAPI relative to a node in the tree.
func toSiteConnectivityServiceCore5g(ygotObjValue *reflect.Value, params ...string) (*types.SiteConnectivityServiceCore5g, error) {
	resource := new(types.SiteConnectivityServiceCore5g)

	// Property: acc-prometheus-url string
	//encoding gNMI attribute to OAPI
	reflectAccPrometheusUrl, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "AccPrometheusUrl")
	if err != nil {
		return nil, err
	}
	if reflectAccPrometheusUrl != nil {
		attrAccPrometheusUrl := reflectAccPrometheusUrl.Interface().(string)
		resource.AccPrometheusUrl = &attrAccPrometheusUrl
	}

	// Property: endpoint string
	//encoding gNMI attribute to OAPI
	reflectEndpoint, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Endpoint")
	if err != nil {
		return nil, err
	}
	if reflectEndpoint != nil {
		attrEndpoint := reflectEndpoint.Interface().(string)
		resource.Endpoint = &attrEndpoint
	}

	return resource, nil
}

// toSiteDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteDevice(params ...string) (*types.SiteDevice, error) {
	resource := new(types.SiteDevice)

	reflectSiteDevice, err := utils.FindModelPluginObject(d.device, "SiteDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteDevice(reflectSiteDevice, params...)
	return resource, err

}

// toSiteDevice converts gNMI to OAPI relative to a node in the tree.
func toSiteDevice(ygotObjValue *reflect.Value, params ...string) (*types.SiteDevice, error) {
	resource := new(types.SiteDevice)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device-id ListKey
	//encoding gNMI attribute to OAPI
	reflectDeviceId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DeviceId")
	if err != nil {
		return nil, err
	}
	if reflectDeviceId != nil {
		attrDeviceId := types.ListKey(reflectDeviceId.Interface().(string))
		resource.DeviceId = attrDeviceId
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: imei string
	//encoding gNMI attribute to OAPI
	reflectImei, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Imei")
	if err != nil {
		return nil, err
	}
	if reflectImei != nil {
		attrImei := reflectImei.Interface().(string)
		resource.Imei = &attrImei
	}

	// Property: sim-card string
	//encoding gNMI attribute to OAPI
	reflectSimCard, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SimCard")
	if err != nil {
		return nil, err
	}
	if reflectSimCard != nil {
		attrSimCard := reflectSimCard.Interface().(string)
		resource.SimCard = &attrSimCard
	}

	// Property: state SiteDeviceState
	// Handle object
	reflectState, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "State")
	if err != nil {
		return nil, err
	}
	if reflectState != nil {
		attrState, err := toSiteDeviceState(reflectState, params...)
		if err != nil {
			return nil, err
		}
		resource.State = attrState
	}

	return resource, nil
}

// toSiteDeviceGroup converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteDeviceGroup(params ...string) (*types.SiteDeviceGroup, error) {
	resource := new(types.SiteDeviceGroup)

	reflectSiteDeviceGroup, err := utils.FindModelPluginObject(d.device, "SiteDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteDeviceGroup(reflectSiteDeviceGroup, params...)
	return resource, err

}

// toSiteDeviceGroup converts gNMI to OAPI relative to a node in the tree.
func toSiteDeviceGroup(ygotObjValue *reflect.Value, params ...string) (*types.SiteDeviceGroup, error) {
	resource := new(types.SiteDeviceGroup)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device SiteDeviceGroupDeviceList
	// Handle object
	reflectDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Device")
	if err != nil {
		return nil, err
	}
	if reflectDevice != nil {
		attrDevice, err := toSiteDeviceGroupDeviceList(reflectDevice, params...)
		if err != nil {
			return nil, err
		}
		resource.Device = attrDevice
	}

	// Property: device-group-id ListKey
	//encoding gNMI attribute to OAPI
	reflectDeviceGroupId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DeviceGroupId")
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroupId != nil {
		attrDeviceGroupId := types.ListKey(reflectDeviceGroupId.Interface().(string))
		resource.DeviceGroupId = attrDeviceGroupId
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: ip-domain string
	//encoding gNMI attribute to OAPI
	reflectIpDomain, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "IpDomain")
	if err != nil {
		return nil, err
	}
	if reflectIpDomain != nil {
		attrIpDomain := reflectIpDomain.Interface().(string)
		resource.IpDomain = &attrIpDomain
	}

	// Property: mbr SiteDeviceGroupMbr
	// Handle object
	reflectMbr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mbr")
	if err != nil {
		return nil, err
	}
	if reflectMbr != nil {
		attrMbr, err := toSiteDeviceGroupMbr(reflectMbr, params...)
		if err != nil {
			return nil, err
		}
		resource.Mbr = attrMbr
	}

	// Property: traffic-class string
	//encoding gNMI attribute to OAPI
	reflectTrafficClass, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "TrafficClass")
	if err != nil {
		return nil, err
	}
	if reflectTrafficClass != nil {
		attrTrafficClass := reflectTrafficClass.Interface().(string)
		resource.TrafficClass = attrTrafficClass
	}

	return resource, nil
}

// toSiteDeviceGroupDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteDeviceGroupDevice(params ...string) (*types.SiteDeviceGroupDevice, error) {
	resource := new(types.SiteDeviceGroupDevice)

	reflectSiteDeviceGroupDevice, err := utils.FindModelPluginObject(d.device, "SiteDeviceGroupDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteDeviceGroupDevice(reflectSiteDeviceGroupDevice, params...)
	return resource, err

}

// toSiteDeviceGroupDevice converts gNMI to OAPI relative to a node in the tree.
func toSiteDeviceGroupDevice(ygotObjValue *reflect.Value, params ...string) (*types.SiteDeviceGroupDevice, error) {
	resource := new(types.SiteDeviceGroupDevice)

	// Property: device-id ListKey
	//encoding gNMI attribute to OAPI
	reflectDeviceId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DeviceId")
	if err != nil {
		return nil, err
	}
	if reflectDeviceId != nil {
		attrDeviceId := types.ListKey(reflectDeviceId.Interface().(string))
		resource.DeviceId = attrDeviceId
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enable")
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = &boolEnable
	}

	return resource, nil
}

// toSiteDeviceGroupDeviceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteDeviceGroupDeviceList(params ...string) (*types.SiteDeviceGroupDeviceList, error) {
	resource := new(types.SiteDeviceGroupDeviceList)

	// Array list - Go type SiteDeviceGroupDevice
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteDeviceGroupDevice", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteDeviceGroupDevice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toSiteDeviceGroupDeviceList converts gNMI to OAPI relative to a node in the tree.
func toSiteDeviceGroupDeviceList(ygotObjValue *reflect.Value, params ...string) (*types.SiteDeviceGroupDeviceList, error) {
	resource := new(types.SiteDeviceGroupDeviceList)

	// Array list - Go type                                                                           SiteDeviceGroupDevice
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteDeviceGroupDevice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// toSiteDeviceGroupList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteDeviceGroupList(params ...string) (*types.SiteDeviceGroupList, error) {
	resource := new(types.SiteDeviceGroupList)

	// Array list - Go type SiteDeviceGroup
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteDeviceGroup(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toSiteDeviceGroupList converts gNMI to OAPI relative to a node in the tree.
func toSiteDeviceGroupList(ygotObjValue *reflect.Value, params ...string) (*types.SiteDeviceGroupList, error) {
	resource := new(types.SiteDeviceGroupList)

	// Array list - Go type                                                                                 SiteDeviceGroup
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteDeviceGroup(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// toSiteDeviceGroupMbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteDeviceGroupMbr(params ...string) (*types.SiteDeviceGroupMbr, error) {
	resource := new(types.SiteDeviceGroupMbr)

	reflectSiteDeviceGroupMbr, err := utils.FindModelPluginObject(d.device, "SiteDeviceGroupMbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteDeviceGroupMbr(reflectSiteDeviceGroupMbr, params...)
	return resource, err

}

// toSiteDeviceGroupMbr converts gNMI to OAPI relative to a node in the tree.
func toSiteDeviceGroupMbr(ygotObjValue *reflect.Value, params ...string) (*types.SiteDeviceGroupMbr, error) {
	resource := new(types.SiteDeviceGroupMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toSiteDeviceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteDeviceList(params ...string) (*types.SiteDeviceList, error) {
	resource := new(types.SiteDeviceList)

	// Array list - Go type SiteDevice
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteDevice", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteDevice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toSiteDeviceList converts gNMI to OAPI relative to a node in the tree.
func toSiteDeviceList(ygotObjValue *reflect.Value, params ...string) (*types.SiteDeviceList, error) {
	resource := new(types.SiteDeviceList)

	// Array list - Go type                                                                                      SiteDevice
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteDevice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// toSiteDeviceState converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteDeviceState(params ...string) (*types.SiteDeviceState, error) {
	resource := new(types.SiteDeviceState)

	reflectSiteDeviceState, err := utils.FindModelPluginObject(d.device, "SiteDeviceState", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteDeviceState(reflectSiteDeviceState, params...)
	return resource, err

}

// toSiteDeviceState converts gNMI to OAPI relative to a node in the tree.
func toSiteDeviceState(ygotObjValue *reflect.Value, params ...string) (*types.SiteDeviceState, error) {
	resource := new(types.SiteDeviceState)

	// Property: connected string
	//encoding gNMI attribute to OAPI
	reflectConnected, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Connected")
	if err != nil {
		return nil, err
	}
	if reflectConnected != nil {
		attrConnected := reflectConnected.Interface().(string)
		resource.Connected = &attrConnected
	}

	// Property: ip-address string
	//encoding gNMI attribute to OAPI
	reflectIpAddress, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "IpAddress")
	if err != nil {
		return nil, err
	}
	if reflectIpAddress != nil {
		attrIpAddress := reflectIpAddress.Interface().(string)
		resource.IpAddress = &attrIpAddress
	}

	// Property: last-connected string
	//encoding gNMI attribute to OAPI
	reflectLastConnected, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "LastConnected")
	if err != nil {
		return nil, err
	}
	if reflectLastConnected != nil {
		attrLastConnected := reflectLastConnected.Interface().(string)
		resource.LastConnected = &attrLastConnected
	}

	return resource, nil
}

// toSiteImsiDefinition converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteImsiDefinition(params ...string) (*types.SiteImsiDefinition, error) {
	resource := new(types.SiteImsiDefinition)

	reflectSiteImsiDefinition, err := utils.FindModelPluginObject(d.device, "SiteImsiDefinition", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteImsiDefinition(reflectSiteImsiDefinition, params...)
	return resource, err

}

// toSiteImsiDefinition converts gNMI to OAPI relative to a node in the tree.
func toSiteImsiDefinition(ygotObjValue *reflect.Value, params ...string) (*types.SiteImsiDefinition, error) {
	resource := new(types.SiteImsiDefinition)

	// Property: enterprise int32
	//encoding gNMI attribute to OAPI
	reflectEnterprise, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enterprise")
	if err != nil {
		return nil, err
	}
	if reflectEnterprise != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Enterprise, err = utils.ToInt32(reflectEnterprise); err != nil {
			return nil, err
		}
	}

	// Property: format string
	//encoding gNMI attribute to OAPI
	reflectFormat, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Format")
	if err != nil {
		return nil, err
	}
	if reflectFormat != nil {
		attrFormat := reflectFormat.Interface().(string)
		resource.Format = attrFormat
	}

	// Property: mcc string
	//encoding gNMI attribute to OAPI
	reflectMcc, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mcc")
	if err != nil {
		return nil, err
	}
	if reflectMcc != nil {
		attrMcc := reflectMcc.Interface().(string)
		resource.Mcc = attrMcc
	}

	// Property: mnc string
	//encoding gNMI attribute to OAPI
	reflectMnc, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mnc")
	if err != nil {
		return nil, err
	}
	if reflectMnc != nil {
		attrMnc := reflectMnc.Interface().(string)
		resource.Mnc = attrMnc
	}

	return resource, nil
}

// toSiteIpDomain converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteIpDomain(params ...string) (*types.SiteIpDomain, error) {
	resource := new(types.SiteIpDomain)

	reflectSiteIpDomain, err := utils.FindModelPluginObject(d.device, "SiteIpDomain", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteIpDomain(reflectSiteIpDomain, params...)
	return resource, err

}

// toSiteIpDomain converts gNMI to OAPI relative to a node in the tree.
func toSiteIpDomain(ygotObjValue *reflect.Value, params ...string) (*types.SiteIpDomain, error) {
	resource := new(types.SiteIpDomain)

	// Property: admin-status string
	//encoding gNMI attribute to OAPI
	reflectAdminStatus, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "AdminStatus")
	if err != nil {
		return nil, err
	}
	if reflectAdminStatus != nil {
		attrAdminStatus := reflectAdminStatus.Interface().(string)
		resource.AdminStatus = &attrAdminStatus
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: dnn string
	//encoding gNMI attribute to OAPI
	reflectDnn, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Dnn")
	if err != nil {
		return nil, err
	}
	if reflectDnn != nil {
		attrDnn := reflectDnn.Interface().(string)
		resource.Dnn = attrDnn
	}

	// Property: dns-primary string
	//encoding gNMI attribute to OAPI
	reflectDnsPrimary, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DnsPrimary")
	if err != nil {
		return nil, err
	}
	if reflectDnsPrimary != nil {
		attrDnsPrimary := reflectDnsPrimary.Interface().(string)
		resource.DnsPrimary = &attrDnsPrimary
	}

	// Property: dns-secondary string
	//encoding gNMI attribute to OAPI
	reflectDnsSecondary, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DnsSecondary")
	if err != nil {
		return nil, err
	}
	if reflectDnsSecondary != nil {
		attrDnsSecondary := reflectDnsSecondary.Interface().(string)
		resource.DnsSecondary = &attrDnsSecondary
	}

	// Property: ip-domain-id ListKey
	//encoding gNMI attribute to OAPI
	reflectIpDomainId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "IpDomainId")
	if err != nil {
		return nil, err
	}
	if reflectIpDomainId != nil {
		attrIpDomainId := types.ListKey(reflectIpDomainId.Interface().(string))
		resource.IpDomainId = attrIpDomainId
	}

	// Property: mtu int
	//encoding gNMI attribute to OAPI
	reflectMtu, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mtu")
	if err != nil {
		return nil, err
	}
	if reflectMtu != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Mtu, err = utils.ToIntPtr(reflectMtu); err != nil {
			return nil, err
		}
	}

	// Property: subnet string
	//encoding gNMI attribute to OAPI
	reflectSubnet, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Subnet")
	if err != nil {
		return nil, err
	}
	if reflectSubnet != nil {
		attrSubnet := reflectSubnet.Interface().(string)
		resource.Subnet = attrSubnet
	}

	return resource, nil
}

// toSiteIpDomainList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteIpDomainList(params ...string) (*types.SiteIpDomainList, error) {
	resource := new(types.SiteIpDomainList)

	// Array list - Go type SiteIpDomain
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteIpDomain", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteIpDomain(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toSiteIpDomainList converts gNMI to OAPI relative to a node in the tree.
func toSiteIpDomainList(ygotObjValue *reflect.Value, params ...string) (*types.SiteIpDomainList, error) {
	resource := new(types.SiteIpDomainList)

	// Array list - Go type                                                                                    SiteIpDomain
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteIpDomain(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// toSiteList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteList(params ...string) (*types.SiteList, error) {
	resource := new(types.SiteList)

	// Array list - Go type Site
	mpObject, err := utils.FindModelPluginObject(d.device, "Site", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSite(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toSiteList converts gNMI to OAPI relative to a node in the tree.
func toSiteList(ygotObjValue *reflect.Value, params ...string) (*types.SiteList, error) {
	resource := new(types.SiteList)

	// Array list - Go type                                                                                            Site
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSite(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// toSiteMonitoring converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteMonitoring(params ...string) (*types.SiteMonitoring, error) {
	resource := new(types.SiteMonitoring)

	reflectSiteMonitoring, err := utils.FindModelPluginObject(d.device, "SiteMonitoring", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteMonitoring(reflectSiteMonitoring, params...)
	return resource, err

}

// toSiteMonitoring converts gNMI to OAPI relative to a node in the tree.
func toSiteMonitoring(ygotObjValue *reflect.Value, params ...string) (*types.SiteMonitoring, error) {
	resource := new(types.SiteMonitoring)

	// Property: edge-cluster-prometheus-url string
	//encoding gNMI attribute to OAPI
	reflectEdgeClusterPrometheusUrl, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EdgeClusterPrometheusUrl")
	if err != nil {
		return nil, err
	}
	if reflectEdgeClusterPrometheusUrl != nil {
		attrEdgeClusterPrometheusUrl := reflectEdgeClusterPrometheusUrl.Interface().(string)
		resource.EdgeClusterPrometheusUrl = &attrEdgeClusterPrometheusUrl
	}

	// Property: edge-device SiteMonitoringEdgeDeviceList
	// Handle object
	reflectEdgeDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EdgeDevice")
	if err != nil {
		return nil, err
	}
	if reflectEdgeDevice != nil {
		attrEdgeDevice, err := toSiteMonitoringEdgeDeviceList(reflectEdgeDevice, params...)
		if err != nil {
			return nil, err
		}
		resource.EdgeDevice = attrEdgeDevice
	}

	// Property: edge-monitoring-prometheus-url string
	//encoding gNMI attribute to OAPI
	reflectEdgeMonitoringPrometheusUrl, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EdgeMonitoringPrometheusUrl")
	if err != nil {
		return nil, err
	}
	if reflectEdgeMonitoringPrometheusUrl != nil {
		attrEdgeMonitoringPrometheusUrl := reflectEdgeMonitoringPrometheusUrl.Interface().(string)
		resource.EdgeMonitoringPrometheusUrl = &attrEdgeMonitoringPrometheusUrl
	}

	return resource, nil
}

// toSiteMonitoringEdgeDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteMonitoringEdgeDevice(params ...string) (*types.SiteMonitoringEdgeDevice, error) {
	resource := new(types.SiteMonitoringEdgeDevice)

	reflectSiteMonitoringEdgeDevice, err := utils.FindModelPluginObject(d.device, "SiteMonitoringEdgeDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteMonitoringEdgeDevice(reflectSiteMonitoringEdgeDevice, params...)
	return resource, err

}

// toSiteMonitoringEdgeDevice converts gNMI to OAPI relative to a node in the tree.
func toSiteMonitoringEdgeDevice(ygotObjValue *reflect.Value, params ...string) (*types.SiteMonitoringEdgeDevice, error) {
	resource := new(types.SiteMonitoringEdgeDevice)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: edge-device-id ListKey
	//encoding gNMI attribute to OAPI
	reflectEdgeDeviceId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EdgeDeviceId")
	if err != nil {
		return nil, err
	}
	if reflectEdgeDeviceId != nil {
		attrEdgeDeviceId := types.ListKey(reflectEdgeDeviceId.Interface().(string))
		resource.EdgeDeviceId = attrEdgeDeviceId
	}

	return resource, nil
}

// toSiteMonitoringEdgeDeviceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteMonitoringEdgeDeviceList(params ...string) (*types.SiteMonitoringEdgeDeviceList, error) {
	resource := new(types.SiteMonitoringEdgeDeviceList)

	// Array list - Go type SiteMonitoringEdgeDevice
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteMonitoringEdgeDevice", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteMonitoringEdgeDevice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toSiteMonitoringEdgeDeviceList converts gNMI to OAPI relative to a node in the tree.
func toSiteMonitoringEdgeDeviceList(ygotObjValue *reflect.Value, params ...string) (*types.SiteMonitoringEdgeDeviceList, error) {
	resource := new(types.SiteMonitoringEdgeDeviceList)

	// Array list - Go type                                                                        SiteMonitoringEdgeDevice
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteMonitoringEdgeDevice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// toSiteSimCard converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteSimCard(params ...string) (*types.SiteSimCard, error) {
	resource := new(types.SiteSimCard)

	reflectSiteSimCard, err := utils.FindModelPluginObject(d.device, "SiteSimCard", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteSimCard(reflectSiteSimCard, params...)
	return resource, err

}

// toSiteSimCard converts gNMI to OAPI relative to a node in the tree.
func toSiteSimCard(ygotObjValue *reflect.Value, params ...string) (*types.SiteSimCard, error) {
	resource := new(types.SiteSimCard)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: iccid string
	//encoding gNMI attribute to OAPI
	reflectIccid, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Iccid")
	if err != nil {
		return nil, err
	}
	if reflectIccid != nil {
		attrIccid := reflectIccid.Interface().(string)
		resource.Iccid = &attrIccid
	}

	// Property: imsi int64
	//encoding gNMI attribute to OAPI
	reflectImsi, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Imsi")
	if err != nil {
		return nil, err
	}
	if reflectImsi != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Imsi, err = utils.ToInt64Ptr(reflectImsi); err != nil {
			return nil, err
		}
	}

	// Property: sim-id ListKey
	//encoding gNMI attribute to OAPI
	reflectSimId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SimId")
	if err != nil {
		return nil, err
	}
	if reflectSimId != nil {
		attrSimId := types.ListKey(reflectSimId.Interface().(string))
		resource.SimId = attrSimId
	}

	return resource, nil
}

// toSiteSimCardList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteSimCardList(params ...string) (*types.SiteSimCardList, error) {
	resource := new(types.SiteSimCardList)

	// Array list - Go type SiteSimCard
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteSimCard", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteSimCard(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toSiteSimCardList converts gNMI to OAPI relative to a node in the tree.
func toSiteSimCardList(ygotObjValue *reflect.Value, params ...string) (*types.SiteSimCardList, error) {
	resource := new(types.SiteSimCardList)

	// Array list - Go type                                                                                     SiteSimCard
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteSimCard(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// toSiteSlice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteSlice(params ...string) (*types.SiteSlice, error) {
	resource := new(types.SiteSlice)

	reflectSiteSlice, err := utils.FindModelPluginObject(d.device, "SiteSlice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteSlice(reflectSiteSlice, params...)
	return resource, err

}

// toSiteSlice converts gNMI to OAPI relative to a node in the tree.
func toSiteSlice(ygotObjValue *reflect.Value, params ...string) (*types.SiteSlice, error) {
	resource := new(types.SiteSlice)

	// Property: connectivity-service string
	// Enums handling
	reflectConnectivityService, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ConnectivityService")
	if err != nil {
		return nil, err
	}
	attrConnectivityService := reflectConnectivityService.Interface()
	_, yangDefConnectivityService, err := utils.ExtractGnmiEnumMap(ygotObjValue, "SiteSliceConnectivityService", attrConnectivityService)
	if err != nil {
		return nil, err
	}
	if yangDefConnectivityService != nil {
		resource.ConnectivityService = (*types.SiteSliceConnectivityService)(&yangDefConnectivityService.Name)
	}

	// Property: default-behavior string
	//encoding gNMI attribute to OAPI
	reflectDefaultBehavior, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DefaultBehavior")
	if err != nil {
		return nil, err
	}
	if reflectDefaultBehavior != nil {
		attrDefaultBehavior := reflectDefaultBehavior.Interface().(string)
		resource.DefaultBehavior = attrDefaultBehavior
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device-group SiteSliceDeviceGroupList
	// Handle object
	reflectDeviceGroup, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DeviceGroup")
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroup != nil {
		attrDeviceGroup, err := toSiteSliceDeviceGroupList(reflectDeviceGroup, params...)
		if err != nil {
			return nil, err
		}
		resource.DeviceGroup = attrDeviceGroup
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: filter SiteSliceFilterList
	// Handle object
	reflectFilter, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Filter")
	if err != nil {
		return nil, err
	}
	if reflectFilter != nil {
		attrFilter, err := toSiteSliceFilterList(reflectFilter, params...)
		if err != nil {
			return nil, err
		}
		resource.Filter = attrFilter
	}

	// Property: mbr SiteSliceMbr
	// Handle object
	reflectMbr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mbr")
	if err != nil {
		return nil, err
	}
	if reflectMbr != nil {
		attrMbr, err := toSiteSliceMbr(reflectMbr, params...)
		if err != nil {
			return nil, err
		}
		resource.Mbr = attrMbr
	}

	// Property: priority-traffic-rule SiteSlicePriorityTrafficRuleList
	// Handle object
	reflectPriorityTrafficRule, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "PriorityTrafficRule")
	if err != nil {
		return nil, err
	}
	if reflectPriorityTrafficRule != nil {
		attrPriorityTrafficRule, err := toSiteSlicePriorityTrafficRuleList(reflectPriorityTrafficRule, params...)
		if err != nil {
			return nil, err
		}
		resource.PriorityTrafficRule = attrPriorityTrafficRule
	}

	// Property: sd int32
	//encoding gNMI attribute to OAPI
	reflectSd, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Sd")
	if err != nil {
		return nil, err
	}
	if reflectSd != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sd, err = utils.ToInt32(reflectSd); err != nil {
			return nil, err
		}
	}

	// Property: slice-id ListKey
	//encoding gNMI attribute to OAPI
	reflectSliceId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SliceId")
	if err != nil {
		return nil, err
	}
	if reflectSliceId != nil {
		attrSliceId := types.ListKey(reflectSliceId.Interface().(string))
		resource.SliceId = attrSliceId
	}

	// Property: sst int
	//encoding gNMI attribute to OAPI
	reflectSst, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Sst")
	if err != nil {
		return nil, err
	}
	if reflectSst != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sst, err = utils.ToInt(reflectSst); err != nil {
			return nil, err
		}
	}

	// Property: upf string
	//encoding gNMI attribute to OAPI
	reflectUpf, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Upf")
	if err != nil {
		return nil, err
	}
	if reflectUpf != nil {
		attrUpf := reflectUpf.Interface().(string)
		resource.Upf = &attrUpf
	}

	return resource, nil
}

// toSiteSliceConnectivityService converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteSliceConnectivityService(params ...string) (*types.SiteSliceConnectivityService, error) {
	resource := new(types.SiteSliceConnectivityService)

	reflectSiteSliceConnectivityService, err := utils.FindModelPluginObject(d.device, "SiteSliceConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteSliceConnectivityService(reflectSiteSliceConnectivityService, params...)
	return resource, err

}

// toSiteSliceConnectivityService converts gNMI to OAPI relative to a node in the tree.
func toSiteSliceConnectivityService(ygotObjValue *reflect.Value, params ...string) (*types.SiteSliceConnectivityService, error) {
	resource := new(types.SiteSliceConnectivityService)

	return resource, nil
}

// toSiteSliceDeviceGroup converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteSliceDeviceGroup(params ...string) (*types.SiteSliceDeviceGroup, error) {
	resource := new(types.SiteSliceDeviceGroup)

	reflectSiteSliceDeviceGroup, err := utils.FindModelPluginObject(d.device, "SiteSliceDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteSliceDeviceGroup(reflectSiteSliceDeviceGroup, params...)
	return resource, err

}

// toSiteSliceDeviceGroup converts gNMI to OAPI relative to a node in the tree.
func toSiteSliceDeviceGroup(ygotObjValue *reflect.Value, params ...string) (*types.SiteSliceDeviceGroup, error) {
	resource := new(types.SiteSliceDeviceGroup)

	// Property: device-group ListKey
	//encoding gNMI attribute to OAPI
	reflectDeviceGroup, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DeviceGroup")
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroup != nil {
		attrDeviceGroup := types.ListKey(reflectDeviceGroup.Interface().(string))
		resource.DeviceGroup = attrDeviceGroup
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enable")
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = &boolEnable
	}

	return resource, nil
}

// toSiteSliceDeviceGroupList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteSliceDeviceGroupList(params ...string) (*types.SiteSliceDeviceGroupList, error) {
	resource := new(types.SiteSliceDeviceGroupList)

	// Array list - Go type SiteSliceDeviceGroup
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteSliceDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteSliceDeviceGroup(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toSiteSliceDeviceGroupList converts gNMI to OAPI relative to a node in the tree.
func toSiteSliceDeviceGroupList(ygotObjValue *reflect.Value, params ...string) (*types.SiteSliceDeviceGroupList, error) {
	resource := new(types.SiteSliceDeviceGroupList)

	// Array list - Go type                                                                            SiteSliceDeviceGroup
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteSliceDeviceGroup(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// toSiteSliceFilter converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteSliceFilter(params ...string) (*types.SiteSliceFilter, error) {
	resource := new(types.SiteSliceFilter)

	reflectSiteSliceFilter, err := utils.FindModelPluginObject(d.device, "SiteSliceFilter", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteSliceFilter(reflectSiteSliceFilter, params...)
	return resource, err

}

// toSiteSliceFilter converts gNMI to OAPI relative to a node in the tree.
func toSiteSliceFilter(ygotObjValue *reflect.Value, params ...string) (*types.SiteSliceFilter, error) {
	resource := new(types.SiteSliceFilter)

	// Property: allow bool
	//encoding gNMI attribute to OAPI
	reflectAllow, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Allow")
	if err != nil {
		return nil, err
	}
	if reflectAllow != nil {
		boolAllow := reflectAllow.Interface().(bool)
		resource.Allow = &boolAllow
	}

	// Property: application ListKey
	//encoding gNMI attribute to OAPI
	reflectApplication, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Application")
	if err != nil {
		return nil, err
	}
	if reflectApplication != nil {
		attrApplication := types.ListKey(reflectApplication.Interface().(string))
		resource.Application = attrApplication
	}

	// Property: priority int
	//encoding gNMI attribute to OAPI
	reflectPriority, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Priority")
	if err != nil {
		return nil, err
	}
	if reflectPriority != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Priority, err = utils.ToIntPtr(reflectPriority); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toSiteSliceFilterList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteSliceFilterList(params ...string) (*types.SiteSliceFilterList, error) {
	resource := new(types.SiteSliceFilterList)

	// Array list - Go type SiteSliceFilter
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteSliceFilter", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteSliceFilter(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toSiteSliceFilterList converts gNMI to OAPI relative to a node in the tree.
func toSiteSliceFilterList(ygotObjValue *reflect.Value, params ...string) (*types.SiteSliceFilterList, error) {
	resource := new(types.SiteSliceFilterList)

	// Array list - Go type                                                                                 SiteSliceFilter
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteSliceFilter(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// toSiteSliceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteSliceList(params ...string) (*types.SiteSliceList, error) {
	resource := new(types.SiteSliceList)

	// Array list - Go type SiteSlice
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteSlice", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteSlice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toSiteSliceList converts gNMI to OAPI relative to a node in the tree.
func toSiteSliceList(ygotObjValue *reflect.Value, params ...string) (*types.SiteSliceList, error) {
	resource := new(types.SiteSliceList)

	// Array list - Go type                                                                                       SiteSlice
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteSlice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// toSiteSliceMbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteSliceMbr(params ...string) (*types.SiteSliceMbr, error) {
	resource := new(types.SiteSliceMbr)

	reflectSiteSliceMbr, err := utils.FindModelPluginObject(d.device, "SiteSliceMbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteSliceMbr(reflectSiteSliceMbr, params...)
	return resource, err

}

// toSiteSliceMbr converts gNMI to OAPI relative to a node in the tree.
func toSiteSliceMbr(ygotObjValue *reflect.Value, params ...string) (*types.SiteSliceMbr, error) {
	resource := new(types.SiteSliceMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: downlink-burst-size int32
	//encoding gNMI attribute to OAPI
	reflectDownlinkBurstSize, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DownlinkBurstSize")
	if err != nil {
		return nil, err
	}
	if reflectDownlinkBurstSize != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.DownlinkBurstSize, err = utils.ToInt32Ptr(reflectDownlinkBurstSize); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	// Property: uplink-burst-size int32
	//encoding gNMI attribute to OAPI
	reflectUplinkBurstSize, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "UplinkBurstSize")
	if err != nil {
		return nil, err
	}
	if reflectUplinkBurstSize != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.UplinkBurstSize, err = utils.ToInt32Ptr(reflectUplinkBurstSize); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toSiteSlicePriorityTrafficRule converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteSlicePriorityTrafficRule(params ...string) (*types.SiteSlicePriorityTrafficRule, error) {
	resource := new(types.SiteSlicePriorityTrafficRule)

	reflectSiteSlicePriorityTrafficRule, err := utils.FindModelPluginObject(d.device, "SiteSlicePriorityTrafficRule", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteSlicePriorityTrafficRule(reflectSiteSlicePriorityTrafficRule, params...)
	return resource, err

}

// toSiteSlicePriorityTrafficRule converts gNMI to OAPI relative to a node in the tree.
func toSiteSlicePriorityTrafficRule(ygotObjValue *reflect.Value, params ...string) (*types.SiteSlicePriorityTrafficRule, error) {
	resource := new(types.SiteSlicePriorityTrafficRule)

	// Property: application string
	//encoding gNMI attribute to OAPI
	reflectApplication, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Application")
	if err != nil {
		return nil, err
	}
	if reflectApplication != nil {
		attrApplication := reflectApplication.Interface().(string)
		resource.Application = attrApplication
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device string
	//encoding gNMI attribute to OAPI
	reflectDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Device")
	if err != nil {
		return nil, err
	}
	if reflectDevice != nil {
		attrDevice := reflectDevice.Interface().(string)
		resource.Device = attrDevice
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: endpoint string
	//encoding gNMI attribute to OAPI
	reflectEndpoint, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Endpoint")
	if err != nil {
		return nil, err
	}
	if reflectEndpoint != nil {
		attrEndpoint := reflectEndpoint.Interface().(string)
		resource.Endpoint = attrEndpoint
	}

	// Property: gbr SiteSlicePriorityTrafficRuleGbr
	// Handle object
	reflectGbr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Gbr")
	if err != nil {
		return nil, err
	}
	if reflectGbr != nil {
		attrGbr, err := toSiteSlicePriorityTrafficRuleGbr(reflectGbr, params...)
		if err != nil {
			return nil, err
		}
		resource.Gbr = attrGbr
	}

	// Property: mbr SiteSlicePriorityTrafficRuleMbr
	// Handle object
	reflectMbr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mbr")
	if err != nil {
		return nil, err
	}
	if reflectMbr != nil {
		attrMbr, err := toSiteSlicePriorityTrafficRuleMbr(reflectMbr, params...)
		if err != nil {
			return nil, err
		}
		resource.Mbr = attrMbr
	}

	// Property: priority-traffic-rule-id ListKey
	//encoding gNMI attribute to OAPI
	reflectPriorityTrafficRuleId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "PriorityTrafficRuleId")
	if err != nil {
		return nil, err
	}
	if reflectPriorityTrafficRuleId != nil {
		attrPriorityTrafficRuleId := types.ListKey(reflectPriorityTrafficRuleId.Interface().(string))
		resource.PriorityTrafficRuleId = attrPriorityTrafficRuleId
	}

	// Property: traffic-class string
	//encoding gNMI attribute to OAPI
	reflectTrafficClass, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "TrafficClass")
	if err != nil {
		return nil, err
	}
	if reflectTrafficClass != nil {
		attrTrafficClass := reflectTrafficClass.Interface().(string)
		resource.TrafficClass = &attrTrafficClass
	}

	return resource, nil
}

// toSiteSlicePriorityTrafficRuleGbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteSlicePriorityTrafficRuleGbr(params ...string) (*types.SiteSlicePriorityTrafficRuleGbr, error) {
	resource := new(types.SiteSlicePriorityTrafficRuleGbr)

	reflectSiteSlicePriorityTrafficRuleGbr, err := utils.FindModelPluginObject(d.device, "SiteSlicePriorityTrafficRuleGbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteSlicePriorityTrafficRuleGbr(reflectSiteSlicePriorityTrafficRuleGbr, params...)
	return resource, err

}

// toSiteSlicePriorityTrafficRuleGbr converts gNMI to OAPI relative to a node in the tree.
func toSiteSlicePriorityTrafficRuleGbr(ygotObjValue *reflect.Value, params ...string) (*types.SiteSlicePriorityTrafficRuleGbr, error) {
	resource := new(types.SiteSlicePriorityTrafficRuleGbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toSiteSlicePriorityTrafficRuleList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteSlicePriorityTrafficRuleList(params ...string) (*types.SiteSlicePriorityTrafficRuleList, error) {
	resource := new(types.SiteSlicePriorityTrafficRuleList)

	// Array list - Go type SiteSlicePriorityTrafficRule
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteSlicePriorityTrafficRule", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteSlicePriorityTrafficRule(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toSiteSlicePriorityTrafficRuleList converts gNMI to OAPI relative to a node in the tree.
func toSiteSlicePriorityTrafficRuleList(ygotObjValue *reflect.Value, params ...string) (*types.SiteSlicePriorityTrafficRuleList, error) {
	resource := new(types.SiteSlicePriorityTrafficRuleList)

	// Array list - Go type                                                                    SiteSlicePriorityTrafficRule
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteSlicePriorityTrafficRule(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// toSiteSlicePriorityTrafficRuleMbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteSlicePriorityTrafficRuleMbr(params ...string) (*types.SiteSlicePriorityTrafficRuleMbr, error) {
	resource := new(types.SiteSlicePriorityTrafficRuleMbr)

	reflectSiteSlicePriorityTrafficRuleMbr, err := utils.FindModelPluginObject(d.device, "SiteSlicePriorityTrafficRuleMbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteSlicePriorityTrafficRuleMbr(reflectSiteSlicePriorityTrafficRuleMbr, params...)
	return resource, err

}

// toSiteSlicePriorityTrafficRuleMbr converts gNMI to OAPI relative to a node in the tree.
func toSiteSlicePriorityTrafficRuleMbr(ygotObjValue *reflect.Value, params ...string) (*types.SiteSlicePriorityTrafficRuleMbr, error) {
	resource := new(types.SiteSlicePriorityTrafficRuleMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toSiteSmallCell converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteSmallCell(params ...string) (*types.SiteSmallCell, error) {
	resource := new(types.SiteSmallCell)

	reflectSiteSmallCell, err := utils.FindModelPluginObject(d.device, "SiteSmallCell", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteSmallCell(reflectSiteSmallCell, params...)
	return resource, err

}

// toSiteSmallCell converts gNMI to OAPI relative to a node in the tree.
func toSiteSmallCell(ygotObjValue *reflect.Value, params ...string) (*types.SiteSmallCell, error) {
	resource := new(types.SiteSmallCell)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Address")
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := reflectAddress.Interface().(string)
		resource.Address = &attrAddress
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enable")
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = &boolEnable
	}

	// Property: small-cell-id ListKey
	//encoding gNMI attribute to OAPI
	reflectSmallCellId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SmallCellId")
	if err != nil {
		return nil, err
	}
	if reflectSmallCellId != nil {
		attrSmallCellId := types.ListKey(reflectSmallCellId.Interface().(string))
		resource.SmallCellId = attrSmallCellId
	}

	// Property: tac string
	//encoding gNMI attribute to OAPI
	reflectTac, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Tac")
	if err != nil {
		return nil, err
	}
	if reflectTac != nil {
		attrTac := reflectTac.Interface().(string)
		resource.Tac = attrTac
	}

	return resource, nil
}

// toSiteSmallCellList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteSmallCellList(params ...string) (*types.SiteSmallCellList, error) {
	resource := new(types.SiteSmallCellList)

	// Array list - Go type SiteSmallCell
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteSmallCell", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteSmallCell(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toSiteSmallCellList converts gNMI to OAPI relative to a node in the tree.
func toSiteSmallCellList(ygotObjValue *reflect.Value, params ...string) (*types.SiteSmallCellList, error) {
	resource := new(types.SiteSmallCellList)

	// Array list - Go type                                                                                   SiteSmallCell
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteSmallCell(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// toSiteUpf converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteUpf(params ...string) (*types.SiteUpf, error) {
	resource := new(types.SiteUpf)

	reflectSiteUpf, err := utils.FindModelPluginObject(d.device, "SiteUpf", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toSiteUpf(reflectSiteUpf, params...)
	return resource, err

}

// toSiteUpf converts gNMI to OAPI relative to a node in the tree.
func toSiteUpf(ygotObjValue *reflect.Value, params ...string) (*types.SiteUpf, error) {
	resource := new(types.SiteUpf)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Address")
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := reflectAddress.Interface().(string)
		resource.Address = attrAddress
	}

	// Property: config-endpoint string
	//encoding gNMI attribute to OAPI
	reflectConfigEndpoint, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ConfigEndpoint")
	if err != nil {
		return nil, err
	}
	if reflectConfigEndpoint != nil {
		attrConfigEndpoint := reflectConfigEndpoint.Interface().(string)
		resource.ConfigEndpoint = &attrConfigEndpoint
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: port int
	//encoding gNMI attribute to OAPI
	reflectPort, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Port")
	if err != nil {
		return nil, err
	}
	if reflectPort != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Port, err = utils.ToInt(reflectPort); err != nil {
			return nil, err
		}
	}

	// Property: upf-id ListKey
	//encoding gNMI attribute to OAPI
	reflectUpfId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "UpfId")
	if err != nil {
		return nil, err
	}
	if reflectUpfId != nil {
		attrUpfId := types.ListKey(reflectUpfId.Interface().(string))
		resource.UpfId = attrUpfId
	}

	return resource, nil
}

// toSiteUpfList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toSiteUpfList(params ...string) (*types.SiteUpfList, error) {
	resource := new(types.SiteUpfList)

	// Array list - Go type SiteUpf
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteUpf", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteUpf(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toSiteUpfList converts gNMI to OAPI relative to a node in the tree.
func toSiteUpfList(ygotObjValue *reflect.Value, params ...string) (*types.SiteUpfList, error) {
	resource := new(types.SiteUpfList)

	// Array list - Go type                                                                                         SiteUpf
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toSiteUpf(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// toTemplate converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toTemplate(params ...string) (*types.Template, error) {
	resource := new(types.Template)

	reflectTemplate, err := utils.FindModelPluginObject(d.device, "Template", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toTemplate(reflectTemplate, params...)
	return resource, err

}

// toTemplate converts gNMI to OAPI relative to a node in the tree.
func toTemplate(ygotObjValue *reflect.Value, params ...string) (*types.Template, error) {
	resource := new(types.Template)

	// Property: default-behavior string
	//encoding gNMI attribute to OAPI
	reflectDefaultBehavior, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DefaultBehavior")
	if err != nil {
		return nil, err
	}
	if reflectDefaultBehavior != nil {
		attrDefaultBehavior := reflectDefaultBehavior.Interface().(string)
		resource.DefaultBehavior = attrDefaultBehavior
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: mbr TemplateMbr
	// Handle object
	reflectMbr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mbr")
	if err != nil {
		return nil, err
	}
	if reflectMbr != nil {
		attrMbr, err := toTemplateMbr(reflectMbr, params...)
		if err != nil {
			return nil, err
		}
		resource.Mbr = attrMbr
	}

	// Property: sd int32
	//encoding gNMI attribute to OAPI
	reflectSd, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Sd")
	if err != nil {
		return nil, err
	}
	if reflectSd != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sd, err = utils.ToInt32Ptr(reflectSd); err != nil {
			return nil, err
		}
	}

	// Property: sst int
	//encoding gNMI attribute to OAPI
	reflectSst, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Sst")
	if err != nil {
		return nil, err
	}
	if reflectSst != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sst, err = utils.ToIntPtr(reflectSst); err != nil {
			return nil, err
		}
	}

	// Property: template-id ListKey
	//encoding gNMI attribute to OAPI
	reflectTemplateId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "TemplateId")
	if err != nil {
		return nil, err
	}
	if reflectTemplateId != nil {
		attrTemplateId := types.ListKey(reflectTemplateId.Interface().(string))
		resource.TemplateId = attrTemplateId
	}

	return resource, nil
}

// toTemplateList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toTemplateList(params ...string) (*types.TemplateList, error) {
	resource := new(types.TemplateList)

	// Array list - Go type Template
	mpObject, err := utils.FindModelPluginObject(d.device, "Template", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toTemplate(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toTemplateList converts gNMI to OAPI relative to a node in the tree.
func toTemplateList(ygotObjValue *reflect.Value, params ...string) (*types.TemplateList, error) {
	resource := new(types.TemplateList)

	// Array list - Go type                                                                                        Template
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toTemplate(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// toTemplateMbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toTemplateMbr(params ...string) (*types.TemplateMbr, error) {
	resource := new(types.TemplateMbr)

	reflectTemplateMbr, err := utils.FindModelPluginObject(d.device, "TemplateMbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toTemplateMbr(reflectTemplateMbr, params...)
	return resource, err

}

// toTemplateMbr converts gNMI to OAPI relative to a node in the tree.
func toTemplateMbr(ygotObjValue *reflect.Value, params ...string) (*types.TemplateMbr, error) {
	resource := new(types.TemplateMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: downlink-burst-size int32
	//encoding gNMI attribute to OAPI
	reflectDownlinkBurstSize, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DownlinkBurstSize")
	if err != nil {
		return nil, err
	}
	if reflectDownlinkBurstSize != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.DownlinkBurstSize, err = utils.ToInt32Ptr(reflectDownlinkBurstSize); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	// Property: uplink-burst-size int32
	//encoding gNMI attribute to OAPI
	reflectUplinkBurstSize, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "UplinkBurstSize")
	if err != nil {
		return nil, err
	}
	if reflectUplinkBurstSize != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.UplinkBurstSize, err = utils.ToInt32Ptr(reflectUplinkBurstSize); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// toTrafficClass converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toTrafficClass(params ...string) (*types.TrafficClass, error) {
	resource := new(types.TrafficClass)

	reflectTrafficClass, err := utils.FindModelPluginObject(d.device, "TrafficClass", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toTrafficClass(reflectTrafficClass, params...)
	return resource, err

}

// toTrafficClass converts gNMI to OAPI relative to a node in the tree.
func toTrafficClass(ygotObjValue *reflect.Value, params ...string) (*types.TrafficClass, error) {
	resource := new(types.TrafficClass)

	// Property: arp int
	//encoding gNMI attribute to OAPI
	reflectArp, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Arp")
	if err != nil {
		return nil, err
	}
	if reflectArp != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Arp, err = utils.ToIntPtr(reflectArp); err != nil {
			return nil, err
		}
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: pdb int
	//encoding gNMI attribute to OAPI
	reflectPdb, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Pdb")
	if err != nil {
		return nil, err
	}
	if reflectPdb != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Pdb, err = utils.ToIntPtr(reflectPdb); err != nil {
			return nil, err
		}
	}

	// Property: pelr int
	//encoding gNMI attribute to OAPI
	reflectPelr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Pelr")
	if err != nil {
		return nil, err
	}
	if reflectPelr != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Pelr, err = utils.ToIntPtr(reflectPelr); err != nil {
			return nil, err
		}
	}

	// Property: qci int
	//encoding gNMI attribute to OAPI
	reflectQci, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Qci")
	if err != nil {
		return nil, err
	}
	if reflectQci != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Qci, err = utils.ToIntPtr(reflectQci); err != nil {
			return nil, err
		}
	}

	// Property: traffic-class-id ListKey
	//encoding gNMI attribute to OAPI
	reflectTrafficClassId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "TrafficClassId")
	if err != nil {
		return nil, err
	}
	if reflectTrafficClassId != nil {
		attrTrafficClassId := types.ListKey(reflectTrafficClassId.Interface().(string))
		resource.TrafficClassId = attrTrafficClassId
	}

	return resource, nil
}

// toTrafficClassList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toTrafficClassList(params ...string) (*types.TrafficClassList, error) {
	resource := new(types.TrafficClassList)

	// Array list - Go type TrafficClass
	mpObject, err := utils.FindModelPluginObject(d.device, "TrafficClass", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toTrafficClass(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// toTrafficClassList converts gNMI to OAPI relative to a node in the tree.
func toTrafficClassList(ygotObjValue *reflect.Value, params ...string) (*types.TrafficClassList, error) {
	resource := new(types.TrafficClassList)

	// Array list - Go type                                                                                    TrafficClass
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := toTrafficClass(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// toEnterpriseId converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) toEnterpriseId(params ...string) (*types.EnterpriseId, error) {
	resource := new(types.EnterpriseId)

	reflectEnterpriseId, err := utils.FindModelPluginObject(d.device, "EnterpriseId", params...)
	if err != nil {
		return nil, err
	}
	resource, err = toEnterpriseId(reflectEnterpriseId, params...)
	return resource, err

}

// toEnterpriseId converts gNMI to OAPI relative to a node in the tree.
func toEnterpriseId(ygotObjValue *reflect.Value, params ...string) (*types.EnterpriseId, error) {
	resource := new(types.EnterpriseId)

	return resource, nil
}

//Ignoring RequestBodyApplication

//Ignoring RequestBodyApplicationEndpoint

//Ignoring RequestBodyApplicationEndpointMbr

//Ignoring RequestBodySite

//Ignoring RequestBodySiteConnectivityService

//Ignoring RequestBodySiteConnectivityServiceCore4g

//Ignoring RequestBodySiteConnectivityServiceCore5g

//Ignoring RequestBodySiteDevice

//Ignoring RequestBodySiteDeviceGroup

//Ignoring RequestBodySiteDeviceGroupDevice

//Ignoring RequestBodySiteDeviceGroupMbr

//Ignoring RequestBodySiteImsiDefinition

//Ignoring RequestBodySiteIpDomain

//Ignoring RequestBodySiteMonitoring

//Ignoring RequestBodySiteMonitoringEdgeDevice

//Ignoring RequestBodySiteSimCard

//Ignoring RequestBodySiteSlice

//Ignoring RequestBodySiteSliceDeviceGroup

//Ignoring RequestBodySiteSliceFilter

//Ignoring RequestBodySiteSliceMbr

//Ignoring RequestBodySiteSlicePriorityTrafficRule

//Ignoring RequestBodySiteSmallCell

//Ignoring RequestBodySiteUpf

//Ignoring RequestBodyTemplate

//Ignoring RequestBodyTemplateMbr

//Ignoring RequestBodyTrafficClass

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating param-types
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating request-bodies

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating additional-properties
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating additional-properties
