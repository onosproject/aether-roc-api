// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"reflect"

	externalRef0 "github.com/onosproject/aether-models/models/aether-2.1.x/api"
	"github.com/onosproject/aether-roc-api/pkg/aether_2_1_0/types"
	"github.com/onosproject/aether-roc-api/pkg/utils"
)

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating constants
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating constants
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// ModelPluginDevice - a wrapper for the model plugin
type ModelPluginDevice struct {
	device externalRef0.Device
}

// ToAdditionalPropertiesUnchTarget converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToAdditionalPropertiesUnchTarget(params ...string) (*types.AdditionalPropertiesUnchTarget, error) {
	resource := new(types.AdditionalPropertiesUnchTarget)

	reflectAdditionalPropertiesUnchTarget, err := utils.FindModelPluginObject(d.device, "AdditionalPropertiesUnchTarget", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToAdditionalPropertiesUnchTarget(reflectAdditionalPropertiesUnchTarget, params...)
	return resource, err

}

// ToAdditionalPropertiesUnchTarget converts gNMI to OAPI relative to a node in the tree.
func ToAdditionalPropertiesUnchTarget(ygotObjValue *reflect.Value, params ...string) (*types.AdditionalPropertiesUnchTarget, error) {
	resource := new(types.AdditionalPropertiesUnchTarget)

	// Property: enterprise-id string
	//encoding gNMI attribute to OAPI
	reflectEnterpriseId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EnterpriseId")
	if err != nil {
		return nil, err
	}
	if reflectEnterpriseId != nil {
		attrEnterpriseId := reflectEnterpriseId.Interface().(string)
		resource.EnterpriseId = &attrEnterpriseId
	}

	// Property: unchanged string
	//encoding gNMI attribute to OAPI
	reflectUnchanged, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Unchanged")
	if err != nil {
		return nil, err
	}
	if reflectUnchanged != nil {
		attrUnchanged := reflectUnchanged.Interface().(string)
		resource.Unchanged = &attrUnchanged
	}

	return resource, nil
}

// ToAdditionalPropertyEnterpriseId converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToAdditionalPropertyEnterpriseId(params ...string) (*types.AdditionalPropertyEnterpriseId, error) {
	resource := new(types.AdditionalPropertyEnterpriseId)

	reflectAdditionalPropertyEnterpriseId, err := utils.FindModelPluginObject(d.device, "AdditionalPropertyEnterpriseId", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToAdditionalPropertyEnterpriseId(reflectAdditionalPropertyEnterpriseId, params...)
	return resource, err

}

// ToAdditionalPropertyEnterpriseId converts gNMI to OAPI relative to a node in the tree.
func ToAdditionalPropertyEnterpriseId(ygotObjValue *reflect.Value, params ...string) (*types.AdditionalPropertyEnterpriseId, error) {
	resource := new(types.AdditionalPropertyEnterpriseId)

	// Property: enterprise-id string
	//encoding gNMI attribute to OAPI
	reflectEnterpriseId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EnterpriseId")
	if err != nil {
		return nil, err
	}
	if reflectEnterpriseId != nil {
		attrEnterpriseId := reflectEnterpriseId.Interface().(string)
		resource.EnterpriseId = &attrEnterpriseId
	}

	return resource, nil
}

// ToAdditionalPropertyUnchanged converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToAdditionalPropertyUnchanged(params ...string) (*types.AdditionalPropertyUnchanged, error) {
	resource := new(types.AdditionalPropertyUnchanged)

	reflectAdditionalPropertyUnchanged, err := utils.FindModelPluginObject(d.device, "AdditionalPropertyUnchanged", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToAdditionalPropertyUnchanged(reflectAdditionalPropertyUnchanged, params...)
	return resource, err

}

// ToAdditionalPropertyUnchanged converts gNMI to OAPI relative to a node in the tree.
func ToAdditionalPropertyUnchanged(ygotObjValue *reflect.Value, params ...string) (*types.AdditionalPropertyUnchanged, error) {
	resource := new(types.AdditionalPropertyUnchanged)

	// Property: unchanged string
	//encoding gNMI attribute to OAPI
	reflectUnchanged, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Unchanged")
	if err != nil {
		return nil, err
	}
	if reflectUnchanged != nil {
		attrUnchanged := reflectUnchanged.Interface().(string)
		resource.Unchanged = &attrUnchanged
	}

	return resource, nil
}

// ToApplication converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToApplication(params ...string) (*types.Application, error) {
	resource := new(types.Application)

	reflectApplication, err := utils.FindModelPluginObject(d.device, "Application", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToApplication(reflectApplication, params...)
	return resource, err

}

// ToApplication converts gNMI to OAPI relative to a node in the tree.
func ToApplication(ygotObjValue *reflect.Value, params ...string) (*types.Application, error) {
	resource := new(types.Application)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Address")
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := reflectAddress.Interface().(string)
		resource.Address = attrAddress
	}

	// Property: application-id ListKey
	//encoding gNMI attribute to OAPI
	reflectApplicationId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ApplicationId")
	if err != nil {
		return nil, err
	}
	if reflectApplicationId != nil {
		attrApplicationId := types.ListKey(reflectApplicationId.Interface().(string))
		resource.ApplicationId = attrApplicationId
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: endpoint ApplicationEndpointList
	// Handle object
	reflectEndpoint, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Endpoint")
	if err != nil {
		return nil, err
	}
	if reflectEndpoint != nil {
		attrEndpoint, err := ToApplicationEndpointList(reflectEndpoint, params...)
		if err != nil {
			return nil, err
		}
		resource.Endpoint = attrEndpoint
	}

	return resource, nil
}

// ToApplicationEndpoint converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToApplicationEndpoint(params ...string) (*types.ApplicationEndpoint, error) {
	resource := new(types.ApplicationEndpoint)

	reflectApplicationEndpoint, err := utils.FindModelPluginObject(d.device, "ApplicationEndpoint", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToApplicationEndpoint(reflectApplicationEndpoint, params...)
	return resource, err

}

// ToApplicationEndpoint converts gNMI to OAPI relative to a node in the tree.
func ToApplicationEndpoint(ygotObjValue *reflect.Value, params ...string) (*types.ApplicationEndpoint, error) {
	resource := new(types.ApplicationEndpoint)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: endpoint-id ListKey
	//encoding gNMI attribute to OAPI
	reflectEndpointId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EndpointId")
	if err != nil {
		return nil, err
	}
	if reflectEndpointId != nil {
		attrEndpointId := types.ListKey(reflectEndpointId.Interface().(string))
		resource.EndpointId = attrEndpointId
	}

	// Property: mbr ApplicationEndpointMbr
	// Handle object
	reflectMbr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mbr")
	if err != nil {
		return nil, err
	}
	if reflectMbr != nil {
		attrMbr, err := ToApplicationEndpointMbr(reflectMbr, params...)
		if err != nil {
			return nil, err
		}
		resource.Mbr = attrMbr
	}

	// Property: port-end int
	//encoding gNMI attribute to OAPI
	reflectPortEnd, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "PortEnd")
	if err != nil {
		return nil, err
	}
	if reflectPortEnd != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.PortEnd, err = utils.ToIntPtr(reflectPortEnd); err != nil {
			return nil, err
		}
	}

	// Property: port-start int
	//encoding gNMI attribute to OAPI
	reflectPortStart, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "PortStart")
	if err != nil {
		return nil, err
	}
	if reflectPortStart != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.PortStart, err = utils.ToIntPtr(reflectPortStart); err != nil {
			return nil, err
		}
	}

	// Property: protocol string
	//encoding gNMI attribute to OAPI
	reflectProtocol, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Protocol")
	if err != nil {
		return nil, err
	}
	if reflectProtocol != nil {
		attrProtocol := reflectProtocol.Interface().(string)
		resource.Protocol = &attrProtocol
	}

	// Property: traffic-class string
	//encoding gNMI attribute to OAPI
	reflectTrafficClass, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "TrafficClass")
	if err != nil {
		return nil, err
	}
	if reflectTrafficClass != nil {
		attrTrafficClass := reflectTrafficClass.Interface().(string)
		resource.TrafficClass = &attrTrafficClass
	}

	return resource, nil
}

// ToApplicationEndpointList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToApplicationEndpointList(params ...string) (*types.ApplicationEndpointList, error) {
	resource := new(types.ApplicationEndpointList)

	// Array list - Go type ApplicationEndpoint
	mpObject, err := utils.FindModelPluginObject(d.device, "ApplicationEndpoint", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToApplicationEndpoint(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToApplicationEndpointList converts gNMI to OAPI relative to a node in the tree.
func ToApplicationEndpointList(ygotObjValue *reflect.Value, params ...string) (*types.ApplicationEndpointList, error) {
	resource := new(types.ApplicationEndpointList)

	// Array list - Go type                                                                             ApplicationEndpoint
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToApplicationEndpoint(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToApplicationEndpointMbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToApplicationEndpointMbr(params ...string) (*types.ApplicationEndpointMbr, error) {
	resource := new(types.ApplicationEndpointMbr)

	reflectApplicationEndpointMbr, err := utils.FindModelPluginObject(d.device, "ApplicationEndpointMbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToApplicationEndpointMbr(reflectApplicationEndpointMbr, params...)
	return resource, err

}

// ToApplicationEndpointMbr converts gNMI to OAPI relative to a node in the tree.
func ToApplicationEndpointMbr(ygotObjValue *reflect.Value, params ...string) (*types.ApplicationEndpointMbr, error) {
	resource := new(types.ApplicationEndpointMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToApplicationList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToApplicationList(params ...string) (*types.ApplicationList, error) {
	resource := new(types.ApplicationList)

	// Array list - Go type Application
	mpObject, err := utils.FindModelPluginObject(d.device, "Application", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToApplication(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToApplicationList converts gNMI to OAPI relative to a node in the tree.
func ToApplicationList(ygotObjValue *reflect.Value, params ...string) (*types.ApplicationList, error) {
	resource := new(types.ApplicationList)

	// Array list - Go type                                                                                     Application
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToApplication(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSite converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSite(params ...string) (*types.Site, error) {
	resource := new(types.Site)

	reflectSite, err := utils.FindModelPluginObject(d.device, "Site", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSite(reflectSite, params...)
	return resource, err

}

// ToSite converts gNMI to OAPI relative to a node in the tree.
func ToSite(ygotObjValue *reflect.Value, params ...string) (*types.Site, error) {
	resource := new(types.Site)

	// Property: connectivity-service SiteConnectivityService
	// Handle object
	reflectConnectivityService, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ConnectivityService")
	if err != nil {
		return nil, err
	}
	if reflectConnectivityService != nil {
		attrConnectivityService, err := ToSiteConnectivityService(reflectConnectivityService, params...)
		if err != nil {
			return nil, err
		}
		resource.ConnectivityService = attrConnectivityService
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device SiteDeviceList
	// Handle object
	reflectDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Device")
	if err != nil {
		return nil, err
	}
	if reflectDevice != nil {
		attrDevice, err := ToSiteDeviceList(reflectDevice, params...)
		if err != nil {
			return nil, err
		}
		resource.Device = attrDevice
	}

	// Property: device-group SiteDeviceGroupList
	// Handle object
	reflectDeviceGroup, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DeviceGroup")
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroup != nil {
		attrDeviceGroup, err := ToSiteDeviceGroupList(reflectDeviceGroup, params...)
		if err != nil {
			return nil, err
		}
		resource.DeviceGroup = attrDeviceGroup
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: imsi-definition SiteImsiDefinition
	// Handle object
	reflectImsiDefinition, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ImsiDefinition")
	if err != nil {
		return nil, err
	}
	if reflectImsiDefinition != nil {
		attrImsiDefinition, err := ToSiteImsiDefinition(reflectImsiDefinition, params...)
		if err != nil {
			return nil, err
		}
		resource.ImsiDefinition = attrImsiDefinition
	}

	// Property: ip-domain SiteIpDomainList
	// Handle object
	reflectIpDomain, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "IpDomain")
	if err != nil {
		return nil, err
	}
	if reflectIpDomain != nil {
		attrIpDomain, err := ToSiteIpDomainList(reflectIpDomain, params...)
		if err != nil {
			return nil, err
		}
		resource.IpDomain = attrIpDomain
	}

	// Property: monitoring SiteMonitoring
	// Handle object
	reflectMonitoring, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Monitoring")
	if err != nil {
		return nil, err
	}
	if reflectMonitoring != nil {
		attrMonitoring, err := ToSiteMonitoring(reflectMonitoring, params...)
		if err != nil {
			return nil, err
		}
		resource.Monitoring = attrMonitoring
	}

	// Property: sim-card SiteSimCardList
	// Handle object
	reflectSimCard, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SimCard")
	if err != nil {
		return nil, err
	}
	if reflectSimCard != nil {
		attrSimCard, err := ToSiteSimCardList(reflectSimCard, params...)
		if err != nil {
			return nil, err
		}
		resource.SimCard = attrSimCard
	}

	// Property: site-id ListKey
	//encoding gNMI attribute to OAPI
	reflectSiteId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SiteId")
	if err != nil {
		return nil, err
	}
	if reflectSiteId != nil {
		attrSiteId := types.ListKey(reflectSiteId.Interface().(string))
		resource.SiteId = attrSiteId
	}

	// Property: slice SiteSliceList
	// Handle object
	reflectSlice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Slice")
	if err != nil {
		return nil, err
	}
	if reflectSlice != nil {
		attrSlice, err := ToSiteSliceList(reflectSlice, params...)
		if err != nil {
			return nil, err
		}
		resource.Slice = attrSlice
	}

	// Property: small-cell SiteSmallCellList
	// Handle object
	reflectSmallCell, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SmallCell")
	if err != nil {
		return nil, err
	}
	if reflectSmallCell != nil {
		attrSmallCell, err := ToSiteSmallCellList(reflectSmallCell, params...)
		if err != nil {
			return nil, err
		}
		resource.SmallCell = attrSmallCell
	}

	// Property: upf SiteUpfList
	// Handle object
	reflectUpf, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Upf")
	if err != nil {
		return nil, err
	}
	if reflectUpf != nil {
		attrUpf, err := ToSiteUpfList(reflectUpf, params...)
		if err != nil {
			return nil, err
		}
		resource.Upf = attrUpf
	}

	return resource, nil
}

// ToSiteConnectivityService converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteConnectivityService(params ...string) (*types.SiteConnectivityService, error) {
	resource := new(types.SiteConnectivityService)

	reflectSiteConnectivityService, err := utils.FindModelPluginObject(d.device, "SiteConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteConnectivityService(reflectSiteConnectivityService, params...)
	return resource, err

}

// ToSiteConnectivityService converts gNMI to OAPI relative to a node in the tree.
func ToSiteConnectivityService(ygotObjValue *reflect.Value, params ...string) (*types.SiteConnectivityService, error) {
	resource := new(types.SiteConnectivityService)

	// Property: core-4g SiteConnectivityServiceCore4g
	// Handle object
	reflectCore4g, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Core4g")
	if err != nil {
		return nil, err
	}
	if reflectCore4g != nil {
		attrCore4g, err := ToSiteConnectivityServiceCore4g(reflectCore4g, params...)
		if err != nil {
			return nil, err
		}
		resource.Core4g = attrCore4g
	}

	// Property: core-5g SiteConnectivityServiceCore5g
	// Handle object
	reflectCore5g, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Core5g")
	if err != nil {
		return nil, err
	}
	if reflectCore5g != nil {
		attrCore5g, err := ToSiteConnectivityServiceCore5g(reflectCore5g, params...)
		if err != nil {
			return nil, err
		}
		resource.Core5g = attrCore5g
	}

	return resource, nil
}

// ToSiteConnectivityServiceCore4g converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteConnectivityServiceCore4g(params ...string) (*types.SiteConnectivityServiceCore4g, error) {
	resource := new(types.SiteConnectivityServiceCore4g)

	reflectSiteConnectivityServiceCore4g, err := utils.FindModelPluginObject(d.device, "SiteConnectivityServiceCore4g", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteConnectivityServiceCore4g(reflectSiteConnectivityServiceCore4g, params...)
	return resource, err

}

// ToSiteConnectivityServiceCore4g converts gNMI to OAPI relative to a node in the tree.
func ToSiteConnectivityServiceCore4g(ygotObjValue *reflect.Value, params ...string) (*types.SiteConnectivityServiceCore4g, error) {
	resource := new(types.SiteConnectivityServiceCore4g)

	// Property: acc-prometheus-url string
	//encoding gNMI attribute to OAPI
	reflectAccPrometheusUrl, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "AccPrometheusUrl")
	if err != nil {
		return nil, err
	}
	if reflectAccPrometheusUrl != nil {
		attrAccPrometheusUrl := reflectAccPrometheusUrl.Interface().(string)
		resource.AccPrometheusUrl = &attrAccPrometheusUrl
	}

	// Property: endpoint string
	//encoding gNMI attribute to OAPI
	reflectEndpoint, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Endpoint")
	if err != nil {
		return nil, err
	}
	if reflectEndpoint != nil {
		attrEndpoint := reflectEndpoint.Interface().(string)
		resource.Endpoint = &attrEndpoint
	}

	return resource, nil
}

// ToSiteConnectivityServiceCore5g converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteConnectivityServiceCore5g(params ...string) (*types.SiteConnectivityServiceCore5g, error) {
	resource := new(types.SiteConnectivityServiceCore5g)

	reflectSiteConnectivityServiceCore5g, err := utils.FindModelPluginObject(d.device, "SiteConnectivityServiceCore5g", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteConnectivityServiceCore5g(reflectSiteConnectivityServiceCore5g, params...)
	return resource, err

}

// ToSiteConnectivityServiceCore5g converts gNMI to OAPI relative to a node in the tree.
func ToSiteConnectivityServiceCore5g(ygotObjValue *reflect.Value, params ...string) (*types.SiteConnectivityServiceCore5g, error) {
	resource := new(types.SiteConnectivityServiceCore5g)

	// Property: acc-prometheus-url string
	//encoding gNMI attribute to OAPI
	reflectAccPrometheusUrl, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "AccPrometheusUrl")
	if err != nil {
		return nil, err
	}
	if reflectAccPrometheusUrl != nil {
		attrAccPrometheusUrl := reflectAccPrometheusUrl.Interface().(string)
		resource.AccPrometheusUrl = &attrAccPrometheusUrl
	}

	// Property: endpoint string
	//encoding gNMI attribute to OAPI
	reflectEndpoint, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Endpoint")
	if err != nil {
		return nil, err
	}
	if reflectEndpoint != nil {
		attrEndpoint := reflectEndpoint.Interface().(string)
		resource.Endpoint = &attrEndpoint
	}

	return resource, nil
}

// ToSiteDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteDevice(params ...string) (*types.SiteDevice, error) {
	resource := new(types.SiteDevice)

	reflectSiteDevice, err := utils.FindModelPluginObject(d.device, "SiteDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteDevice(reflectSiteDevice, params...)
	return resource, err

}

// ToSiteDevice converts gNMI to OAPI relative to a node in the tree.
func ToSiteDevice(ygotObjValue *reflect.Value, params ...string) (*types.SiteDevice, error) {
	resource := new(types.SiteDevice)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device-id ListKey
	//encoding gNMI attribute to OAPI
	reflectDeviceId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DeviceId")
	if err != nil {
		return nil, err
	}
	if reflectDeviceId != nil {
		attrDeviceId := types.ListKey(reflectDeviceId.Interface().(string))
		resource.DeviceId = attrDeviceId
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: imei string
	//encoding gNMI attribute to OAPI
	reflectImei, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Imei")
	if err != nil {
		return nil, err
	}
	if reflectImei != nil {
		attrImei := reflectImei.Interface().(string)
		resource.Imei = &attrImei
	}

	// Property: sim-card string
	//encoding gNMI attribute to OAPI
	reflectSimCard, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SimCard")
	if err != nil {
		return nil, err
	}
	if reflectSimCard != nil {
		attrSimCard := reflectSimCard.Interface().(string)
		resource.SimCard = &attrSimCard
	}

	// Property: state SiteDeviceState
	// Handle object
	reflectState, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "State")
	if err != nil {
		return nil, err
	}
	if reflectState != nil {
		attrState, err := ToSiteDeviceState(reflectState, params...)
		if err != nil {
			return nil, err
		}
		resource.State = attrState
	}

	return resource, nil
}

// ToSiteDeviceGroup converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteDeviceGroup(params ...string) (*types.SiteDeviceGroup, error) {
	resource := new(types.SiteDeviceGroup)

	reflectSiteDeviceGroup, err := utils.FindModelPluginObject(d.device, "SiteDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteDeviceGroup(reflectSiteDeviceGroup, params...)
	return resource, err

}

// ToSiteDeviceGroup converts gNMI to OAPI relative to a node in the tree.
func ToSiteDeviceGroup(ygotObjValue *reflect.Value, params ...string) (*types.SiteDeviceGroup, error) {
	resource := new(types.SiteDeviceGroup)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device SiteDeviceGroupDeviceList
	// Handle object
	reflectDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Device")
	if err != nil {
		return nil, err
	}
	if reflectDevice != nil {
		attrDevice, err := ToSiteDeviceGroupDeviceList(reflectDevice, params...)
		if err != nil {
			return nil, err
		}
		resource.Device = attrDevice
	}

	// Property: device-group-id ListKey
	//encoding gNMI attribute to OAPI
	reflectDeviceGroupId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DeviceGroupId")
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroupId != nil {
		attrDeviceGroupId := types.ListKey(reflectDeviceGroupId.Interface().(string))
		resource.DeviceGroupId = attrDeviceGroupId
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: ip-domain string
	//encoding gNMI attribute to OAPI
	reflectIpDomain, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "IpDomain")
	if err != nil {
		return nil, err
	}
	if reflectIpDomain != nil {
		attrIpDomain := reflectIpDomain.Interface().(string)
		resource.IpDomain = &attrIpDomain
	}

	// Property: mbr SiteDeviceGroupMbr
	// Handle object
	reflectMbr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mbr")
	if err != nil {
		return nil, err
	}
	if reflectMbr != nil {
		attrMbr, err := ToSiteDeviceGroupMbr(reflectMbr, params...)
		if err != nil {
			return nil, err
		}
		resource.Mbr = attrMbr
	}

	// Property: traffic-class string
	//encoding gNMI attribute to OAPI
	reflectTrafficClass, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "TrafficClass")
	if err != nil {
		return nil, err
	}
	if reflectTrafficClass != nil {
		attrTrafficClass := reflectTrafficClass.Interface().(string)
		resource.TrafficClass = attrTrafficClass
	}

	return resource, nil
}

// ToSiteDeviceGroupDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteDeviceGroupDevice(params ...string) (*types.SiteDeviceGroupDevice, error) {
	resource := new(types.SiteDeviceGroupDevice)

	reflectSiteDeviceGroupDevice, err := utils.FindModelPluginObject(d.device, "SiteDeviceGroupDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteDeviceGroupDevice(reflectSiteDeviceGroupDevice, params...)
	return resource, err

}

// ToSiteDeviceGroupDevice converts gNMI to OAPI relative to a node in the tree.
func ToSiteDeviceGroupDevice(ygotObjValue *reflect.Value, params ...string) (*types.SiteDeviceGroupDevice, error) {
	resource := new(types.SiteDeviceGroupDevice)

	// Property: device-id ListKey
	//encoding gNMI attribute to OAPI
	reflectDeviceId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DeviceId")
	if err != nil {
		return nil, err
	}
	if reflectDeviceId != nil {
		attrDeviceId := types.ListKey(reflectDeviceId.Interface().(string))
		resource.DeviceId = attrDeviceId
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enable")
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = &boolEnable
	}

	return resource, nil
}

// ToSiteDeviceGroupDeviceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteDeviceGroupDeviceList(params ...string) (*types.SiteDeviceGroupDeviceList, error) {
	resource := new(types.SiteDeviceGroupDeviceList)

	// Array list - Go type SiteDeviceGroupDevice
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteDeviceGroupDevice", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteDeviceGroupDevice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSiteDeviceGroupDeviceList converts gNMI to OAPI relative to a node in the tree.
func ToSiteDeviceGroupDeviceList(ygotObjValue *reflect.Value, params ...string) (*types.SiteDeviceGroupDeviceList, error) {
	resource := new(types.SiteDeviceGroupDeviceList)

	// Array list - Go type                                                                           SiteDeviceGroupDevice
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteDeviceGroupDevice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSiteDeviceGroupList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteDeviceGroupList(params ...string) (*types.SiteDeviceGroupList, error) {
	resource := new(types.SiteDeviceGroupList)

	// Array list - Go type SiteDeviceGroup
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteDeviceGroup(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSiteDeviceGroupList converts gNMI to OAPI relative to a node in the tree.
func ToSiteDeviceGroupList(ygotObjValue *reflect.Value, params ...string) (*types.SiteDeviceGroupList, error) {
	resource := new(types.SiteDeviceGroupList)

	// Array list - Go type                                                                                 SiteDeviceGroup
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteDeviceGroup(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSiteDeviceGroupMbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteDeviceGroupMbr(params ...string) (*types.SiteDeviceGroupMbr, error) {
	resource := new(types.SiteDeviceGroupMbr)

	reflectSiteDeviceGroupMbr, err := utils.FindModelPluginObject(d.device, "SiteDeviceGroupMbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteDeviceGroupMbr(reflectSiteDeviceGroupMbr, params...)
	return resource, err

}

// ToSiteDeviceGroupMbr converts gNMI to OAPI relative to a node in the tree.
func ToSiteDeviceGroupMbr(ygotObjValue *reflect.Value, params ...string) (*types.SiteDeviceGroupMbr, error) {
	resource := new(types.SiteDeviceGroupMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToSiteDeviceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteDeviceList(params ...string) (*types.SiteDeviceList, error) {
	resource := new(types.SiteDeviceList)

	// Array list - Go type SiteDevice
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteDevice", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteDevice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSiteDeviceList converts gNMI to OAPI relative to a node in the tree.
func ToSiteDeviceList(ygotObjValue *reflect.Value, params ...string) (*types.SiteDeviceList, error) {
	resource := new(types.SiteDeviceList)

	// Array list - Go type                                                                                      SiteDevice
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteDevice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSiteDeviceState converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteDeviceState(params ...string) (*types.SiteDeviceState, error) {
	resource := new(types.SiteDeviceState)

	reflectSiteDeviceState, err := utils.FindModelPluginObject(d.device, "SiteDeviceState", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteDeviceState(reflectSiteDeviceState, params...)
	return resource, err

}

// ToSiteDeviceState converts gNMI to OAPI relative to a node in the tree.
func ToSiteDeviceState(ygotObjValue *reflect.Value, params ...string) (*types.SiteDeviceState, error) {
	resource := new(types.SiteDeviceState)

	// Property: connected string
	//encoding gNMI attribute to OAPI
	reflectConnected, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Connected")
	if err != nil {
		return nil, err
	}
	if reflectConnected != nil {
		attrConnected := reflectConnected.Interface().(string)
		resource.Connected = &attrConnected
	}

	// Property: ip-address string
	//encoding gNMI attribute to OAPI
	reflectIpAddress, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "IpAddress")
	if err != nil {
		return nil, err
	}
	if reflectIpAddress != nil {
		attrIpAddress := reflectIpAddress.Interface().(string)
		resource.IpAddress = &attrIpAddress
	}

	// Property: last-connected string
	//encoding gNMI attribute to OAPI
	reflectLastConnected, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "LastConnected")
	if err != nil {
		return nil, err
	}
	if reflectLastConnected != nil {
		attrLastConnected := reflectLastConnected.Interface().(string)
		resource.LastConnected = &attrLastConnected
	}

	return resource, nil
}

// ToSiteImsiDefinition converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteImsiDefinition(params ...string) (*types.SiteImsiDefinition, error) {
	resource := new(types.SiteImsiDefinition)

	reflectSiteImsiDefinition, err := utils.FindModelPluginObject(d.device, "SiteImsiDefinition", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteImsiDefinition(reflectSiteImsiDefinition, params...)
	return resource, err

}

// ToSiteImsiDefinition converts gNMI to OAPI relative to a node in the tree.
func ToSiteImsiDefinition(ygotObjValue *reflect.Value, params ...string) (*types.SiteImsiDefinition, error) {
	resource := new(types.SiteImsiDefinition)

	// Property: enterprise int32
	//encoding gNMI attribute to OAPI
	reflectEnterprise, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enterprise")
	if err != nil {
		return nil, err
	}
	if reflectEnterprise != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Enterprise, err = utils.ToInt32(reflectEnterprise); err != nil {
			return nil, err
		}
	}

	// Property: format string
	//encoding gNMI attribute to OAPI
	reflectFormat, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Format")
	if err != nil {
		return nil, err
	}
	if reflectFormat != nil {
		attrFormat := reflectFormat.Interface().(string)
		resource.Format = attrFormat
	}

	// Property: mcc string
	//encoding gNMI attribute to OAPI
	reflectMcc, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mcc")
	if err != nil {
		return nil, err
	}
	if reflectMcc != nil {
		attrMcc := reflectMcc.Interface().(string)
		resource.Mcc = attrMcc
	}

	// Property: mnc string
	//encoding gNMI attribute to OAPI
	reflectMnc, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mnc")
	if err != nil {
		return nil, err
	}
	if reflectMnc != nil {
		attrMnc := reflectMnc.Interface().(string)
		resource.Mnc = attrMnc
	}

	return resource, nil
}

// ToSiteIpDomain converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteIpDomain(params ...string) (*types.SiteIpDomain, error) {
	resource := new(types.SiteIpDomain)

	reflectSiteIpDomain, err := utils.FindModelPluginObject(d.device, "SiteIpDomain", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteIpDomain(reflectSiteIpDomain, params...)
	return resource, err

}

// ToSiteIpDomain converts gNMI to OAPI relative to a node in the tree.
func ToSiteIpDomain(ygotObjValue *reflect.Value, params ...string) (*types.SiteIpDomain, error) {
	resource := new(types.SiteIpDomain)

	// Property: admin-status string
	//encoding gNMI attribute to OAPI
	reflectAdminStatus, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "AdminStatus")
	if err != nil {
		return nil, err
	}
	if reflectAdminStatus != nil {
		attrAdminStatus := reflectAdminStatus.Interface().(string)
		resource.AdminStatus = &attrAdminStatus
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: dnn string
	//encoding gNMI attribute to OAPI
	reflectDnn, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Dnn")
	if err != nil {
		return nil, err
	}
	if reflectDnn != nil {
		attrDnn := reflectDnn.Interface().(string)
		resource.Dnn = attrDnn
	}

	// Property: dns-primary string
	//encoding gNMI attribute to OAPI
	reflectDnsPrimary, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DnsPrimary")
	if err != nil {
		return nil, err
	}
	if reflectDnsPrimary != nil {
		attrDnsPrimary := reflectDnsPrimary.Interface().(string)
		resource.DnsPrimary = &attrDnsPrimary
	}

	// Property: dns-secondary string
	//encoding gNMI attribute to OAPI
	reflectDnsSecondary, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DnsSecondary")
	if err != nil {
		return nil, err
	}
	if reflectDnsSecondary != nil {
		attrDnsSecondary := reflectDnsSecondary.Interface().(string)
		resource.DnsSecondary = &attrDnsSecondary
	}

	// Property: ip-domain-id ListKey
	//encoding gNMI attribute to OAPI
	reflectIpDomainId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "IpDomainId")
	if err != nil {
		return nil, err
	}
	if reflectIpDomainId != nil {
		attrIpDomainId := types.ListKey(reflectIpDomainId.Interface().(string))
		resource.IpDomainId = attrIpDomainId
	}

	// Property: mtu int
	//encoding gNMI attribute to OAPI
	reflectMtu, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mtu")
	if err != nil {
		return nil, err
	}
	if reflectMtu != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Mtu, err = utils.ToIntPtr(reflectMtu); err != nil {
			return nil, err
		}
	}

	// Property: subnet string
	//encoding gNMI attribute to OAPI
	reflectSubnet, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Subnet")
	if err != nil {
		return nil, err
	}
	if reflectSubnet != nil {
		attrSubnet := reflectSubnet.Interface().(string)
		resource.Subnet = attrSubnet
	}

	return resource, nil
}

// ToSiteIpDomainList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteIpDomainList(params ...string) (*types.SiteIpDomainList, error) {
	resource := new(types.SiteIpDomainList)

	// Array list - Go type SiteIpDomain
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteIpDomain", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteIpDomain(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSiteIpDomainList converts gNMI to OAPI relative to a node in the tree.
func ToSiteIpDomainList(ygotObjValue *reflect.Value, params ...string) (*types.SiteIpDomainList, error) {
	resource := new(types.SiteIpDomainList)

	// Array list - Go type                                                                                    SiteIpDomain
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteIpDomain(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSiteList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteList(params ...string) (*types.SiteList, error) {
	resource := new(types.SiteList)

	// Array list - Go type Site
	mpObject, err := utils.FindModelPluginObject(d.device, "Site", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSite(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSiteList converts gNMI to OAPI relative to a node in the tree.
func ToSiteList(ygotObjValue *reflect.Value, params ...string) (*types.SiteList, error) {
	resource := new(types.SiteList)

	// Array list - Go type                                                                                            Site
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSite(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSiteMonitoring converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteMonitoring(params ...string) (*types.SiteMonitoring, error) {
	resource := new(types.SiteMonitoring)

	reflectSiteMonitoring, err := utils.FindModelPluginObject(d.device, "SiteMonitoring", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteMonitoring(reflectSiteMonitoring, params...)
	return resource, err

}

// ToSiteMonitoring converts gNMI to OAPI relative to a node in the tree.
func ToSiteMonitoring(ygotObjValue *reflect.Value, params ...string) (*types.SiteMonitoring, error) {
	resource := new(types.SiteMonitoring)

	// Property: edge-cluster-prometheus-url string
	//encoding gNMI attribute to OAPI
	reflectEdgeClusterPrometheusUrl, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EdgeClusterPrometheusUrl")
	if err != nil {
		return nil, err
	}
	if reflectEdgeClusterPrometheusUrl != nil {
		attrEdgeClusterPrometheusUrl := reflectEdgeClusterPrometheusUrl.Interface().(string)
		resource.EdgeClusterPrometheusUrl = &attrEdgeClusterPrometheusUrl
	}

	// Property: edge-device SiteMonitoringEdgeDeviceList
	// Handle object
	reflectEdgeDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EdgeDevice")
	if err != nil {
		return nil, err
	}
	if reflectEdgeDevice != nil {
		attrEdgeDevice, err := ToSiteMonitoringEdgeDeviceList(reflectEdgeDevice, params...)
		if err != nil {
			return nil, err
		}
		resource.EdgeDevice = attrEdgeDevice
	}

	// Property: edge-monitoring-prometheus-url string
	//encoding gNMI attribute to OAPI
	reflectEdgeMonitoringPrometheusUrl, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EdgeMonitoringPrometheusUrl")
	if err != nil {
		return nil, err
	}
	if reflectEdgeMonitoringPrometheusUrl != nil {
		attrEdgeMonitoringPrometheusUrl := reflectEdgeMonitoringPrometheusUrl.Interface().(string)
		resource.EdgeMonitoringPrometheusUrl = &attrEdgeMonitoringPrometheusUrl
	}

	return resource, nil
}

// ToSiteMonitoringEdgeDevice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteMonitoringEdgeDevice(params ...string) (*types.SiteMonitoringEdgeDevice, error) {
	resource := new(types.SiteMonitoringEdgeDevice)

	reflectSiteMonitoringEdgeDevice, err := utils.FindModelPluginObject(d.device, "SiteMonitoringEdgeDevice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteMonitoringEdgeDevice(reflectSiteMonitoringEdgeDevice, params...)
	return resource, err

}

// ToSiteMonitoringEdgeDevice converts gNMI to OAPI relative to a node in the tree.
func ToSiteMonitoringEdgeDevice(ygotObjValue *reflect.Value, params ...string) (*types.SiteMonitoringEdgeDevice, error) {
	resource := new(types.SiteMonitoringEdgeDevice)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: edge-device-id ListKey
	//encoding gNMI attribute to OAPI
	reflectEdgeDeviceId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "EdgeDeviceId")
	if err != nil {
		return nil, err
	}
	if reflectEdgeDeviceId != nil {
		attrEdgeDeviceId := types.ListKey(reflectEdgeDeviceId.Interface().(string))
		resource.EdgeDeviceId = attrEdgeDeviceId
	}

	return resource, nil
}

// ToSiteMonitoringEdgeDeviceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteMonitoringEdgeDeviceList(params ...string) (*types.SiteMonitoringEdgeDeviceList, error) {
	resource := new(types.SiteMonitoringEdgeDeviceList)

	// Array list - Go type SiteMonitoringEdgeDevice
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteMonitoringEdgeDevice", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteMonitoringEdgeDevice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSiteMonitoringEdgeDeviceList converts gNMI to OAPI relative to a node in the tree.
func ToSiteMonitoringEdgeDeviceList(ygotObjValue *reflect.Value, params ...string) (*types.SiteMonitoringEdgeDeviceList, error) {
	resource := new(types.SiteMonitoringEdgeDeviceList)

	// Array list - Go type                                                                        SiteMonitoringEdgeDevice
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteMonitoringEdgeDevice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSiteSimCard converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteSimCard(params ...string) (*types.SiteSimCard, error) {
	resource := new(types.SiteSimCard)

	reflectSiteSimCard, err := utils.FindModelPluginObject(d.device, "SiteSimCard", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteSimCard(reflectSiteSimCard, params...)
	return resource, err

}

// ToSiteSimCard converts gNMI to OAPI relative to a node in the tree.
func ToSiteSimCard(ygotObjValue *reflect.Value, params ...string) (*types.SiteSimCard, error) {
	resource := new(types.SiteSimCard)

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: iccid string
	//encoding gNMI attribute to OAPI
	reflectIccid, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Iccid")
	if err != nil {
		return nil, err
	}
	if reflectIccid != nil {
		attrIccid := reflectIccid.Interface().(string)
		resource.Iccid = &attrIccid
	}

	// Property: imsi int64
	//encoding gNMI attribute to OAPI
	reflectImsi, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Imsi")
	if err != nil {
		return nil, err
	}
	if reflectImsi != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Imsi, err = utils.ToInt64Ptr(reflectImsi); err != nil {
			return nil, err
		}
	}

	// Property: sim-id ListKey
	//encoding gNMI attribute to OAPI
	reflectSimId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SimId")
	if err != nil {
		return nil, err
	}
	if reflectSimId != nil {
		attrSimId := types.ListKey(reflectSimId.Interface().(string))
		resource.SimId = attrSimId
	}

	return resource, nil
}

// ToSiteSimCardList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteSimCardList(params ...string) (*types.SiteSimCardList, error) {
	resource := new(types.SiteSimCardList)

	// Array list - Go type SiteSimCard
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteSimCard", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteSimCard(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSiteSimCardList converts gNMI to OAPI relative to a node in the tree.
func ToSiteSimCardList(ygotObjValue *reflect.Value, params ...string) (*types.SiteSimCardList, error) {
	resource := new(types.SiteSimCardList)

	// Array list - Go type                                                                                     SiteSimCard
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteSimCard(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSiteSlice converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteSlice(params ...string) (*types.SiteSlice, error) {
	resource := new(types.SiteSlice)

	reflectSiteSlice, err := utils.FindModelPluginObject(d.device, "SiteSlice", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteSlice(reflectSiteSlice, params...)
	return resource, err

}

// ToSiteSlice converts gNMI to OAPI relative to a node in the tree.
func ToSiteSlice(ygotObjValue *reflect.Value, params ...string) (*types.SiteSlice, error) {
	resource := new(types.SiteSlice)

	// Property: connectivity-service string
	// Enums handling
	reflectConnectivityService, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ConnectivityService")
	if err != nil {
		return nil, err
	}
	attrConnectivityService := reflectConnectivityService.Interface()
	_, yangDefConnectivityService, err := utils.ExtractGnmiEnumMap(ygotObjValue, "SiteSliceConnectivityService", attrConnectivityService)
	if err != nil {
		return nil, err
	}
	if yangDefConnectivityService != nil {
		resource.ConnectivityService = (*types.SiteSliceConnectivityService)(&yangDefConnectivityService.Name)
	}

	// Property: default-behavior string
	//encoding gNMI attribute to OAPI
	reflectDefaultBehavior, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DefaultBehavior")
	if err != nil {
		return nil, err
	}
	if reflectDefaultBehavior != nil {
		attrDefaultBehavior := reflectDefaultBehavior.Interface().(string)
		resource.DefaultBehavior = attrDefaultBehavior
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device-group SiteSliceDeviceGroupList
	// Handle object
	reflectDeviceGroup, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DeviceGroup")
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroup != nil {
		attrDeviceGroup, err := ToSiteSliceDeviceGroupList(reflectDeviceGroup, params...)
		if err != nil {
			return nil, err
		}
		resource.DeviceGroup = attrDeviceGroup
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: filter SiteSliceFilterList
	// Handle object
	reflectFilter, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Filter")
	if err != nil {
		return nil, err
	}
	if reflectFilter != nil {
		attrFilter, err := ToSiteSliceFilterList(reflectFilter, params...)
		if err != nil {
			return nil, err
		}
		resource.Filter = attrFilter
	}

	// Property: mbr SiteSliceMbr
	// Handle object
	reflectMbr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mbr")
	if err != nil {
		return nil, err
	}
	if reflectMbr != nil {
		attrMbr, err := ToSiteSliceMbr(reflectMbr, params...)
		if err != nil {
			return nil, err
		}
		resource.Mbr = attrMbr
	}

	// Property: priority-traffic-rule SiteSlicePriorityTrafficRuleList
	// Handle object
	reflectPriorityTrafficRule, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "PriorityTrafficRule")
	if err != nil {
		return nil, err
	}
	if reflectPriorityTrafficRule != nil {
		attrPriorityTrafficRule, err := ToSiteSlicePriorityTrafficRuleList(reflectPriorityTrafficRule, params...)
		if err != nil {
			return nil, err
		}
		resource.PriorityTrafficRule = attrPriorityTrafficRule
	}

	// Property: sd int32
	//encoding gNMI attribute to OAPI
	reflectSd, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Sd")
	if err != nil {
		return nil, err
	}
	if reflectSd != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sd, err = utils.ToInt32(reflectSd); err != nil {
			return nil, err
		}
	}

	// Property: slice-id ListKey
	//encoding gNMI attribute to OAPI
	reflectSliceId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SliceId")
	if err != nil {
		return nil, err
	}
	if reflectSliceId != nil {
		attrSliceId := types.ListKey(reflectSliceId.Interface().(string))
		resource.SliceId = attrSliceId
	}

	// Property: sst int
	//encoding gNMI attribute to OAPI
	reflectSst, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Sst")
	if err != nil {
		return nil, err
	}
	if reflectSst != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sst, err = utils.ToInt(reflectSst); err != nil {
			return nil, err
		}
	}

	// Property: upf string
	//encoding gNMI attribute to OAPI
	reflectUpf, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Upf")
	if err != nil {
		return nil, err
	}
	if reflectUpf != nil {
		attrUpf := reflectUpf.Interface().(string)
		resource.Upf = &attrUpf
	}

	return resource, nil
}

// ToSiteSliceConnectivityService converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteSliceConnectivityService(params ...string) (*types.SiteSliceConnectivityService, error) {
	resource := new(types.SiteSliceConnectivityService)

	reflectSiteSliceConnectivityService, err := utils.FindModelPluginObject(d.device, "SiteSliceConnectivityService", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteSliceConnectivityService(reflectSiteSliceConnectivityService, params...)
	return resource, err

}

// ToSiteSliceConnectivityService converts gNMI to OAPI relative to a node in the tree.
func ToSiteSliceConnectivityService(ygotObjValue *reflect.Value, params ...string) (*types.SiteSliceConnectivityService, error) {
	resource := new(types.SiteSliceConnectivityService)

	return resource, nil
}

// ToSiteSliceDeviceGroup converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteSliceDeviceGroup(params ...string) (*types.SiteSliceDeviceGroup, error) {
	resource := new(types.SiteSliceDeviceGroup)

	reflectSiteSliceDeviceGroup, err := utils.FindModelPluginObject(d.device, "SiteSliceDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteSliceDeviceGroup(reflectSiteSliceDeviceGroup, params...)
	return resource, err

}

// ToSiteSliceDeviceGroup converts gNMI to OAPI relative to a node in the tree.
func ToSiteSliceDeviceGroup(ygotObjValue *reflect.Value, params ...string) (*types.SiteSliceDeviceGroup, error) {
	resource := new(types.SiteSliceDeviceGroup)

	// Property: device-group ListKey
	//encoding gNMI attribute to OAPI
	reflectDeviceGroup, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DeviceGroup")
	if err != nil {
		return nil, err
	}
	if reflectDeviceGroup != nil {
		attrDeviceGroup := types.ListKey(reflectDeviceGroup.Interface().(string))
		resource.DeviceGroup = attrDeviceGroup
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enable")
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = &boolEnable
	}

	return resource, nil
}

// ToSiteSliceDeviceGroupList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteSliceDeviceGroupList(params ...string) (*types.SiteSliceDeviceGroupList, error) {
	resource := new(types.SiteSliceDeviceGroupList)

	// Array list - Go type SiteSliceDeviceGroup
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteSliceDeviceGroup", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteSliceDeviceGroup(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSiteSliceDeviceGroupList converts gNMI to OAPI relative to a node in the tree.
func ToSiteSliceDeviceGroupList(ygotObjValue *reflect.Value, params ...string) (*types.SiteSliceDeviceGroupList, error) {
	resource := new(types.SiteSliceDeviceGroupList)

	// Array list - Go type                                                                            SiteSliceDeviceGroup
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteSliceDeviceGroup(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSiteSliceFilter converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteSliceFilter(params ...string) (*types.SiteSliceFilter, error) {
	resource := new(types.SiteSliceFilter)

	reflectSiteSliceFilter, err := utils.FindModelPluginObject(d.device, "SiteSliceFilter", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteSliceFilter(reflectSiteSliceFilter, params...)
	return resource, err

}

// ToSiteSliceFilter converts gNMI to OAPI relative to a node in the tree.
func ToSiteSliceFilter(ygotObjValue *reflect.Value, params ...string) (*types.SiteSliceFilter, error) {
	resource := new(types.SiteSliceFilter)

	// Property: allow bool
	//encoding gNMI attribute to OAPI
	reflectAllow, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Allow")
	if err != nil {
		return nil, err
	}
	if reflectAllow != nil {
		boolAllow := reflectAllow.Interface().(bool)
		resource.Allow = &boolAllow
	}

	// Property: application ListKey
	//encoding gNMI attribute to OAPI
	reflectApplication, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Application")
	if err != nil {
		return nil, err
	}
	if reflectApplication != nil {
		attrApplication := types.ListKey(reflectApplication.Interface().(string))
		resource.Application = attrApplication
	}

	// Property: priority int
	//encoding gNMI attribute to OAPI
	reflectPriority, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Priority")
	if err != nil {
		return nil, err
	}
	if reflectPriority != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Priority, err = utils.ToIntPtr(reflectPriority); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToSiteSliceFilterList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteSliceFilterList(params ...string) (*types.SiteSliceFilterList, error) {
	resource := new(types.SiteSliceFilterList)

	// Array list - Go type SiteSliceFilter
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteSliceFilter", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteSliceFilter(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSiteSliceFilterList converts gNMI to OAPI relative to a node in the tree.
func ToSiteSliceFilterList(ygotObjValue *reflect.Value, params ...string) (*types.SiteSliceFilterList, error) {
	resource := new(types.SiteSliceFilterList)

	// Array list - Go type                                                                                 SiteSliceFilter
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteSliceFilter(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSiteSliceList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteSliceList(params ...string) (*types.SiteSliceList, error) {
	resource := new(types.SiteSliceList)

	// Array list - Go type SiteSlice
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteSlice", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteSlice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSiteSliceList converts gNMI to OAPI relative to a node in the tree.
func ToSiteSliceList(ygotObjValue *reflect.Value, params ...string) (*types.SiteSliceList, error) {
	resource := new(types.SiteSliceList)

	// Array list - Go type                                                                                       SiteSlice
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteSlice(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSiteSliceMbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteSliceMbr(params ...string) (*types.SiteSliceMbr, error) {
	resource := new(types.SiteSliceMbr)

	reflectSiteSliceMbr, err := utils.FindModelPluginObject(d.device, "SiteSliceMbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteSliceMbr(reflectSiteSliceMbr, params...)
	return resource, err

}

// ToSiteSliceMbr converts gNMI to OAPI relative to a node in the tree.
func ToSiteSliceMbr(ygotObjValue *reflect.Value, params ...string) (*types.SiteSliceMbr, error) {
	resource := new(types.SiteSliceMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: downlink-burst-size int32
	//encoding gNMI attribute to OAPI
	reflectDownlinkBurstSize, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DownlinkBurstSize")
	if err != nil {
		return nil, err
	}
	if reflectDownlinkBurstSize != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.DownlinkBurstSize, err = utils.ToInt32Ptr(reflectDownlinkBurstSize); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	// Property: uplink-burst-size int32
	//encoding gNMI attribute to OAPI
	reflectUplinkBurstSize, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "UplinkBurstSize")
	if err != nil {
		return nil, err
	}
	if reflectUplinkBurstSize != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.UplinkBurstSize, err = utils.ToInt32Ptr(reflectUplinkBurstSize); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToSiteSlicePriorityTrafficRule converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteSlicePriorityTrafficRule(params ...string) (*types.SiteSlicePriorityTrafficRule, error) {
	resource := new(types.SiteSlicePriorityTrafficRule)

	reflectSiteSlicePriorityTrafficRule, err := utils.FindModelPluginObject(d.device, "SiteSlicePriorityTrafficRule", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteSlicePriorityTrafficRule(reflectSiteSlicePriorityTrafficRule, params...)
	return resource, err

}

// ToSiteSlicePriorityTrafficRule converts gNMI to OAPI relative to a node in the tree.
func ToSiteSlicePriorityTrafficRule(ygotObjValue *reflect.Value, params ...string) (*types.SiteSlicePriorityTrafficRule, error) {
	resource := new(types.SiteSlicePriorityTrafficRule)

	// Property: application string
	//encoding gNMI attribute to OAPI
	reflectApplication, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Application")
	if err != nil {
		return nil, err
	}
	if reflectApplication != nil {
		attrApplication := reflectApplication.Interface().(string)
		resource.Application = attrApplication
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: device string
	//encoding gNMI attribute to OAPI
	reflectDevice, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Device")
	if err != nil {
		return nil, err
	}
	if reflectDevice != nil {
		attrDevice := reflectDevice.Interface().(string)
		resource.Device = attrDevice
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: endpoint string
	//encoding gNMI attribute to OAPI
	reflectEndpoint, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Endpoint")
	if err != nil {
		return nil, err
	}
	if reflectEndpoint != nil {
		attrEndpoint := reflectEndpoint.Interface().(string)
		resource.Endpoint = attrEndpoint
	}

	// Property: gbr SiteSlicePriorityTrafficRuleGbr
	// Handle object
	reflectGbr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Gbr")
	if err != nil {
		return nil, err
	}
	if reflectGbr != nil {
		attrGbr, err := ToSiteSlicePriorityTrafficRuleGbr(reflectGbr, params...)
		if err != nil {
			return nil, err
		}
		resource.Gbr = attrGbr
	}

	// Property: mbr SiteSlicePriorityTrafficRuleMbr
	// Handle object
	reflectMbr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mbr")
	if err != nil {
		return nil, err
	}
	if reflectMbr != nil {
		attrMbr, err := ToSiteSlicePriorityTrafficRuleMbr(reflectMbr, params...)
		if err != nil {
			return nil, err
		}
		resource.Mbr = attrMbr
	}

	// Property: priority-traffic-rule-id ListKey
	//encoding gNMI attribute to OAPI
	reflectPriorityTrafficRuleId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "PriorityTrafficRuleId")
	if err != nil {
		return nil, err
	}
	if reflectPriorityTrafficRuleId != nil {
		attrPriorityTrafficRuleId := types.ListKey(reflectPriorityTrafficRuleId.Interface().(string))
		resource.PriorityTrafficRuleId = attrPriorityTrafficRuleId
	}

	// Property: traffic-class string
	//encoding gNMI attribute to OAPI
	reflectTrafficClass, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "TrafficClass")
	if err != nil {
		return nil, err
	}
	if reflectTrafficClass != nil {
		attrTrafficClass := reflectTrafficClass.Interface().(string)
		resource.TrafficClass = &attrTrafficClass
	}

	return resource, nil
}

// ToSiteSlicePriorityTrafficRuleGbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteSlicePriorityTrafficRuleGbr(params ...string) (*types.SiteSlicePriorityTrafficRuleGbr, error) {
	resource := new(types.SiteSlicePriorityTrafficRuleGbr)

	reflectSiteSlicePriorityTrafficRuleGbr, err := utils.FindModelPluginObject(d.device, "SiteSlicePriorityTrafficRuleGbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteSlicePriorityTrafficRuleGbr(reflectSiteSlicePriorityTrafficRuleGbr, params...)
	return resource, err

}

// ToSiteSlicePriorityTrafficRuleGbr converts gNMI to OAPI relative to a node in the tree.
func ToSiteSlicePriorityTrafficRuleGbr(ygotObjValue *reflect.Value, params ...string) (*types.SiteSlicePriorityTrafficRuleGbr, error) {
	resource := new(types.SiteSlicePriorityTrafficRuleGbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToSiteSlicePriorityTrafficRuleList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteSlicePriorityTrafficRuleList(params ...string) (*types.SiteSlicePriorityTrafficRuleList, error) {
	resource := new(types.SiteSlicePriorityTrafficRuleList)

	// Array list - Go type SiteSlicePriorityTrafficRule
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteSlicePriorityTrafficRule", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteSlicePriorityTrafficRule(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSiteSlicePriorityTrafficRuleList converts gNMI to OAPI relative to a node in the tree.
func ToSiteSlicePriorityTrafficRuleList(ygotObjValue *reflect.Value, params ...string) (*types.SiteSlicePriorityTrafficRuleList, error) {
	resource := new(types.SiteSlicePriorityTrafficRuleList)

	// Array list - Go type                                                                    SiteSlicePriorityTrafficRule
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteSlicePriorityTrafficRule(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSiteSlicePriorityTrafficRuleMbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteSlicePriorityTrafficRuleMbr(params ...string) (*types.SiteSlicePriorityTrafficRuleMbr, error) {
	resource := new(types.SiteSlicePriorityTrafficRuleMbr)

	reflectSiteSlicePriorityTrafficRuleMbr, err := utils.FindModelPluginObject(d.device, "SiteSlicePriorityTrafficRuleMbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteSlicePriorityTrafficRuleMbr(reflectSiteSlicePriorityTrafficRuleMbr, params...)
	return resource, err

}

// ToSiteSlicePriorityTrafficRuleMbr converts gNMI to OAPI relative to a node in the tree.
func ToSiteSlicePriorityTrafficRuleMbr(ygotObjValue *reflect.Value, params ...string) (*types.SiteSlicePriorityTrafficRuleMbr, error) {
	resource := new(types.SiteSlicePriorityTrafficRuleMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToSiteSmallCell converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteSmallCell(params ...string) (*types.SiteSmallCell, error) {
	resource := new(types.SiteSmallCell)

	reflectSiteSmallCell, err := utils.FindModelPluginObject(d.device, "SiteSmallCell", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteSmallCell(reflectSiteSmallCell, params...)
	return resource, err

}

// ToSiteSmallCell converts gNMI to OAPI relative to a node in the tree.
func ToSiteSmallCell(ygotObjValue *reflect.Value, params ...string) (*types.SiteSmallCell, error) {
	resource := new(types.SiteSmallCell)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Address")
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := reflectAddress.Interface().(string)
		resource.Address = &attrAddress
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: enable bool
	//encoding gNMI attribute to OAPI
	reflectEnable, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Enable")
	if err != nil {
		return nil, err
	}
	if reflectEnable != nil {
		boolEnable := reflectEnable.Interface().(bool)
		resource.Enable = &boolEnable
	}

	// Property: small-cell-id ListKey
	//encoding gNMI attribute to OAPI
	reflectSmallCellId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "SmallCellId")
	if err != nil {
		return nil, err
	}
	if reflectSmallCellId != nil {
		attrSmallCellId := types.ListKey(reflectSmallCellId.Interface().(string))
		resource.SmallCellId = attrSmallCellId
	}

	// Property: tac string
	//encoding gNMI attribute to OAPI
	reflectTac, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Tac")
	if err != nil {
		return nil, err
	}
	if reflectTac != nil {
		attrTac := reflectTac.Interface().(string)
		resource.Tac = attrTac
	}

	return resource, nil
}

// ToSiteSmallCellList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteSmallCellList(params ...string) (*types.SiteSmallCellList, error) {
	resource := new(types.SiteSmallCellList)

	// Array list - Go type SiteSmallCell
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteSmallCell", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteSmallCell(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSiteSmallCellList converts gNMI to OAPI relative to a node in the tree.
func ToSiteSmallCellList(ygotObjValue *reflect.Value, params ...string) (*types.SiteSmallCellList, error) {
	resource := new(types.SiteSmallCellList)

	// Array list - Go type                                                                                   SiteSmallCell
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteSmallCell(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToSiteUpf converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteUpf(params ...string) (*types.SiteUpf, error) {
	resource := new(types.SiteUpf)

	reflectSiteUpf, err := utils.FindModelPluginObject(d.device, "SiteUpf", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToSiteUpf(reflectSiteUpf, params...)
	return resource, err

}

// ToSiteUpf converts gNMI to OAPI relative to a node in the tree.
func ToSiteUpf(ygotObjValue *reflect.Value, params ...string) (*types.SiteUpf, error) {
	resource := new(types.SiteUpf)

	// Property: address string
	//encoding gNMI attribute to OAPI
	reflectAddress, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Address")
	if err != nil {
		return nil, err
	}
	if reflectAddress != nil {
		attrAddress := reflectAddress.Interface().(string)
		resource.Address = attrAddress
	}

	// Property: config-endpoint string
	//encoding gNMI attribute to OAPI
	reflectConfigEndpoint, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "ConfigEndpoint")
	if err != nil {
		return nil, err
	}
	if reflectConfigEndpoint != nil {
		attrConfigEndpoint := reflectConfigEndpoint.Interface().(string)
		resource.ConfigEndpoint = &attrConfigEndpoint
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: port int
	//encoding gNMI attribute to OAPI
	reflectPort, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Port")
	if err != nil {
		return nil, err
	}
	if reflectPort != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Port, err = utils.ToInt(reflectPort); err != nil {
			return nil, err
		}
	}

	// Property: upf-id ListKey
	//encoding gNMI attribute to OAPI
	reflectUpfId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "UpfId")
	if err != nil {
		return nil, err
	}
	if reflectUpfId != nil {
		attrUpfId := types.ListKey(reflectUpfId.Interface().(string))
		resource.UpfId = attrUpfId
	}

	return resource, nil
}

// ToSiteUpfList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToSiteUpfList(params ...string) (*types.SiteUpfList, error) {
	resource := new(types.SiteUpfList)

	// Array list - Go type SiteUpf
	mpObject, err := utils.FindModelPluginObject(d.device, "SiteUpf", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteUpf(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToSiteUpfList converts gNMI to OAPI relative to a node in the tree.
func ToSiteUpfList(ygotObjValue *reflect.Value, params ...string) (*types.SiteUpfList, error) {
	resource := new(types.SiteUpfList)

	// Array list - Go type                                                                                         SiteUpf
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToSiteUpf(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToTemplate converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTemplate(params ...string) (*types.Template, error) {
	resource := new(types.Template)

	reflectTemplate, err := utils.FindModelPluginObject(d.device, "Template", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToTemplate(reflectTemplate, params...)
	return resource, err

}

// ToTemplate converts gNMI to OAPI relative to a node in the tree.
func ToTemplate(ygotObjValue *reflect.Value, params ...string) (*types.Template, error) {
	resource := new(types.Template)

	// Property: default-behavior string
	//encoding gNMI attribute to OAPI
	reflectDefaultBehavior, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DefaultBehavior")
	if err != nil {
		return nil, err
	}
	if reflectDefaultBehavior != nil {
		attrDefaultBehavior := reflectDefaultBehavior.Interface().(string)
		resource.DefaultBehavior = attrDefaultBehavior
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: mbr TemplateMbr
	// Handle object
	reflectMbr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Mbr")
	if err != nil {
		return nil, err
	}
	if reflectMbr != nil {
		attrMbr, err := ToTemplateMbr(reflectMbr, params...)
		if err != nil {
			return nil, err
		}
		resource.Mbr = attrMbr
	}

	// Property: sd int32
	//encoding gNMI attribute to OAPI
	reflectSd, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Sd")
	if err != nil {
		return nil, err
	}
	if reflectSd != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sd, err = utils.ToInt32Ptr(reflectSd); err != nil {
			return nil, err
		}
	}

	// Property: sst int
	//encoding gNMI attribute to OAPI
	reflectSst, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Sst")
	if err != nil {
		return nil, err
	}
	if reflectSst != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Sst, err = utils.ToIntPtr(reflectSst); err != nil {
			return nil, err
		}
	}

	// Property: template-id ListKey
	//encoding gNMI attribute to OAPI
	reflectTemplateId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "TemplateId")
	if err != nil {
		return nil, err
	}
	if reflectTemplateId != nil {
		attrTemplateId := types.ListKey(reflectTemplateId.Interface().(string))
		resource.TemplateId = attrTemplateId
	}

	return resource, nil
}

// ToTemplateList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTemplateList(params ...string) (*types.TemplateList, error) {
	resource := new(types.TemplateList)

	// Array list - Go type Template
	mpObject, err := utils.FindModelPluginObject(d.device, "Template", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToTemplate(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToTemplateList converts gNMI to OAPI relative to a node in the tree.
func ToTemplateList(ygotObjValue *reflect.Value, params ...string) (*types.TemplateList, error) {
	resource := new(types.TemplateList)

	// Array list - Go type                                                                                        Template
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToTemplate(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToTemplateMbr converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTemplateMbr(params ...string) (*types.TemplateMbr, error) {
	resource := new(types.TemplateMbr)

	reflectTemplateMbr, err := utils.FindModelPluginObject(d.device, "TemplateMbr", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToTemplateMbr(reflectTemplateMbr, params...)
	return resource, err

}

// ToTemplateMbr converts gNMI to OAPI relative to a node in the tree.
func ToTemplateMbr(ygotObjValue *reflect.Value, params ...string) (*types.TemplateMbr, error) {
	resource := new(types.TemplateMbr)

	// Property: downlink int64
	//encoding gNMI attribute to OAPI
	reflectDownlink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Downlink")
	if err != nil {
		return nil, err
	}
	if reflectDownlink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Downlink, err = utils.ToInt64Ptr(reflectDownlink); err != nil {
			return nil, err
		}
	}

	// Property: downlink-burst-size int32
	//encoding gNMI attribute to OAPI
	reflectDownlinkBurstSize, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DownlinkBurstSize")
	if err != nil {
		return nil, err
	}
	if reflectDownlinkBurstSize != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.DownlinkBurstSize, err = utils.ToInt32Ptr(reflectDownlinkBurstSize); err != nil {
			return nil, err
		}
	}

	// Property: uplink int64
	//encoding gNMI attribute to OAPI
	reflectUplink, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Uplink")
	if err != nil {
		return nil, err
	}
	if reflectUplink != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Uplink, err = utils.ToInt64Ptr(reflectUplink); err != nil {
			return nil, err
		}
	}

	// Property: uplink-burst-size int32
	//encoding gNMI attribute to OAPI
	reflectUplinkBurstSize, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "UplinkBurstSize")
	if err != nil {
		return nil, err
	}
	if reflectUplinkBurstSize != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.UplinkBurstSize, err = utils.ToInt32Ptr(reflectUplinkBurstSize); err != nil {
			return nil, err
		}
	}

	return resource, nil
}

// ToTrafficClass converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTrafficClass(params ...string) (*types.TrafficClass, error) {
	resource := new(types.TrafficClass)

	reflectTrafficClass, err := utils.FindModelPluginObject(d.device, "TrafficClass", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToTrafficClass(reflectTrafficClass, params...)
	return resource, err

}

// ToTrafficClass converts gNMI to OAPI relative to a node in the tree.
func ToTrafficClass(ygotObjValue *reflect.Value, params ...string) (*types.TrafficClass, error) {
	resource := new(types.TrafficClass)

	// Property: arp int
	//encoding gNMI attribute to OAPI
	reflectArp, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Arp")
	if err != nil {
		return nil, err
	}
	if reflectArp != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Arp, err = utils.ToIntPtr(reflectArp); err != nil {
			return nil, err
		}
	}

	// Property: description string
	//encoding gNMI attribute to OAPI
	reflectDescription, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Description")
	if err != nil {
		return nil, err
	}
	if reflectDescription != nil {
		attrDescription := reflectDescription.Interface().(string)
		resource.Description = &attrDescription
	}

	// Property: display-name string
	//encoding gNMI attribute to OAPI
	reflectDisplayName, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "DisplayName")
	if err != nil {
		return nil, err
	}
	if reflectDisplayName != nil {
		attrDisplayName := reflectDisplayName.Interface().(string)
		resource.DisplayName = &attrDisplayName
	}

	// Property: pdb int
	//encoding gNMI attribute to OAPI
	reflectPdb, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Pdb")
	if err != nil {
		return nil, err
	}
	if reflectPdb != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Pdb, err = utils.ToIntPtr(reflectPdb); err != nil {
			return nil, err
		}
	}

	// Property: pelr int
	//encoding gNMI attribute to OAPI
	reflectPelr, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Pelr")
	if err != nil {
		return nil, err
	}
	if reflectPelr != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Pelr, err = utils.ToIntPtr(reflectPelr); err != nil {
			return nil, err
		}
	}

	// Property: qci int
	//encoding gNMI attribute to OAPI
	reflectQci, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "Qci")
	if err != nil {
		return nil, err
	}
	if reflectQci != nil {
		//OpenAPI does not have unsigned numbers.
		if resource.Qci, err = utils.ToIntPtr(reflectQci); err != nil {
			return nil, err
		}
	}

	// Property: traffic-class-id ListKey
	//encoding gNMI attribute to OAPI
	reflectTrafficClassId, err := utils.FindModelPluginObject(ygotObjValue.Interface(), "TrafficClassId")
	if err != nil {
		return nil, err
	}
	if reflectTrafficClassId != nil {
		attrTrafficClassId := types.ListKey(reflectTrafficClassId.Interface().(string))
		resource.TrafficClassId = attrTrafficClassId
	}

	return resource, nil
}

// ToTrafficClassList converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToTrafficClassList(params ...string) (*types.TrafficClassList, error) {
	resource := new(types.TrafficClassList)

	// Array list - Go type TrafficClass
	mpObject, err := utils.FindModelPluginObject(d.device, "TrafficClass", params...)
	if err != nil {
		return nil, err
	}
	for i := mpObject.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToTrafficClass(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}
	return resource, nil

}

// ToTrafficClassList converts gNMI to OAPI relative to a node in the tree.
func ToTrafficClassList(ygotObjValue *reflect.Value, params ...string) (*types.TrafficClassList, error) {
	resource := new(types.TrafficClassList)

	// Array list - Go type                                                                                    TrafficClass
	for i := ygotObjValue.MapRange(); i.Next(); {
		iv := i.Value().Elem()
		r, err := ToTrafficClass(&iv, params...)
		if err != nil {
			return nil, err
		}
		*resource = append(*resource, *r)
	}

	return resource, nil
}

// ToEnterpriseId converts gNMI to OAPI from the top level device.
func (d *ModelPluginDevice) ToEnterpriseId(params ...string) (*types.EnterpriseId, error) {
	resource := new(types.EnterpriseId)

	reflectEnterpriseId, err := utils.FindModelPluginObject(d.device, "EnterpriseId", params...)
	if err != nil {
		return nil, err
	}
	resource, err = ToEnterpriseId(reflectEnterpriseId, params...)
	return resource, err

}

// ToEnterpriseId converts gNMI to OAPI relative to a node in the tree.
func ToEnterpriseId(ygotObjValue *reflect.Value, params ...string) (*types.EnterpriseId, error) {
	resource := new(types.EnterpriseId)

	return resource, nil
}

//Ignoring RequestBodyApplication

//Ignoring RequestBodyApplicationEndpoint

//Ignoring RequestBodyApplicationEndpointMbr

//Ignoring RequestBodySite

//Ignoring RequestBodySiteConnectivityService

//Ignoring RequestBodySiteConnectivityServiceCore4g

//Ignoring RequestBodySiteConnectivityServiceCore5g

//Ignoring RequestBodySiteDevice

//Ignoring RequestBodySiteDeviceGroup

//Ignoring RequestBodySiteDeviceGroupDevice

//Ignoring RequestBodySiteDeviceGroupMbr

//Ignoring RequestBodySiteImsiDefinition

//Ignoring RequestBodySiteIpDomain

//Ignoring RequestBodySiteMonitoring

//Ignoring RequestBodySiteMonitoringEdgeDevice

//Ignoring RequestBodySiteSimCard

//Ignoring RequestBodySiteSlice

//Ignoring RequestBodySiteSliceDeviceGroup

//Ignoring RequestBodySiteSliceFilter

//Ignoring RequestBodySiteSliceMbr

//Ignoring RequestBodySiteSlicePriorityTrafficRule

//Ignoring RequestBodySiteSmallCell

//Ignoring RequestBodySiteUpf

//Ignoring RequestBodyTemplate

//Ignoring RequestBodyTemplateMbr

//Ignoring RequestBodyTrafficClass

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating param-types
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating request-bodies

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating additional-properties
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating additional-properties
