// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"reflect"

	"github.com/labstack/echo/v4"
	externalRef0 "github.com/onosproject/aether-models/models/aether-2.1.x/api"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_2_1_0/types"
	"github.com/onosproject/aether-roc-api/pkg/southbound"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	"github.com/onosproject/onos-lib-go/pkg/logging"
	"github.com/openconfig/gnmi/proto/gnmi"
)

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Defines values for SiteSliceConnectivityService.
const (
	SiteSliceConnectivityServiceG externalRef1.SiteSliceConnectivityService = "4g"

	SiteSliceConnectivityServiceG1 externalRef1.SiteSliceConnectivityService = "5g"
)

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

//Ignoring AdditionalPropertiesUnchTarget

//Ignoring AdditionalPropertyEnterpriseId

//Ignoring AdditionalPropertyUnchanged

// GnmiDeleteApplication deletes an instance of Application.
func (i *ServerImpl) GnmiDeleteApplication(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetApplication(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetApplication returns an instance of Application.
func (i *ServerImpl) GnmiGetApplication(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.Application, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToApplication(args...)
}

// GnmiPostApplication adds an instance of Application.
func (i *ServerImpl) GnmiPostApplication(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.Application)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Application %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApplication(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.Application to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteApplicationEndpoint deletes an instance of Application_Endpoint.
func (i *ServerImpl) GnmiDeleteApplicationEndpoint(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetApplicationEndpoint(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetApplicationEndpoint returns an instance of Application_Endpoint.
func (i *ServerImpl) GnmiGetApplicationEndpoint(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.ApplicationEndpoint, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToApplicationEndpoint(args...)
}

// GnmiPostApplicationEndpoint adds an instance of Application_Endpoint.
func (i *ServerImpl) GnmiPostApplicationEndpoint(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.ApplicationEndpoint)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Application_Endpoint %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApplicationEndpoint(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.ApplicationEndpoint to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteApplicationEndpointList deletes an instance of Application_Endpoint_List.
func (i *ServerImpl) GnmiDeleteApplicationEndpointList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetApplicationEndpointList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetApplicationEndpointList returns an instance of Application_Endpoint_List.
func (i *ServerImpl) GnmiGetApplicationEndpointList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.ApplicationEndpointList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToApplicationEndpointList(args...)
}

// GnmiPostApplicationEndpointList adds an instance of Application_Endpoint_List.
func (i *ServerImpl) GnmiPostApplicationEndpointList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.ApplicationEndpointList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Application_Endpoint_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApplicationEndpointList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.ApplicationEndpointList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteApplicationEndpointMbr deletes an instance of Application_Endpoint_Mbr.
func (i *ServerImpl) GnmiDeleteApplicationEndpointMbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetApplicationEndpointMbr(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetApplicationEndpointMbr returns an instance of Application_Endpoint_Mbr.
func (i *ServerImpl) GnmiGetApplicationEndpointMbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.ApplicationEndpointMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToApplicationEndpointMbr(args...)
}

// GnmiPostApplicationEndpointMbr adds an instance of Application_Endpoint_Mbr.
func (i *ServerImpl) GnmiPostApplicationEndpointMbr(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.ApplicationEndpointMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Application_Endpoint_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApplicationEndpointMbr(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.ApplicationEndpointMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteApplicationList deletes an instance of Application_List.
func (i *ServerImpl) GnmiDeleteApplicationList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetApplicationList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetApplicationList returns an instance of Application_List.
func (i *ServerImpl) GnmiGetApplicationList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.ApplicationList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToApplicationList(args...)
}

// GnmiPostApplicationList adds an instance of Application_List.
func (i *ServerImpl) GnmiPostApplicationList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.ApplicationList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Application_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApplicationList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.ApplicationList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSite deletes an instance of Site.
func (i *ServerImpl) GnmiDeleteSite(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSite(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSite returns an instance of Site.
func (i *ServerImpl) GnmiGetSite(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.Site, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSite(args...)
}

// GnmiPostSite adds an instance of Site.
func (i *ServerImpl) GnmiPostSite(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.Site)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSite(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.Site to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteConnectivityService deletes an instance of Site_Connectivity-service.
func (i *ServerImpl) GnmiDeleteSiteConnectivityService(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteConnectivityService(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteConnectivityService returns an instance of Site_Connectivity-service.
func (i *ServerImpl) GnmiGetSiteConnectivityService(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteConnectivityService, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteConnectivityService(args...)
}

// GnmiPostSiteConnectivityService adds an instance of Site_Connectivity-service.
func (i *ServerImpl) GnmiPostSiteConnectivityService(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteConnectivityService)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Connectivity-service %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteConnectivityService(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteConnectivityService to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteConnectivityServiceCore4g deletes an instance of Site_Connectivity-service_Core-4g.
func (i *ServerImpl) GnmiDeleteSiteConnectivityServiceCore4g(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteConnectivityServiceCore4g(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteConnectivityServiceCore4g returns an instance of Site_Connectivity-service_Core-4g.
func (i *ServerImpl) GnmiGetSiteConnectivityServiceCore4g(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteConnectivityServiceCore4g, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteConnectivityServiceCore4g(args...)
}

// GnmiPostSiteConnectivityServiceCore4g adds an instance of Site_Connectivity-service_Core-4g.
func (i *ServerImpl) GnmiPostSiteConnectivityServiceCore4g(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteConnectivityServiceCore4g)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Connectivity-service_Core-4g %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteConnectivityServiceCore4g(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteConnectivityServiceCore4g to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteConnectivityServiceCore5g deletes an instance of Site_Connectivity-service_Core-5g.
func (i *ServerImpl) GnmiDeleteSiteConnectivityServiceCore5g(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteConnectivityServiceCore5g(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteConnectivityServiceCore5g returns an instance of Site_Connectivity-service_Core-5g.
func (i *ServerImpl) GnmiGetSiteConnectivityServiceCore5g(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteConnectivityServiceCore5g, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteConnectivityServiceCore5g(args...)
}

// GnmiPostSiteConnectivityServiceCore5g adds an instance of Site_Connectivity-service_Core-5g.
func (i *ServerImpl) GnmiPostSiteConnectivityServiceCore5g(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteConnectivityServiceCore5g)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Connectivity-service_Core-5g %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteConnectivityServiceCore5g(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteConnectivityServiceCore5g to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteDevice deletes an instance of Site_Device.
func (i *ServerImpl) GnmiDeleteSiteDevice(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteDevice(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteDevice returns an instance of Site_Device.
func (i *ServerImpl) GnmiGetSiteDevice(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteDevice, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteDevice(args...)
}

// GnmiPostSiteDevice adds an instance of Site_Device.
func (i *ServerImpl) GnmiPostSiteDevice(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteDevice)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Device %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteDevice(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteDevice to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteDeviceGroup deletes an instance of Site_Device-group.
func (i *ServerImpl) GnmiDeleteSiteDeviceGroup(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteDeviceGroup(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteDeviceGroup returns an instance of Site_Device-group.
func (i *ServerImpl) GnmiGetSiteDeviceGroup(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteDeviceGroup, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteDeviceGroup(args...)
}

// GnmiPostSiteDeviceGroup adds an instance of Site_Device-group.
func (i *ServerImpl) GnmiPostSiteDeviceGroup(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteDeviceGroup)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Device-group %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteDeviceGroup(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteDeviceGroup to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteDeviceGroupDevice deletes an instance of Site_Device-group_Device.
func (i *ServerImpl) GnmiDeleteSiteDeviceGroupDevice(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteDeviceGroupDevice(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteDeviceGroupDevice returns an instance of Site_Device-group_Device.
func (i *ServerImpl) GnmiGetSiteDeviceGroupDevice(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteDeviceGroupDevice, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteDeviceGroupDevice(args...)
}

// GnmiPostSiteDeviceGroupDevice adds an instance of Site_Device-group_Device.
func (i *ServerImpl) GnmiPostSiteDeviceGroupDevice(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteDeviceGroupDevice)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Device-group_Device %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteDeviceGroupDevice(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteDeviceGroupDevice to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteDeviceGroupDeviceList deletes an instance of Site_Device-group_Device_List.
func (i *ServerImpl) GnmiDeleteSiteDeviceGroupDeviceList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteDeviceGroupDeviceList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteDeviceGroupDeviceList returns an instance of Site_Device-group_Device_List.
func (i *ServerImpl) GnmiGetSiteDeviceGroupDeviceList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteDeviceGroupDeviceList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteDeviceGroupDeviceList(args...)
}

// GnmiPostSiteDeviceGroupDeviceList adds an instance of Site_Device-group_Device_List.
func (i *ServerImpl) GnmiPostSiteDeviceGroupDeviceList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteDeviceGroupDeviceList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Device-group_Device_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteDeviceGroupDeviceList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteDeviceGroupDeviceList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteDeviceGroupList deletes an instance of Site_Device-group_List.
func (i *ServerImpl) GnmiDeleteSiteDeviceGroupList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteDeviceGroupList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteDeviceGroupList returns an instance of Site_Device-group_List.
func (i *ServerImpl) GnmiGetSiteDeviceGroupList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteDeviceGroupList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteDeviceGroupList(args...)
}

// GnmiPostSiteDeviceGroupList adds an instance of Site_Device-group_List.
func (i *ServerImpl) GnmiPostSiteDeviceGroupList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteDeviceGroupList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Device-group_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteDeviceGroupList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteDeviceGroupList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteDeviceGroupMbr deletes an instance of Site_Device-group_Mbr.
func (i *ServerImpl) GnmiDeleteSiteDeviceGroupMbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteDeviceGroupMbr(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteDeviceGroupMbr returns an instance of Site_Device-group_Mbr.
func (i *ServerImpl) GnmiGetSiteDeviceGroupMbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteDeviceGroupMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteDeviceGroupMbr(args...)
}

// GnmiPostSiteDeviceGroupMbr adds an instance of Site_Device-group_Mbr.
func (i *ServerImpl) GnmiPostSiteDeviceGroupMbr(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteDeviceGroupMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Device-group_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteDeviceGroupMbr(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteDeviceGroupMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteDeviceList deletes an instance of Site_Device_List.
func (i *ServerImpl) GnmiDeleteSiteDeviceList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteDeviceList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteDeviceList returns an instance of Site_Device_List.
func (i *ServerImpl) GnmiGetSiteDeviceList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteDeviceList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteDeviceList(args...)
}

// GnmiPostSiteDeviceList adds an instance of Site_Device_List.
func (i *ServerImpl) GnmiPostSiteDeviceList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteDeviceList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Device_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteDeviceList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteDeviceList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteDeviceState deletes an instance of Site_Device_State.
func (i *ServerImpl) GnmiDeleteSiteDeviceState(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteDeviceState(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteDeviceState returns an instance of Site_Device_State.
func (i *ServerImpl) GnmiGetSiteDeviceState(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteDeviceState, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteDeviceState(args...)
}

// GnmiPostSiteDeviceState adds an instance of Site_Device_State.
func (i *ServerImpl) GnmiPostSiteDeviceState(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteDeviceState)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Device_State %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteDeviceState(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteDeviceState to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteImsiDefinition deletes an instance of Site_Imsi-definition.
func (i *ServerImpl) GnmiDeleteSiteImsiDefinition(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteImsiDefinition(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteImsiDefinition returns an instance of Site_Imsi-definition.
func (i *ServerImpl) GnmiGetSiteImsiDefinition(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteImsiDefinition, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteImsiDefinition(args...)
}

// GnmiPostSiteImsiDefinition adds an instance of Site_Imsi-definition.
func (i *ServerImpl) GnmiPostSiteImsiDefinition(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteImsiDefinition)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Imsi-definition %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteImsiDefinition(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteImsiDefinition to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteIpDomain deletes an instance of Site_Ip-domain.
func (i *ServerImpl) GnmiDeleteSiteIpDomain(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteIpDomain(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteIpDomain returns an instance of Site_Ip-domain.
func (i *ServerImpl) GnmiGetSiteIpDomain(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteIpDomain, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteIpDomain(args...)
}

// GnmiPostSiteIpDomain adds an instance of Site_Ip-domain.
func (i *ServerImpl) GnmiPostSiteIpDomain(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteIpDomain)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Ip-domain %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteIpDomain(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteIpDomain to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteIpDomainList deletes an instance of Site_Ip-domain_List.
func (i *ServerImpl) GnmiDeleteSiteIpDomainList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteIpDomainList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteIpDomainList returns an instance of Site_Ip-domain_List.
func (i *ServerImpl) GnmiGetSiteIpDomainList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteIpDomainList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteIpDomainList(args...)
}

// GnmiPostSiteIpDomainList adds an instance of Site_Ip-domain_List.
func (i *ServerImpl) GnmiPostSiteIpDomainList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteIpDomainList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Ip-domain_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteIpDomainList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteIpDomainList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteList deletes an instance of Site_List.
func (i *ServerImpl) GnmiDeleteSiteList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteList returns an instance of Site_List.
func (i *ServerImpl) GnmiGetSiteList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteList(args...)
}

// GnmiPostSiteList adds an instance of Site_List.
func (i *ServerImpl) GnmiPostSiteList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteMonitoring deletes an instance of Site_Monitoring.
func (i *ServerImpl) GnmiDeleteSiteMonitoring(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteMonitoring(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteMonitoring returns an instance of Site_Monitoring.
func (i *ServerImpl) GnmiGetSiteMonitoring(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteMonitoring, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteMonitoring(args...)
}

// GnmiPostSiteMonitoring adds an instance of Site_Monitoring.
func (i *ServerImpl) GnmiPostSiteMonitoring(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteMonitoring)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Monitoring %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteMonitoring(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteMonitoring to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteMonitoringEdgeDevice deletes an instance of Site_Monitoring_Edge-device.
func (i *ServerImpl) GnmiDeleteSiteMonitoringEdgeDevice(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteMonitoringEdgeDevice(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteMonitoringEdgeDevice returns an instance of Site_Monitoring_Edge-device.
func (i *ServerImpl) GnmiGetSiteMonitoringEdgeDevice(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteMonitoringEdgeDevice, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteMonitoringEdgeDevice(args...)
}

// GnmiPostSiteMonitoringEdgeDevice adds an instance of Site_Monitoring_Edge-device.
func (i *ServerImpl) GnmiPostSiteMonitoringEdgeDevice(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteMonitoringEdgeDevice)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Monitoring_Edge-device %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteMonitoringEdgeDevice(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteMonitoringEdgeDevice to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteMonitoringEdgeDeviceList deletes an instance of Site_Monitoring_Edge-device_List.
func (i *ServerImpl) GnmiDeleteSiteMonitoringEdgeDeviceList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteMonitoringEdgeDeviceList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteMonitoringEdgeDeviceList returns an instance of Site_Monitoring_Edge-device_List.
func (i *ServerImpl) GnmiGetSiteMonitoringEdgeDeviceList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteMonitoringEdgeDeviceList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteMonitoringEdgeDeviceList(args...)
}

// GnmiPostSiteMonitoringEdgeDeviceList adds an instance of Site_Monitoring_Edge-device_List.
func (i *ServerImpl) GnmiPostSiteMonitoringEdgeDeviceList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteMonitoringEdgeDeviceList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Monitoring_Edge-device_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteMonitoringEdgeDeviceList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteMonitoringEdgeDeviceList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteSimCard deletes an instance of Site_Sim-card.
func (i *ServerImpl) GnmiDeleteSiteSimCard(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteSimCard(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteSimCard returns an instance of Site_Sim-card.
func (i *ServerImpl) GnmiGetSiteSimCard(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSimCard, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteSimCard(args...)
}

// GnmiPostSiteSimCard adds an instance of Site_Sim-card.
func (i *ServerImpl) GnmiPostSiteSimCard(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSimCard)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Sim-card %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSimCard(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSimCard to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteSimCardList deletes an instance of Site_Sim-card_List.
func (i *ServerImpl) GnmiDeleteSiteSimCardList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteSimCardList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteSimCardList returns an instance of Site_Sim-card_List.
func (i *ServerImpl) GnmiGetSiteSimCardList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSimCardList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteSimCardList(args...)
}

// GnmiPostSiteSimCardList adds an instance of Site_Sim-card_List.
func (i *ServerImpl) GnmiPostSiteSimCardList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSimCardList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Sim-card_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSimCardList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSimCardList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteSlice deletes an instance of Site_Slice.
func (i *ServerImpl) GnmiDeleteSiteSlice(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteSlice(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteSlice returns an instance of Site_Slice.
func (i *ServerImpl) GnmiGetSiteSlice(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSlice, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteSlice(args...)
}

// GnmiPostSiteSlice adds an instance of Site_Slice.
func (i *ServerImpl) GnmiPostSiteSlice(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSlice)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSlice(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSlice to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteSliceConnectivityService deletes an instance of SiteSlice.ConnectivityService.
func (i *ServerImpl) GnmiDeleteSiteSliceConnectivityService(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteSliceConnectivityService(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteSliceConnectivityService returns an instance of SiteSlice.ConnectivityService.
func (i *ServerImpl) GnmiGetSiteSliceConnectivityService(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSliceConnectivityService, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteSliceConnectivityService(args...)
}

// GnmiPostSiteSliceConnectivityService adds an instance of SiteSlice.ConnectivityService.
func (i *ServerImpl) GnmiPostSiteSliceConnectivityService(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSliceConnectivityService)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.SiteSlice.ConnectivityService %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSliceConnectivityService(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSliceConnectivityService to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteSliceDeviceGroup deletes an instance of Site_Slice_Device-group.
func (i *ServerImpl) GnmiDeleteSiteSliceDeviceGroup(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteSliceDeviceGroup(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteSliceDeviceGroup returns an instance of Site_Slice_Device-group.
func (i *ServerImpl) GnmiGetSiteSliceDeviceGroup(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSliceDeviceGroup, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteSliceDeviceGroup(args...)
}

// GnmiPostSiteSliceDeviceGroup adds an instance of Site_Slice_Device-group.
func (i *ServerImpl) GnmiPostSiteSliceDeviceGroup(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSliceDeviceGroup)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice_Device-group %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSliceDeviceGroup(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSliceDeviceGroup to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteSliceDeviceGroupList deletes an instance of Site_Slice_Device-group_List.
func (i *ServerImpl) GnmiDeleteSiteSliceDeviceGroupList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteSliceDeviceGroupList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteSliceDeviceGroupList returns an instance of Site_Slice_Device-group_List.
func (i *ServerImpl) GnmiGetSiteSliceDeviceGroupList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSliceDeviceGroupList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteSliceDeviceGroupList(args...)
}

// GnmiPostSiteSliceDeviceGroupList adds an instance of Site_Slice_Device-group_List.
func (i *ServerImpl) GnmiPostSiteSliceDeviceGroupList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSliceDeviceGroupList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice_Device-group_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSliceDeviceGroupList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSliceDeviceGroupList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteSliceFilter deletes an instance of Site_Slice_Filter.
func (i *ServerImpl) GnmiDeleteSiteSliceFilter(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteSliceFilter(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteSliceFilter returns an instance of Site_Slice_Filter.
func (i *ServerImpl) GnmiGetSiteSliceFilter(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSliceFilter, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteSliceFilter(args...)
}

// GnmiPostSiteSliceFilter adds an instance of Site_Slice_Filter.
func (i *ServerImpl) GnmiPostSiteSliceFilter(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSliceFilter)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice_Filter %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSliceFilter(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSliceFilter to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteSliceFilterList deletes an instance of Site_Slice_Filter_List.
func (i *ServerImpl) GnmiDeleteSiteSliceFilterList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteSliceFilterList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteSliceFilterList returns an instance of Site_Slice_Filter_List.
func (i *ServerImpl) GnmiGetSiteSliceFilterList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSliceFilterList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteSliceFilterList(args...)
}

// GnmiPostSiteSliceFilterList adds an instance of Site_Slice_Filter_List.
func (i *ServerImpl) GnmiPostSiteSliceFilterList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSliceFilterList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice_Filter_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSliceFilterList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSliceFilterList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteSliceList deletes an instance of Site_Slice_List.
func (i *ServerImpl) GnmiDeleteSiteSliceList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteSliceList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteSliceList returns an instance of Site_Slice_List.
func (i *ServerImpl) GnmiGetSiteSliceList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSliceList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteSliceList(args...)
}

// GnmiPostSiteSliceList adds an instance of Site_Slice_List.
func (i *ServerImpl) GnmiPostSiteSliceList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSliceList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSliceList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSliceList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteSliceMbr deletes an instance of Site_Slice_Mbr.
func (i *ServerImpl) GnmiDeleteSiteSliceMbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteSliceMbr(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteSliceMbr returns an instance of Site_Slice_Mbr.
func (i *ServerImpl) GnmiGetSiteSliceMbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSliceMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteSliceMbr(args...)
}

// GnmiPostSiteSliceMbr adds an instance of Site_Slice_Mbr.
func (i *ServerImpl) GnmiPostSiteSliceMbr(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSliceMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSliceMbr(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSliceMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteSlicePriorityTrafficRule deletes an instance of Site_Slice_Priority-traffic-rule.
func (i *ServerImpl) GnmiDeleteSiteSlicePriorityTrafficRule(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteSlicePriorityTrafficRule(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteSlicePriorityTrafficRule returns an instance of Site_Slice_Priority-traffic-rule.
func (i *ServerImpl) GnmiGetSiteSlicePriorityTrafficRule(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSlicePriorityTrafficRule, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteSlicePriorityTrafficRule(args...)
}

// GnmiPostSiteSlicePriorityTrafficRule adds an instance of Site_Slice_Priority-traffic-rule.
func (i *ServerImpl) GnmiPostSiteSlicePriorityTrafficRule(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSlicePriorityTrafficRule)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice_Priority-traffic-rule %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSlicePriorityTrafficRule(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSlicePriorityTrafficRule to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteSlicePriorityTrafficRuleGbr deletes an instance of Site_Slice_Priority-traffic-rule_Gbr.
func (i *ServerImpl) GnmiDeleteSiteSlicePriorityTrafficRuleGbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteSlicePriorityTrafficRuleGbr(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteSlicePriorityTrafficRuleGbr returns an instance of Site_Slice_Priority-traffic-rule_Gbr.
func (i *ServerImpl) GnmiGetSiteSlicePriorityTrafficRuleGbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSlicePriorityTrafficRuleGbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteSlicePriorityTrafficRuleGbr(args...)
}

// GnmiPostSiteSlicePriorityTrafficRuleGbr adds an instance of Site_Slice_Priority-traffic-rule_Gbr.
func (i *ServerImpl) GnmiPostSiteSlicePriorityTrafficRuleGbr(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSlicePriorityTrafficRuleGbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice_Priority-traffic-rule_Gbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSlicePriorityTrafficRuleGbr(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSlicePriorityTrafficRuleGbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteSlicePriorityTrafficRuleList deletes an instance of Site_Slice_Priority-traffic-rule_List.
func (i *ServerImpl) GnmiDeleteSiteSlicePriorityTrafficRuleList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteSlicePriorityTrafficRuleList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteSlicePriorityTrafficRuleList returns an instance of Site_Slice_Priority-traffic-rule_List.
func (i *ServerImpl) GnmiGetSiteSlicePriorityTrafficRuleList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSlicePriorityTrafficRuleList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteSlicePriorityTrafficRuleList(args...)
}

// GnmiPostSiteSlicePriorityTrafficRuleList adds an instance of Site_Slice_Priority-traffic-rule_List.
func (i *ServerImpl) GnmiPostSiteSlicePriorityTrafficRuleList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSlicePriorityTrafficRuleList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice_Priority-traffic-rule_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSlicePriorityTrafficRuleList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSlicePriorityTrafficRuleList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteSlicePriorityTrafficRuleMbr deletes an instance of Site_Slice_Priority-traffic-rule_Mbr.
func (i *ServerImpl) GnmiDeleteSiteSlicePriorityTrafficRuleMbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteSlicePriorityTrafficRuleMbr(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteSlicePriorityTrafficRuleMbr returns an instance of Site_Slice_Priority-traffic-rule_Mbr.
func (i *ServerImpl) GnmiGetSiteSlicePriorityTrafficRuleMbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSlicePriorityTrafficRuleMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteSlicePriorityTrafficRuleMbr(args...)
}

// GnmiPostSiteSlicePriorityTrafficRuleMbr adds an instance of Site_Slice_Priority-traffic-rule_Mbr.
func (i *ServerImpl) GnmiPostSiteSlicePriorityTrafficRuleMbr(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSlicePriorityTrafficRuleMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice_Priority-traffic-rule_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSlicePriorityTrafficRuleMbr(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSlicePriorityTrafficRuleMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteSmallCell deletes an instance of Site_Small-cell.
func (i *ServerImpl) GnmiDeleteSiteSmallCell(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteSmallCell(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteSmallCell returns an instance of Site_Small-cell.
func (i *ServerImpl) GnmiGetSiteSmallCell(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSmallCell, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteSmallCell(args...)
}

// GnmiPostSiteSmallCell adds an instance of Site_Small-cell.
func (i *ServerImpl) GnmiPostSiteSmallCell(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSmallCell)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Small-cell %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSmallCell(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSmallCell to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteSmallCellList deletes an instance of Site_Small-cell_List.
func (i *ServerImpl) GnmiDeleteSiteSmallCellList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteSmallCellList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteSmallCellList returns an instance of Site_Small-cell_List.
func (i *ServerImpl) GnmiGetSiteSmallCellList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSmallCellList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteSmallCellList(args...)
}

// GnmiPostSiteSmallCellList adds an instance of Site_Small-cell_List.
func (i *ServerImpl) GnmiPostSiteSmallCellList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSmallCellList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Small-cell_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSmallCellList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSmallCellList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteUpf deletes an instance of Site_Upf.
func (i *ServerImpl) GnmiDeleteSiteUpf(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteUpf(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteUpf returns an instance of Site_Upf.
func (i *ServerImpl) GnmiGetSiteUpf(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteUpf, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteUpf(args...)
}

// GnmiPostSiteUpf adds an instance of Site_Upf.
func (i *ServerImpl) GnmiPostSiteUpf(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteUpf)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Upf %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteUpf(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteUpf to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteSiteUpfList deletes an instance of Site_Upf_List.
func (i *ServerImpl) GnmiDeleteSiteUpfList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetSiteUpfList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetSiteUpfList returns an instance of Site_Upf_List.
func (i *ServerImpl) GnmiGetSiteUpfList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteUpfList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToSiteUpfList(args...)
}

// GnmiPostSiteUpfList adds an instance of Site_Upf_List.
func (i *ServerImpl) GnmiPostSiteUpfList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteUpfList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Upf_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteUpfList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteUpfList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteTemplate deletes an instance of Template.
func (i *ServerImpl) GnmiDeleteTemplate(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetTemplate(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetTemplate returns an instance of Template.
func (i *ServerImpl) GnmiGetTemplate(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.Template, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToTemplate(args...)
}

// GnmiPostTemplate adds an instance of Template.
func (i *ServerImpl) GnmiPostTemplate(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.Template)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Template %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTemplate(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.Template to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteTemplateList deletes an instance of Template_List.
func (i *ServerImpl) GnmiDeleteTemplateList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetTemplateList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetTemplateList returns an instance of Template_List.
func (i *ServerImpl) GnmiGetTemplateList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.TemplateList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToTemplateList(args...)
}

// GnmiPostTemplateList adds an instance of Template_List.
func (i *ServerImpl) GnmiPostTemplateList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.TemplateList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Template_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTemplateList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.TemplateList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteTemplateMbr deletes an instance of Template_Mbr.
func (i *ServerImpl) GnmiDeleteTemplateMbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetTemplateMbr(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetTemplateMbr returns an instance of Template_Mbr.
func (i *ServerImpl) GnmiGetTemplateMbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.TemplateMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToTemplateMbr(args...)
}

// GnmiPostTemplateMbr adds an instance of Template_Mbr.
func (i *ServerImpl) GnmiPostTemplateMbr(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.TemplateMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Template_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTemplateMbr(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.TemplateMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteTrafficClass deletes an instance of Traffic-class.
func (i *ServerImpl) GnmiDeleteTrafficClass(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetTrafficClass(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetTrafficClass returns an instance of Traffic-class.
func (i *ServerImpl) GnmiGetTrafficClass(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.TrafficClass, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToTrafficClass(args...)
}

// GnmiPostTrafficClass adds an instance of Traffic-class.
func (i *ServerImpl) GnmiPostTrafficClass(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.TrafficClass)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Traffic-class %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTrafficClass(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.TrafficClass to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiDeleteTrafficClassList deletes an instance of Traffic-class_List.
func (i *ServerImpl) GnmiDeleteTrafficClassList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.GnmiGetTrafficClassList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// GnmiGetTrafficClassList returns an instance of Traffic-class_List.
func (i *ServerImpl) GnmiGetTrafficClassList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.TrafficClassList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.ToTrafficClassList(args...)
}

// GnmiPostTrafficClassList adds an instance of Traffic-class_List.
func (i *ServerImpl) GnmiPostTrafficClassList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.TrafficClassList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Traffic-class_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTrafficClassList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.TrafficClassList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

//Ignoring EnterpriseId

//Ignoring RequestBodyApplication

//Ignoring RequestBodyApplicationEndpoint

//Ignoring RequestBodyApplicationEndpointMbr

//Ignoring RequestBodySite

//Ignoring RequestBodySiteConnectivityService

//Ignoring RequestBodySiteConnectivityServiceCore4g

//Ignoring RequestBodySiteConnectivityServiceCore5g

//Ignoring RequestBodySiteDevice

//Ignoring RequestBodySiteDeviceGroup

//Ignoring RequestBodySiteDeviceGroupDevice

//Ignoring RequestBodySiteDeviceGroupMbr

//Ignoring RequestBodySiteImsiDefinition

//Ignoring RequestBodySiteIpDomain

//Ignoring RequestBodySiteMonitoring

//Ignoring RequestBodySiteMonitoringEdgeDevice

//Ignoring RequestBodySiteSimCard

//Ignoring RequestBodySiteSlice

//Ignoring RequestBodySiteSliceDeviceGroup

//Ignoring RequestBodySiteSliceFilter

//Ignoring RequestBodySiteSliceMbr

//Ignoring RequestBodySiteSlicePriorityTrafficRule

//Ignoring RequestBodySiteSmallCell

//Ignoring RequestBodySiteUpf

//Ignoring RequestBodyTemplate

//Ignoring RequestBodyTemplateMbr

//Ignoring RequestBodyTrafficClass

type Translator interface {
	toAdditionalPropertiesUnchTarget(args ...string) (*externalRef1.AdditionalPropertiesUnchTarget, error)
	toAdditionalPropertyEnterpriseId(args ...string) (*externalRef1.AdditionalPropertyEnterpriseId, error)
	toAdditionalPropertyUnchanged(args ...string) (*externalRef1.AdditionalPropertyUnchanged, error)
	toApplication(args ...string) (*externalRef1.Application, error)
	toApplicationEndpoint(args ...string) (*externalRef1.ApplicationEndpoint, error)
	toApplicationEndpointList(args ...string) (*externalRef1.ApplicationEndpointList, error)
	toApplicationEndpointMbr(args ...string) (*externalRef1.ApplicationEndpointMbr, error)
	toApplicationList(args ...string) (*externalRef1.ApplicationList, error)
	toSite(args ...string) (*externalRef1.Site, error)
	toSiteConnectivityService(args ...string) (*externalRef1.SiteConnectivityService, error)
	toSiteConnectivityServiceCore4g(args ...string) (*externalRef1.SiteConnectivityServiceCore4g, error)
	toSiteConnectivityServiceCore5g(args ...string) (*externalRef1.SiteConnectivityServiceCore5g, error)
	toSiteDevice(args ...string) (*externalRef1.SiteDevice, error)
	toSiteDeviceGroup(args ...string) (*externalRef1.SiteDeviceGroup, error)
	toSiteDeviceGroupDevice(args ...string) (*externalRef1.SiteDeviceGroupDevice, error)
	toSiteDeviceGroupDeviceList(args ...string) (*externalRef1.SiteDeviceGroupDeviceList, error)
	toSiteDeviceGroupList(args ...string) (*externalRef1.SiteDeviceGroupList, error)
	toSiteDeviceGroupMbr(args ...string) (*externalRef1.SiteDeviceGroupMbr, error)
	toSiteDeviceList(args ...string) (*externalRef1.SiteDeviceList, error)
	toSiteDeviceState(args ...string) (*externalRef1.SiteDeviceState, error)
	toSiteImsiDefinition(args ...string) (*externalRef1.SiteImsiDefinition, error)
	toSiteIpDomain(args ...string) (*externalRef1.SiteIpDomain, error)
	toSiteIpDomainList(args ...string) (*externalRef1.SiteIpDomainList, error)
	toSiteList(args ...string) (*externalRef1.SiteList, error)
	toSiteMonitoring(args ...string) (*externalRef1.SiteMonitoring, error)
	toSiteMonitoringEdgeDevice(args ...string) (*externalRef1.SiteMonitoringEdgeDevice, error)
	toSiteMonitoringEdgeDeviceList(args ...string) (*externalRef1.SiteMonitoringEdgeDeviceList, error)
	toSiteSimCard(args ...string) (*externalRef1.SiteSimCard, error)
	toSiteSimCardList(args ...string) (*externalRef1.SiteSimCardList, error)
	toSiteSlice(args ...string) (*externalRef1.SiteSlice, error)
	toSiteSliceConnectivityService(args ...string) (*externalRef1.SiteSliceConnectivityService, error)
	toSiteSliceDeviceGroup(args ...string) (*externalRef1.SiteSliceDeviceGroup, error)
	toSiteSliceDeviceGroupList(args ...string) (*externalRef1.SiteSliceDeviceGroupList, error)
	toSiteSliceFilter(args ...string) (*externalRef1.SiteSliceFilter, error)
	toSiteSliceFilterList(args ...string) (*externalRef1.SiteSliceFilterList, error)
	toSiteSliceList(args ...string) (*externalRef1.SiteSliceList, error)
	toSiteSliceMbr(args ...string) (*externalRef1.SiteSliceMbr, error)
	toSiteSlicePriorityTrafficRule(args ...string) (*externalRef1.SiteSlicePriorityTrafficRule, error)
	toSiteSlicePriorityTrafficRuleGbr(args ...string) (*externalRef1.SiteSlicePriorityTrafficRuleGbr, error)
	toSiteSlicePriorityTrafficRuleList(args ...string) (*externalRef1.SiteSlicePriorityTrafficRuleList, error)
	toSiteSlicePriorityTrafficRuleMbr(args ...string) (*externalRef1.SiteSlicePriorityTrafficRuleMbr, error)
	toSiteSmallCell(args ...string) (*externalRef1.SiteSmallCell, error)
	toSiteSmallCellList(args ...string) (*externalRef1.SiteSmallCellList, error)
	toSiteUpf(args ...string) (*externalRef1.SiteUpf, error)
	toSiteUpfList(args ...string) (*externalRef1.SiteUpfList, error)
	toTemplate(args ...string) (*externalRef1.Template, error)
	toTemplateList(args ...string) (*externalRef1.TemplateList, error)
	toTemplateMbr(args ...string) (*externalRef1.TemplateMbr, error)
	toTrafficClass(args ...string) (*externalRef1.TrafficClass, error)
	toTrafficClassList(args ...string) (*externalRef1.TrafficClassList, error)
	toEnterpriseId(args ...string) (*externalRef1.EnterpriseId, error)
}

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating param-types
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating request-bodies

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating additional-properties
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating additional-properties
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// server-interface template override

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

const authorization = "Authorization"

// Implement the Server Interface for access to gNMI
var log = logging.GetLogger("model_0_0_0")

// ServerImpl -
type ServerImpl struct {
	GnmiClient  southbound.GnmiClient
	GnmiTimeout time.Duration
}

// GetApplicationList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application
func (i *ServerImpl) GetApplicationList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetApplicationList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/application", enterpriseId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetApplicationList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteApplication impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application/{application-id}
func (i *ServerImpl) DeleteApplication(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, applicationId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteApplication(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/application/{application-id}", enterpriseId, applicationId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteApplication")
	return ctx.JSON(http.StatusOK, response)
}

// GetApplication impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application/{application-id}
func (i *ServerImpl) GetApplication(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, applicationId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetApplication(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/application/{application-id}", enterpriseId, applicationId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetApplication")
	return ctx.JSON(http.StatusOK, response)
}

// PostApplication impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application/{application-id}
func (i *ServerImpl) PostApplication(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, applicationId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostApplication(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/application/{application-id}", enterpriseId, applicationId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostApplication")
	return ctx.JSON(http.StatusOK, response)
}

// GetApplicationEndpointList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint
func (i *ServerImpl) GetApplicationEndpointList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, applicationId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetApplicationEndpointList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint", enterpriseId, applicationId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetApplicationEndpointList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteApplicationEndpoint impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}
func (i *ServerImpl) DeleteApplicationEndpoint(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteApplicationEndpoint(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}", enterpriseId, applicationId, endpointId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteApplicationEndpoint")
	return ctx.JSON(http.StatusOK, response)
}

// GetApplicationEndpoint impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}
func (i *ServerImpl) GetApplicationEndpoint(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetApplicationEndpoint(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}", enterpriseId, applicationId, endpointId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetApplicationEndpoint")
	return ctx.JSON(http.StatusOK, response)
}

// PostApplicationEndpoint impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}
func (i *ServerImpl) PostApplicationEndpoint(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostApplicationEndpoint(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}", enterpriseId, applicationId, endpointId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostApplicationEndpoint")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteApplicationEndpointMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr
func (i *ServerImpl) DeleteApplicationEndpointMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteApplicationEndpointMbr(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr", enterpriseId, applicationId, endpointId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteApplicationEndpointMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetApplicationEndpointMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr
func (i *ServerImpl) GetApplicationEndpointMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetApplicationEndpointMbr(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr", enterpriseId, applicationId, endpointId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetApplicationEndpointMbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostApplicationEndpointMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr
func (i *ServerImpl) PostApplicationEndpointMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostApplicationEndpointMbr(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr", enterpriseId, applicationId, endpointId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostApplicationEndpointMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site
func (i *ServerImpl) GetSiteList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site", enterpriseId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSite impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}
func (i *ServerImpl) DeleteSite(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSite(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}", enterpriseId, siteId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSite")
	return ctx.JSON(http.StatusOK, response)
}

// GetSite impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}
func (i *ServerImpl) GetSite(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSite(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSite")
	return ctx.JSON(http.StatusOK, response)
}

// PostSite impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}
func (i *ServerImpl) PostSite(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSite(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}", enterpriseId, siteId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSite")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteConnectivityService impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service
func (i *ServerImpl) DeleteSiteConnectivityService(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSiteConnectivityService(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service", enterpriseId, siteId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteConnectivityService impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service
func (i *ServerImpl) GetSiteConnectivityService(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteConnectivityService(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteConnectivityService impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service
func (i *ServerImpl) PostSiteConnectivityService(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSiteConnectivityService(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service", enterpriseId, siteId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteConnectivityServiceCore4g impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-4g
func (i *ServerImpl) DeleteSiteConnectivityServiceCore4g(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSiteConnectivityServiceCore4g(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-4g", enterpriseId, siteId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteConnectivityServiceCore4g")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteConnectivityServiceCore4g impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-4g
func (i *ServerImpl) GetSiteConnectivityServiceCore4g(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteConnectivityServiceCore4g(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-4g", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteConnectivityServiceCore4g")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteConnectivityServiceCore4g impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-4g
func (i *ServerImpl) PostSiteConnectivityServiceCore4g(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSiteConnectivityServiceCore4g(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-4g", enterpriseId, siteId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteConnectivityServiceCore4g")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteConnectivityServiceCore5g impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-5g
func (i *ServerImpl) DeleteSiteConnectivityServiceCore5g(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSiteConnectivityServiceCore5g(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-5g", enterpriseId, siteId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteConnectivityServiceCore5g")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteConnectivityServiceCore5g impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-5g
func (i *ServerImpl) GetSiteConnectivityServiceCore5g(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteConnectivityServiceCore5g(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-5g", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteConnectivityServiceCore5g")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteConnectivityServiceCore5g impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-5g
func (i *ServerImpl) PostSiteConnectivityServiceCore5g(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSiteConnectivityServiceCore5g(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-5g", enterpriseId, siteId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteConnectivityServiceCore5g")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteDeviceList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device
func (i *ServerImpl) GetSiteDeviceList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteDeviceList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteDeviceList")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteDeviceGroupList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group
func (i *ServerImpl) GetSiteDeviceGroupList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteDeviceGroupList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteDeviceGroupList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteDeviceGroup impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}
func (i *ServerImpl) DeleteSiteDeviceGroup(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSiteDeviceGroup(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}", enterpriseId, siteId, deviceGroupId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteDeviceGroup impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}
func (i *ServerImpl) GetSiteDeviceGroup(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteDeviceGroup(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}", enterpriseId, siteId, deviceGroupId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteDeviceGroup impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}
func (i *ServerImpl) PostSiteDeviceGroup(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSiteDeviceGroup(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}", enterpriseId, siteId, deviceGroupId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteDeviceGroupDeviceList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device
func (i *ServerImpl) GetSiteDeviceGroupDeviceList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteDeviceGroupDeviceList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device", enterpriseId, siteId, deviceGroupId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteDeviceGroupDeviceList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteDeviceGroupDevice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}
func (i *ServerImpl) DeleteSiteDeviceGroupDevice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceGroupId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSiteDeviceGroupDevice(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}", enterpriseId, siteId, deviceGroupId, deviceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteDeviceGroupDevice")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteDeviceGroupDevice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}
func (i *ServerImpl) GetSiteDeviceGroupDevice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceGroupId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteDeviceGroupDevice(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}", enterpriseId, siteId, deviceGroupId, deviceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteDeviceGroupDevice")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteDeviceGroupDevice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}
func (i *ServerImpl) PostSiteDeviceGroupDevice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceGroupId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSiteDeviceGroupDevice(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}", enterpriseId, siteId, deviceGroupId, deviceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteDeviceGroupDevice")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteDeviceGroupMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr
func (i *ServerImpl) DeleteSiteDeviceGroupMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSiteDeviceGroupMbr(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr", enterpriseId, siteId, deviceGroupId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteDeviceGroupMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteDeviceGroupMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr
func (i *ServerImpl) GetSiteDeviceGroupMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteDeviceGroupMbr(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr", enterpriseId, siteId, deviceGroupId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteDeviceGroupMbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteDeviceGroupMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr
func (i *ServerImpl) PostSiteDeviceGroupMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSiteDeviceGroupMbr(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr", enterpriseId, siteId, deviceGroupId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteDeviceGroupMbr")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteDevice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}
func (i *ServerImpl) DeleteSiteDevice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSiteDevice(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}", enterpriseId, siteId, deviceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteDevice")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteDevice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}
func (i *ServerImpl) GetSiteDevice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteDevice(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}", enterpriseId, siteId, deviceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteDevice")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteDevice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}
func (i *ServerImpl) PostSiteDevice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSiteDevice(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}", enterpriseId, siteId, deviceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteDevice")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteDeviceState impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}/state
func (i *ServerImpl) GetSiteDeviceState(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteDeviceState(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}/state", enterpriseId, siteId, deviceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteDeviceState")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteImsiDefinition impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/imsi-definition
func (i *ServerImpl) DeleteSiteImsiDefinition(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSiteImsiDefinition(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/imsi-definition", enterpriseId, siteId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteImsiDefinition")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteImsiDefinition impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/imsi-definition
func (i *ServerImpl) GetSiteImsiDefinition(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteImsiDefinition(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/imsi-definition", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteImsiDefinition")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteImsiDefinition impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/imsi-definition
func (i *ServerImpl) PostSiteImsiDefinition(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSiteImsiDefinition(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/imsi-definition", enterpriseId, siteId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteImsiDefinition")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteIpDomainList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/ip-domain
func (i *ServerImpl) GetSiteIpDomainList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteIpDomainList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/ip-domain", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteIpDomainList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteIpDomain impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}
func (i *ServerImpl) DeleteSiteIpDomain(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, ipDomainId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSiteIpDomain(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}", enterpriseId, siteId, ipDomainId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteIpDomain impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}
func (i *ServerImpl) GetSiteIpDomain(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, ipDomainId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteIpDomain(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}", enterpriseId, siteId, ipDomainId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteIpDomain impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}
func (i *ServerImpl) PostSiteIpDomain(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, ipDomainId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSiteIpDomain(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}", enterpriseId, siteId, ipDomainId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteMonitoring impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring
func (i *ServerImpl) DeleteSiteMonitoring(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSiteMonitoring(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring", enterpriseId, siteId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteMonitoring")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteMonitoring impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring
func (i *ServerImpl) GetSiteMonitoring(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteMonitoring(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteMonitoring")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteMonitoring impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring
func (i *ServerImpl) PostSiteMonitoring(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSiteMonitoring(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring", enterpriseId, siteId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteMonitoring")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteMonitoringEdgeDeviceList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring/edge-device
func (i *ServerImpl) GetSiteMonitoringEdgeDeviceList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteMonitoringEdgeDeviceList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring/edge-device", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteMonitoringEdgeDeviceList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteMonitoringEdgeDevice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}
func (i *ServerImpl) DeleteSiteMonitoringEdgeDevice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, edgeDeviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSiteMonitoringEdgeDevice(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}", enterpriseId, siteId, edgeDeviceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteMonitoringEdgeDevice")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteMonitoringEdgeDevice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}
func (i *ServerImpl) GetSiteMonitoringEdgeDevice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, edgeDeviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteMonitoringEdgeDevice(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}", enterpriseId, siteId, edgeDeviceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteMonitoringEdgeDevice")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteMonitoringEdgeDevice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}
func (i *ServerImpl) PostSiteMonitoringEdgeDevice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, edgeDeviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSiteMonitoringEdgeDevice(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}", enterpriseId, siteId, edgeDeviceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteMonitoringEdgeDevice")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSimCardList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/sim-card
func (i *ServerImpl) GetSiteSimCardList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteSimCardList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/sim-card", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSimCardList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteSimCard impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/sim-card/{sim-id}
func (i *ServerImpl) DeleteSiteSimCard(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, simId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSiteSimCard(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/sim-card/{sim-id}", enterpriseId, siteId, simId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteSimCard")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSimCard impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/sim-card/{sim-id}
func (i *ServerImpl) GetSiteSimCard(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, simId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteSimCard(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/sim-card/{sim-id}", enterpriseId, siteId, simId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSimCard")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteSimCard impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/sim-card/{sim-id}
func (i *ServerImpl) PostSiteSimCard(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, simId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSiteSimCard(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/sim-card/{sim-id}", enterpriseId, siteId, simId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteSimCard")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSliceList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice
func (i *ServerImpl) GetSiteSliceList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteSliceList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSliceList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteSlice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}
func (i *ServerImpl) DeleteSiteSlice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSiteSlice(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}", enterpriseId, siteId, sliceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteSlice")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSlice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}
func (i *ServerImpl) GetSiteSlice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteSlice(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}", enterpriseId, siteId, sliceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSlice")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteSlice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}
func (i *ServerImpl) PostSiteSlice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSiteSlice(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}", enterpriseId, siteId, sliceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteSlice")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSliceDeviceGroupList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group
func (i *ServerImpl) GetSiteSliceDeviceGroupList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteSliceDeviceGroupList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group", enterpriseId, siteId, sliceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSliceDeviceGroupList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteSliceDeviceGroup impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}
func (i *ServerImpl) DeleteSiteSliceDeviceGroup(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string, deviceGroup string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSiteSliceDeviceGroup(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}", enterpriseId, siteId, sliceId, deviceGroup)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteSliceDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSliceDeviceGroup impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}
func (i *ServerImpl) GetSiteSliceDeviceGroup(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string, deviceGroup string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteSliceDeviceGroup(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}", enterpriseId, siteId, sliceId, deviceGroup)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSliceDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteSliceDeviceGroup impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}
func (i *ServerImpl) PostSiteSliceDeviceGroup(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string, deviceGroup string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSiteSliceDeviceGroup(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}", enterpriseId, siteId, sliceId, deviceGroup)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteSliceDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSliceFilterList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter
func (i *ServerImpl) GetSiteSliceFilterList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteSliceFilterList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter", enterpriseId, siteId, sliceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSliceFilterList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteSliceFilter impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}
func (i *ServerImpl) DeleteSiteSliceFilter(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string, application string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSiteSliceFilter(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}", enterpriseId, siteId, sliceId, application)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteSliceFilter")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSliceFilter impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}
func (i *ServerImpl) GetSiteSliceFilter(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string, application string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteSliceFilter(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}", enterpriseId, siteId, sliceId, application)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSliceFilter")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteSliceFilter impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}
func (i *ServerImpl) PostSiteSliceFilter(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string, application string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSiteSliceFilter(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}", enterpriseId, siteId, sliceId, application)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteSliceFilter")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteSliceMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr
func (i *ServerImpl) DeleteSiteSliceMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSiteSliceMbr(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr", enterpriseId, siteId, sliceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteSliceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSliceMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr
func (i *ServerImpl) GetSiteSliceMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteSliceMbr(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr", enterpriseId, siteId, sliceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSliceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteSliceMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr
func (i *ServerImpl) PostSiteSliceMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSiteSliceMbr(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr", enterpriseId, siteId, sliceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteSliceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSlicePriorityTrafficRuleList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule
func (i *ServerImpl) GetSiteSlicePriorityTrafficRuleList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteSlicePriorityTrafficRuleList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule", enterpriseId, siteId, sliceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSlicePriorityTrafficRuleList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteSlicePriorityTrafficRule impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}
func (i *ServerImpl) DeleteSiteSlicePriorityTrafficRule(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string, priorityTrafficRuleId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSiteSlicePriorityTrafficRule(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}", enterpriseId, siteId, sliceId, priorityTrafficRuleId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteSlicePriorityTrafficRule")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSlicePriorityTrafficRule impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}
func (i *ServerImpl) GetSiteSlicePriorityTrafficRule(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string, priorityTrafficRuleId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteSlicePriorityTrafficRule(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}", enterpriseId, siteId, sliceId, priorityTrafficRuleId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSlicePriorityTrafficRule")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteSlicePriorityTrafficRule impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}
func (i *ServerImpl) PostSiteSlicePriorityTrafficRule(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string, priorityTrafficRuleId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSiteSlicePriorityTrafficRule(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}", enterpriseId, siteId, sliceId, priorityTrafficRuleId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteSlicePriorityTrafficRule")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSmallCellList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/small-cell
func (i *ServerImpl) GetSiteSmallCellList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteSmallCellList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/small-cell", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSmallCellList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteSmallCell impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}
func (i *ServerImpl) DeleteSiteSmallCell(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, smallCellId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSiteSmallCell(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}", enterpriseId, siteId, smallCellId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteSmallCell")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSmallCell impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}
func (i *ServerImpl) GetSiteSmallCell(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, smallCellId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteSmallCell(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}", enterpriseId, siteId, smallCellId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSmallCell")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteSmallCell impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}
func (i *ServerImpl) PostSiteSmallCell(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, smallCellId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSiteSmallCell(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}", enterpriseId, siteId, smallCellId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteSmallCell")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteUpfList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/upf
func (i *ServerImpl) GetSiteUpfList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteUpfList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/upf", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteUpfList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteUpf impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/upf/{upf-id}
func (i *ServerImpl) DeleteSiteUpf(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, upfId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteSiteUpf(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/upf/{upf-id}", enterpriseId, siteId, upfId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteUpf")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteUpf impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/upf/{upf-id}
func (i *ServerImpl) GetSiteUpf(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, upfId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetSiteUpf(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/upf/{upf-id}", enterpriseId, siteId, upfId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteUpf")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteUpf impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/upf/{upf-id}
func (i *ServerImpl) PostSiteUpf(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, upfId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostSiteUpf(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/upf/{upf-id}", enterpriseId, siteId, upfId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteUpf")
	return ctx.JSON(http.StatusOK, response)
}

// GetTemplateList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/template
func (i *ServerImpl) GetTemplateList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetTemplateList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/template", enterpriseId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetTemplateList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteTemplate impl of gNMI access at /aether/v2.1.x/{enterprise-id}/template/{template-id}
func (i *ServerImpl) DeleteTemplate(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteTemplate(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/template/{template-id}", enterpriseId, templateId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// GetTemplate impl of gNMI access at /aether/v2.1.x/{enterprise-id}/template/{template-id}
func (i *ServerImpl) GetTemplate(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetTemplate(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/template/{template-id}", enterpriseId, templateId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// PostTemplate impl of gNMI access at /aether/v2.1.x/{enterprise-id}/template/{template-id}
func (i *ServerImpl) PostTemplate(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostTemplate(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/template/{template-id}", enterpriseId, templateId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteTemplateMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/template/{template-id}/mbr
func (i *ServerImpl) DeleteTemplateMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteTemplateMbr(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/template/{template-id}/mbr", enterpriseId, templateId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteTemplateMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetTemplateMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/template/{template-id}/mbr
func (i *ServerImpl) GetTemplateMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetTemplateMbr(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/template/{template-id}/mbr", enterpriseId, templateId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetTemplateMbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostTemplateMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/template/{template-id}/mbr
func (i *ServerImpl) PostTemplateMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostTemplateMbr(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/template/{template-id}/mbr", enterpriseId, templateId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostTemplateMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetTrafficClassList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/traffic-class
func (i *ServerImpl) GetTrafficClassList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetTrafficClassList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/traffic-class", enterpriseId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetTrafficClassList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteTrafficClass impl of gNMI access at /aether/v2.1.x/{enterprise-id}/traffic-class/{traffic-class-id}
func (i *ServerImpl) DeleteTrafficClass(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, trafficClassId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.GnmiDeleteTrafficClass(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/traffic-class/{traffic-class-id}", enterpriseId, trafficClassId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// GetTrafficClass impl of gNMI access at /aether/v2.1.x/{enterprise-id}/traffic-class/{traffic-class-id}
func (i *ServerImpl) GetTrafficClass(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, trafficClassId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.GnmiGetTrafficClass(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/traffic-class/{traffic-class-id}", enterpriseId, trafficClassId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// PostTrafficClass impl of gNMI access at /aether/v2.1.x/{enterprise-id}/traffic-class/{traffic-class-id}
func (i *ServerImpl) PostTrafficClass(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, trafficClassId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.GnmiPostTrafficClass(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/traffic-class/{traffic-class-id}", enterpriseId, trafficClassId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// register template override
