// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"reflect"

	"github.com/labstack/echo/v4"
	externalRef0 "github.com/onosproject/aether-models/models/aether-2.1.x/api"
	externalRef1 "github.com/onosproject/aether-roc-api/pkg/aether_2_1_0/types"
	"github.com/onosproject/aether-roc-api/pkg/southbound"
	"github.com/onosproject/aether-roc-api/pkg/utils"
	"github.com/onosproject/onos-lib-go/pkg/logging"
	"github.com/openconfig/gnmi/proto/gnmi"
)

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Defines values for SiteSliceConnectivityService.
const (
	SiteSliceConnectivityServiceG externalRef1.SiteSliceConnectivityService = "4g"

	SiteSliceConnectivityServiceG1 externalRef1.SiteSliceConnectivityService = "5g"
)

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

//Ignoring AdditionalPropertiesUnchTarget

//Ignoring AdditionalPropertyEnterpriseId

//Ignoring AdditionalPropertyUnchanged

// gnmiDeleteApplication deletes an instance of Application.
func (i *ServerImpl) gnmiDeleteApplication(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetApplication(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetApplication returns an instance of Application.
func (i *ServerImpl) gnmiGetApplication(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.Application, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toApplication(args...)
}

// gnmiPostApplication adds an instance of Application.
func (i *ServerImpl) gnmiPostApplication(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.Application)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Application %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApplication(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.Application to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteApplicationEndpoint deletes an instance of Application_Endpoint.
func (i *ServerImpl) gnmiDeleteApplicationEndpoint(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetApplicationEndpoint(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetApplicationEndpoint returns an instance of Application_Endpoint.
func (i *ServerImpl) gnmiGetApplicationEndpoint(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.ApplicationEndpoint, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toApplicationEndpoint(args...)
}

// gnmiPostApplicationEndpoint adds an instance of Application_Endpoint.
func (i *ServerImpl) gnmiPostApplicationEndpoint(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.ApplicationEndpoint)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Application_Endpoint %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApplicationEndpoint(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.ApplicationEndpoint to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteApplicationEndpointList deletes an instance of Application_Endpoint_List.
func (i *ServerImpl) gnmiDeleteApplicationEndpointList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetApplicationEndpointList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetApplicationEndpointList returns an instance of Application_Endpoint_List.
func (i *ServerImpl) gnmiGetApplicationEndpointList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.ApplicationEndpointList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toApplicationEndpointList(args...)
}

// gnmiPostApplicationEndpointList adds an instance of Application_Endpoint_List.
func (i *ServerImpl) gnmiPostApplicationEndpointList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.ApplicationEndpointList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Application_Endpoint_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApplicationEndpointList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.ApplicationEndpointList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteApplicationEndpointMbr deletes an instance of Application_Endpoint_Mbr.
func (i *ServerImpl) gnmiDeleteApplicationEndpointMbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetApplicationEndpointMbr(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetApplicationEndpointMbr returns an instance of Application_Endpoint_Mbr.
func (i *ServerImpl) gnmiGetApplicationEndpointMbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.ApplicationEndpointMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toApplicationEndpointMbr(args...)
}

// gnmiPostApplicationEndpointMbr adds an instance of Application_Endpoint_Mbr.
func (i *ServerImpl) gnmiPostApplicationEndpointMbr(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.ApplicationEndpointMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Application_Endpoint_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApplicationEndpointMbr(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.ApplicationEndpointMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteApplicationList deletes an instance of Application_List.
func (i *ServerImpl) gnmiDeleteApplicationList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetApplicationList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetApplicationList returns an instance of Application_List.
func (i *ServerImpl) gnmiGetApplicationList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.ApplicationList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toApplicationList(args...)
}

// gnmiPostApplicationList adds an instance of Application_List.
func (i *ServerImpl) gnmiPostApplicationList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.ApplicationList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Application_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiApplicationList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.ApplicationList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSite deletes an instance of Site.
func (i *ServerImpl) gnmiDeleteSite(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSite(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSite returns an instance of Site.
func (i *ServerImpl) gnmiGetSite(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.Site, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSite(args...)
}

// gnmiPostSite adds an instance of Site.
func (i *ServerImpl) gnmiPostSite(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.Site)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSite(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.Site to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteConnectivityService deletes an instance of Site_Connectivity-service.
func (i *ServerImpl) gnmiDeleteSiteConnectivityService(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteConnectivityService(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteConnectivityService returns an instance of Site_Connectivity-service.
func (i *ServerImpl) gnmiGetSiteConnectivityService(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteConnectivityService, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteConnectivityService(args...)
}

// gnmiPostSiteConnectivityService adds an instance of Site_Connectivity-service.
func (i *ServerImpl) gnmiPostSiteConnectivityService(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteConnectivityService)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Connectivity-service %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteConnectivityService(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteConnectivityService to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteConnectivityServiceCore4g deletes an instance of Site_Connectivity-service_Core-4g.
func (i *ServerImpl) gnmiDeleteSiteConnectivityServiceCore4g(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteConnectivityServiceCore4g(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteConnectivityServiceCore4g returns an instance of Site_Connectivity-service_Core-4g.
func (i *ServerImpl) gnmiGetSiteConnectivityServiceCore4g(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteConnectivityServiceCore4g, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteConnectivityServiceCore4g(args...)
}

// gnmiPostSiteConnectivityServiceCore4g adds an instance of Site_Connectivity-service_Core-4g.
func (i *ServerImpl) gnmiPostSiteConnectivityServiceCore4g(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteConnectivityServiceCore4g)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Connectivity-service_Core-4g %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteConnectivityServiceCore4g(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteConnectivityServiceCore4g to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteConnectivityServiceCore5g deletes an instance of Site_Connectivity-service_Core-5g.
func (i *ServerImpl) gnmiDeleteSiteConnectivityServiceCore5g(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteConnectivityServiceCore5g(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteConnectivityServiceCore5g returns an instance of Site_Connectivity-service_Core-5g.
func (i *ServerImpl) gnmiGetSiteConnectivityServiceCore5g(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteConnectivityServiceCore5g, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteConnectivityServiceCore5g(args...)
}

// gnmiPostSiteConnectivityServiceCore5g adds an instance of Site_Connectivity-service_Core-5g.
func (i *ServerImpl) gnmiPostSiteConnectivityServiceCore5g(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteConnectivityServiceCore5g)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Connectivity-service_Core-5g %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteConnectivityServiceCore5g(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteConnectivityServiceCore5g to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteDevice deletes an instance of Site_Device.
func (i *ServerImpl) gnmiDeleteSiteDevice(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteDevice(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteDevice returns an instance of Site_Device.
func (i *ServerImpl) gnmiGetSiteDevice(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteDevice, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteDevice(args...)
}

// gnmiPostSiteDevice adds an instance of Site_Device.
func (i *ServerImpl) gnmiPostSiteDevice(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteDevice)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Device %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteDevice(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteDevice to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteDeviceGroup deletes an instance of Site_Device-group.
func (i *ServerImpl) gnmiDeleteSiteDeviceGroup(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteDeviceGroup(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteDeviceGroup returns an instance of Site_Device-group.
func (i *ServerImpl) gnmiGetSiteDeviceGroup(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteDeviceGroup, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteDeviceGroup(args...)
}

// gnmiPostSiteDeviceGroup adds an instance of Site_Device-group.
func (i *ServerImpl) gnmiPostSiteDeviceGroup(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteDeviceGroup)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Device-group %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteDeviceGroup(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteDeviceGroup to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteDeviceGroupDevice deletes an instance of Site_Device-group_Device.
func (i *ServerImpl) gnmiDeleteSiteDeviceGroupDevice(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteDeviceGroupDevice(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteDeviceGroupDevice returns an instance of Site_Device-group_Device.
func (i *ServerImpl) gnmiGetSiteDeviceGroupDevice(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteDeviceGroupDevice, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteDeviceGroupDevice(args...)
}

// gnmiPostSiteDeviceGroupDevice adds an instance of Site_Device-group_Device.
func (i *ServerImpl) gnmiPostSiteDeviceGroupDevice(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteDeviceGroupDevice)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Device-group_Device %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteDeviceGroupDevice(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteDeviceGroupDevice to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteDeviceGroupDeviceList deletes an instance of Site_Device-group_Device_List.
func (i *ServerImpl) gnmiDeleteSiteDeviceGroupDeviceList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteDeviceGroupDeviceList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteDeviceGroupDeviceList returns an instance of Site_Device-group_Device_List.
func (i *ServerImpl) gnmiGetSiteDeviceGroupDeviceList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteDeviceGroupDeviceList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteDeviceGroupDeviceList(args...)
}

// gnmiPostSiteDeviceGroupDeviceList adds an instance of Site_Device-group_Device_List.
func (i *ServerImpl) gnmiPostSiteDeviceGroupDeviceList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteDeviceGroupDeviceList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Device-group_Device_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteDeviceGroupDeviceList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteDeviceGroupDeviceList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteDeviceGroupList deletes an instance of Site_Device-group_List.
func (i *ServerImpl) gnmiDeleteSiteDeviceGroupList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteDeviceGroupList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteDeviceGroupList returns an instance of Site_Device-group_List.
func (i *ServerImpl) gnmiGetSiteDeviceGroupList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteDeviceGroupList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteDeviceGroupList(args...)
}

// gnmiPostSiteDeviceGroupList adds an instance of Site_Device-group_List.
func (i *ServerImpl) gnmiPostSiteDeviceGroupList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteDeviceGroupList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Device-group_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteDeviceGroupList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteDeviceGroupList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteDeviceGroupMbr deletes an instance of Site_Device-group_Mbr.
func (i *ServerImpl) gnmiDeleteSiteDeviceGroupMbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteDeviceGroupMbr(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteDeviceGroupMbr returns an instance of Site_Device-group_Mbr.
func (i *ServerImpl) gnmiGetSiteDeviceGroupMbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteDeviceGroupMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteDeviceGroupMbr(args...)
}

// gnmiPostSiteDeviceGroupMbr adds an instance of Site_Device-group_Mbr.
func (i *ServerImpl) gnmiPostSiteDeviceGroupMbr(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteDeviceGroupMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Device-group_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteDeviceGroupMbr(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteDeviceGroupMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteDeviceList deletes an instance of Site_Device_List.
func (i *ServerImpl) gnmiDeleteSiteDeviceList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteDeviceList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteDeviceList returns an instance of Site_Device_List.
func (i *ServerImpl) gnmiGetSiteDeviceList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteDeviceList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteDeviceList(args...)
}

// gnmiPostSiteDeviceList adds an instance of Site_Device_List.
func (i *ServerImpl) gnmiPostSiteDeviceList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteDeviceList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Device_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteDeviceList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteDeviceList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteDeviceState deletes an instance of Site_Device_State.
func (i *ServerImpl) gnmiDeleteSiteDeviceState(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteDeviceState(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteDeviceState returns an instance of Site_Device_State.
func (i *ServerImpl) gnmiGetSiteDeviceState(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteDeviceState, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteDeviceState(args...)
}

// gnmiPostSiteDeviceState adds an instance of Site_Device_State.
func (i *ServerImpl) gnmiPostSiteDeviceState(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteDeviceState)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Device_State %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteDeviceState(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteDeviceState to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteImsiDefinition deletes an instance of Site_Imsi-definition.
func (i *ServerImpl) gnmiDeleteSiteImsiDefinition(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteImsiDefinition(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteImsiDefinition returns an instance of Site_Imsi-definition.
func (i *ServerImpl) gnmiGetSiteImsiDefinition(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteImsiDefinition, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteImsiDefinition(args...)
}

// gnmiPostSiteImsiDefinition adds an instance of Site_Imsi-definition.
func (i *ServerImpl) gnmiPostSiteImsiDefinition(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteImsiDefinition)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Imsi-definition %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteImsiDefinition(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteImsiDefinition to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteIpDomain deletes an instance of Site_Ip-domain.
func (i *ServerImpl) gnmiDeleteSiteIpDomain(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteIpDomain(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteIpDomain returns an instance of Site_Ip-domain.
func (i *ServerImpl) gnmiGetSiteIpDomain(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteIpDomain, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteIpDomain(args...)
}

// gnmiPostSiteIpDomain adds an instance of Site_Ip-domain.
func (i *ServerImpl) gnmiPostSiteIpDomain(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteIpDomain)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Ip-domain %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteIpDomain(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteIpDomain to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteIpDomainList deletes an instance of Site_Ip-domain_List.
func (i *ServerImpl) gnmiDeleteSiteIpDomainList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteIpDomainList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteIpDomainList returns an instance of Site_Ip-domain_List.
func (i *ServerImpl) gnmiGetSiteIpDomainList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteIpDomainList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteIpDomainList(args...)
}

// gnmiPostSiteIpDomainList adds an instance of Site_Ip-domain_List.
func (i *ServerImpl) gnmiPostSiteIpDomainList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteIpDomainList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Ip-domain_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteIpDomainList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteIpDomainList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteList deletes an instance of Site_List.
func (i *ServerImpl) gnmiDeleteSiteList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteList returns an instance of Site_List.
func (i *ServerImpl) gnmiGetSiteList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteList(args...)
}

// gnmiPostSiteList adds an instance of Site_List.
func (i *ServerImpl) gnmiPostSiteList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteMonitoring deletes an instance of Site_Monitoring.
func (i *ServerImpl) gnmiDeleteSiteMonitoring(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteMonitoring(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteMonitoring returns an instance of Site_Monitoring.
func (i *ServerImpl) gnmiGetSiteMonitoring(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteMonitoring, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteMonitoring(args...)
}

// gnmiPostSiteMonitoring adds an instance of Site_Monitoring.
func (i *ServerImpl) gnmiPostSiteMonitoring(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteMonitoring)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Monitoring %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteMonitoring(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteMonitoring to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteMonitoringEdgeDevice deletes an instance of Site_Monitoring_Edge-device.
func (i *ServerImpl) gnmiDeleteSiteMonitoringEdgeDevice(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteMonitoringEdgeDevice(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteMonitoringEdgeDevice returns an instance of Site_Monitoring_Edge-device.
func (i *ServerImpl) gnmiGetSiteMonitoringEdgeDevice(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteMonitoringEdgeDevice, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteMonitoringEdgeDevice(args...)
}

// gnmiPostSiteMonitoringEdgeDevice adds an instance of Site_Monitoring_Edge-device.
func (i *ServerImpl) gnmiPostSiteMonitoringEdgeDevice(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteMonitoringEdgeDevice)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Monitoring_Edge-device %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteMonitoringEdgeDevice(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteMonitoringEdgeDevice to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteMonitoringEdgeDeviceList deletes an instance of Site_Monitoring_Edge-device_List.
func (i *ServerImpl) gnmiDeleteSiteMonitoringEdgeDeviceList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteMonitoringEdgeDeviceList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteMonitoringEdgeDeviceList returns an instance of Site_Monitoring_Edge-device_List.
func (i *ServerImpl) gnmiGetSiteMonitoringEdgeDeviceList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteMonitoringEdgeDeviceList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteMonitoringEdgeDeviceList(args...)
}

// gnmiPostSiteMonitoringEdgeDeviceList adds an instance of Site_Monitoring_Edge-device_List.
func (i *ServerImpl) gnmiPostSiteMonitoringEdgeDeviceList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteMonitoringEdgeDeviceList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Monitoring_Edge-device_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteMonitoringEdgeDeviceList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteMonitoringEdgeDeviceList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSimCard deletes an instance of Site_Sim-card.
func (i *ServerImpl) gnmiDeleteSiteSimCard(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteSimCard(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSimCard returns an instance of Site_Sim-card.
func (i *ServerImpl) gnmiGetSiteSimCard(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSimCard, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSimCard(args...)
}

// gnmiPostSiteSimCard adds an instance of Site_Sim-card.
func (i *ServerImpl) gnmiPostSiteSimCard(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSimCard)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Sim-card %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSimCard(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSimCard to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSimCardList deletes an instance of Site_Sim-card_List.
func (i *ServerImpl) gnmiDeleteSiteSimCardList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteSimCardList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSimCardList returns an instance of Site_Sim-card_List.
func (i *ServerImpl) gnmiGetSiteSimCardList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSimCardList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSimCardList(args...)
}

// gnmiPostSiteSimCardList adds an instance of Site_Sim-card_List.
func (i *ServerImpl) gnmiPostSiteSimCardList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSimCardList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Sim-card_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSimCardList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSimCardList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSlice deletes an instance of Site_Slice.
func (i *ServerImpl) gnmiDeleteSiteSlice(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteSlice(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSlice returns an instance of Site_Slice.
func (i *ServerImpl) gnmiGetSiteSlice(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSlice, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSlice(args...)
}

// gnmiPostSiteSlice adds an instance of Site_Slice.
func (i *ServerImpl) gnmiPostSiteSlice(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSlice)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSlice(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSlice to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSliceConnectivityService deletes an instance of SiteSlice.ConnectivityService.
func (i *ServerImpl) gnmiDeleteSiteSliceConnectivityService(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteSliceConnectivityService(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSliceConnectivityService returns an instance of SiteSlice.ConnectivityService.
func (i *ServerImpl) gnmiGetSiteSliceConnectivityService(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSliceConnectivityService, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSliceConnectivityService(args...)
}

// gnmiPostSiteSliceConnectivityService adds an instance of SiteSlice.ConnectivityService.
func (i *ServerImpl) gnmiPostSiteSliceConnectivityService(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSliceConnectivityService)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.SiteSlice.ConnectivityService %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSliceConnectivityService(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSliceConnectivityService to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSliceDeviceGroup deletes an instance of Site_Slice_Device-group.
func (i *ServerImpl) gnmiDeleteSiteSliceDeviceGroup(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteSliceDeviceGroup(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSliceDeviceGroup returns an instance of Site_Slice_Device-group.
func (i *ServerImpl) gnmiGetSiteSliceDeviceGroup(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSliceDeviceGroup, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSliceDeviceGroup(args...)
}

// gnmiPostSiteSliceDeviceGroup adds an instance of Site_Slice_Device-group.
func (i *ServerImpl) gnmiPostSiteSliceDeviceGroup(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSliceDeviceGroup)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice_Device-group %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSliceDeviceGroup(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSliceDeviceGroup to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSliceDeviceGroupList deletes an instance of Site_Slice_Device-group_List.
func (i *ServerImpl) gnmiDeleteSiteSliceDeviceGroupList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteSliceDeviceGroupList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSliceDeviceGroupList returns an instance of Site_Slice_Device-group_List.
func (i *ServerImpl) gnmiGetSiteSliceDeviceGroupList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSliceDeviceGroupList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSliceDeviceGroupList(args...)
}

// gnmiPostSiteSliceDeviceGroupList adds an instance of Site_Slice_Device-group_List.
func (i *ServerImpl) gnmiPostSiteSliceDeviceGroupList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSliceDeviceGroupList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice_Device-group_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSliceDeviceGroupList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSliceDeviceGroupList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSliceFilter deletes an instance of Site_Slice_Filter.
func (i *ServerImpl) gnmiDeleteSiteSliceFilter(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteSliceFilter(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSliceFilter returns an instance of Site_Slice_Filter.
func (i *ServerImpl) gnmiGetSiteSliceFilter(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSliceFilter, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSliceFilter(args...)
}

// gnmiPostSiteSliceFilter adds an instance of Site_Slice_Filter.
func (i *ServerImpl) gnmiPostSiteSliceFilter(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSliceFilter)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice_Filter %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSliceFilter(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSliceFilter to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSliceFilterList deletes an instance of Site_Slice_Filter_List.
func (i *ServerImpl) gnmiDeleteSiteSliceFilterList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteSliceFilterList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSliceFilterList returns an instance of Site_Slice_Filter_List.
func (i *ServerImpl) gnmiGetSiteSliceFilterList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSliceFilterList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSliceFilterList(args...)
}

// gnmiPostSiteSliceFilterList adds an instance of Site_Slice_Filter_List.
func (i *ServerImpl) gnmiPostSiteSliceFilterList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSliceFilterList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice_Filter_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSliceFilterList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSliceFilterList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSliceList deletes an instance of Site_Slice_List.
func (i *ServerImpl) gnmiDeleteSiteSliceList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteSliceList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSliceList returns an instance of Site_Slice_List.
func (i *ServerImpl) gnmiGetSiteSliceList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSliceList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSliceList(args...)
}

// gnmiPostSiteSliceList adds an instance of Site_Slice_List.
func (i *ServerImpl) gnmiPostSiteSliceList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSliceList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSliceList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSliceList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSliceMbr deletes an instance of Site_Slice_Mbr.
func (i *ServerImpl) gnmiDeleteSiteSliceMbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteSliceMbr(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSliceMbr returns an instance of Site_Slice_Mbr.
func (i *ServerImpl) gnmiGetSiteSliceMbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSliceMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSliceMbr(args...)
}

// gnmiPostSiteSliceMbr adds an instance of Site_Slice_Mbr.
func (i *ServerImpl) gnmiPostSiteSliceMbr(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSliceMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSliceMbr(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSliceMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSlicePriorityTrafficRule deletes an instance of Site_Slice_Priority-traffic-rule.
func (i *ServerImpl) gnmiDeleteSiteSlicePriorityTrafficRule(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteSlicePriorityTrafficRule(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSlicePriorityTrafficRule returns an instance of Site_Slice_Priority-traffic-rule.
func (i *ServerImpl) gnmiGetSiteSlicePriorityTrafficRule(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSlicePriorityTrafficRule, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSlicePriorityTrafficRule(args...)
}

// gnmiPostSiteSlicePriorityTrafficRule adds an instance of Site_Slice_Priority-traffic-rule.
func (i *ServerImpl) gnmiPostSiteSlicePriorityTrafficRule(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSlicePriorityTrafficRule)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice_Priority-traffic-rule %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSlicePriorityTrafficRule(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSlicePriorityTrafficRule to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSlicePriorityTrafficRuleGbr deletes an instance of Site_Slice_Priority-traffic-rule_Gbr.
func (i *ServerImpl) gnmiDeleteSiteSlicePriorityTrafficRuleGbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteSlicePriorityTrafficRuleGbr(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSlicePriorityTrafficRuleGbr returns an instance of Site_Slice_Priority-traffic-rule_Gbr.
func (i *ServerImpl) gnmiGetSiteSlicePriorityTrafficRuleGbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSlicePriorityTrafficRuleGbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSlicePriorityTrafficRuleGbr(args...)
}

// gnmiPostSiteSlicePriorityTrafficRuleGbr adds an instance of Site_Slice_Priority-traffic-rule_Gbr.
func (i *ServerImpl) gnmiPostSiteSlicePriorityTrafficRuleGbr(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSlicePriorityTrafficRuleGbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice_Priority-traffic-rule_Gbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSlicePriorityTrafficRuleGbr(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSlicePriorityTrafficRuleGbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSlicePriorityTrafficRuleList deletes an instance of Site_Slice_Priority-traffic-rule_List.
func (i *ServerImpl) gnmiDeleteSiteSlicePriorityTrafficRuleList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteSlicePriorityTrafficRuleList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSlicePriorityTrafficRuleList returns an instance of Site_Slice_Priority-traffic-rule_List.
func (i *ServerImpl) gnmiGetSiteSlicePriorityTrafficRuleList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSlicePriorityTrafficRuleList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSlicePriorityTrafficRuleList(args...)
}

// gnmiPostSiteSlicePriorityTrafficRuleList adds an instance of Site_Slice_Priority-traffic-rule_List.
func (i *ServerImpl) gnmiPostSiteSlicePriorityTrafficRuleList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSlicePriorityTrafficRuleList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice_Priority-traffic-rule_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSlicePriorityTrafficRuleList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSlicePriorityTrafficRuleList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSlicePriorityTrafficRuleMbr deletes an instance of Site_Slice_Priority-traffic-rule_Mbr.
func (i *ServerImpl) gnmiDeleteSiteSlicePriorityTrafficRuleMbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteSlicePriorityTrafficRuleMbr(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSlicePriorityTrafficRuleMbr returns an instance of Site_Slice_Priority-traffic-rule_Mbr.
func (i *ServerImpl) gnmiGetSiteSlicePriorityTrafficRuleMbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSlicePriorityTrafficRuleMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSlicePriorityTrafficRuleMbr(args...)
}

// gnmiPostSiteSlicePriorityTrafficRuleMbr adds an instance of Site_Slice_Priority-traffic-rule_Mbr.
func (i *ServerImpl) gnmiPostSiteSlicePriorityTrafficRuleMbr(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSlicePriorityTrafficRuleMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Slice_Priority-traffic-rule_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSlicePriorityTrafficRuleMbr(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSlicePriorityTrafficRuleMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSmallCell deletes an instance of Site_Small-cell.
func (i *ServerImpl) gnmiDeleteSiteSmallCell(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteSmallCell(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSmallCell returns an instance of Site_Small-cell.
func (i *ServerImpl) gnmiGetSiteSmallCell(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSmallCell, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSmallCell(args...)
}

// gnmiPostSiteSmallCell adds an instance of Site_Small-cell.
func (i *ServerImpl) gnmiPostSiteSmallCell(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSmallCell)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Small-cell %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSmallCell(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSmallCell to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteSmallCellList deletes an instance of Site_Small-cell_List.
func (i *ServerImpl) gnmiDeleteSiteSmallCellList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteSmallCellList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteSmallCellList returns an instance of Site_Small-cell_List.
func (i *ServerImpl) gnmiGetSiteSmallCellList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteSmallCellList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteSmallCellList(args...)
}

// gnmiPostSiteSmallCellList adds an instance of Site_Small-cell_List.
func (i *ServerImpl) gnmiPostSiteSmallCellList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteSmallCellList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Small-cell_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteSmallCellList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteSmallCellList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteUpf deletes an instance of Site_Upf.
func (i *ServerImpl) gnmiDeleteSiteUpf(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteUpf(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteUpf returns an instance of Site_Upf.
func (i *ServerImpl) gnmiGetSiteUpf(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteUpf, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteUpf(args...)
}

// gnmiPostSiteUpf adds an instance of Site_Upf.
func (i *ServerImpl) gnmiPostSiteUpf(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteUpf)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Upf %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteUpf(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteUpf to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteSiteUpfList deletes an instance of Site_Upf_List.
func (i *ServerImpl) gnmiDeleteSiteUpfList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetSiteUpfList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetSiteUpfList returns an instance of Site_Upf_List.
func (i *ServerImpl) gnmiGetSiteUpfList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.SiteUpfList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toSiteUpfList(args...)
}

// gnmiPostSiteUpfList adds an instance of Site_Upf_List.
func (i *ServerImpl) gnmiPostSiteUpfList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.SiteUpfList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Site_Upf_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiSiteUpfList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.SiteUpfList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteTemplate deletes an instance of Template.
func (i *ServerImpl) gnmiDeleteTemplate(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetTemplate(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetTemplate returns an instance of Template.
func (i *ServerImpl) gnmiGetTemplate(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.Template, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toTemplate(args...)
}

// gnmiPostTemplate adds an instance of Template.
func (i *ServerImpl) gnmiPostTemplate(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.Template)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Template %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTemplate(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.Template to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteTemplateList deletes an instance of Template_List.
func (i *ServerImpl) gnmiDeleteTemplateList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetTemplateList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetTemplateList returns an instance of Template_List.
func (i *ServerImpl) gnmiGetTemplateList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.TemplateList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toTemplateList(args...)
}

// gnmiPostTemplateList adds an instance of Template_List.
func (i *ServerImpl) gnmiPostTemplateList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.TemplateList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Template_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTemplateList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.TemplateList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteTemplateMbr deletes an instance of Template_Mbr.
func (i *ServerImpl) gnmiDeleteTemplateMbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetTemplateMbr(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetTemplateMbr returns an instance of Template_Mbr.
func (i *ServerImpl) gnmiGetTemplateMbr(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.TemplateMbr, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toTemplateMbr(args...)
}

// gnmiPostTemplateMbr adds an instance of Template_Mbr.
func (i *ServerImpl) gnmiPostTemplateMbr(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.TemplateMbr)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Template_Mbr %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTemplateMbr(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.TemplateMbr to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteTrafficClass deletes an instance of Traffic-class.
func (i *ServerImpl) gnmiDeleteTrafficClass(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetTrafficClass(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetTrafficClass returns an instance of Traffic-class.
func (i *ServerImpl) gnmiGetTrafficClass(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.TrafficClass, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toTrafficClass(args...)
}

// gnmiPostTrafficClass adds an instance of Traffic-class.
func (i *ServerImpl) gnmiPostTrafficClass(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.TrafficClass)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Traffic-class %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTrafficClass(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.TrafficClass to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiDeleteTrafficClassList deletes an instance of Traffic-class_List.
func (i *ServerImpl) gnmiDeleteTrafficClassList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	// check to see if the item exists before deleting it
	response, err := i.gnmiGetTrafficClassList(ctx, openApiPath, enterpriseId, args...)
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		log.Infof("Item at path %s with args %v not found", openApiPath, args)
		return nil, echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("item at path %s with args %v does not exists", openApiPath, args))
	}

	gnmiSet, err := utils.NewGnmiSetDeleteRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}

	return utils.ExtractResponseID(gnmiSetResponse)
}

// gnmiGetTrafficClassList returns an instance of Traffic-class_List.
func (i *ServerImpl) gnmiGetTrafficClassList(ctx context.Context,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*externalRef1.TrafficClassList, error) {

	gnmiGet, err := utils.NewGnmiGetRequest(openApiPath, string(enterpriseId), args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiGetRequest %s", gnmiGet.String())
	gnmiVal, err := utils.GetResponseUpdate(i.GnmiClient.Get(ctx, gnmiGet))
	if err != nil {
		return nil, err
	}
	if gnmiVal == nil {
		return nil, nil
	}
	gnmiJsonVal, ok := gnmiVal.Value.(*gnmi.TypedValue_JsonVal)
	if !ok {
		return nil, fmt.Errorf("unexpected type of reply from server %v", gnmiVal.Value)
	}

	log.Debugf("gNMI Json %s", string(gnmiJsonVal.JsonVal))
	var gnmiResponse externalRef0.Device
	if err = externalRef0.Unmarshal(gnmiJsonVal.JsonVal, &gnmiResponse); err != nil {
		return nil, fmt.Errorf("error unmarshalling gnmiResponse %v", err)
	}
	mpd := ModelPluginDevice{
		device: gnmiResponse,
	}

	return mpd.toTrafficClassList(args...)
}

// gnmiPostTrafficClassList adds an instance of Traffic-class_List.
func (i *ServerImpl) gnmiPostTrafficClassList(ctx context.Context, body []byte,
	openApiPath string, enterpriseId externalRef1.EnterpriseId, args ...string) (*string, error) {

	jsonObj := new(externalRef1.TrafficClassList)
	if err := json.Unmarshal(body, jsonObj); err != nil {
		return nil, fmt.Errorf("unable to unmarshal JSON as externalRef1.Traffic-class_List %v", err)
	}
	gnmiUpdates, err := EncodeToGnmiTrafficClassList(jsonObj, false, false, enterpriseId, "", args...)
	if err != nil {
		return nil, fmt.Errorf("unable to convert externalRef1.TrafficClassList to gNMI %v", err)
	}
	gnmiSet, err := utils.NewGnmiSetUpdateRequestUpdates(openApiPath, string(enterpriseId), gnmiUpdates, args...)
	if err != nil {
		return nil, err
	}
	log.Infof("gnmiSetRequest %s", gnmiSet.String())
	gnmiSetResponse, err := i.GnmiClient.Set(ctx, gnmiSet)
	if err != nil {
		return nil, err
	}
	return utils.ExtractResponseID(gnmiSetResponse)
}

//Ignoring EnterpriseId

//Ignoring RequestBodyApplication

//Ignoring RequestBodyApplicationEndpoint

//Ignoring RequestBodyApplicationEndpointMbr

//Ignoring RequestBodySite

//Ignoring RequestBodySiteConnectivityService

//Ignoring RequestBodySiteConnectivityServiceCore4g

//Ignoring RequestBodySiteConnectivityServiceCore5g

//Ignoring RequestBodySiteDevice

//Ignoring RequestBodySiteDeviceGroup

//Ignoring RequestBodySiteDeviceGroupDevice

//Ignoring RequestBodySiteDeviceGroupMbr

//Ignoring RequestBodySiteImsiDefinition

//Ignoring RequestBodySiteIpDomain

//Ignoring RequestBodySiteMonitoring

//Ignoring RequestBodySiteMonitoringEdgeDevice

//Ignoring RequestBodySiteSimCard

//Ignoring RequestBodySiteSlice

//Ignoring RequestBodySiteSliceDeviceGroup

//Ignoring RequestBodySiteSliceFilter

//Ignoring RequestBodySiteSliceMbr

//Ignoring RequestBodySiteSlicePriorityTrafficRule

//Ignoring RequestBodySiteSmallCell

//Ignoring RequestBodySiteUpf

//Ignoring RequestBodyTemplate

//Ignoring RequestBodyTemplateMbr

//Ignoring RequestBodyTrafficClass

type Translator interface {
	toAdditionalPropertiesUnchTarget(args ...string) (*externalRef1.AdditionalPropertiesUnchTarget, error)
	toAdditionalPropertyEnterpriseId(args ...string) (*externalRef1.AdditionalPropertyEnterpriseId, error)
	toAdditionalPropertyUnchanged(args ...string) (*externalRef1.AdditionalPropertyUnchanged, error)
	toApplication(args ...string) (*externalRef1.Application, error)
	toApplicationEndpoint(args ...string) (*externalRef1.ApplicationEndpoint, error)
	toApplicationEndpointList(args ...string) (*externalRef1.ApplicationEndpointList, error)
	toApplicationEndpointMbr(args ...string) (*externalRef1.ApplicationEndpointMbr, error)
	toApplicationList(args ...string) (*externalRef1.ApplicationList, error)
	toSite(args ...string) (*externalRef1.Site, error)
	toSiteConnectivityService(args ...string) (*externalRef1.SiteConnectivityService, error)
	toSiteConnectivityServiceCore4g(args ...string) (*externalRef1.SiteConnectivityServiceCore4g, error)
	toSiteConnectivityServiceCore5g(args ...string) (*externalRef1.SiteConnectivityServiceCore5g, error)
	toSiteDevice(args ...string) (*externalRef1.SiteDevice, error)
	toSiteDeviceGroup(args ...string) (*externalRef1.SiteDeviceGroup, error)
	toSiteDeviceGroupDevice(args ...string) (*externalRef1.SiteDeviceGroupDevice, error)
	toSiteDeviceGroupDeviceList(args ...string) (*externalRef1.SiteDeviceGroupDeviceList, error)
	toSiteDeviceGroupList(args ...string) (*externalRef1.SiteDeviceGroupList, error)
	toSiteDeviceGroupMbr(args ...string) (*externalRef1.SiteDeviceGroupMbr, error)
	toSiteDeviceList(args ...string) (*externalRef1.SiteDeviceList, error)
	toSiteDeviceState(args ...string) (*externalRef1.SiteDeviceState, error)
	toSiteImsiDefinition(args ...string) (*externalRef1.SiteImsiDefinition, error)
	toSiteIpDomain(args ...string) (*externalRef1.SiteIpDomain, error)
	toSiteIpDomainList(args ...string) (*externalRef1.SiteIpDomainList, error)
	toSiteList(args ...string) (*externalRef1.SiteList, error)
	toSiteMonitoring(args ...string) (*externalRef1.SiteMonitoring, error)
	toSiteMonitoringEdgeDevice(args ...string) (*externalRef1.SiteMonitoringEdgeDevice, error)
	toSiteMonitoringEdgeDeviceList(args ...string) (*externalRef1.SiteMonitoringEdgeDeviceList, error)
	toSiteSimCard(args ...string) (*externalRef1.SiteSimCard, error)
	toSiteSimCardList(args ...string) (*externalRef1.SiteSimCardList, error)
	toSiteSlice(args ...string) (*externalRef1.SiteSlice, error)
	toSiteSliceConnectivityService(args ...string) (*externalRef1.SiteSliceConnectivityService, error)
	toSiteSliceDeviceGroup(args ...string) (*externalRef1.SiteSliceDeviceGroup, error)
	toSiteSliceDeviceGroupList(args ...string) (*externalRef1.SiteSliceDeviceGroupList, error)
	toSiteSliceFilter(args ...string) (*externalRef1.SiteSliceFilter, error)
	toSiteSliceFilterList(args ...string) (*externalRef1.SiteSliceFilterList, error)
	toSiteSliceList(args ...string) (*externalRef1.SiteSliceList, error)
	toSiteSliceMbr(args ...string) (*externalRef1.SiteSliceMbr, error)
	toSiteSlicePriorityTrafficRule(args ...string) (*externalRef1.SiteSlicePriorityTrafficRule, error)
	toSiteSlicePriorityTrafficRuleGbr(args ...string) (*externalRef1.SiteSlicePriorityTrafficRuleGbr, error)
	toSiteSlicePriorityTrafficRuleList(args ...string) (*externalRef1.SiteSlicePriorityTrafficRuleList, error)
	toSiteSlicePriorityTrafficRuleMbr(args ...string) (*externalRef1.SiteSlicePriorityTrafficRuleMbr, error)
	toSiteSmallCell(args ...string) (*externalRef1.SiteSmallCell, error)
	toSiteSmallCellList(args ...string) (*externalRef1.SiteSmallCellList, error)
	toSiteUpf(args ...string) (*externalRef1.SiteUpf, error)
	toSiteUpfList(args ...string) (*externalRef1.SiteUpfList, error)
	toTemplate(args ...string) (*externalRef1.Template, error)
	toTemplateList(args ...string) (*externalRef1.TemplateList, error)
	toTemplateMbr(args ...string) (*externalRef1.TemplateMbr, error)
	toTrafficClass(args ...string) (*externalRef1.TrafficClass, error)
	toTrafficClassList(args ...string) (*externalRef1.TrafficClassList, error)
	toEnterpriseId(args ...string) (*externalRef1.EnterpriseId, error)
}

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating param-types
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating request-bodies

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating additional-properties
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// Not generating additional-properties
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// server-interface template override

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

const authorization = "Authorization"

// Implement the Server Interface for access to gNMI
var log = logging.GetLogger("model_0_0_0")

// ServerImpl -
type ServerImpl struct {
	GnmiClient  southbound.GnmiClient
	GnmiTimeout time.Duration
}

// GetApplicationList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application
func (i *ServerImpl) GetApplicationList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetApplicationList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/application", enterpriseId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetApplicationList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteApplication impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application/{application-id}
func (i *ServerImpl) DeleteApplication(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, applicationId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteApplication(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/application/{application-id}", enterpriseId, applicationId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteApplication")
	return ctx.JSON(http.StatusOK, response)
}

// GetApplication impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application/{application-id}
func (i *ServerImpl) GetApplication(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, applicationId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetApplication(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/application/{application-id}", enterpriseId, applicationId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetApplication")
	return ctx.JSON(http.StatusOK, response)
}

// PostApplication impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application/{application-id}
func (i *ServerImpl) PostApplication(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, applicationId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostApplication(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/application/{application-id}", enterpriseId, applicationId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostApplication")
	return ctx.JSON(http.StatusOK, response)
}

// GetApplicationEndpointList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint
func (i *ServerImpl) GetApplicationEndpointList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, applicationId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetApplicationEndpointList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint", enterpriseId, applicationId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetApplicationEndpointList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteApplicationEndpoint impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}
func (i *ServerImpl) DeleteApplicationEndpoint(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteApplicationEndpoint(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}", enterpriseId, applicationId, endpointId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteApplicationEndpoint")
	return ctx.JSON(http.StatusOK, response)
}

// GetApplicationEndpoint impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}
func (i *ServerImpl) GetApplicationEndpoint(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetApplicationEndpoint(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}", enterpriseId, applicationId, endpointId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetApplicationEndpoint")
	return ctx.JSON(http.StatusOK, response)
}

// PostApplicationEndpoint impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}
func (i *ServerImpl) PostApplicationEndpoint(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostApplicationEndpoint(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}", enterpriseId, applicationId, endpointId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostApplicationEndpoint")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteApplicationEndpointMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr
func (i *ServerImpl) DeleteApplicationEndpointMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteApplicationEndpointMbr(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr", enterpriseId, applicationId, endpointId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteApplicationEndpointMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetApplicationEndpointMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr
func (i *ServerImpl) GetApplicationEndpointMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetApplicationEndpointMbr(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr", enterpriseId, applicationId, endpointId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetApplicationEndpointMbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostApplicationEndpointMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr
func (i *ServerImpl) PostApplicationEndpointMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, applicationId string, endpointId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostApplicationEndpointMbr(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/application/{application-id}/endpoint/{endpoint-id}/mbr", enterpriseId, applicationId, endpointId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostApplicationEndpointMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site
func (i *ServerImpl) GetSiteList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site", enterpriseId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSite impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}
func (i *ServerImpl) DeleteSite(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteSite(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}", enterpriseId, siteId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSite")
	return ctx.JSON(http.StatusOK, response)
}

// GetSite impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}
func (i *ServerImpl) GetSite(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSite(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSite")
	return ctx.JSON(http.StatusOK, response)
}

// PostSite impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}
func (i *ServerImpl) PostSite(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSite(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}", enterpriseId, siteId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSite")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteConnectivityService impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service
func (i *ServerImpl) DeleteSiteConnectivityService(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteSiteConnectivityService(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service", enterpriseId, siteId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteConnectivityService impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service
func (i *ServerImpl) GetSiteConnectivityService(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteConnectivityService(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteConnectivityService impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service
func (i *ServerImpl) PostSiteConnectivityService(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteConnectivityService(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service", enterpriseId, siteId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteConnectivityService")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteConnectivityServiceCore4g impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-4g
func (i *ServerImpl) DeleteSiteConnectivityServiceCore4g(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteSiteConnectivityServiceCore4g(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-4g", enterpriseId, siteId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteConnectivityServiceCore4g")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteConnectivityServiceCore4g impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-4g
func (i *ServerImpl) GetSiteConnectivityServiceCore4g(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteConnectivityServiceCore4g(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-4g", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteConnectivityServiceCore4g")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteConnectivityServiceCore4g impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-4g
func (i *ServerImpl) PostSiteConnectivityServiceCore4g(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteConnectivityServiceCore4g(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-4g", enterpriseId, siteId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteConnectivityServiceCore4g")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteConnectivityServiceCore5g impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-5g
func (i *ServerImpl) DeleteSiteConnectivityServiceCore5g(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteSiteConnectivityServiceCore5g(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-5g", enterpriseId, siteId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteConnectivityServiceCore5g")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteConnectivityServiceCore5g impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-5g
func (i *ServerImpl) GetSiteConnectivityServiceCore5g(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteConnectivityServiceCore5g(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-5g", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteConnectivityServiceCore5g")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteConnectivityServiceCore5g impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-5g
func (i *ServerImpl) PostSiteConnectivityServiceCore5g(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteConnectivityServiceCore5g(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/connectivity-service/core-5g", enterpriseId, siteId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteConnectivityServiceCore5g")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteDeviceList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device
func (i *ServerImpl) GetSiteDeviceList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteDeviceList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteDeviceList")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteDeviceGroupList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group
func (i *ServerImpl) GetSiteDeviceGroupList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteDeviceGroupList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteDeviceGroupList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteDeviceGroup impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}
func (i *ServerImpl) DeleteSiteDeviceGroup(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteSiteDeviceGroup(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}", enterpriseId, siteId, deviceGroupId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteDeviceGroup impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}
func (i *ServerImpl) GetSiteDeviceGroup(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteDeviceGroup(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}", enterpriseId, siteId, deviceGroupId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteDeviceGroup impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}
func (i *ServerImpl) PostSiteDeviceGroup(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteDeviceGroup(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}", enterpriseId, siteId, deviceGroupId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteDeviceGroupDeviceList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device
func (i *ServerImpl) GetSiteDeviceGroupDeviceList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteDeviceGroupDeviceList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device", enterpriseId, siteId, deviceGroupId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteDeviceGroupDeviceList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteDeviceGroupDevice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}
func (i *ServerImpl) DeleteSiteDeviceGroupDevice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceGroupId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteSiteDeviceGroupDevice(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}", enterpriseId, siteId, deviceGroupId, deviceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteDeviceGroupDevice")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteDeviceGroupDevice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}
func (i *ServerImpl) GetSiteDeviceGroupDevice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceGroupId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteDeviceGroupDevice(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}", enterpriseId, siteId, deviceGroupId, deviceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteDeviceGroupDevice")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteDeviceGroupDevice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}
func (i *ServerImpl) PostSiteDeviceGroupDevice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceGroupId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteDeviceGroupDevice(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/device/{device-id}", enterpriseId, siteId, deviceGroupId, deviceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteDeviceGroupDevice")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteDeviceGroupMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr
func (i *ServerImpl) DeleteSiteDeviceGroupMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteSiteDeviceGroupMbr(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr", enterpriseId, siteId, deviceGroupId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteDeviceGroupMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteDeviceGroupMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr
func (i *ServerImpl) GetSiteDeviceGroupMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteDeviceGroupMbr(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr", enterpriseId, siteId, deviceGroupId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteDeviceGroupMbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteDeviceGroupMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr
func (i *ServerImpl) PostSiteDeviceGroupMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceGroupId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteDeviceGroupMbr(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device-group/{device-group-id}/mbr", enterpriseId, siteId, deviceGroupId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteDeviceGroupMbr")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteDevice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}
func (i *ServerImpl) DeleteSiteDevice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteSiteDevice(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}", enterpriseId, siteId, deviceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteDevice")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteDevice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}
func (i *ServerImpl) GetSiteDevice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteDevice(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}", enterpriseId, siteId, deviceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteDevice")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteDevice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}
func (i *ServerImpl) PostSiteDevice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteDevice(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}", enterpriseId, siteId, deviceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteDevice")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteDeviceState impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}/state
func (i *ServerImpl) GetSiteDeviceState(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, deviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteDeviceState(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/device/{device-id}/state", enterpriseId, siteId, deviceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteDeviceState")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteImsiDefinition impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/imsi-definition
func (i *ServerImpl) DeleteSiteImsiDefinition(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteSiteImsiDefinition(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/imsi-definition", enterpriseId, siteId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteImsiDefinition")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteImsiDefinition impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/imsi-definition
func (i *ServerImpl) GetSiteImsiDefinition(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteImsiDefinition(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/imsi-definition", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteImsiDefinition")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteImsiDefinition impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/imsi-definition
func (i *ServerImpl) PostSiteImsiDefinition(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteImsiDefinition(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/imsi-definition", enterpriseId, siteId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteImsiDefinition")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteIpDomainList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/ip-domain
func (i *ServerImpl) GetSiteIpDomainList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteIpDomainList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/ip-domain", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteIpDomainList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteIpDomain impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}
func (i *ServerImpl) DeleteSiteIpDomain(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, ipDomainId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteSiteIpDomain(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}", enterpriseId, siteId, ipDomainId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteIpDomain impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}
func (i *ServerImpl) GetSiteIpDomain(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, ipDomainId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteIpDomain(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}", enterpriseId, siteId, ipDomainId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteIpDomain impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}
func (i *ServerImpl) PostSiteIpDomain(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, ipDomainId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteIpDomain(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/ip-domain/{ip-domain-id}", enterpriseId, siteId, ipDomainId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteIpDomain")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteMonitoring impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring
func (i *ServerImpl) DeleteSiteMonitoring(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteSiteMonitoring(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring", enterpriseId, siteId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteMonitoring")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteMonitoring impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring
func (i *ServerImpl) GetSiteMonitoring(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteMonitoring(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteMonitoring")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteMonitoring impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring
func (i *ServerImpl) PostSiteMonitoring(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteMonitoring(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring", enterpriseId, siteId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteMonitoring")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteMonitoringEdgeDeviceList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring/edge-device
func (i *ServerImpl) GetSiteMonitoringEdgeDeviceList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteMonitoringEdgeDeviceList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring/edge-device", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteMonitoringEdgeDeviceList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteMonitoringEdgeDevice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}
func (i *ServerImpl) DeleteSiteMonitoringEdgeDevice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, edgeDeviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteSiteMonitoringEdgeDevice(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}", enterpriseId, siteId, edgeDeviceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteMonitoringEdgeDevice")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteMonitoringEdgeDevice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}
func (i *ServerImpl) GetSiteMonitoringEdgeDevice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, edgeDeviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteMonitoringEdgeDevice(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}", enterpriseId, siteId, edgeDeviceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteMonitoringEdgeDevice")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteMonitoringEdgeDevice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}
func (i *ServerImpl) PostSiteMonitoringEdgeDevice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, edgeDeviceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteMonitoringEdgeDevice(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/monitoring/edge-device/{edge-device-id}", enterpriseId, siteId, edgeDeviceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteMonitoringEdgeDevice")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSimCardList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/sim-card
func (i *ServerImpl) GetSiteSimCardList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteSimCardList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/sim-card", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSimCardList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteSimCard impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/sim-card/{sim-id}
func (i *ServerImpl) DeleteSiteSimCard(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, simId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteSiteSimCard(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/sim-card/{sim-id}", enterpriseId, siteId, simId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteSimCard")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSimCard impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/sim-card/{sim-id}
func (i *ServerImpl) GetSiteSimCard(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, simId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteSimCard(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/sim-card/{sim-id}", enterpriseId, siteId, simId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSimCard")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteSimCard impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/sim-card/{sim-id}
func (i *ServerImpl) PostSiteSimCard(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, simId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteSimCard(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/sim-card/{sim-id}", enterpriseId, siteId, simId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteSimCard")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSliceList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice
func (i *ServerImpl) GetSiteSliceList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteSliceList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSliceList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteSlice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}
func (i *ServerImpl) DeleteSiteSlice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteSiteSlice(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}", enterpriseId, siteId, sliceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteSlice")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSlice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}
func (i *ServerImpl) GetSiteSlice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteSlice(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}", enterpriseId, siteId, sliceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSlice")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteSlice impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}
func (i *ServerImpl) PostSiteSlice(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteSlice(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}", enterpriseId, siteId, sliceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteSlice")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSliceDeviceGroupList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group
func (i *ServerImpl) GetSiteSliceDeviceGroupList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteSliceDeviceGroupList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group", enterpriseId, siteId, sliceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSliceDeviceGroupList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteSliceDeviceGroup impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}
func (i *ServerImpl) DeleteSiteSliceDeviceGroup(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string, deviceGroup string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteSiteSliceDeviceGroup(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}", enterpriseId, siteId, sliceId, deviceGroup)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteSliceDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSliceDeviceGroup impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}
func (i *ServerImpl) GetSiteSliceDeviceGroup(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string, deviceGroup string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteSliceDeviceGroup(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}", enterpriseId, siteId, sliceId, deviceGroup)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSliceDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteSliceDeviceGroup impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}
func (i *ServerImpl) PostSiteSliceDeviceGroup(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string, deviceGroup string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteSliceDeviceGroup(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/device-group/{device-group}", enterpriseId, siteId, sliceId, deviceGroup)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteSliceDeviceGroup")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSliceFilterList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter
func (i *ServerImpl) GetSiteSliceFilterList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteSliceFilterList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter", enterpriseId, siteId, sliceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSliceFilterList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteSliceFilter impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}
func (i *ServerImpl) DeleteSiteSliceFilter(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string, application string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteSiteSliceFilter(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}", enterpriseId, siteId, sliceId, application)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteSliceFilter")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSliceFilter impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}
func (i *ServerImpl) GetSiteSliceFilter(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string, application string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteSliceFilter(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}", enterpriseId, siteId, sliceId, application)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSliceFilter")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteSliceFilter impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}
func (i *ServerImpl) PostSiteSliceFilter(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string, application string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteSliceFilter(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/filter/{application}", enterpriseId, siteId, sliceId, application)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteSliceFilter")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteSliceMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr
func (i *ServerImpl) DeleteSiteSliceMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteSiteSliceMbr(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr", enterpriseId, siteId, sliceId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteSliceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSliceMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr
func (i *ServerImpl) GetSiteSliceMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteSliceMbr(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr", enterpriseId, siteId, sliceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSliceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteSliceMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr
func (i *ServerImpl) PostSiteSliceMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteSliceMbr(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/mbr", enterpriseId, siteId, sliceId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteSliceMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSlicePriorityTrafficRuleList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule
func (i *ServerImpl) GetSiteSlicePriorityTrafficRuleList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteSlicePriorityTrafficRuleList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule", enterpriseId, siteId, sliceId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSlicePriorityTrafficRuleList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteSlicePriorityTrafficRule impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}
func (i *ServerImpl) DeleteSiteSlicePriorityTrafficRule(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string, priorityTrafficRuleId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteSiteSlicePriorityTrafficRule(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}", enterpriseId, siteId, sliceId, priorityTrafficRuleId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteSlicePriorityTrafficRule")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSlicePriorityTrafficRule impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}
func (i *ServerImpl) GetSiteSlicePriorityTrafficRule(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string, priorityTrafficRuleId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteSlicePriorityTrafficRule(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}", enterpriseId, siteId, sliceId, priorityTrafficRuleId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSlicePriorityTrafficRule")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteSlicePriorityTrafficRule impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}
func (i *ServerImpl) PostSiteSlicePriorityTrafficRule(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, sliceId string, priorityTrafficRuleId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteSlicePriorityTrafficRule(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/slice/{slice-id}/priority-traffic-rule/{priority-traffic-rule-id}", enterpriseId, siteId, sliceId, priorityTrafficRuleId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteSlicePriorityTrafficRule")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSmallCellList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/small-cell
func (i *ServerImpl) GetSiteSmallCellList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteSmallCellList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/small-cell", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSmallCellList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteSmallCell impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}
func (i *ServerImpl) DeleteSiteSmallCell(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, smallCellId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteSiteSmallCell(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}", enterpriseId, siteId, smallCellId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteSmallCell")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteSmallCell impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}
func (i *ServerImpl) GetSiteSmallCell(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, smallCellId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteSmallCell(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}", enterpriseId, siteId, smallCellId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteSmallCell")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteSmallCell impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}
func (i *ServerImpl) PostSiteSmallCell(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, smallCellId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteSmallCell(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/small-cell/{small-cell-id}", enterpriseId, siteId, smallCellId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteSmallCell")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteUpfList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/upf
func (i *ServerImpl) GetSiteUpfList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteUpfList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/upf", enterpriseId, siteId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteUpfList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteSiteUpf impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/upf/{upf-id}
func (i *ServerImpl) DeleteSiteUpf(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, upfId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteSiteUpf(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/upf/{upf-id}", enterpriseId, siteId, upfId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteSiteUpf")
	return ctx.JSON(http.StatusOK, response)
}

// GetSiteUpf impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/upf/{upf-id}
func (i *ServerImpl) GetSiteUpf(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, upfId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetSiteUpf(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/upf/{upf-id}", enterpriseId, siteId, upfId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetSiteUpf")
	return ctx.JSON(http.StatusOK, response)
}

// PostSiteUpf impl of gNMI access at /aether/v2.1.x/{enterprise-id}/site/{site-id}/upf/{upf-id}
func (i *ServerImpl) PostSiteUpf(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, siteId string, upfId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostSiteUpf(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/site/{site-id}/upf/{upf-id}", enterpriseId, siteId, upfId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostSiteUpf")
	return ctx.JSON(http.StatusOK, response)
}

// GetTemplateList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/template
func (i *ServerImpl) GetTemplateList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetTemplateList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/template", enterpriseId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetTemplateList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteTemplate impl of gNMI access at /aether/v2.1.x/{enterprise-id}/template/{template-id}
func (i *ServerImpl) DeleteTemplate(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteTemplate(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/template/{template-id}", enterpriseId, templateId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// GetTemplate impl of gNMI access at /aether/v2.1.x/{enterprise-id}/template/{template-id}
func (i *ServerImpl) GetTemplate(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetTemplate(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/template/{template-id}", enterpriseId, templateId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// PostTemplate impl of gNMI access at /aether/v2.1.x/{enterprise-id}/template/{template-id}
func (i *ServerImpl) PostTemplate(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostTemplate(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/template/{template-id}", enterpriseId, templateId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostTemplate")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteTemplateMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/template/{template-id}/mbr
func (i *ServerImpl) DeleteTemplateMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteTemplateMbr(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/template/{template-id}/mbr", enterpriseId, templateId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteTemplateMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetTemplateMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/template/{template-id}/mbr
func (i *ServerImpl) GetTemplateMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetTemplateMbr(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/template/{template-id}/mbr", enterpriseId, templateId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetTemplateMbr")
	return ctx.JSON(http.StatusOK, response)
}

// PostTemplateMbr impl of gNMI access at /aether/v2.1.x/{enterprise-id}/template/{template-id}/mbr
func (i *ServerImpl) PostTemplateMbr(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, templateId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostTemplateMbr(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/template/{template-id}/mbr", enterpriseId, templateId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostTemplateMbr")
	return ctx.JSON(http.StatusOK, response)
}

// GetTrafficClassList impl of gNMI access at /aether/v2.1.x/{enterprise-id}/traffic-class
func (i *ServerImpl) GetTrafficClassList(ctx echo.Context, enterpriseId externalRef1.EnterpriseId) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetTrafficClassList(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/traffic-class", enterpriseId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetTrafficClassList")
	return ctx.JSON(http.StatusOK, response)
}

// DeleteTrafficClass impl of gNMI access at /aether/v2.1.x/{enterprise-id}/traffic-class/{traffic-class-id}
func (i *ServerImpl) DeleteTrafficClass(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, trafficClassId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response DELETE 200 OK
	extension100, err := i.gnmiDeleteTrafficClass(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/traffic-class/{traffic-class-id}", enterpriseId, trafficClassId)
	if err == nil {
		log.Infof("Delete succeded %s", *extension100)
		return ctx.JSON(http.StatusOK, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("DeleteTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// GetTrafficClass impl of gNMI access at /aether/v2.1.x/{enterprise-id}/traffic-class/{traffic-class-id}
func (i *ServerImpl) GetTrafficClass(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, trafficClassId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response GET OK 200
	response, err = i.gnmiGetTrafficClass(gnmiCtx, "/aether/v2.1.x/{enterprise-id}/traffic-class/{traffic-class-id}", enterpriseId, trafficClassId)

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("GetTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// PostTrafficClass impl of gNMI access at /aether/v2.1.x/{enterprise-id}/traffic-class/{traffic-class-id}
func (i *ServerImpl) PostTrafficClass(ctx echo.Context, enterpriseId externalRef1.EnterpriseId, trafficClassId string) error {

	var response interface{}
	var err error

	gnmiCtx, cancel := utils.NewGnmiContext(ctx, i.GnmiTimeout)
	defer cancel()

	// Response created

	body, err := utils.ReadRequestBody(ctx.Request().Body)
	if err != nil {
		return err
	}
	extension100, err := i.gnmiPostTrafficClass(gnmiCtx, body, "/aether/v2.1.x/{enterprise-id}/traffic-class/{traffic-class-id}", enterpriseId, trafficClassId)
	if err == nil {
		log.Infof("Post succeded %s", *extension100)
		return ctx.JSON(http.StatusCreated, extension100)
	}

	if err != nil {
		return utils.ConvertGrpcError(err)
	}
	// It's not enough to check if response==nil - see https://medium.com/@glucn/golang-an-interface-holding-a-nil-value-is-not-nil-bb151f472cc7
	if reflect.ValueOf(response).Kind() == reflect.Ptr && reflect.ValueOf(response).IsNil() {
		return ctx.NoContent(http.StatusNotFound)
	}

	log.Infof("PostTrafficClass")
	return ctx.JSON(http.StatusOK, response)
}

// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

// register template override
