// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
