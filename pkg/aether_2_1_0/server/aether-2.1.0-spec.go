// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"zBsKjo21AG8oDO52/w0AAP//yg976IvcAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
