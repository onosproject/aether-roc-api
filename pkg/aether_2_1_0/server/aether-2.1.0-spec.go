// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"w/8GAAD//xkPK6h2WAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
