// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
