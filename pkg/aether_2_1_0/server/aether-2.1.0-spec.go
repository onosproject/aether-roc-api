// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
