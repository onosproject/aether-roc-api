// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3gFDKBtrPxShbD+P/xsAAP//iA1Uqo53AQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
