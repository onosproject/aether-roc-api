// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"DQAA//9McquGvFgBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
