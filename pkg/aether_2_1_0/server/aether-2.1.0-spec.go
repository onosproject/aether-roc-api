// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
