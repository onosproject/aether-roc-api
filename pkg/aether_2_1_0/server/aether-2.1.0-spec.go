// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
