// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
