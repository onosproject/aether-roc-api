// Code generated by oapi-codegen. DO NOT EDIT.
// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//xRZW/Af8QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
